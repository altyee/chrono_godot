//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChTriangleMeshSoup : ChTriangleMesh {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChTriangleMeshSoup(global::System.IntPtr cPtr, bool cMemoryOwn) : base(corePINVOKE.ChTriangleMeshSoup_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChTriangleMeshSoup obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          corePINVOKE.delete_ChTriangleMeshSoup(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChTriangleMeshSoup() : this(corePINVOKE.new_ChTriangleMeshSoup__SWIG_0(), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChTriangleMeshSoup(ChTriangleMeshSoup source) : this(corePINVOKE.new_ChTriangleMeshSoup__SWIG_1(ChTriangleMeshSoup.getCPtr(source)), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChGeometry Clone() {
    global::System.IntPtr cPtr = corePINVOKE.ChTriangleMeshSoup_Clone(swigCPtr);
    ChTriangleMeshSoup ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMeshSoup(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChTriangleMeshSoup CreateFromWavefrontFile(string filename) {
    global::System.IntPtr cPtr = corePINVOKE.ChTriangleMeshSoup_CreateFromWavefrontFile(filename);
    ChTriangleMeshSoup ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMeshSoup(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool LoadWavefrontMesh(string filename) {
    bool ret = corePINVOKE.ChTriangleMeshSoup_LoadWavefrontMesh(swigCPtr, filename);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void addTriangle(ChVectorD vertex0, ChVectorD vertex1, ChVectorD vertex2) {
    corePINVOKE.ChTriangleMeshSoup_addTriangle__SWIG_0(swigCPtr, ChVectorD.getCPtr(vertex0), ChVectorD.getCPtr(vertex1), ChVectorD.getCPtr(vertex2));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void addTriangle(ChTriangle atriangle) {
    corePINVOKE.ChTriangleMeshSoup_addTriangle__SWIG_1(swigCPtr, ChTriangle.getCPtr(atriangle));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override int getNumTriangles() {
    int ret = corePINVOKE.ChTriangleMeshSoup_getNumTriangles(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChTriangle getTriangle(int index) {
    ChTriangle ret = new ChTriangle(corePINVOKE.ChTriangleMeshSoup_getTriangle(swigCPtr, index), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_chrono__geometry__ChTriangle_t getTriangles() {
    SWIGTYPE_p_std__vectorT_chrono__geometry__ChTriangle_t ret = new SWIGTYPE_p_std__vectorT_chrono__geometry__ChTriangle_t(corePINVOKE.ChTriangleMeshSoup_getTriangles(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Clear() {
    corePINVOKE.ChTriangleMeshSoup_Clear(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Transform(ChVectorD displ, ChMatrix33D rotscale) {
    corePINVOKE.ChTriangleMeshSoup_Transform(swigCPtr, ChVectorD.getCPtr(displ), ChMatrix33D.getCPtr(rotscale));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChGeometry.Type GetClassType() {
    ChGeometry.Type ret = (ChGeometry.Type)corePINVOKE.ChTriangleMeshSoup_GetClassType(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut marchive) {
    corePINVOKE.ChTriangleMeshSoup_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn marchive) {
    corePINVOKE.ChTriangleMeshSoup_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

}
