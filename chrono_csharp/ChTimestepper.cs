//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChTimestepper : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChTimestepper(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChTimestepper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChTimestepper() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          corePINVOKE.delete_ChTimestepper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual ChTimestepper.Type GetType() {
    ChTimestepper.Type ret = (ChTimestepper.Type)corePINVOKE.ChTimestepper_GetType(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Advance(double dt) {
    corePINVOKE.ChTimestepper_Advance(swigCPtr, dt);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ChVectorDynamicD get_L() {
    ChVectorDynamicD ret = new ChVectorDynamicD(corePINVOKE.ChTimestepper_get_L(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetIntegrable(ChIntegrable intgr) {
    corePINVOKE.ChTimestepper_SetIntegrable(swigCPtr, ChIntegrable.getCPtr(intgr));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChIntegrable GetIntegrable() {
    global::System.IntPtr cPtr = corePINVOKE.ChTimestepper_GetIntegrable(swigCPtr);
    ChIntegrable ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChIntegrable(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTime() {
    double ret = corePINVOKE.ChTimestepper_GetTime(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetTime(double mt) {
    corePINVOKE.ChTimestepper_SetTime(swigCPtr, mt);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVerbose(bool verb) {
    corePINVOKE.ChTimestepper_SetVerbose(swigCPtr, verb);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetQcDoClamp(bool dc) {
    corePINVOKE.ChTimestepper_SetQcDoClamp(swigCPtr, dc);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetQcClamping(double cl) {
    corePINVOKE.ChTimestepper_SetQcClamping(swigCPtr, cl);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive) {
    corePINVOKE.ChTimestepper_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive) {
    corePINVOKE.ChTimestepper_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public enum Type {
    EULER_IMPLICIT_LINEARIZED = 0,
    EULER_IMPLICIT_PROJECTED = 1,
    EULER_IMPLICIT = 2,
    TRAPEZOIDAL = 3,
    TRAPEZOIDAL_LINEARIZED = 4,
    HHT = 5,
    HEUN = 6,
    RUNGEKUTTA45 = 7,
    EULER_EXPLICIT = 8,
    LEAPFROG = 9,
    NEWMARK = 10,
    CUSTOM = 20
  }

}
