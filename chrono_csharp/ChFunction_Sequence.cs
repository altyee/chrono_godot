//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChFunction_Sequence : ChFunction {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChFunction_Sequence(global::System.IntPtr cPtr, bool cMemoryOwn) : base(corePINVOKE.ChFunction_Sequence_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChFunction_Sequence obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          corePINVOKE.delete_ChFunction_Sequence(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChFunction_Sequence() : this(corePINVOKE.new_ChFunction_Sequence__SWIG_0(), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction_Sequence(ChFunction_Sequence other) : this(corePINVOKE.new_ChFunction_Sequence__SWIG_1(ChFunction_Sequence.getCPtr(other)), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChFunction.FunctionType Get_Type() {
    ChFunction.FunctionType ret = (ChFunction.FunctionType)corePINVOKE.ChFunction_Sequence_Get_Type(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double Get_y(double x) {
    double ret = corePINVOKE.ChFunction_Sequence_Get_y(swigCPtr, x);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double Get_y_dx(double x) {
    double ret = corePINVOKE.ChFunction_Sequence_Get_y_dx(swigCPtr, x);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double Get_y_dxdx(double x) {
    double ret = corePINVOKE.ChFunction_Sequence_Get_y_dxdx(swigCPtr, x);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Set_start(double m_start) {
    corePINVOKE.ChFunction_Sequence_Set_start(swigCPtr, m_start);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double Get_start() {
    double ret = corePINVOKE.ChFunction_Sequence_Get_start(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__listT_chrono__ChFseqNode_t Get_list() {
    SWIGTYPE_p_std__listT_chrono__ChFseqNode_t ret = new SWIGTYPE_p_std__listT_chrono__ChFseqNode_t(corePINVOKE.ChFunction_Sequence_Get_list(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Setup() {
    corePINVOKE.ChFunction_Sequence_Setup(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool InsertFunct(ChFunction myfx, double duration, double weight, bool c0, bool c1, bool c2, int position) {
    bool ret = corePINVOKE.ChFunction_Sequence_InsertFunct__SWIG_0(swigCPtr, ChFunction.getCPtr(myfx), duration, weight, c0, c1, c2, position);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool InsertFunct(ChFunction myfx, double duration, double weight, bool c0, bool c1, bool c2) {
    bool ret = corePINVOKE.ChFunction_Sequence_InsertFunct__SWIG_1(swigCPtr, ChFunction.getCPtr(myfx), duration, weight, c0, c1, c2);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool InsertFunct(ChFunction myfx, double duration, double weight, bool c0, bool c1) {
    bool ret = corePINVOKE.ChFunction_Sequence_InsertFunct__SWIG_2(swigCPtr, ChFunction.getCPtr(myfx), duration, weight, c0, c1);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool InsertFunct(ChFunction myfx, double duration, double weight, bool c0) {
    bool ret = corePINVOKE.ChFunction_Sequence_InsertFunct__SWIG_3(swigCPtr, ChFunction.getCPtr(myfx), duration, weight, c0);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool InsertFunct(ChFunction myfx, double duration, double weight) {
    bool ret = corePINVOKE.ChFunction_Sequence_InsertFunct__SWIG_4(swigCPtr, ChFunction.getCPtr(myfx), duration, weight);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool InsertFunct(ChFunction myfx, double duration) {
    bool ret = corePINVOKE.ChFunction_Sequence_InsertFunct__SWIG_5(swigCPtr, ChFunction.getCPtr(myfx), duration);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool KillFunct(int position) {
    bool ret = corePINVOKE.ChFunction_Sequence_KillFunct(swigCPtr, position);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction GetNthFunction(int position) {
    global::System.IntPtr cPtr = corePINVOKE.ChFunction_Sequence_GetNthFunction(swigCPtr, position);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFseqNode GetNthNode(int position) {
    global::System.IntPtr cPtr = corePINVOKE.ChFunction_Sequence_GetNthNode(swigCPtr, position);
    ChFseqNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFseqNode(cPtr, false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetNthDuration(int position) {
    double ret = corePINVOKE.ChFunction_Sequence_GetNthDuration(swigCPtr, position);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double Get_weight(double x) {
    double ret = corePINVOKE.ChFunction_Sequence_Get_weight(swigCPtr, x);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Estimate_x_range(SWIGTYPE_p_double xmin, SWIGTYPE_p_double xmax) {
    corePINVOKE.ChFunction_Sequence_Estimate_x_range(swigCPtr, SWIGTYPE_p_double.getCPtr(xmin), SWIGTYPE_p_double.getCPtr(xmax));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override int HandleNumber() {
    int ret = corePINVOKE.ChFunction_Sequence_HandleNumber(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool HandleAccess(int handle_id, double mx, double my, bool set_mode) {
    bool ret = corePINVOKE.ChFunction_Sequence_HandleAccess(swigCPtr, handle_id, mx, my, set_mode);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut marchive) {
    corePINVOKE.ChFunction_Sequence_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn marchive) {
    corePINVOKE.ChFunction_Sequence_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

}
