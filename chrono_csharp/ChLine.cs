//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLine : ChGeometry {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLine(global::System.IntPtr cPtr, bool cMemoryOwn) : base(corePINVOKE.ChLine_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLine obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          corePINVOKE.delete_ChLine(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public override ChGeometry.Type GetClassType() {
    ChGeometry.Type ret = (ChGeometry.Type)corePINVOKE.ChLine_GetClassType(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Evaluate(ChVectorD pos, double parU) {
    corePINVOKE.ChLine_Evaluate(swigCPtr, ChVectorD.getCPtr(pos), parU);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Derive(ChVectorD dir, double parU) {
    corePINVOKE.ChLine_Derive(swigCPtr, ChVectorD.getCPtr(dir), parU);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool Get_closed() {
    bool ret = corePINVOKE.ChLine_Get_closed(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Set_closed(bool mc) {
    corePINVOKE.ChLine_Set_closed(swigCPtr, mc);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int Get_complexity() {
    int ret = corePINVOKE.ChLine_Get_complexity(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Set_complexity(int mc) {
    corePINVOKE.ChLine_Set_complexity(swigCPtr, mc);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override int GetManifoldDimension() {
    int ret = corePINVOKE.ChLine_GetManifoldDimension(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool FindNearestLinePoint(ChVectorD point, SWIGTYPE_p_double resU, double approxU, double tol) {
    bool ret = corePINVOKE.ChLine_FindNearestLinePoint(swigCPtr, ChVectorD.getCPtr(point), SWIGTYPE_p_double.getCPtr(resU), approxU, tol);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double Length(int sampling) {
    double ret = corePINVOKE.ChLine_Length(swigCPtr, sampling);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVectorD GetEndA() {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChLine_GetEndA(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVectorD GetEndB() {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChLine_GetEndB(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double CurveCurveDist(ChLine compline, int samples) {
    double ret = corePINVOKE.ChLine_CurveCurveDist(swigCPtr, ChLine.getCPtr(compline), samples);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double CurveSegmentDist(ChLine complinesegm, int samples) {
    double ret = corePINVOKE.ChLine_CurveSegmentDist(swigCPtr, ChLine.getCPtr(complinesegm), samples);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double CurveCurveDistMax(ChLine compline, int samples) {
    double ret = corePINVOKE.ChLine_CurveCurveDistMax(swigCPtr, ChLine.getCPtr(compline), samples);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double CurveSegmentDistMax(ChLine complinesegm, int samples) {
    double ret = corePINVOKE.ChLine_CurveSegmentDistMax(swigCPtr, ChLine.getCPtr(complinesegm), samples);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool DrawPostscript(SWIGTYPE_p_ChFile_ps mfle, int markpoints, int bezier_interpolate) {
    bool ret = corePINVOKE.ChLine_DrawPostscript(swigCPtr, SWIGTYPE_p_ChFile_ps.getCPtr(mfle), markpoints, bezier_interpolate);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut marchive) {
    corePINVOKE.ChLine_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn marchive) {
    corePINVOKE.ChLine_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

}
