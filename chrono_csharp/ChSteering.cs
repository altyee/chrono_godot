//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChSteering : ChPart {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChSteering(global::System.IntPtr cPtr, bool cMemoryOwn) : base(vehiclePINVOKE.ChSteering_SWIGSmartPtrUpcast(cPtr), true) {
	swigCMemOwnDerived = cMemoryOwn;
	swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChSteering obj) {
	return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
	lock(this) {
	  if (swigCPtr.Handle != global::System.IntPtr.Zero) {
		if (swigCMemOwnDerived) {
		  swigCMemOwnDerived = false;
		  vehiclePINVOKE.delete_ChSteering(swigCPtr);
		}
		swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
	  }
	  base.Dispose(disposing);
	}
  }

  public ChFrameD GetRelTransform() {
	ChFrameD ret = new ChFrameD(vehiclePINVOKE.ChSteering_GetRelTransform(swigCPtr), true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChBody GetSteeringLink() {
	global::System.IntPtr cPtr = vehiclePINVOKE.ChSteering_GetSteeringLink(swigCPtr);
	ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public virtual void Initialize(ChChassis chassis, ChVectorD location, ChQuaternionD rotation) {
	vehiclePINVOKE.ChSteering_Initialize(swigCPtr, ChChassis.getCPtr(chassis), ChVectorD.getCPtr(location), ChQuaternionD.getCPtr(rotation));
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Synchronize(double time, DriverInputs driver_inputs) {
	vehiclePINVOKE.ChSteering_Synchronize(swigCPtr, time, DriverInputs.getCPtr(driver_inputs));
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void LogConstraintViolations() {
	vehiclePINVOKE.ChSteering_LogConstraintViolations(swigCPtr);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
