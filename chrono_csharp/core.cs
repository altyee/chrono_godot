//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class core {
  public static void SetFirstIntID(int val) {
    corePINVOKE.SetFirstIntID(val);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static int GetUniqueIntID() {
    int ret = corePINVOKE.GetUniqueIntID();
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetChronoDataPath(string path) {
    corePINVOKE.SetChronoDataPath(path);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static string GetChronoDataPath() {
    string ret = corePINVOKE.GetChronoDataPath();
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetChronoDataFile(string filename) {
    string ret = corePINVOKE.GetChronoDataFile(filename);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetChronoOutputPath(string path) {
    corePINVOKE.SetChronoOutputPath(path);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static string GetChronoOutputPath() {
    string ret = corePINVOKE.GetChronoOutputPath();
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool should_raise_an_assert {
    get {
      bool ret = corePINVOKE.should_raise_an_assert_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool no_more_assert {
    set {
      corePINVOKE.no_more_assert_set(value);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = corePINVOKE.no_more_assert_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void StreamOutDenseMatlabFormat(SWIGTYPE_p_Eigen__RefT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t_const_t A, SWIGTYPE_p_ChStreamOutAscii stream) {
    corePINVOKE.StreamOutDenseMatlabFormat(SWIGTYPE_p_Eigen__RefT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t_const_t.getCPtr(A), SWIGTYPE_p_ChStreamOutAscii.getCPtr(stream));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PasteMatrix(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t matrTo, SWIGTYPE_p_Eigen__RefT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t_const_t matrFrom, int insrow, int inscol, bool overwrite) {
    corePINVOKE.PasteMatrix__SWIG_0(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(matrTo), SWIGTYPE_p_Eigen__RefT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t_const_t.getCPtr(matrFrom), insrow, inscol, overwrite);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PasteMatrix(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t matrTo, SWIGTYPE_p_Eigen__RefT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t_const_t matrFrom, int insrow, int inscol) {
    corePINVOKE.PasteMatrix__SWIG_1(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(matrTo), SWIGTYPE_p_Eigen__RefT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t_const_t.getCPtr(matrFrom), insrow, inscol);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void StreamOutSparseMatlabFormat(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t matr, SWIGTYPE_p_ChStreamOutAscii mstream) {
    corePINVOKE.StreamOutSparseMatlabFormat(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(matr), SWIGTYPE_p_ChStreamOutAscii.getCPtr(mstream));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void StreamOut(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t matr, SWIGTYPE_p_ChStreamOutAscii stream) {
    corePINVOKE.StreamOut(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(matr), SWIGTYPE_p_ChStreamOutAscii.getCPtr(stream));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChVectorD VNULL {
    get {
      global::System.IntPtr cPtr = corePINVOKE.VNULL_get();
      ChVectorD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVectorD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChVectorD VECT_X {
    get {
      global::System.IntPtr cPtr = corePINVOKE.VECT_X_get();
      ChVectorD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVectorD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChVectorD VECT_Y {
    get {
      global::System.IntPtr cPtr = corePINVOKE.VECT_Y_get();
      ChVectorD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVectorD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChVectorD VECT_Z {
    get {
      global::System.IntPtr cPtr = corePINVOKE.VECT_Z_get();
      ChVectorD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVectorD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD QNULL {
    get {
      global::System.IntPtr cPtr = corePINVOKE.QNULL_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD QUNIT {
    get {
      global::System.IntPtr cPtr = corePINVOKE.QUNIT_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD Q_ROTATE_Y_TO_X {
    get {
      global::System.IntPtr cPtr = corePINVOKE.Q_ROTATE_Y_TO_X_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD Q_ROTATE_Y_TO_Z {
    get {
      global::System.IntPtr cPtr = corePINVOKE.Q_ROTATE_Y_TO_Z_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD Q_ROTATE_X_TO_Y {
    get {
      global::System.IntPtr cPtr = corePINVOKE.Q_ROTATE_X_TO_Y_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD Q_ROTATE_X_TO_Z {
    get {
      global::System.IntPtr cPtr = corePINVOKE.Q_ROTATE_X_TO_Z_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD Q_ROTATE_Z_TO_Y {
    get {
      global::System.IntPtr cPtr = corePINVOKE.Q_ROTATE_Z_TO_Y_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD Q_ROTATE_Z_TO_X {
    get {
      global::System.IntPtr cPtr = corePINVOKE.Q_ROTATE_Z_TO_X_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD Q_FLIP_AROUND_X {
    get {
      global::System.IntPtr cPtr = corePINVOKE.Q_FLIP_AROUND_X_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD Q_FLIP_AROUND_Y {
    get {
      global::System.IntPtr cPtr = corePINVOKE.Q_FLIP_AROUND_Y_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD Q_FLIP_AROUND_Z {
    get {
      global::System.IntPtr cPtr = corePINVOKE.Q_FLIP_AROUND_Z_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double Qlength(ChQuaternionD q) {
    double ret = corePINVOKE.Qlength(ChQuaternionD.getCPtr(q));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qadd(ChQuaternionD qa, ChQuaternionD qb) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Qadd(ChQuaternionD.getCPtr(qa), ChQuaternionD.getCPtr(qb)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qsub(ChQuaternionD qa, ChQuaternionD qb) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Qsub(ChQuaternionD.getCPtr(qa), ChQuaternionD.getCPtr(qb)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qscale(ChQuaternionD q, double fact) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Qscale(ChQuaternionD.getCPtr(q), fact), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qnorm(ChQuaternionD q) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Qnorm(ChQuaternionD.getCPtr(q)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Q_from_AngAxis(double angle, ChVectorD axis) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Q_from_AngAxis(angle, ChVectorD.getCPtr(axis)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Q_from_Vect_to_Vect(ChVectorD fr_vect, ChVectorD to_vect) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Q_from_Vect_to_Vect(ChVectorD.getCPtr(fr_vect), ChVectorD.getCPtr(to_vect)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Q_from_NasaAngles(ChVectorD RxRyRz) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Q_from_NasaAngles(ChVectorD.getCPtr(RxRyRz)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVectorD Q_to_NasaAngles(ChQuaternionD mq) {
    ChVectorD ret = new ChVectorD(corePINVOKE.Q_to_NasaAngles(ChQuaternionD.getCPtr(mq)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Q_from_Euler123(ChVectorD RxRyRz) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Q_from_Euler123(ChVectorD.getCPtr(RxRyRz)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVectorD Q_to_Euler123(ChQuaternionD mq) {
    ChVectorD ret = new ChVectorD(corePINVOKE.Q_to_Euler123(ChQuaternionD.getCPtr(mq)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Q_from_AngZ(double angleZ) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Q_from_AngZ(angleZ), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Q_from_AngX(double angleX) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Q_from_AngX(angleX), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Q_from_AngY(double angleY) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Q_from_AngY(angleY), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Q_to_AngAxis(ChQuaternionD quat, SWIGTYPE_p_double angle, ChVectorD axis) {
    corePINVOKE.Q_to_AngAxis(ChQuaternionD.getCPtr(quat), SWIGTYPE_p_double.getCPtr(angle), ChVectorD.getCPtr(axis));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChQuaternionD Qdt_from_Wrel(ChVectorD w, ChQuaternionD q) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Qdt_from_Wrel(ChVectorD.getCPtr(w), ChQuaternionD.getCPtr(q)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qdt_from_Wabs(ChVectorD w, ChQuaternionD q) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Qdt_from_Wabs(ChVectorD.getCPtr(w), ChQuaternionD.getCPtr(q)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qdt_from_AngAxis(ChQuaternionD quat, double angle_dt, ChVectorD axis) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Qdt_from_AngAxis(ChQuaternionD.getCPtr(quat), angle_dt, ChVectorD.getCPtr(axis)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qdtdt_from_Aabs(ChVectorD a, ChQuaternionD q, ChQuaternionD q_dt) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Qdtdt_from_Aabs(ChVectorD.getCPtr(a), ChQuaternionD.getCPtr(q), ChQuaternionD.getCPtr(q_dt)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qdtdt_from_Arel(ChVectorD a, ChQuaternionD q, ChQuaternionD q_dt) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Qdtdt_from_Arel(ChVectorD.getCPtr(a), ChQuaternionD.getCPtr(q), ChQuaternionD.getCPtr(q_dt)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qdtdt_from_AngAxis(double angle_dtdt, ChVectorD axis, ChQuaternionD q, ChQuaternionD q_dt) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Qdtdt_from_AngAxis(angle_dtdt, ChVectorD.getCPtr(axis), ChQuaternionD.getCPtr(q), ChQuaternionD.getCPtr(q_dt)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qconjugate(ChQuaternionD q) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Qconjugate(ChQuaternionD.getCPtr(q)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qcross(ChQuaternionD qa, ChQuaternionD qb) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Qcross(ChQuaternionD.getCPtr(qa), ChQuaternionD.getCPtr(qb)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Qequal(ChQuaternionD qa, ChQuaternionD qb) {
    bool ret = corePINVOKE.Qequal(ChQuaternionD.getCPtr(qa), ChQuaternionD.getCPtr(qb));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Qnotnull(ChQuaternionD qa) {
    bool ret = corePINVOKE.Qnotnull(ChQuaternionD.getCPtr(qa));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD ImmQ_complete(ChVectorD qimm) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.ImmQ_complete(ChVectorD.getCPtr(qimm)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD ImmQ_dt_complete(ChQuaternionD mq, ChVectorD qimm_dt) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.ImmQ_dt_complete(ChQuaternionD.getCPtr(mq), ChVectorD.getCPtr(qimm_dt)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD ImmQ_dtdt_complete(ChQuaternionD mq, ChQuaternionD mqdt, ChVectorD qimm_dtdt) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.ImmQ_dtdt_complete(ChQuaternionD.getCPtr(mq), ChQuaternionD.getCPtr(mqdt), ChVectorD.getCPtr(qimm_dtdt)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVectorD VaxisXfromQuat(ChQuaternionD quat) {
    ChVectorD ret = new ChVectorD(corePINVOKE.VaxisXfromQuat(ChQuaternionD.getCPtr(quat)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVectorD Quat_to_Angle(AngleSet angset, ChQuaternionD mquat) {
    ChVectorD ret = new ChVectorD(corePINVOKE.Quat_to_Angle((int)angset, ChQuaternionD.getCPtr(mquat)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVectorD Angle_to_Angle(AngleSet setfrom, AngleSet setto, ChVectorD mangles) {
    ChVectorD ret = new ChVectorD(corePINVOKE.Angle_to_Angle((int)setfrom, (int)setto, ChVectorD.getCPtr(mangles)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Angle_to_Quat(AngleSet angset, ChVectorD mangles) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.Angle_to_Quat((int)angset, ChVectorD.getCPtr(mangles)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD AngleDT_to_QuatDT(AngleSet angset, ChVectorD mangles, ChQuaternionD q) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.AngleDT_to_QuatDT((int)angset, ChVectorD.getCPtr(mangles), ChQuaternionD.getCPtr(q)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD AngleDTDT_to_QuatDTDT(AngleSet angset, ChVectorD mangles, ChQuaternionD q) {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.AngleDTDT_to_QuatDTDT((int)angset, ChVectorD.getCPtr(mangles), ChQuaternionD.getCPtr(q)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCoordsysD Force2Dcsys(ChCoordsysD cs) {
    ChCoordsysD ret = new ChCoordsysD(corePINVOKE.Force2Dcsys(ChCoordsysD.getCPtr(cs)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCoordsysD CSYSNULL {
    get {
      global::System.IntPtr cPtr = corePINVOKE.CSYSNULL_get();
      ChCoordsysD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCoordsysD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChCoordsysD CSYSNORM {
    get {
      global::System.IntPtr cPtr = corePINVOKE.CSYSNORM_get();
      ChCoordsysD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCoordsysD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChLog GetLog() {
    ChLog ret = new ChLog(corePINVOKE.GetLog(), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetLog(ChLog new_logobject) {
    corePINVOKE.SetLog(ChLog.getCPtr(new_logobject));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetLogDefault() {
    corePINVOKE.SetLogDefault();
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static double CH_C_PI {
    get {
      double ret = corePINVOKE.CH_C_PI_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_PI_2 {
    get {
      double ret = corePINVOKE.CH_C_PI_2_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_PI_4 {
    get {
      double ret = corePINVOKE.CH_C_PI_4_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_1_PI {
    get {
      double ret = corePINVOKE.CH_C_1_PI_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_2PI {
    get {
      double ret = corePINVOKE.CH_C_2PI_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_RAD_TO_DEG {
    get {
      double ret = corePINVOKE.CH_C_RAD_TO_DEG_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_DEG_TO_RAD {
    get {
      double ret = corePINVOKE.CH_C_DEG_TO_RAD_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_RPM_TO_RPS {
    get {
      double ret = corePINVOKE.CH_C_RPM_TO_RPS_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_SQRT_2 {
    get {
      double ret = corePINVOKE.CH_C_SQRT_2_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_SQRT_1_2 {
    get {
      double ret = corePINVOKE.CH_C_SQRT_1_2_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_E {
    get {
      double ret = corePINVOKE.CH_C_E_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_LOG2E {
    get {
      double ret = corePINVOKE.CH_C_LOG2E_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_LOG10E {
    get {
      double ret = corePINVOKE.CH_C_LOG10E_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_LN2 {
    get {
      double ret = corePINVOKE.CH_C_LN2_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_LN10 {
    get {
      double ret = corePINVOKE.CH_C_LN10_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double BDF_STEP_HIGH {
    get {
      double ret = corePINVOKE.BDF_STEP_HIGH_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double BDF_STEP_LOW {
    get {
      double ret = corePINVOKE.BDF_STEP_LOW_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double ChAtan2(double mcos, double msin) {
    double ret = corePINVOKE.ChAtan2(mcos, msin);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ChRandom() {
    double ret = corePINVOKE.ChRandom();
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ChSetRandomSeed(int newseed) {
    corePINVOKE.ChSetRandomSeed(newseed);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static double ChNoise(double x, double amp, double freq, int octaves, double amp_ratio) {
    double ret = corePINVOKE.ChNoise(x, amp, freq, octaves, amp_ratio);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ChMax(int a, int b) {
    int ret = corePINVOKE.ChMax__SWIG_0(a, b);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ChMax(double a, double b) {
    double ret = corePINVOKE.ChMax__SWIG_1(a, b);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ChMin(int a, int b) {
    int ret = corePINVOKE.ChMin__SWIG_0(a, b);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ChMin(double a, double b) {
    double ret = corePINVOKE.ChMin__SWIG_1(a, b);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ChSineStep(double x, double x1, double y1, double x2, double y2) {
    double ret = corePINVOKE.ChSineStep(x, x1, y1, x2, y2);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ChPeriodicPar(SWIGTYPE_p_double u, int closed) {
    corePINVOKE.ChPeriodicPar(SWIGTYPE_p_double.getCPtr(u), closed);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChMaterialSurfaceNSC CastToChMaterialSurfaceNSC(ChMaterialSurface in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChMaterialSurfaceNSC(ChMaterialSurface.getCPtr(in_obj));
    ChMaterialSurfaceNSC ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMaterialSurfaceNSC(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChMaterialSurfaceSMC CastToChMaterialSurfaceSMC(ChMaterialSurface in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChMaterialSurfaceSMC(ChMaterialSurface.getCPtr(in_obj));
    ChMaterialSurfaceSMC ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMaterialSurfaceSMC(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChMaterialCompositeSMC CastToChMaterialCompositeSMC(ChMaterialComposite in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChMaterialCompositeSMC(ChMaterialComposite.getCPtr(in_obj));
    ChMaterialCompositeSMC ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMaterialCompositeSMC(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChMaterialCompositeNSC CastToChMaterialCompositeNSC(ChMaterialComposite in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChMaterialCompositeNSC(ChMaterialComposite.getCPtr(in_obj));
    ChMaterialCompositeNSC ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMaterialCompositeNSC(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LineLineIntersect(ChVectorD p1, ChVectorD p2, ChVectorD p3, ChVectorD p4, ChVectorD pa, ChVectorD pb, SWIGTYPE_p_double mua, SWIGTYPE_p_double mub) {
    bool ret = corePINVOKE.LineLineIntersect(ChVectorD.getCPtr(p1), ChVectorD.getCPtr(p2), ChVectorD.getCPtr(p3), ChVectorD.getCPtr(p4), ChVectorD.getCPtr(pa), ChVectorD.getCPtr(pb), SWIGTYPE_p_double.getCPtr(mua), SWIGTYPE_p_double.getCPtr(mub));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double PointLineDistance(ChVectorD p, ChVectorD dA, ChVectorD dB, SWIGTYPE_p_double mu, SWIGTYPE_p_bool is_insegment) {
    double ret = corePINVOKE.PointLineDistance(ChVectorD.getCPtr(p), ChVectorD.getCPtr(dA), ChVectorD.getCPtr(dB), SWIGTYPE_p_double.getCPtr(mu), SWIGTYPE_p_bool.getCPtr(is_insegment));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double PointTriangleDistance(ChVectorD B, ChVectorD A1, ChVectorD A2, ChVectorD A3, SWIGTYPE_p_double mu, SWIGTYPE_p_double mv, SWIGTYPE_p_bool is_into, ChVectorD Bprojected) {
    double ret = corePINVOKE.PointTriangleDistance(ChVectorD.getCPtr(B), ChVectorD.getCPtr(A1), ChVectorD.getCPtr(A2), ChVectorD.getCPtr(A3), SWIGTYPE_p_double.getCPtr(mu), SWIGTYPE_p_double.getCPtr(mv), SWIGTYPE_p_bool.getCPtr(is_into), ChVectorD.getCPtr(Bprojected));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool DegenerateTriangle(ChVectorD Dx, ChVectorD Dy) {
    bool ret = corePINVOKE.DegenerateTriangle__SWIG_0(ChVectorD.getCPtr(Dx), ChVectorD.getCPtr(Dy));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool DegenerateTriangle(ChVectorD v1, ChVectorD v2, ChVectorD v3) {
    bool ret = corePINVOKE.DegenerateTriangle__SWIG_1(ChVectorD.getCPtr(v1), ChVectorD.getCPtr(v2), ChVectorD.getCPtr(v3));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int BODY_DOF {
    get {
      int ret = corePINVOKE.BODY_DOF_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int BODY_QDOF {
    get {
      int ret = corePINVOKE.BODY_QDOF_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int BODY_ROT {
    get {
      int ret = corePINVOKE.BODY_ROT_get();
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChBody CastContactableToChBody(ChContactable base_) {
    global::System.IntPtr cPtr = corePINVOKE.CastContactableToChBody(ChContactable.getCPtr(base_));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void WriteBodies(ChSystem system, string filename, bool active_only, bool dump_vel, string delim) {
    corePINVOKE.WriteBodies__SWIG_0(ChSystem.getCPtr(system), filename, active_only, dump_vel, delim);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteBodies(ChSystem system, string filename, bool active_only, bool dump_vel) {
    corePINVOKE.WriteBodies__SWIG_1(ChSystem.getCPtr(system), filename, active_only, dump_vel);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteBodies(ChSystem system, string filename, bool active_only) {
    corePINVOKE.WriteBodies__SWIG_2(ChSystem.getCPtr(system), filename, active_only);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteBodies(ChSystem system, string filename) {
    corePINVOKE.WriteBodies__SWIG_3(ChSystem.getCPtr(system), filename);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool WriteCheckpoint(ChSystem system, string filename) {
    bool ret = corePINVOKE.WriteCheckpoint(ChSystem.getCPtr(system), filename);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ReadCheckpoint(ChSystem system, string filename) {
    corePINVOKE.ReadCheckpoint(ChSystem.getCPtr(system), filename);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteCamera(string filename, ChVectorD cam_location, ChVectorD cam_target, ChVectorD camera_upvec, string delim) {
    corePINVOKE.WriteCamera__SWIG_0(filename, ChVectorD.getCPtr(cam_location), ChVectorD.getCPtr(cam_target), ChVectorD.getCPtr(camera_upvec), delim);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteCamera(string filename, ChVectorD cam_location, ChVectorD cam_target, ChVectorD camera_upvec) {
    corePINVOKE.WriteCamera__SWIG_1(filename, ChVectorD.getCPtr(cam_location), ChVectorD.getCPtr(cam_target), ChVectorD.getCPtr(camera_upvec));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteVisualizationAssets(ChSystem system, string filename, bool body_info, string delim) {
    corePINVOKE.WriteVisualizationAssets__SWIG_0(ChSystem.getCPtr(system), filename, body_info, delim);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteVisualizationAssets(ChSystem system, string filename, bool body_info) {
    corePINVOKE.WriteVisualizationAssets__SWIG_1(ChSystem.getCPtr(system), filename, body_info);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteVisualizationAssets(ChSystem system, string filename) {
    corePINVOKE.WriteVisualizationAssets__SWIG_2(ChSystem.getCPtr(system), filename);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteVisualizationAssets(ChSystem system, string filename, SWIGTYPE_p_std__functionT_bool_fchrono__ChBody_const_RF_t selector, bool body_info, string delim) {
    corePINVOKE.WriteVisualizationAssets__SWIG_3(ChSystem.getCPtr(system), filename, SWIGTYPE_p_std__functionT_bool_fchrono__ChBody_const_RF_t.getCPtr(selector), body_info, delim);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteVisualizationAssets(ChSystem system, string filename, SWIGTYPE_p_std__functionT_bool_fchrono__ChBody_const_RF_t selector, bool body_info) {
    corePINVOKE.WriteVisualizationAssets__SWIG_4(ChSystem.getCPtr(system), filename, SWIGTYPE_p_std__functionT_bool_fchrono__ChBody_const_RF_t.getCPtr(selector), body_info);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteVisualizationAssets(ChSystem system, string filename, SWIGTYPE_p_std__functionT_bool_fchrono__ChBody_const_RF_t selector) {
    corePINVOKE.WriteVisualizationAssets__SWIG_5(ChSystem.getCPtr(system), filename, SWIGTYPE_p_std__functionT_bool_fchrono__ChBody_const_RF_t.getCPtr(selector));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteMeshPovray(ChTriangleMeshConnected trimesh, string mesh_name, string out_dir, ChColor color, ChVectorD pos, ChQuaternionD rot, bool smoothed) {
    corePINVOKE.WriteMeshPovray__SWIG_0(ChTriangleMeshConnected.getCPtr(trimesh), mesh_name, out_dir, ChColor.getCPtr(color), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), smoothed);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteMeshPovray(ChTriangleMeshConnected trimesh, string mesh_name, string out_dir, ChColor color, ChVectorD pos, ChQuaternionD rot) {
    corePINVOKE.WriteMeshPovray__SWIG_1(ChTriangleMeshConnected.getCPtr(trimesh), mesh_name, out_dir, ChColor.getCPtr(color), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteMeshPovray(ChTriangleMeshConnected trimesh, string mesh_name, string out_dir, ChColor color, ChVectorD pos) {
    corePINVOKE.WriteMeshPovray__SWIG_2(ChTriangleMeshConnected.getCPtr(trimesh), mesh_name, out_dir, ChColor.getCPtr(color), ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteMeshPovray(ChTriangleMeshConnected trimesh, string mesh_name, string out_dir, ChColor color) {
    corePINVOKE.WriteMeshPovray__SWIG_3(ChTriangleMeshConnected.getCPtr(trimesh), mesh_name, out_dir, ChColor.getCPtr(color));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteMeshPovray(ChTriangleMeshConnected trimesh, string mesh_name, string out_dir) {
    corePINVOKE.WriteMeshPovray__SWIG_4(ChTriangleMeshConnected.getCPtr(trimesh), mesh_name, out_dir);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool WriteMeshPovray(string obj_filename, string mesh_name, string out_dir, ChColor color, ChVectorD pos, ChQuaternionD rot) {
    bool ret = corePINVOKE.WriteMeshPovray__SWIG_5(obj_filename, mesh_name, out_dir, ChColor.getCPtr(color), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool WriteMeshPovray(string obj_filename, string mesh_name, string out_dir, ChColor color, ChVectorD pos) {
    bool ret = corePINVOKE.WriteMeshPovray__SWIG_6(obj_filename, mesh_name, out_dir, ChColor.getCPtr(color), ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool WriteMeshPovray(string obj_filename, string mesh_name, string out_dir, ChColor color) {
    bool ret = corePINVOKE.WriteMeshPovray__SWIG_7(obj_filename, mesh_name, out_dir, ChColor.getCPtr(color));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool WriteMeshPovray(string obj_filename, string mesh_name, string out_dir) {
    bool ret = corePINVOKE.WriteMeshPovray__SWIG_8(obj_filename, mesh_name, out_dir);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void WriteCurvePovray(ChBezierCurve curve, string curve_name, string out_dir, double radius, ChColor col) {
    corePINVOKE.WriteCurvePovray__SWIG_0(ChBezierCurve.getCPtr(curve), curve_name, out_dir, radius, ChColor.getCPtr(col));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteCurvePovray(ChBezierCurve curve, string curve_name, string out_dir, double radius) {
    corePINVOKE.WriteCurvePovray__SWIG_1(ChBezierCurve.getCPtr(curve), curve_name, out_dir, radius);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteCurvePovray(ChBezierCurve curve, string curve_name, string out_dir) {
    corePINVOKE.WriteCurvePovray__SWIG_2(ChBezierCurve.getCPtr(curve), curve_name, out_dir);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddSphereGeometry(ChBody body, ChMaterialSurface material, double radius, ChVectorD pos, ChQuaternionD rot, bool visualization, ChVisualMaterial vis_material) {
    corePINVOKE.AddSphereGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddSphereGeometry(ChBody body, ChMaterialSurface material, double radius, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    corePINVOKE.AddSphereGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddSphereGeometry(ChBody body, ChMaterialSurface material, double radius, ChVectorD pos, ChQuaternionD rot) {
    corePINVOKE.AddSphereGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddSphereGeometry(ChBody body, ChMaterialSurface material, double radius, ChVectorD pos) {
    corePINVOKE.AddSphereGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddSphereGeometry(ChBody body, ChMaterialSurface material, double radius) {
    corePINVOKE.AddSphereGeometry__SWIG_4(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddEllipsoidGeometry(ChBody body, ChMaterialSurface material, ChVectorD axes, ChVectorD pos, ChQuaternionD rot, bool visualization, ChVisualMaterial vis_material) {
    corePINVOKE.AddEllipsoidGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(axes), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddEllipsoidGeometry(ChBody body, ChMaterialSurface material, ChVectorD axes, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    corePINVOKE.AddEllipsoidGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(axes), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddEllipsoidGeometry(ChBody body, ChMaterialSurface material, ChVectorD axes, ChVectorD pos, ChQuaternionD rot) {
    corePINVOKE.AddEllipsoidGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(axes), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddEllipsoidGeometry(ChBody body, ChMaterialSurface material, ChVectorD axes, ChVectorD pos) {
    corePINVOKE.AddEllipsoidGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(axes), ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddEllipsoidGeometry(ChBody body, ChMaterialSurface material, ChVectorD axes) {
    corePINVOKE.AddEllipsoidGeometry__SWIG_4(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(axes));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxGeometry(ChBody body, ChMaterialSurface material, ChVectorD size, ChVectorD pos, ChQuaternionD rot, bool visualization, ChVisualMaterial vis_material) {
    corePINVOKE.AddBoxGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxGeometry(ChBody body, ChMaterialSurface material, ChVectorD size, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    corePINVOKE.AddBoxGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxGeometry(ChBody body, ChMaterialSurface material, ChVectorD size, ChVectorD pos, ChQuaternionD rot) {
    corePINVOKE.AddBoxGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxGeometry(ChBody body, ChMaterialSurface material, ChVectorD size, ChVectorD pos) {
    corePINVOKE.AddBoxGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size), ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxGeometry(ChBody body, ChMaterialSurface material, ChVectorD size) {
    corePINVOKE.AddBoxGeometry__SWIG_4(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBiSphereGeometry(ChBody body, ChMaterialSurface material, double radius, double cDist, ChVectorD pos, ChQuaternionD rot, bool visualization, ChVisualMaterial vis_material) {
    corePINVOKE.AddBiSphereGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, cDist, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBiSphereGeometry(ChBody body, ChMaterialSurface material, double radius, double cDist, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    corePINVOKE.AddBiSphereGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, cDist, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBiSphereGeometry(ChBody body, ChMaterialSurface material, double radius, double cDist, ChVectorD pos, ChQuaternionD rot) {
    corePINVOKE.AddBiSphereGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, cDist, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBiSphereGeometry(ChBody body, ChMaterialSurface material, double radius, double cDist, ChVectorD pos) {
    corePINVOKE.AddBiSphereGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, cDist, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBiSphereGeometry(ChBody body, ChMaterialSurface material, double radius, double cDist) {
    corePINVOKE.AddBiSphereGeometry__SWIG_4(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, cDist);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCapsuleGeometry(ChBody body, ChMaterialSurface material, double radius, double height, ChVectorD pos, ChQuaternionD rot, bool visualization, ChVisualMaterial vis_material) {
    corePINVOKE.AddCapsuleGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCapsuleGeometry(ChBody body, ChMaterialSurface material, double radius, double height, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    corePINVOKE.AddCapsuleGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCapsuleGeometry(ChBody body, ChMaterialSurface material, double radius, double height, ChVectorD pos, ChQuaternionD rot) {
    corePINVOKE.AddCapsuleGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCapsuleGeometry(ChBody body, ChMaterialSurface material, double radius, double height, ChVectorD pos) {
    corePINVOKE.AddCapsuleGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCapsuleGeometry(ChBody body, ChMaterialSurface material, double radius, double height) {
    corePINVOKE.AddCapsuleGeometry__SWIG_4(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, double height, ChVectorD pos, ChQuaternionD rot, bool visualization, ChVisualMaterial vis_material) {
    corePINVOKE.AddCylinderGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, double height, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    corePINVOKE.AddCylinderGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, double height, ChVectorD pos, ChQuaternionD rot) {
    corePINVOKE.AddCylinderGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, double height, ChVectorD pos) {
    corePINVOKE.AddCylinderGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, double height) {
    corePINVOKE.AddCylinderGeometry__SWIG_4(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, ChVectorD p1, ChVectorD p2, bool visualization, ChVisualMaterial vis_material) {
    corePINVOKE.AddCylinderGeometry__SWIG_5(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, ChVectorD.getCPtr(p1), ChVectorD.getCPtr(p2), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, ChVectorD p1, ChVectorD p2, bool visualization) {
    corePINVOKE.AddCylinderGeometry__SWIG_6(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, ChVectorD.getCPtr(p1), ChVectorD.getCPtr(p2), visualization);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, ChVectorD p1, ChVectorD p2) {
    corePINVOKE.AddCylinderGeometry__SWIG_7(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, ChVectorD.getCPtr(p1), ChVectorD.getCPtr(p2));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConeGeometry(ChBody body, ChMaterialSurface material, double radius, double height, ChVectorD pos, ChQuaternionD rot, bool visualization, ChVisualMaterial vis_material) {
    corePINVOKE.AddConeGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConeGeometry(ChBody body, ChMaterialSurface material, double radius, double height, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    corePINVOKE.AddConeGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConeGeometry(ChBody body, ChMaterialSurface material, double radius, double height, ChVectorD pos, ChQuaternionD rot) {
    corePINVOKE.AddConeGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConeGeometry(ChBody body, ChMaterialSurface material, double radius, double height, ChVectorD pos) {
    corePINVOKE.AddConeGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConeGeometry(ChBody body, ChMaterialSurface material, double radius, double height) {
    corePINVOKE.AddConeGeometry__SWIG_4(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool AddTriangleMeshGeometry(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos, ChQuaternionD rot, bool visualization, ChVisualMaterial vis_material) {
    bool ret = corePINVOKE.AddTriangleMeshGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshGeometry(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    bool ret = corePINVOKE.AddTriangleMeshGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshGeometry(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos, ChQuaternionD rot) {
    bool ret = corePINVOKE.AddTriangleMeshGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshGeometry(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos) {
    bool ret = corePINVOKE.AddTriangleMeshGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshGeometry(ChBody body, ChMaterialSurface material, string obj_filename, string name) {
    bool ret = corePINVOKE.AddTriangleMeshGeometry__SWIG_4(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecomposition(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos, ChQuaternionD rot, float skin_thickness, bool use_original_asset, ChVisualMaterial vis_material) {
    bool ret = corePINVOKE.AddTriangleMeshConvexDecomposition__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), skin_thickness, use_original_asset, ChVisualMaterial.getCPtr(vis_material));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecomposition(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos, ChQuaternionD rot, float skin_thickness, bool use_original_asset) {
    bool ret = corePINVOKE.AddTriangleMeshConvexDecomposition__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), skin_thickness, use_original_asset);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecomposition(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos, ChQuaternionD rot, float skin_thickness) {
    bool ret = corePINVOKE.AddTriangleMeshConvexDecomposition__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), skin_thickness);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecomposition(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos, ChQuaternionD rot) {
    bool ret = corePINVOKE.AddTriangleMeshConvexDecomposition__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecomposition(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos) {
    bool ret = corePINVOKE.AddTriangleMeshConvexDecomposition__SWIG_4(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecomposition(ChBody body, ChMaterialSurface material, string obj_filename, string name) {
    bool ret = corePINVOKE.AddTriangleMeshConvexDecomposition__SWIG_5(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecompositionV2(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos, ChQuaternionD rot, bool use_original_asset, ChVisualMaterial vis_material) {
    bool ret = corePINVOKE.AddTriangleMeshConvexDecompositionV2__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), use_original_asset, ChVisualMaterial.getCPtr(vis_material));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecompositionV2(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos, ChQuaternionD rot, bool use_original_asset) {
    bool ret = corePINVOKE.AddTriangleMeshConvexDecompositionV2__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), use_original_asset);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecompositionV2(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos, ChQuaternionD rot) {
    bool ret = corePINVOKE.AddTriangleMeshConvexDecompositionV2__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecompositionV2(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos) {
    bool ret = corePINVOKE.AddTriangleMeshConvexDecompositionV2__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecompositionV2(ChBody body, ChMaterialSurface material, string obj_filename, string name) {
    bool ret = corePINVOKE.AddTriangleMeshConvexDecompositionV2__SWIG_4(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecompositionSplit(ChSystem system, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos, ChQuaternionD rot, double total_mass) {
    bool ret = corePINVOKE.AddTriangleMeshConvexDecompositionSplit(ChSystem.getCPtr(system), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), total_mass);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void AddTriangleGeometry(ChBody body, ChMaterialSurface material, ChVectorD vertA, ChVectorD vertB, ChVectorD vertC, string name, ChVectorD pos, ChQuaternionD rot, bool visualization, ChVisualMaterial vis_material) {
    corePINVOKE.AddTriangleGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(vertA), ChVectorD.getCPtr(vertB), ChVectorD.getCPtr(vertC), name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTriangleGeometry(ChBody body, ChMaterialSurface material, ChVectorD vertA, ChVectorD vertB, ChVectorD vertC, string name, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    corePINVOKE.AddTriangleGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(vertA), ChVectorD.getCPtr(vertB), ChVectorD.getCPtr(vertC), name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTriangleGeometry(ChBody body, ChMaterialSurface material, ChVectorD vertA, ChVectorD vertB, ChVectorD vertC, string name, ChVectorD pos, ChQuaternionD rot) {
    corePINVOKE.AddTriangleGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(vertA), ChVectorD.getCPtr(vertB), ChVectorD.getCPtr(vertC), name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTriangleGeometry(ChBody body, ChMaterialSurface material, ChVectorD vertA, ChVectorD vertB, ChVectorD vertC, string name, ChVectorD pos) {
    corePINVOKE.AddTriangleGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(vertA), ChVectorD.getCPtr(vertB), ChVectorD.getCPtr(vertC), name, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTriangleGeometry(ChBody body, ChMaterialSurface material, ChVectorD vertA, ChVectorD vertB, ChVectorD vertC, string name) {
    corePINVOKE.AddTriangleGeometry__SWIG_4(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(vertA), ChVectorD.getCPtr(vertB), ChVectorD.getCPtr(vertC), name);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedBoxGeometry(ChBody body, ChMaterialSurface material, ChVectorD size, double srad, ChVectorD pos, ChQuaternionD rot, bool visualization, ChVisualMaterial vis_material) {
    corePINVOKE.AddRoundedBoxGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size), srad, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedBoxGeometry(ChBody body, ChMaterialSurface material, ChVectorD size, double srad, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    corePINVOKE.AddRoundedBoxGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size), srad, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedBoxGeometry(ChBody body, ChMaterialSurface material, ChVectorD size, double srad, ChVectorD pos, ChQuaternionD rot) {
    corePINVOKE.AddRoundedBoxGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size), srad, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedBoxGeometry(ChBody body, ChMaterialSurface material, ChVectorD size, double srad, ChVectorD pos) {
    corePINVOKE.AddRoundedBoxGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size), srad, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedBoxGeometry(ChBody body, ChMaterialSurface material, ChVectorD size, double srad) {
    corePINVOKE.AddRoundedBoxGeometry__SWIG_4(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size), srad);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, double height, double srad, ChVectorD pos, ChQuaternionD rot, bool visualization, ChVisualMaterial vis_material) {
    corePINVOKE.AddRoundedCylinderGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, srad, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, double height, double srad, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    corePINVOKE.AddRoundedCylinderGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, srad, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, double height, double srad, ChVectorD pos, ChQuaternionD rot) {
    corePINVOKE.AddRoundedCylinderGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, srad, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, double height, double srad, ChVectorD pos) {
    corePINVOKE.AddRoundedCylinderGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, srad, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, double height, double srad) {
    corePINVOKE.AddRoundedCylinderGeometry__SWIG_4(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, srad);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChMaterialSurface material, double radius, double thickness, int segments, int angle, ChVectorD pos, ChQuaternionD rot, bool visualization, ChVisualMaterial vis_material) {
    corePINVOKE.AddTorusGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, thickness, segments, angle, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChMaterialSurface material, double radius, double thickness, int segments, int angle, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    corePINVOKE.AddTorusGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, thickness, segments, angle, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChMaterialSurface material, double radius, double thickness, int segments, int angle, ChVectorD pos, ChQuaternionD rot) {
    corePINVOKE.AddTorusGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, thickness, segments, angle, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChMaterialSurface material, double radius, double thickness, int segments, int angle, ChVectorD pos) {
    corePINVOKE.AddTorusGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, thickness, segments, angle, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChMaterialSurface material, double radius, double thickness, int segments, int angle) {
    corePINVOKE.AddTorusGeometry__SWIG_4(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, thickness, segments, angle);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChMaterialSurface material, double radius, double thickness, int segments) {
    corePINVOKE.AddTorusGeometry__SWIG_5(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, thickness, segments);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChMaterialSurface material, double radius, double thickness) {
    corePINVOKE.AddTorusGeometry__SWIG_6(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, thickness);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxContainer(ChBody body, ChMaterialSurface material, ChFrameD frame, ChVectorD size, double thickness, ChVectorI faces, bool visualization, ChVisualMaterial vis_material) {
    corePINVOKE.AddBoxContainer__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChFrameD.getCPtr(frame), ChVectorD.getCPtr(size), thickness, ChVectorI.getCPtr(faces), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxContainer(ChBody body, ChMaterialSurface material, ChFrameD frame, ChVectorD size, double thickness, ChVectorI faces, bool visualization) {
    corePINVOKE.AddBoxContainer__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChFrameD.getCPtr(frame), ChVectorD.getCPtr(size), thickness, ChVectorI.getCPtr(faces), visualization);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxContainer(ChBody body, ChMaterialSurface material, ChFrameD frame, ChVectorD size, double thickness, ChVectorI faces) {
    corePINVOKE.AddBoxContainer__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChFrameD.getCPtr(frame), ChVectorD.getCPtr(size), thickness, ChVectorI.getCPtr(faces));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChBody CreateBoxContainer(ChSystem system, int id, ChMaterialSurface mat, ChVectorD size, double thickness, ChVectorD pos, ChQuaternionD rot, bool collide, bool overlap, bool closed) {
    global::System.IntPtr cPtr = corePINVOKE.CreateBoxContainer__SWIG_0(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(size), thickness, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), collide, overlap, closed);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateBoxContainer(ChSystem system, int id, ChMaterialSurface mat, ChVectorD size, double thickness, ChVectorD pos, ChQuaternionD rot, bool collide, bool overlap) {
    global::System.IntPtr cPtr = corePINVOKE.CreateBoxContainer__SWIG_1(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(size), thickness, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), collide, overlap);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateBoxContainer(ChSystem system, int id, ChMaterialSurface mat, ChVectorD size, double thickness, ChVectorD pos, ChQuaternionD rot, bool collide) {
    global::System.IntPtr cPtr = corePINVOKE.CreateBoxContainer__SWIG_2(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(size), thickness, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), collide);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateBoxContainer(ChSystem system, int id, ChMaterialSurface mat, ChVectorD size, double thickness, ChVectorD pos, ChQuaternionD rot) {
    global::System.IntPtr cPtr = corePINVOKE.CreateBoxContainer__SWIG_3(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(size), thickness, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateBoxContainer(ChSystem system, int id, ChMaterialSurface mat, ChVectorD size, double thickness, ChVectorD pos) {
    global::System.IntPtr cPtr = corePINVOKE.CreateBoxContainer__SWIG_4(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(size), thickness, ChVectorD.getCPtr(pos));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateBoxContainer(ChSystem system, int id, ChMaterialSurface mat, ChVectorD size, double thickness) {
    global::System.IntPtr cPtr = corePINVOKE.CreateBoxContainer__SWIG_5(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(size), thickness);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, int id, ChMaterialSurface mat, double radius, double height, double thickness, int numBoxes, ChVectorD pos, ChQuaternionD rot, bool collide, bool overlap, bool closed, bool isBoxBase, bool partialVisualization) {
    global::System.IntPtr cPtr = corePINVOKE.CreateCylindricalContainerFromBoxes__SWIG_0(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), radius, height, thickness, numBoxes, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), collide, overlap, closed, isBoxBase, partialVisualization);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, int id, ChMaterialSurface mat, double radius, double height, double thickness, int numBoxes, ChVectorD pos, ChQuaternionD rot, bool collide, bool overlap, bool closed, bool isBoxBase) {
    global::System.IntPtr cPtr = corePINVOKE.CreateCylindricalContainerFromBoxes__SWIG_1(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), radius, height, thickness, numBoxes, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), collide, overlap, closed, isBoxBase);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, int id, ChMaterialSurface mat, double radius, double height, double thickness, int numBoxes, ChVectorD pos, ChQuaternionD rot, bool collide, bool overlap, bool closed) {
    global::System.IntPtr cPtr = corePINVOKE.CreateCylindricalContainerFromBoxes__SWIG_2(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), radius, height, thickness, numBoxes, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), collide, overlap, closed);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, int id, ChMaterialSurface mat, double radius, double height, double thickness, int numBoxes, ChVectorD pos, ChQuaternionD rot, bool collide, bool overlap) {
    global::System.IntPtr cPtr = corePINVOKE.CreateCylindricalContainerFromBoxes__SWIG_3(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), radius, height, thickness, numBoxes, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), collide, overlap);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, int id, ChMaterialSurface mat, double radius, double height, double thickness, int numBoxes, ChVectorD pos, ChQuaternionD rot, bool collide) {
    global::System.IntPtr cPtr = corePINVOKE.CreateCylindricalContainerFromBoxes__SWIG_4(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), radius, height, thickness, numBoxes, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), collide);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, int id, ChMaterialSurface mat, double radius, double height, double thickness, int numBoxes, ChVectorD pos, ChQuaternionD rot) {
    global::System.IntPtr cPtr = corePINVOKE.CreateCylindricalContainerFromBoxes__SWIG_5(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), radius, height, thickness, numBoxes, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, int id, ChMaterialSurface mat, double radius, double height, double thickness, int numBoxes, ChVectorD pos) {
    global::System.IntPtr cPtr = corePINVOKE.CreateCylindricalContainerFromBoxes__SWIG_6(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), radius, height, thickness, numBoxes, ChVectorD.getCPtr(pos));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, int id, ChMaterialSurface mat, double radius, double height, double thickness, int numBoxes) {
    global::System.IntPtr cPtr = corePINVOKE.CreateCylindricalContainerFromBoxes__SWIG_7(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), radius, height, thickness, numBoxes);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos, ChQuaternionD rot, int hacd_maxhullcount, int hacd_maxhullmerge, int hacd_maxhullvertexes, float hacd_concavity, float hacd_smallclusterthreshold, float hacd_fusetolerance) {
    bool ret = corePINVOKE.LoadConvexMesh__SWIG_0(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), hacd_maxhullcount, hacd_maxhullmerge, hacd_maxhullvertexes, hacd_concavity, hacd_smallclusterthreshold, hacd_fusetolerance);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos, ChQuaternionD rot, int hacd_maxhullcount, int hacd_maxhullmerge, int hacd_maxhullvertexes, float hacd_concavity, float hacd_smallclusterthreshold) {
    bool ret = corePINVOKE.LoadConvexMesh__SWIG_1(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), hacd_maxhullcount, hacd_maxhullmerge, hacd_maxhullvertexes, hacd_concavity, hacd_smallclusterthreshold);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos, ChQuaternionD rot, int hacd_maxhullcount, int hacd_maxhullmerge, int hacd_maxhullvertexes, float hacd_concavity) {
    bool ret = corePINVOKE.LoadConvexMesh__SWIG_2(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), hacd_maxhullcount, hacd_maxhullmerge, hacd_maxhullvertexes, hacd_concavity);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos, ChQuaternionD rot, int hacd_maxhullcount, int hacd_maxhullmerge, int hacd_maxhullvertexes) {
    bool ret = corePINVOKE.LoadConvexMesh__SWIG_3(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), hacd_maxhullcount, hacd_maxhullmerge, hacd_maxhullvertexes);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos, ChQuaternionD rot, int hacd_maxhullcount, int hacd_maxhullmerge) {
    bool ret = corePINVOKE.LoadConvexMesh__SWIG_4(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), hacd_maxhullcount, hacd_maxhullmerge);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos, ChQuaternionD rot, int hacd_maxhullcount) {
    bool ret = corePINVOKE.LoadConvexMesh__SWIG_5(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), hacd_maxhullcount);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos, ChQuaternionD rot) {
    bool ret = corePINVOKE.LoadConvexMesh__SWIG_6(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos) {
    bool ret = corePINVOKE.LoadConvexMesh__SWIG_7(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape) {
    bool ret = corePINVOKE.LoadConvexMesh__SWIG_8(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexHulls(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVectorT_double_t_t_t convex_hulls) {
    bool ret = corePINVOKE.LoadConvexHulls(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVectorT_double_t_t_t.getCPtr(convex_hulls));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void AddConvexCollisionModel(ChBody body, ChMaterialSurface material, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos, ChQuaternionD rot, bool use_original_asset, ChVisualMaterial vis_material) {
    corePINVOKE.AddConvexCollisionModel__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), use_original_asset, ChVisualMaterial.getCPtr(vis_material));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChMaterialSurface material, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos, ChQuaternionD rot, bool use_original_asset) {
    corePINVOKE.AddConvexCollisionModel__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), use_original_asset);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChMaterialSurface material, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos, ChQuaternionD rot) {
    corePINVOKE.AddConvexCollisionModel__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChMaterialSurface material, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos) {
    corePINVOKE.AddConvexCollisionModel__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChMaterialSurface material, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape) {
    corePINVOKE.AddConvexCollisionModel__SWIG_4(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChMaterialSurface material, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVectorT_double_t_t_t convex_hulls, ChVectorD pos, ChQuaternionD rot, ChVisualMaterial vis_material) {
    corePINVOKE.AddConvexCollisionModel__SWIG_5(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVectorT_double_t_t_t.getCPtr(convex_hulls), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), ChVisualMaterial.getCPtr(vis_material));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChMaterialSurface material, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVectorT_double_t_t_t convex_hulls, ChVectorD pos, ChQuaternionD rot) {
    corePINVOKE.AddConvexCollisionModel__SWIG_6(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVectorT_double_t_t_t.getCPtr(convex_hulls), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChMaterialSurface material, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVectorT_double_t_t_t convex_hulls, ChVectorD pos) {
    corePINVOKE.AddConvexCollisionModel__SWIG_7(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVectorT_double_t_t_t.getCPtr(convex_hulls), ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChMaterialSurface material, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVectorT_double_t_t_t convex_hulls) {
    corePINVOKE.AddConvexCollisionModel__SWIG_8(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVectorT_double_t_t_t.getCPtr(convex_hulls));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChBody CastToChBody(ChContactable in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChBody__SWIG_0(ChContactable.getCPtr(in_obj));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CastToChBody(ChLoadable in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChBody__SWIG_1(ChLoadable.getCPtr(in_obj));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChNodeBase CastToChNodeBase(ChLoadable in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChNodeBase(ChLoadable.getCPtr(in_obj));
    ChNodeBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChNodeBase(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChModelFileShape CastToChModelFileShape(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChModelFileShape(ChVisualShape.getCPtr(in_obj));
    ChModelFileShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChModelFileShape(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBoxShape CastToChBoxShape(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChBoxShape(ChVisualShape.getCPtr(in_obj));
    ChBoxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBoxShape(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSphereShape CastToChSphereShape(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChSphereShape(ChVisualShape.getCPtr(in_obj));
    ChSphereShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSphereShape(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCylinderShape CastToChCylinderShape(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChCylinderShape(ChVisualShape.getCPtr(in_obj));
    ChCylinderShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCylinderShape(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChTexture CastToChTexture(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChTexture(ChVisualShape.getCPtr(in_obj));
    ChTexture ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTexture(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLineShape CastToChLineShape(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLineShape(ChVisualShape.getCPtr(in_obj));
    ChLineShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLineShape(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSurfaceShape CastToChSurfaceShape(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChSurfaceShape(ChVisualShape.getCPtr(in_obj));
    ChSurfaceShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSurfaceShape(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChPathShape CastToChPathShape(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChPathShape(ChVisualShape.getCPtr(in_obj));
    ChPathShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPathShape(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChPointPointShape CastToChPointPointShape(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChPointPointShape(ChVisualShape.getCPtr(in_obj));
    ChPointPointShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPointPointShape(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSegmentShape CastToChSegmentShape(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChSegmentShape(ChVisualShape.getCPtr(in_obj));
    ChSegmentShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSegmentShape(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSpringShape CastToChSpringShape(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChSpringShape(ChVisualShape.getCPtr(in_obj));
    ChSpringShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSpringShape(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChRotSpringShape CastToChRotSpringShape(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChRotSpringShape(ChVisualShape.getCPtr(in_obj));
    ChRotSpringShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChRotSpringShape(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChTriangleMeshShape CastToChTriangleMeshShape(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChTriangleMeshShape(ChVisualShape.getCPtr(in_obj));
    ChTriangleMeshShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMeshShape(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChEllipsoidShape CastToChEllipsoidShape(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChEllipsoidShape(ChVisualShape.getCPtr(in_obj));
    ChEllipsoidShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChEllipsoidShape(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CastToChBody(ChBodyFrame in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChBody__SWIG_2(ChBodyFrame.getCPtr(in_obj));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBodyAuxRef CastToChBodyAuxRef(ChBodyFrame in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChBodyAuxRef__SWIG_0(ChBodyFrame.getCPtr(in_obj));
    ChBodyAuxRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyAuxRef(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChConveyor CastToChConveyor(ChBodyFrame in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChConveyor__SWIG_0(ChBodyFrame.getCPtr(in_obj));
    ChConveyor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChConveyor(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBodyFrame CastToChBodyFrame(ChBody in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChBodyFrame__SWIG_0(ChBody.getCPtr(in_obj));
    ChBodyFrame ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyFrame(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBodyFrame CastToChBodyFrame(ChBodyAuxRef in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChBodyFrame__SWIG_1(ChBodyAuxRef.getCPtr(in_obj));
    ChBodyFrame ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyFrame(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CastToChBody(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChBody__SWIG_3(ChPhysicsItem.getCPtr(in_obj));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChConveyor CastToChConveyor(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChConveyor__SWIG_1(ChPhysicsItem.getCPtr(in_obj));
    ChConveyor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChConveyor(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBodyAuxRef CastToChBodyAuxRef(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChBodyAuxRef__SWIG_1(ChPhysicsItem.getCPtr(in_obj));
    ChBodyAuxRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyAuxRef(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChIndexedParticles CastToChIndexedParticles(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChIndexedParticles(ChPhysicsItem.getCPtr(in_obj));
    ChIndexedParticles ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChIndexedParticles(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChParticleCloud CastToChParticleCloud(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChParticleCloud(ChPhysicsItem.getCPtr(in_obj));
    ChParticleCloud ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChParticleCloud(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChNodeXYZ CastToChNodeXYZ(ChNodeBase in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChNodeXYZ(ChNodeBase.getCPtr(in_obj));
    ChNodeXYZ ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChNodeXYZ(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLink CastToChLink(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLink(ChPhysicsItem.getCPtr(in_obj));
    ChLink ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLink(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMarkers CastToChLinkMarkers(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMarkers__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMarkers ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMarkers(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLock CastToChLinkLock(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLock__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLock ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLock(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockLock CastToChLinkLockLock(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockLock__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockLock ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockLock(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockRevolute CastToChLinkLockRevolute(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockRevolute__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockRevolute ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockRevolute(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockSpherical CastToChLinkLockSpherical(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockSpherical__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockSpherical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockSpherical(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockCylindrical CastToChLinkLockCylindrical(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockCylindrical__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockCylindrical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockCylindrical(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPrismatic CastToChLinkLockPrismatic(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockPrismatic__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockPrismatic ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPrismatic(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPointPlane CastToChLinkLockPointPlane(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockPointPlane__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockPointPlane ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPointPlane(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPointLine CastToChLinkLockPointLine(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockPointLine__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockPointLine ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPointLine(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockOldham CastToChLinkLockOldham(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockOldham__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockOldham ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockOldham(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockFree CastToChLinkLockFree(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockFree__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockFree ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockFree(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockAlign CastToChLinkLockAlign(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockAlign__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockAlign ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockAlign(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockParallel CastToChLinkLockParallel(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockParallel__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockParallel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockParallel(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPerpend CastToChLinkLockPerpend(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockPerpend__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockPerpend ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPerpend(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMate CastToChLinkMate(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMate__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMate ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMate(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateGeneric CastToChLinkMateGeneric(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMateGeneric__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateGeneric ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateGeneric(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMatePlane CastToChLinkMatePlane(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMatePlane__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMatePlane ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMatePlane(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateCoaxial CastToChLinkMateCoaxial(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMateCoaxial__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateCoaxial ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateCoaxial(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateSpherical CastToChLinkMateSpherical(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMateSpherical__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateSpherical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateSpherical(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateXdistance CastToChLinkMateXdistance(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMateXdistance__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateXdistance ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateXdistance(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateParallel CastToChLinkMateParallel(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMateParallel__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateParallel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateParallel(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateOrthogonal CastToChLinkMateOrthogonal(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMateOrthogonal__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateOrthogonal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateOrthogonal(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateFix CastToChLinkMateFix(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMateFix__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateFix ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateFix(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateRevolute CastToChLinkMateRevolute(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMateRevolute__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateRevolute ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateRevolute(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMatePrismatic CastToChLinkMatePrismatic(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMatePrismatic__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMatePrismatic ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMatePrismatic(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkGear CastToChLinkGear(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkGear__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkGear ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkGear(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkDistance CastToChLinkDistance(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkDistance__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkDistance ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkDistance(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLinActuator CastToChLinkLinActuator(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLinActuator__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLinActuator ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLinActuator(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkPulley CastToChLinkPulley(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkPulley__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkPulley ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkPulley(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkScrew CastToChLinkScrew(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkScrew__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkScrew ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkScrew(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkTSDA CastToChLinkTSDA(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkTSDA__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkTSDA ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkTSDA(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkRSDA CastToChLinkRSDA(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkRSDA(ChPhysicsItem.getCPtr(in_obj));
    ChLinkRSDA ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkRSDA(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotor CastToChLinkMotor(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMotor(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotor(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorLinear CastToChLinkMotorLinear(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMotorLinear(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorLinear ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorLinear(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorLinearDriveline CastToChLinkMotorLinearDriveline(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMotorLinearDriveline(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorLinearDriveline ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorLinearDriveline(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorLinearForce CastToChLinkMotorLinearForce(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMotorLinearForce(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorLinearForce ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorLinearForce(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorLinearPosition CastToChLinkMotorLinearPosition(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMotorLinearPosition(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorLinearPosition ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorLinearPosition(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorLinearSpeed CastToChLinkMotorLinearSpeed(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMotorLinearSpeed(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorLinearSpeed ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorLinearSpeed(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorRotation CastToChLinkMotorRotation(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMotorRotation(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorRotation ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorRotation(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorRotationAngle CastToChLinkMotorRotationAngle(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMotorRotationAngle(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorRotationAngle ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorRotationAngle(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorRotationDriveline CastToChLinkMotorRotationDriveline(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMotorRotationDriveline(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorRotationDriveline ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorRotationDriveline(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorRotationSpeed CastToChLinkMotorRotationSpeed(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMotorRotationSpeed(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorRotationSpeed ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorRotationSpeed(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorRotationTorque CastToChLinkMotorRotationTorque(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMotorRotationTorque(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorRotationTorque ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorRotationTorque(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadContainer CastToChLoadContainer(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLoadContainer(ChPhysicsItem.getCPtr(in_obj));
    ChLoadContainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadContainer(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMarkers CastToChLinkMarkers(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMarkers__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMarkers ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMarkers(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLock CastToChLinkLock(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLock__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLock ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLock(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockLock CastToChLinkLockLock(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockLock__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockLock ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockLock(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockRevolute CastToChLinkLockRevolute(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockRevolute__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockRevolute ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockRevolute(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockSpherical CastToChLinkLockSpherical(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockSpherical__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockSpherical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockSpherical(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockCylindrical CastToChLinkLockCylindrical(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockCylindrical__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockCylindrical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockCylindrical(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPrismatic CastToChLinkLockPrismatic(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockPrismatic__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockPrismatic ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPrismatic(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPointPlane CastToChLinkLockPointPlane(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockPointPlane__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockPointPlane ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPointPlane(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPointLine CastToChLinkLockPointLine(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockPointLine__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockPointLine ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPointLine(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockOldham CastToChLinkLockOldham(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockOldham__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockOldham ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockOldham(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockFree CastToChLinkLockFree(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockFree__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockFree ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockFree(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockAlign CastToChLinkLockAlign(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockAlign__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockAlign ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockAlign(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockParallel CastToChLinkLockParallel(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockParallel__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockParallel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockParallel(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPerpend CastToChLinkLockPerpend(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLockPerpend__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockPerpend ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPerpend(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMate CastToChLinkMate(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMate__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMate ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMate(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateGeneric CastToChLinkMateGeneric(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMateGeneric__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateGeneric ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateGeneric(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMatePlane CastToChLinkMatePlane(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMatePlane__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMatePlane ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMatePlane(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateCoaxial CastToChLinkMateCoaxial(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMateCoaxial__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateCoaxial ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateCoaxial(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateSpherical CastToChLinkMateSpherical(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMateSpherical__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateSpherical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateSpherical(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateXdistance CastToChLinkMateXdistance(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMateXdistance__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateXdistance ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateXdistance(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateParallel CastToChLinkMateParallel(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMateParallel__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateParallel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateParallel(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateOrthogonal CastToChLinkMateOrthogonal(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMateOrthogonal__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateOrthogonal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateOrthogonal(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateFix CastToChLinkMateFix(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMateFix__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateFix ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateFix(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateRevolute CastToChLinkMateRevolute(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMateRevolute__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateRevolute ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateRevolute(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMatePrismatic CastToChLinkMatePrismatic(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkMatePrismatic__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMatePrismatic ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMatePrismatic(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkGear CastToChLinkGear(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkGear__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkGear ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkGear(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkDistance CastToChLinkDistance(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkDistance__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkDistance ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkDistance(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLinActuator CastToChLinkLinActuator(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkLinActuator__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLinActuator ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLinActuator(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkPulley CastToChLinkPulley(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkPulley__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkPulley ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkPulley(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkScrew CastToChLinkScrew(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkScrew__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkScrew ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkScrew(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkTSDA CastToChLinkTSDA(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkTSDA__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkTSDA ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkTSDA(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkPointSpline CastToChLinkPointSpline(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkPointSpline(ChLink.getCPtr(in_obj));
    ChLinkPointSpline ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkPointSpline(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkTrajectory CastToChLinkTrajectory(ChLink in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLinkTrajectory(ChLink.getCPtr(in_obj));
    ChLinkTrajectory ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkTrajectory(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Const CastToChFunction_Const(ChFunction in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChFunction_Const(ChFunction.getCPtr(in_obj));
    ChFunction_Const ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Const(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_ConstAcc CastToChFunction_ConstAcc(ChFunction in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChFunction_ConstAcc(ChFunction.getCPtr(in_obj));
    ChFunction_ConstAcc ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_ConstAcc(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Derive CastToChFunction_Derive(ChFunction in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChFunction_Derive(ChFunction.getCPtr(in_obj));
    ChFunction_Derive ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Derive(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Fillet3 CastToChFunction_Fillet3(ChFunction in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChFunction_Fillet3(ChFunction.getCPtr(in_obj));
    ChFunction_Fillet3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Fillet3(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Integrate CastToChFunction_Integrate(ChFunction in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChFunction_Integrate(ChFunction.getCPtr(in_obj));
    ChFunction_Integrate ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Integrate(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Mirror CastToChFunction_Mirror(ChFunction in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChFunction_Mirror(ChFunction.getCPtr(in_obj));
    ChFunction_Mirror ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Mirror(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Mocap CastToChFunction_Mocap(ChFunction in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChFunction_Mocap(ChFunction.getCPtr(in_obj));
    ChFunction_Mocap ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Mocap(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Noise CastToChFunction_Noise(ChFunction in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChFunction_Noise(ChFunction.getCPtr(in_obj));
    ChFunction_Noise ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Noise(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Operation CastToChFunction_Operation(ChFunction in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChFunction_Operation(ChFunction.getCPtr(in_obj));
    ChFunction_Operation ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Operation(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Oscilloscope CastToChFunction_Oscilloscope(ChFunction in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChFunction_Oscilloscope(ChFunction.getCPtr(in_obj));
    ChFunction_Oscilloscope ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Oscilloscope(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Poly CastToChFunction_Poly(ChFunction in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChFunction_Poly(ChFunction.getCPtr(in_obj));
    ChFunction_Poly ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Poly(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Poly345 CastToChFunction_Poly345(ChFunction in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChFunction_Poly345(ChFunction.getCPtr(in_obj));
    ChFunction_Poly345 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Poly345(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Ramp CastToChFunction_Ramp(ChFunction in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChFunction_Ramp(ChFunction.getCPtr(in_obj));
    ChFunction_Ramp ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Ramp(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Recorder CastToChFunction_Recorder(ChFunction in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChFunction_Recorder(ChFunction.getCPtr(in_obj));
    ChFunction_Recorder ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Recorder(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Repeat CastToChFunction_Repeat(ChFunction in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChFunction_Repeat(ChFunction.getCPtr(in_obj));
    ChFunction_Repeat ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Repeat(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Sequence CastToChFunction_Sequence(ChFunction in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChFunction_Sequence(ChFunction.getCPtr(in_obj));
    ChFunction_Sequence ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Sequence(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Sigma CastToChFunction_Sigma(ChFunction in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChFunction_Sigma(ChFunction.getCPtr(in_obj));
    ChFunction_Sigma ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Sigma(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Sine CastToChFunction_Sine(ChFunction in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChFunction_Sine(ChFunction.getCPtr(in_obj));
    ChFunction_Sine ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Sine(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Setpoint CastToChFunction_Setpoint(ChFunction in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChFunction_Setpoint(ChFunction.getCPtr(in_obj));
    ChFunction_Setpoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Setpoint(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaft CastToChShaft(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChShaft(ChPhysicsItem.getCPtr(in_obj));
    ChShaft ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaft(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsBody CastToChShaftsBody(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChShaftsBody(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsCouple CastToChShaftsCouple(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChShaftsCouple(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsCouple ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsCouple(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsClutch CastToChShaftsClutch(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChShaftsClutch(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsClutch ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsClutch(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsMotor CastToChShaftsMotor(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChShaftsMotor(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsMotor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsMotor(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsTorsionSpring CastToChShaftsTorsionSpring(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChShaftsTorsionSpring(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsTorsionSpring ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsTorsionSpring(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsPlanetary CastToChShaftsPlanetary(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChShaftsPlanetary(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsPlanetary ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsPlanetary(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsTorqueBase CastToChShaftsTorqueBase(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChShaftsTorqueBase(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsTorqueBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsTorqueBase(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsThermalEngine CastToChShaftsThermalEngine(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChShaftsThermalEngine(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsThermalEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsThermalEngine(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadCustom CastToChLoadCustom(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLoadCustom(ChLoadBase.getCPtr(in_obj));
    ChLoadCustom ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadCustom(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadCustomMultiple CastToChLoadCustomMultiple(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLoadCustomMultiple(ChLoadBase.getCPtr(in_obj));
    ChLoadCustomMultiple ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadCustomMultiple(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyForce CastToChLoadBodyForce(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLoadBodyForce(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyForce ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyForce(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyTorque CastToChLoadBodyTorque(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLoadBodyTorque(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyTorque ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyTorque(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyInertia CastToChLoadBodyInertia(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLoadBodyInertia(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyInertia ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyInertia(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyBody CastToChLoadBodyBody(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLoadBodyBody(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyBodyTorque CastToChLoadBodyBodyTorque(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLoadBodyBodyTorque(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyBodyTorque ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyBodyTorque(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyBodyBushingSpherical CastToChLoadBodyBodyBushingSpherical(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLoadBodyBodyBushingSpherical(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyBodyBushingSpherical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyBodyBushingSpherical(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyBodyBushingPlastic CastToChLoadBodyBodyBushingPlastic(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLoadBodyBodyBushingPlastic(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyBodyBushingPlastic ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyBodyBushingPlastic(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyBodyBushingMate CastToChLoadBodyBodyBushingMate(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLoadBodyBodyBushingMate(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyBodyBushingMate ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyBodyBushingMate(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyBodyBushingGeneric CastToChLoadBodyBodyBushingGeneric(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChLoadBodyBodyBushingGeneric(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyBodyBushingGeneric ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyBodyBushingGeneric(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChTriangleMeshConnected CastToChTriangleMeshConnected(ChGeometry in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChTriangleMeshConnected(ChGeometry.getCPtr(in_obj));
    ChTriangleMeshConnected ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMeshConnected(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChTriangleMeshSoup CastToChTriangleMeshSoup(ChGeometry in_obj) {
    global::System.IntPtr cPtr = corePINVOKE.CastToChTriangleMeshSoup(ChGeometry.getCPtr(in_obj));
    ChTriangleMeshSoup ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMeshSoup(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly string EIGEN_MATRIXBASE_PLUGIN = corePINVOKE.EIGEN_MATRIXBASE_PLUGIN_get();
  public static readonly string EIGEN_SPARSEMATRIX_PLUGIN = corePINVOKE.EIGEN_SPARSEMATRIX_PLUGIN_get();
}
