//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChFrameMovingD : ChFrameD {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChFrameMovingD(global::System.IntPtr cPtr, bool cMemoryOwn) : base(corePINVOKE.ChFrameMovingD_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChFrameMovingD obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          corePINVOKE.delete_ChFrameMovingD(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChCoordsysD coord_dt {
    set {
      corePINVOKE.ChFrameMovingD_coord_dt_set(swigCPtr, ChCoordsysD.getCPtr(value));
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = corePINVOKE.ChFrameMovingD_coord_dt_get(swigCPtr);
      ChCoordsysD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCoordsysD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChCoordsysD coord_dtdt {
    set {
      corePINVOKE.ChFrameMovingD_coord_dtdt_set(swigCPtr, ChCoordsysD.getCPtr(value));
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = corePINVOKE.ChFrameMovingD_coord_dtdt_get(swigCPtr);
      ChCoordsysD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCoordsysD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChFrameMovingD(ChVectorD mv, ChQuaternionD mq) : this(corePINVOKE.new_ChFrameMovingD__SWIG_0(ChVectorD.getCPtr(mv), ChQuaternionD.getCPtr(mq)), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFrameMovingD(ChVectorD mv) : this(corePINVOKE.new_ChFrameMovingD__SWIG_1(ChVectorD.getCPtr(mv)), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFrameMovingD() : this(corePINVOKE.new_ChFrameMovingD__SWIG_2(), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFrameMovingD(ChVectorD mv, ChMatrix33D ma) : this(corePINVOKE.new_ChFrameMovingD__SWIG_3(ChVectorD.getCPtr(mv), ChMatrix33D.getCPtr(ma)), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFrameMovingD(ChCoordsysD mc) : this(corePINVOKE.new_ChFrameMovingD__SWIG_4(ChCoordsysD.getCPtr(mc)), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFrameMovingD(ChFrameD mc) : this(corePINVOKE.new_ChFrameMovingD__SWIG_5(ChFrameD.getCPtr(mc)), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFrameMovingD(ChFrameMovingD other) : this(corePINVOKE.new_ChFrameMovingD__SWIG_6(ChFrameMovingD.getCPtr(other)), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChCoordsysD GetCoord_dt() {
    ChCoordsysD ret = new ChCoordsysD(corePINVOKE.ChFrameMovingD_GetCoord_dt__SWIG_0(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChCoordsysD GetCoord_dtdt() {
    ChCoordsysD ret = new ChCoordsysD(corePINVOKE.ChFrameMovingD_GetCoord_dtdt__SWIG_0(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetPos_dt() {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChFrameMovingD_GetPos_dt__SWIG_0(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetPos_dtdt() {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChFrameMovingD_GetPos_dtdt__SWIG_0(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaternionD GetRot_dt() {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.ChFrameMovingD_GetRot_dt__SWIG_0(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaternionD GetRot_dtdt() {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.ChFrameMovingD_GetRot_dtdt__SWIG_0(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetWvel_loc() {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChFrameMovingD_GetWvel_loc(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetWvel_par() {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChFrameMovingD_GetWvel_par(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetWacc_loc() {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChFrameMovingD_GetWacc_loc(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetWacc_par() {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChFrameMovingD_GetWacc_par(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetCoord_dt(ChCoordsysD mcoord_dt) {
    corePINVOKE.ChFrameMovingD_SetCoord_dt(swigCPtr, ChCoordsysD.getCPtr(mcoord_dt));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetPos_dt(ChVectorD mvel) {
    corePINVOKE.ChFrameMovingD_SetPos_dt(swigCPtr, ChVectorD.getCPtr(mvel));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetRot_dt(ChQuaternionD mrot_dt) {
    corePINVOKE.ChFrameMovingD_SetRot_dt(swigCPtr, ChQuaternionD.getCPtr(mrot_dt));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetWvel_loc(ChVectorD wl) {
    corePINVOKE.ChFrameMovingD_SetWvel_loc(swigCPtr, ChVectorD.getCPtr(wl));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetWvel_par(ChVectorD wp) {
    corePINVOKE.ChFrameMovingD_SetWvel_par(swigCPtr, ChVectorD.getCPtr(wp));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetCoord_dtdt(ChCoordsysD mcoord_dtdt) {
    corePINVOKE.ChFrameMovingD_SetCoord_dtdt(swigCPtr, ChCoordsysD.getCPtr(mcoord_dtdt));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetPos_dtdt(ChVectorD macc) {
    corePINVOKE.ChFrameMovingD_SetPos_dtdt(swigCPtr, ChVectorD.getCPtr(macc));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetRot_dtdt(ChQuaternionD mrot_dtdt) {
    corePINVOKE.ChFrameMovingD_SetRot_dtdt(swigCPtr, ChQuaternionD.getCPtr(mrot_dtdt));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetWacc_loc(ChVectorD al) {
    corePINVOKE.ChFrameMovingD_SetWacc_loc(swigCPtr, ChVectorD.getCPtr(al));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetWacc_par(ChVectorD ap) {
    corePINVOKE.ChFrameMovingD_SetWacc_par(swigCPtr, ChVectorD.getCPtr(ap));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Compute_Adt(ChMatrix33D mA_dt) {
    corePINVOKE.ChFrameMovingD_Compute_Adt(swigCPtr, ChMatrix33D.getCPtr(mA_dt));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Compute_Adtdt(ChMatrix33D mA_dtdt) {
    corePINVOKE.ChFrameMovingD_Compute_Adtdt(swigCPtr, ChMatrix33D.getCPtr(mA_dtdt));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMatrix33D GetA_dt() {
    ChMatrix33D ret = new ChMatrix33D(corePINVOKE.ChFrameMovingD_GetA_dt(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChMatrix33D GetA_dtdt() {
    ChMatrix33D ret = new ChMatrix33D(corePINVOKE.ChFrameMovingD_GetA_dtdt(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ConcatenatePreTransformation(ChFrameMovingD T) {
    corePINVOKE.ChFrameMovingD_ConcatenatePreTransformation(swigCPtr, ChFrameMovingD.getCPtr(T));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConcatenatePostTransformation(ChFrameMovingD T) {
    corePINVOKE.ChFrameMovingD_ConcatenatePostTransformation(swigCPtr, ChFrameMovingD.getCPtr(T));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVectorD PointSpeedLocalToParent(ChVectorD localpos) {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChFrameMovingD_PointSpeedLocalToParent__SWIG_0(swigCPtr, ChVectorD.getCPtr(localpos)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD PointSpeedLocalToParent(ChVectorD localpos, ChVectorD localspeed) {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChFrameMovingD_PointSpeedLocalToParent__SWIG_1(swigCPtr, ChVectorD.getCPtr(localpos), ChVectorD.getCPtr(localspeed)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD PointAccelerationLocalToParent(ChVectorD localpos) {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChFrameMovingD_PointAccelerationLocalToParent__SWIG_0(swigCPtr, ChVectorD.getCPtr(localpos)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD PointAccelerationLocalToParent(ChVectorD localpos, ChVectorD localspeed, ChVectorD localacc) {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChFrameMovingD_PointAccelerationLocalToParent__SWIG_1(swigCPtr, ChVectorD.getCPtr(localpos), ChVectorD.getCPtr(localspeed), ChVectorD.getCPtr(localacc)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD PointSpeedParentToLocal(ChVectorD parentpos, ChVectorD parentspeed) {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChFrameMovingD_PointSpeedParentToLocal(swigCPtr, ChVectorD.getCPtr(parentpos), ChVectorD.getCPtr(parentspeed)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD PointAccelerationParentToLocal(ChVectorD parentpos, ChVectorD parentspeed, ChVectorD parentacc) {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChFrameMovingD_PointAccelerationParentToLocal(swigCPtr, ChVectorD.getCPtr(parentpos), ChVectorD.getCPtr(parentspeed), ChVectorD.getCPtr(parentacc)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void TransformLocalToParent(ChFrameMovingD local, ChFrameMovingD parent) {
    corePINVOKE.ChFrameMovingD_TransformLocalToParent(swigCPtr, ChFrameMovingD.getCPtr(local), ChFrameMovingD.getCPtr(parent));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void TransformParentToLocal(ChFrameMovingD parent, ChFrameMovingD local) {
    corePINVOKE.ChFrameMovingD_TransformParentToLocal(swigCPtr, ChFrameMovingD.getCPtr(parent), ChFrameMovingD.getCPtr(local));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Equals(ChFrameMovingD other) {
    bool ret = corePINVOKE.ChFrameMovingD_Equals__SWIG_0(swigCPtr, ChFrameMovingD.getCPtr(other));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equals(ChFrameMovingD other, double tol) {
    bool ret = corePINVOKE.ChFrameMovingD_Equals__SWIG_1(swigCPtr, ChFrameMovingD.getCPtr(other), tol);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Invert() {
    corePINVOKE.ChFrameMovingD_Invert(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public new ChFrameMovingD GetInverse() {
    ChFrameMovingD ret = new ChFrameMovingD(corePINVOKE.ChFrameMovingD_GetInverse(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut marchive) {
    corePINVOKE.ChFrameMovingD_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn marchive) {
    corePINVOKE.ChFrameMovingD_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

}
