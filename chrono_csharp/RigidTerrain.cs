//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class RigidTerrain : ChTerrain {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal RigidTerrain(global::System.IntPtr cPtr, bool cMemoryOwn) : base(vehiclePINVOKE.RigidTerrain_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RigidTerrain obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          vehiclePINVOKE.delete_RigidTerrain(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public RigidTerrain(ChSystem system) : this(vehiclePINVOKE.new_RigidTerrain__SWIG_0(ChSystem.getCPtr(system)), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public RigidTerrain(ChSystem system, string filename) : this(vehiclePINVOKE.new_RigidTerrain__SWIG_1(ChSystem.getCPtr(system), filename), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public Patch AddPatch(ChMaterialSurface material, ChCoordsysD position, double length, double width, double thickness, bool tiled, double max_tile_size, bool visualization) {
    global::System.IntPtr cPtr = vehiclePINVOKE.RigidTerrain_AddPatch__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), ChCoordsysD.getCPtr(position), length, width, thickness, tiled, max_tile_size, visualization);
    Patch ret = (cPtr == global::System.IntPtr.Zero) ? null : new Patch(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Patch AddPatch(ChMaterialSurface material, ChCoordsysD position, double length, double width, double thickness, bool tiled, double max_tile_size) {
    global::System.IntPtr cPtr = vehiclePINVOKE.RigidTerrain_AddPatch__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), ChCoordsysD.getCPtr(position), length, width, thickness, tiled, max_tile_size);
    Patch ret = (cPtr == global::System.IntPtr.Zero) ? null : new Patch(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Patch AddPatch(ChMaterialSurface material, ChCoordsysD position, double length, double width, double thickness, bool tiled) {
    global::System.IntPtr cPtr = vehiclePINVOKE.RigidTerrain_AddPatch__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), ChCoordsysD.getCPtr(position), length, width, thickness, tiled);
    Patch ret = (cPtr == global::System.IntPtr.Zero) ? null : new Patch(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Patch AddPatch(ChMaterialSurface material, ChCoordsysD position, double length, double width, double thickness) {
    global::System.IntPtr cPtr = vehiclePINVOKE.RigidTerrain_AddPatch__SWIG_3(swigCPtr, ChMaterialSurface.getCPtr(material), ChCoordsysD.getCPtr(position), length, width, thickness);
    Patch ret = (cPtr == global::System.IntPtr.Zero) ? null : new Patch(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Patch AddPatch(ChMaterialSurface material, ChCoordsysD position, double length, double width) {
    global::System.IntPtr cPtr = vehiclePINVOKE.RigidTerrain_AddPatch__SWIG_4(swigCPtr, ChMaterialSurface.getCPtr(material), ChCoordsysD.getCPtr(position), length, width);
    Patch ret = (cPtr == global::System.IntPtr.Zero) ? null : new Patch(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Patch AddPatch(ChMaterialSurface material, ChCoordsysD position, string mesh_file, bool connected_mesh, double sweep_sphere_radius, bool visualization) {
    global::System.IntPtr cPtr = vehiclePINVOKE.RigidTerrain_AddPatch__SWIG_5(swigCPtr, ChMaterialSurface.getCPtr(material), ChCoordsysD.getCPtr(position), mesh_file, connected_mesh, sweep_sphere_radius, visualization);
    Patch ret = (cPtr == global::System.IntPtr.Zero) ? null : new Patch(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Patch AddPatch(ChMaterialSurface material, ChCoordsysD position, string mesh_file, bool connected_mesh, double sweep_sphere_radius) {
    global::System.IntPtr cPtr = vehiclePINVOKE.RigidTerrain_AddPatch__SWIG_6(swigCPtr, ChMaterialSurface.getCPtr(material), ChCoordsysD.getCPtr(position), mesh_file, connected_mesh, sweep_sphere_radius);
    Patch ret = (cPtr == global::System.IntPtr.Zero) ? null : new Patch(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Patch AddPatch(ChMaterialSurface material, ChCoordsysD position, string mesh_file, bool connected_mesh) {
    global::System.IntPtr cPtr = vehiclePINVOKE.RigidTerrain_AddPatch__SWIG_7(swigCPtr, ChMaterialSurface.getCPtr(material), ChCoordsysD.getCPtr(position), mesh_file, connected_mesh);
    Patch ret = (cPtr == global::System.IntPtr.Zero) ? null : new Patch(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Patch AddPatch(ChMaterialSurface material, ChCoordsysD position, string mesh_file) {
    global::System.IntPtr cPtr = vehiclePINVOKE.RigidTerrain_AddPatch__SWIG_8(swigCPtr, ChMaterialSurface.getCPtr(material), ChCoordsysD.getCPtr(position), mesh_file);
    Patch ret = (cPtr == global::System.IntPtr.Zero) ? null : new Patch(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Patch AddPatch(ChMaterialSurface material, ChCoordsysD position, string heightmap_file, double length, double width, double hMin, double hMax, bool connected_mesh, double sweep_sphere_radius, bool visualization) {
    global::System.IntPtr cPtr = vehiclePINVOKE.RigidTerrain_AddPatch__SWIG_9(swigCPtr, ChMaterialSurface.getCPtr(material), ChCoordsysD.getCPtr(position), heightmap_file, length, width, hMin, hMax, connected_mesh, sweep_sphere_radius, visualization);
    Patch ret = (cPtr == global::System.IntPtr.Zero) ? null : new Patch(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Patch AddPatch(ChMaterialSurface material, ChCoordsysD position, string heightmap_file, double length, double width, double hMin, double hMax, bool connected_mesh, double sweep_sphere_radius) {
    global::System.IntPtr cPtr = vehiclePINVOKE.RigidTerrain_AddPatch__SWIG_10(swigCPtr, ChMaterialSurface.getCPtr(material), ChCoordsysD.getCPtr(position), heightmap_file, length, width, hMin, hMax, connected_mesh, sweep_sphere_radius);
    Patch ret = (cPtr == global::System.IntPtr.Zero) ? null : new Patch(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Patch AddPatch(ChMaterialSurface material, ChCoordsysD position, string heightmap_file, double length, double width, double hMin, double hMax, bool connected_mesh) {
    global::System.IntPtr cPtr = vehiclePINVOKE.RigidTerrain_AddPatch__SWIG_11(swigCPtr, ChMaterialSurface.getCPtr(material), ChCoordsysD.getCPtr(position), heightmap_file, length, width, hMin, hMax, connected_mesh);
    Patch ret = (cPtr == global::System.IntPtr.Zero) ? null : new Patch(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Patch AddPatch(ChMaterialSurface material, ChCoordsysD position, string heightmap_file, double length, double width, double hMin, double hMax) {
    global::System.IntPtr cPtr = vehiclePINVOKE.RigidTerrain_AddPatch__SWIG_12(swigCPtr, ChMaterialSurface.getCPtr(material), ChCoordsysD.getCPtr(position), heightmap_file, length, width, hMin, hMax);
    Patch ret = (cPtr == global::System.IntPtr.Zero) ? null : new Patch(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Initialize() {
    vehiclePINVOKE.RigidTerrain_Initialize(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChPatchList GetPatches() {
    ChPatchList ret = new ChPatchList(vehiclePINVOKE.RigidTerrain_GetPatches(swigCPtr), false);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void UseLocationDependentFriction(bool val) {
    vehiclePINVOKE.RigidTerrain_UseLocationDependentFriction(swigCPtr, val);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override double GetHeight(ChVectorD loc) {
    double ret = vehiclePINVOKE.RigidTerrain_GetHeight(swigCPtr, ChVectorD.getCPtr(loc));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChVectorD GetNormal(ChVectorD loc) {
    ChVectorD ret = new ChVectorD(vehiclePINVOKE.RigidTerrain_GetNormal(swigCPtr, ChVectorD.getCPtr(loc)), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override float GetCoefficientFriction(ChVectorD loc) {
    float ret = vehiclePINVOKE.RigidTerrain_GetCoefficientFriction(swigCPtr, ChVectorD.getCPtr(loc));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void GetProperties(ChVectorD loc, SWIGTYPE_p_double height, ChVectorD normal, SWIGTYPE_p_float friction) {
    vehiclePINVOKE.RigidTerrain_GetProperties(swigCPtr, ChVectorD.getCPtr(loc), SWIGTYPE_p_double.getCPtr(height), ChVectorD.getCPtr(normal), SWIGTYPE_p_float.getCPtr(friction));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ExportMeshPovray(string out_dir, bool smoothed) {
    vehiclePINVOKE.RigidTerrain_ExportMeshPovray__SWIG_0(swigCPtr, out_dir, smoothed);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ExportMeshPovray(string out_dir) {
    vehiclePINVOKE.RigidTerrain_ExportMeshPovray__SWIG_1(swigCPtr, out_dir);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ExportMeshWavefront(string out_dir) {
    vehiclePINVOKE.RigidTerrain_ExportMeshWavefront(swigCPtr, out_dir);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool FindPoint(ChVectorD loc, SWIGTYPE_p_double height, ChVectorD normal, SWIGTYPE_p_float friction) {
    bool ret = vehiclePINVOKE.RigidTerrain_FindPoint(swigCPtr, ChVectorD.getCPtr(loc), SWIGTYPE_p_double.getCPtr(height), ChVectorD.getCPtr(normal), SWIGTYPE_p_float.getCPtr(friction));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetCollisionFamily(int family) {
    vehiclePINVOKE.RigidTerrain_SetCollisionFamily(swigCPtr, family);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public enum PatchType {
    BOX,
    MESH,
    HEIGHT_MAP
  }

}
