//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChSolverADMM : ChIterativeSolverVI {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChSolverADMM(global::System.IntPtr cPtr, bool cMemoryOwn) : base(corePINVOKE.ChSolverADMM_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChSolverADMM obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          corePINVOKE.delete_ChSolverADMM(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChSolverADMM() : this(corePINVOKE.new_ChSolverADMM__SWIG_0(), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChSolverADMM(ChDirectSolverLS my_LS_engine) : this(corePINVOKE.new_ChSolverADMM__SWIG_1(ChDirectSolverLS.getCPtr(my_LS_engine)), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChSolver.Type GetType() {
    ChSolver.Type ret = (ChSolver.Type)corePINVOKE.ChSolverADMM_GetType(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Solve(SWIGTYPE_p_ChSystemDescriptor sysd) {
    double ret = corePINVOKE.ChSolverADMM_Solve(swigCPtr, SWIGTYPE_p_ChSystemDescriptor.getCPtr(sysd));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDiagonalPreconditioner(bool mp) {
    corePINVOKE.ChSolverADMM_SetDiagonalPreconditioner(swigCPtr, mp);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetDiagonalPreconditioner() {
    bool ret = corePINVOKE.ChSolverADMM_GetDiagonalPreconditioner(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRho(double mr) {
    corePINVOKE.ChSolverADMM_SetRho(swigCPtr, mr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetRho() {
    double ret = corePINVOKE.ChSolverADMM_GetRho(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRhoBilaterals(double mr) {
    corePINVOKE.ChSolverADMM_SetRhoBilaterals(swigCPtr, mr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetRhoBilaterals() {
    double ret = corePINVOKE.ChSolverADMM_GetRhoBilaterals(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSigma(double mr) {
    corePINVOKE.ChSolverADMM_SetSigma(swigCPtr, mr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetSigma() {
    double ret = corePINVOKE.ChSolverADMM_GetSigma(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetStepAdjustEach(int mr) {
    corePINVOKE.ChSolverADMM_SetStepAdjustEach(swigCPtr, mr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetStepAdjustEach() {
    int ret = corePINVOKE.ChSolverADMM_GetStepAdjustEach(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetStepAdjustThreshold(double mr) {
    corePINVOKE.ChSolverADMM_SetStepAdjustThreshold(swigCPtr, mr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetStepAdjustThreshold() {
    double ret = corePINVOKE.ChSolverADMM_GetStepAdjustThreshold(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetStepAdjustMaxfactor(double mr) {
    corePINVOKE.ChSolverADMM_SetStepAdjustMaxfactor(swigCPtr, mr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetStepAdjustMaxfactor() {
    double ret = corePINVOKE.ChSolverADMM_GetStepAdjustMaxfactor(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetStepAdjustPolicy(ChSolverADMM.AdmmStepType mr) {
    corePINVOKE.ChSolverADMM_SetStepAdjustPolicy(swigCPtr, (int)mr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChSolverADMM.AdmmStepType GetStepAdjustPolicy() {
    ChSolverADMM.AdmmStepType ret = (ChSolverADMM.AdmmStepType)corePINVOKE.ChSolverADMM_GetStepAdjustPolicy(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetAcceleration(ChSolverADMM.AdmmAcceleration mr) {
    corePINVOKE.ChSolverADMM_SetAcceleration(swigCPtr, (int)mr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChSolverADMM.AdmmAcceleration GetAcceleration() {
    ChSolverADMM.AdmmAcceleration ret = (ChSolverADMM.AdmmAcceleration)corePINVOKE.ChSolverADMM_GetAcceleration(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTolerancePrimal(double mr) {
    corePINVOKE.ChSolverADMM_SetTolerancePrimal(swigCPtr, mr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetTolerancePrimal() {
    double ret = corePINVOKE.ChSolverADMM_GetTolerancePrimal(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetToleranceDual(double mr) {
    corePINVOKE.ChSolverADMM_SetToleranceDual(swigCPtr, mr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetToleranceDual() {
    double ret = corePINVOKE.ChSolverADMM_GetToleranceDual(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetErrorPrimal() {
    double ret = corePINVOKE.ChSolverADMM_GetErrorPrimal(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetErrorDual() {
    double ret = corePINVOKE.ChSolverADMM_GetErrorDual(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetError() {
    double ret = corePINVOKE.ChSolverADMM_GetError(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut marchive) {
    corePINVOKE.ChSolverADMM_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn marchive) {
    corePINVOKE.ChSolverADMM_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public enum AdmmStepType {
    NONE = 0,
    BALANCED_UNSCALED,
    BALANCED_FAST,
    BALANCED_RANGE
  }

  public enum AdmmAcceleration {
    BASIC = 0,
    NESTEROV
  }

}
