//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChSprocket : ChPart {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChSprocket(global::System.IntPtr cPtr, bool cMemoryOwn) : base(vehiclePINVOKE.ChSprocket_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChSprocket obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          vehiclePINVOKE.delete_ChSprocket(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual int GetNumTeeth() {
    int ret = vehiclePINVOKE.ChSprocket_GetNumTeeth(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetAssemblyRadius() {
    double ret = vehiclePINVOKE.ChSprocket_GetAssemblyRadius(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetAddendumRadius() {
    double ret = vehiclePINVOKE.ChSprocket_GetAddendumRadius(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBody GetGearBody() {
    global::System.IntPtr cPtr = vehiclePINVOKE.ChSprocket_GetGearBody(swigCPtr);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChShaft GetAxle() {
    global::System.IntPtr cPtr = vehiclePINVOKE.ChSprocket_GetAxle(swigCPtr);
    ChShaft ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaft(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLinkLockRevolute GetRevolute() {
    global::System.IntPtr cPtr = vehiclePINVOKE.ChSprocket_GetRevolute(swigCPtr);
    ChLinkLockRevolute ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockRevolute(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetAxleSpeed() {
    double ret = vehiclePINVOKE.ChSprocket_GetAxleSpeed(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetCollide(bool val) {
    vehiclePINVOKE.ChSprocket_SetCollide(swigCPtr, val);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMaterialSurface GetContactMaterial() {
    global::System.IntPtr cPtr = vehiclePINVOKE.ChSprocket_GetContactMaterial(swigCPtr);
    ChMaterialSurface ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void DisableLateralContact() {
    vehiclePINVOKE.ChSprocket_DisableLateralContact(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Initialize(ChChassis chassis, ChVectorD location, ChTrackAssembly track) {
    vehiclePINVOKE.ChSprocket_Initialize(swigCPtr, ChChassis.getCPtr(chassis), ChVectorD.getCPtr(location), ChTrackAssembly.getCPtr(track));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ApplyAxleTorque(double torque) {
    vehiclePINVOKE.ChSprocket_ApplyAxleTorque(swigCPtr, torque);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__shared_ptrT_geometry__ChTriangleMeshConnected_t CreateVisualizationMesh(double radius, double width, double delta, ChColor color) {
    SWIGTYPE_p_std__shared_ptrT_geometry__ChTriangleMeshConnected_t ret = new SWIGTYPE_p_std__shared_ptrT_geometry__ChTriangleMeshConnected_t(vehiclePINVOKE.ChSprocket_CreateVisualizationMesh__SWIG_0(swigCPtr, radius, width, delta, ChColor.getCPtr(color)), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_geometry__ChTriangleMeshConnected_t CreateVisualizationMesh(double radius, double width, double delta) {
    SWIGTYPE_p_std__shared_ptrT_geometry__ChTriangleMeshConnected_t ret = new SWIGTYPE_p_std__shared_ptrT_geometry__ChTriangleMeshConnected_t(vehiclePINVOKE.ChSprocket_CreateVisualizationMesh__SWIG_1(swigCPtr, radius, width, delta), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void AddVisualizationAssets(VisualizationType vis) {
    vehiclePINVOKE.ChSprocket_AddVisualizationAssets(swigCPtr, (int)vis);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void RemoveVisualizationAssets() {
    vehiclePINVOKE.ChSprocket_RemoveVisualizationAssets(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void LogConstraintViolations() {
    vehiclePINVOKE.ChSprocket_LogConstraintViolations(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
