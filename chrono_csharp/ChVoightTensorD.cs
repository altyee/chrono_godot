//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChVoightTensorD : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChVoightTensorD(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChVoightTensorD obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChVoightTensorD() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          corePINVOKE.delete_ChVoightTensorD(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChVoightTensorD() : this(corePINVOKE.new_ChVoightTensorD(), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetVolumetricPart() {
    double ret = corePINVOKE.ChVoightTensorD_GetVolumetricPart(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetDeviatoricPart(ChVoightTensorD mdeviatoric) {
    corePINVOKE.ChVoightTensorD_GetDeviatoricPart(swigCPtr, ChVoightTensorD.getCPtr(mdeviatoric));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetInvariant_I1() {
    double ret = corePINVOKE.ChVoightTensorD_GetInvariant_I1(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetInvariant_I2() {
    double ret = corePINVOKE.ChVoightTensorD_GetInvariant_I2(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetInvariant_I3() {
    double ret = corePINVOKE.ChVoightTensorD_GetInvariant_I3(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetInvariant_J1() {
    double ret = corePINVOKE.ChVoightTensorD_GetInvariant_J1(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetInvariant_J2() {
    double ret = corePINVOKE.ChVoightTensorD_GetInvariant_J2(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetInvariant_J3() {
    double ret = corePINVOKE.ChVoightTensorD_GetInvariant_J3(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Rotate(SWIGTYPE_p_ChMatrix33T_double_t Rot) {
    corePINVOKE.ChVoightTensorD_Rotate(swigCPtr, SWIGTYPE_p_ChMatrix33T_double_t.getCPtr(Rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ComputeEigenvalues(SWIGTYPE_p_double e1, SWIGTYPE_p_double e2, SWIGTYPE_p_double e3) {
    corePINVOKE.ChVoightTensorD_ComputeEigenvalues(swigCPtr, SWIGTYPE_p_double.getCPtr(e1), SWIGTYPE_p_double.getCPtr(e2), SWIGTYPE_p_double.getCPtr(e3));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ComputeEigenvectors(SWIGTYPE_p_double eigval1, SWIGTYPE_p_double eigval2, SWIGTYPE_p_double eigval3, ChVectorD eigvector1, ChVectorD eigvector2, ChVectorD eigvector3) {
    corePINVOKE.ChVoightTensorD_ComputeEigenvectors(swigCPtr, SWIGTYPE_p_double.getCPtr(eigval1), SWIGTYPE_p_double.getCPtr(eigval2), SWIGTYPE_p_double.getCPtr(eigval3), ChVectorD.getCPtr(eigvector1), ChVectorD.getCPtr(eigvector2), ChVectorD.getCPtr(eigvector3));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetEquivalentVonMises() {
    double ret = corePINVOKE.ChVoightTensorD_GetEquivalentVonMises(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetEquivalentMeanHydrostatic() {
    double ret = corePINVOKE.ChVoightTensorD_GetEquivalentMeanHydrostatic(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetEquivalentOctahedralNormal() {
    double ret = corePINVOKE.ChVoightTensorD_GetEquivalentOctahedralNormal(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetEquivalentOctahedralDeviatoric() {
    double ret = corePINVOKE.ChVoightTensorD_GetEquivalentOctahedralDeviatoric(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double XX() {
    double ret = corePINVOKE.ChVoightTensorD_XX(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double YY() {
    double ret = corePINVOKE.ChVoightTensorD_YY(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double ZZ() {
    double ret = corePINVOKE.ChVoightTensorD_ZZ(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double XY() {
    double ret = corePINVOKE.ChVoightTensorD_XY(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double XZ() {
    double ret = corePINVOKE.ChVoightTensorD_XZ(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double YZ() {
    double ret = corePINVOKE.ChVoightTensorD_YZ(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
