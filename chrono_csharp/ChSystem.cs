//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChSystem : ChIntegrableIIorder {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChSystem(global::System.IntPtr cPtr, bool cMemoryOwn) : base(corePINVOKE.ChSystem_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChSystem obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          corePINVOKE.delete_ChSystem(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual ChSystem Clone() {
    global::System.IntPtr cPtr = corePINVOKE.ChSystem_Clone(swigCPtr);
    ChSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSystem(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetStep(double m_step) {
    corePINVOKE.ChSystem_SetStep(swigCPtr, m_step);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetStep() {
    double ret = corePINVOKE.ChSystem_GetStep(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTimestepperType(ChTimestepper.Type type) {
    corePINVOKE.ChSystem_SetTimestepperType(swigCPtr, (int)type);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChTimestepper.Type GetTimestepperType() {
    ChTimestepper.Type ret = (ChTimestepper.Type)corePINVOKE.ChSystem_GetTimestepperType(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTimestepper(ChTimestepper mstepper) {
    corePINVOKE.ChSystem_SetTimestepper(swigCPtr, ChTimestepper.getCPtr(mstepper));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChTimestepper GetTimestepper() {
    global::System.IntPtr cPtr = corePINVOKE.ChSystem_GetTimestepper(swigCPtr);
    ChTimestepper ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTimestepper(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMaxiter(int m_maxiter) {
    corePINVOKE.ChSystem_SetMaxiter(swigCPtr, m_maxiter);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetMaxiter() {
    int ret = corePINVOKE.ChSystem_GetMaxiter(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetMaterialCompositionStrategy(SWIGTYPE_p_std__unique_ptrT_chrono__ChMaterialCompositionStrategy_t strategy) {
    corePINVOKE.ChSystem_SetMaterialCompositionStrategy(swigCPtr, SWIGTYPE_p_std__unique_ptrT_chrono__ChMaterialCompositionStrategy_t.getCPtr(strategy));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMaterialCompositionStrategy GetMaterialCompositionStrategy() {
    ChMaterialCompositionStrategy ret = new ChMaterialCompositionStrategy(corePINVOKE.ChSystem_GetMaterialCompositionStrategy(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMinBounceSpeed(double mval) {
    corePINVOKE.ChSystem_SetMinBounceSpeed(swigCPtr, mval);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetMinBounceSpeed() {
    double ret = corePINVOKE.ChSystem_GetMinBounceSpeed(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMaxPenetrationRecoverySpeed(double mval) {
    corePINVOKE.ChSystem_SetMaxPenetrationRecoverySpeed(swigCPtr, mval);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetMaxPenetrationRecoverySpeed() {
    double ret = corePINVOKE.ChSystem_GetMaxPenetrationRecoverySpeed(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetSolver(ChSolver newsolver) {
    corePINVOKE.ChSystem_SetSolver__SWIG_0(swigCPtr, ChSolver.getCPtr(newsolver));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ChSolver GetSolver() {
    global::System.IntPtr cPtr = corePINVOKE.ChSystem_GetSolver(swigCPtr);
    ChSolver ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSolver(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSolverType(ChSolver.Type type) {
    corePINVOKE.ChSystem_SetSolverType(swigCPtr, (int)type);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChSolver.Type GetSolverType() {
    ChSolver.Type ret = (ChSolver.Type)corePINVOKE.ChSystem_GetSolverType(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSolverMaxIterations(int max_iters) {
    corePINVOKE.ChSystem_SetSolverMaxIterations(swigCPtr, max_iters);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetSolverMaxIterations() {
    int ret = corePINVOKE.ChSystem_GetSolverMaxIterations(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSolverTolerance(double tolerance) {
    corePINVOKE.ChSystem_SetSolverTolerance(swigCPtr, tolerance);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetSolverTolerance() {
    double ret = corePINVOKE.ChSystem_GetSolverTolerance(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSolverForceTolerance(double tolerance) {
    corePINVOKE.ChSystem_SetSolverForceTolerance(swigCPtr, tolerance);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetSolverForceTolerance() {
    double ret = corePINVOKE.ChSystem_GetSolverForceTolerance(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSystemDescriptor(SWIGTYPE_p_std__shared_ptrT_ChSystemDescriptor_t newdescriptor) {
    corePINVOKE.ChSystem_SetSystemDescriptor(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChSystemDescriptor_t.getCPtr(newdescriptor));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__shared_ptrT_ChSystemDescriptor_t GetSystemDescriptor() {
    SWIGTYPE_p_std__shared_ptrT_ChSystemDescriptor_t ret = new SWIGTYPE_p_std__shared_ptrT_ChSystemDescriptor_t(corePINVOKE.ChSystem_GetSystemDescriptor(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Set_G_acc(ChVectorD m_acc) {
    corePINVOKE.ChSystem_Set_G_acc(swigCPtr, ChVectorD.getCPtr(m_acc));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVectorD Get_G_acc() {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChSystem_Get_G_acc(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetChTime() {
    double ret = corePINVOKE.ChSystem_GetChTime(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetChTime(double time) {
    corePINVOKE.ChSystem_SetChTime(swigCPtr, time);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public int RemoveRedundantConstraints(bool remove_zero_constr, double qr_tol, bool verbose) {
    int ret = corePINVOKE.ChSystem_RemoveRedundantConstraints__SWIG_0(swigCPtr, remove_zero_constr, qr_tol, verbose);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int RemoveRedundantConstraints(bool remove_zero_constr, double qr_tol) {
    int ret = corePINVOKE.ChSystem_RemoveRedundantConstraints__SWIG_1(swigCPtr, remove_zero_constr, qr_tol);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int RemoveRedundantConstraints(bool remove_zero_constr) {
    int ret = corePINVOKE.ChSystem_RemoveRedundantConstraints__SWIG_2(swigCPtr, remove_zero_constr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int RemoveRedundantConstraints() {
    int ret = corePINVOKE.ChSystem_RemoveRedundantConstraints__SWIG_3(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetNumThreads(int num_threads_chrono, int num_threads_collision, int num_threads_eigen) {
    corePINVOKE.ChSystem_SetNumThreads__SWIG_0(swigCPtr, num_threads_chrono, num_threads_collision, num_threads_eigen);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetNumThreads(int num_threads_chrono, int num_threads_collision) {
    corePINVOKE.ChSystem_SetNumThreads__SWIG_1(swigCPtr, num_threads_chrono, num_threads_collision);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetNumThreads(int num_threads_chrono) {
    corePINVOKE.ChSystem_SetNumThreads__SWIG_2(swigCPtr, num_threads_chrono);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetNumThreadsChrono() {
    int ret = corePINVOKE.ChSystem_GetNumThreadsChrono(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNumthreadsCollision() {
    int ret = corePINVOKE.ChSystem_GetNumthreadsCollision(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNumthreadsEigen() {
    int ret = corePINVOKE.ChSystem_GetNumthreadsEigen(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChAssembly GetAssembly() {
    ChAssembly ret = new ChAssembly(corePINVOKE.ChSystem_GetAssembly(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void AddBody(ChBody body) {
    corePINVOKE.ChSystem_AddBody(swigCPtr, ChBody.getCPtr(body));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AddShaft(SWIGTYPE_p_std__shared_ptrT_ChShaft_t shaft) {
    corePINVOKE.ChSystem_AddShaft(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChShaft_t.getCPtr(shaft));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AddLink(ChLinkBase link) {
    corePINVOKE.ChSystem_AddLink(swigCPtr, ChLinkBase.getCPtr(link));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AddMesh(SWIGTYPE_p_std__shared_ptrT_chrono__fea__ChMesh_t mesh) {
    corePINVOKE.ChSystem_AddMesh(swigCPtr, SWIGTYPE_p_std__shared_ptrT_chrono__fea__ChMesh_t.getCPtr(mesh));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AddOtherPhysicsItem(ChPhysicsItem item) {
    corePINVOKE.ChSystem_AddOtherPhysicsItem(swigCPtr, ChPhysicsItem.getCPtr(item));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Add(ChPhysicsItem item) {
    corePINVOKE.ChSystem_Add(swigCPtr, ChPhysicsItem.getCPtr(item));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddBatch(ChPhysicsItem item) {
    corePINVOKE.ChSystem_AddBatch(swigCPtr, ChPhysicsItem.getCPtr(item));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FlushBatch() {
    corePINVOKE.ChSystem_FlushBatch(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveBody(ChBody body) {
    corePINVOKE.ChSystem_RemoveBody(swigCPtr, ChBody.getCPtr(body));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveShaft(SWIGTYPE_p_std__shared_ptrT_ChShaft_t shaft) {
    corePINVOKE.ChSystem_RemoveShaft(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChShaft_t.getCPtr(shaft));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveLink(ChLinkBase link) {
    corePINVOKE.ChSystem_RemoveLink(swigCPtr, ChLinkBase.getCPtr(link));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveMesh(SWIGTYPE_p_std__shared_ptrT_chrono__fea__ChMesh_t mesh) {
    corePINVOKE.ChSystem_RemoveMesh(swigCPtr, SWIGTYPE_p_std__shared_ptrT_chrono__fea__ChMesh_t.getCPtr(mesh));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveOtherPhysicsItem(ChPhysicsItem item) {
    corePINVOKE.ChSystem_RemoveOtherPhysicsItem(swigCPtr, ChPhysicsItem.getCPtr(item));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Remove(ChPhysicsItem item) {
    corePINVOKE.ChSystem_Remove(swigCPtr, ChPhysicsItem.getCPtr(item));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllBodies() {
    corePINVOKE.ChSystem_RemoveAllBodies(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllShafts() {
    corePINVOKE.ChSystem_RemoveAllShafts(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllLinks() {
    corePINVOKE.ChSystem_RemoveAllLinks(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllMeshes() {
    corePINVOKE.ChSystem_RemoveAllMeshes(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllOtherPhysicsItems() {
    corePINVOKE.ChSystem_RemoveAllOtherPhysicsItems(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public vector_ChBody Get_bodylist() {
    vector_ChBody ret = new vector_ChBody(corePINVOKE.ChSystem_Get_bodylist(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChShaft_t_t Get_shaftlist() {
    SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChShaft_t_t ret = new SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChShaft_t_t(corePINVOKE.ChSystem_Get_shaftlist(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_ChLinkBase Get_linklist() {
    vector_ChLinkBase ret = new vector_ChLinkBase(corePINVOKE.ChSystem_Get_linklist(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_ChMesh Get_meshlist() {
    vector_ChMesh ret = new vector_ChMesh(corePINVOKE.ChSystem_Get_meshlist(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_ChPhysicsItem Get_otherphysicslist() {
    vector_ChPhysicsItem ret = new vector_ChPhysicsItem(corePINVOKE.ChSystem_Get_otherphysicslist(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBody SearchBody(string name) {
    global::System.IntPtr cPtr = corePINVOKE.ChSystem_SearchBody(swigCPtr, name);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBody SearchBodyID(int id) {
    global::System.IntPtr cPtr = corePINVOKE.ChSystem_SearchBodyID(swigCPtr, id);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_ChShaft_t SearchShaft(string name) {
    SWIGTYPE_p_std__shared_ptrT_ChShaft_t ret = new SWIGTYPE_p_std__shared_ptrT_ChShaft_t(corePINVOKE.ChSystem_SearchShaft(swigCPtr, name), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLinkBase SearchLink(string name) {
    global::System.IntPtr cPtr = corePINVOKE.ChSystem_SearchLink(swigCPtr, name);
    ChLinkBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkBase(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_chrono__fea__ChMesh_t SearchMesh(string name) {
    SWIGTYPE_p_std__shared_ptrT_chrono__fea__ChMesh_t ret = new SWIGTYPE_p_std__shared_ptrT_chrono__fea__ChMesh_t(corePINVOKE.ChSystem_SearchMesh(swigCPtr, name), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChPhysicsItem SearchOtherPhysicsItem(string name) {
    global::System.IntPtr cPtr = corePINVOKE.ChSystem_SearchOtherPhysicsItem(swigCPtr, name);
    ChPhysicsItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPhysicsItem(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChMarker SearchMarker(string name) {
    global::System.IntPtr cPtr = corePINVOKE.ChSystem_SearchMarker__SWIG_0(swigCPtr, name);
    ChMarker ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMarker(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChMarker SearchMarker(int id) {
    global::System.IntPtr cPtr = corePINVOKE.ChSystem_SearchMarker__SWIG_1(swigCPtr, id);
    ChMarker ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMarker(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChPhysicsItem Search(string name) {
    global::System.IntPtr cPtr = corePINVOKE.ChSystem_Search(swigCPtr, name);
    ChPhysicsItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPhysicsItem(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNbodies() {
    int ret = corePINVOKE.ChSystem_GetNbodies(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNbodiesSleeping() {
    int ret = corePINVOKE.ChSystem_GetNbodiesSleeping(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNbodiesFixed() {
    int ret = corePINVOKE.ChSystem_GetNbodiesFixed(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNbodiesTotal() {
    int ret = corePINVOKE.ChSystem_GetNbodiesTotal(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNshafts() {
    int ret = corePINVOKE.ChSystem_GetNshafts(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNshaftsSleeping() {
    int ret = corePINVOKE.ChSystem_GetNshaftsSleeping(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNshaftsFixed() {
    int ret = corePINVOKE.ChSystem_GetNshaftsFixed(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNshaftsTotal() {
    int ret = corePINVOKE.ChSystem_GetNshaftsTotal(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNlinks() {
    int ret = corePINVOKE.ChSystem_GetNlinks(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNmeshes() {
    int ret = corePINVOKE.ChSystem_GetNmeshes(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNphysicsItems() {
    int ret = corePINVOKE.ChSystem_GetNphysicsItems(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNcoords() {
    int ret = corePINVOKE.ChSystem_GetNcoords(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNdof() {
    int ret = corePINVOKE.ChSystem_GetNdof(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNdoc() {
    int ret = corePINVOKE.ChSystem_GetNdoc(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNsysvars() {
    int ret = corePINVOKE.ChSystem_GetNsysvars(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNcoords_w() {
    int ret = corePINVOKE.ChSystem_GetNcoords_w(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNdoc_w() {
    int ret = corePINVOKE.ChSystem_GetNdoc_w(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNdoc_w_C() {
    int ret = corePINVOKE.ChSystem_GetNdoc_w_C(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNdoc_w_D() {
    int ret = corePINVOKE.ChSystem_GetNdoc_w_D(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNsysvars_w() {
    int ret = corePINVOKE.ChSystem_GetNsysvars_w(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetDOF() {
    int ret = corePINVOKE.ChSystem_GetDOF(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetDOF_w() {
    int ret = corePINVOKE.ChSystem_GetDOF_w(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetDOC() {
    int ret = corePINVOKE.ChSystem_GetDOC(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetDOC_c() {
    int ret = corePINVOKE.ChSystem_GetDOC_c(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetDOC_d() {
    int ret = corePINVOKE.ChSystem_GetDOC_d(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ShowHierarchy(ChStreamOutAscii m_file, int level) {
    corePINVOKE.ChSystem_ShowHierarchy__SWIG_0(swigCPtr, ChStreamOutAscii.getCPtr(m_file), level);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ShowHierarchy(ChStreamOutAscii m_file) {
    corePINVOKE.ChSystem_ShowHierarchy__SWIG_1(swigCPtr, ChStreamOutAscii.getCPtr(m_file));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Clear() {
    corePINVOKE.ChSystem_Clear(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ChContactMethod GetContactMethod() {
    ChContactMethod ret = (ChContactMethod)corePINVOKE.ChSystem_GetContactMethod(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChBody NewBody() {
    global::System.IntPtr cPtr = corePINVOKE.ChSystem_NewBody(swigCPtr);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChBodyAuxRef NewBodyAuxRef() {
    global::System.IntPtr cPtr = corePINVOKE.ChSystem_NewBodyAuxRef(swigCPtr);
    ChBodyAuxRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyAuxRef(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNcontacts() {
    int ret = corePINVOKE.ChSystem_GetNcontacts(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTimerStep() {
    double ret = corePINVOKE.ChSystem_GetTimerStep(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTimerAdvance() {
    double ret = corePINVOKE.ChSystem_GetTimerAdvance(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTimerLSsolve() {
    double ret = corePINVOKE.ChSystem_GetTimerLSsolve(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTimerLSsetup() {
    double ret = corePINVOKE.ChSystem_GetTimerLSsetup(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTimerJacobian() {
    double ret = corePINVOKE.ChSystem_GetTimerJacobian(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTimerCollision() {
    double ret = corePINVOKE.ChSystem_GetTimerCollision(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTimerSetup() {
    double ret = corePINVOKE.ChSystem_GetTimerSetup(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTimerUpdate() {
    double ret = corePINVOKE.ChSystem_GetTimerUpdate(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTimerCollisionBroad() {
    double ret = corePINVOKE.ChSystem_GetTimerCollisionBroad(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTimerCollisionNarrow() {
    double ret = corePINVOKE.ChSystem_GetTimerCollisionNarrow(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetRTF() {
    double ret = corePINVOKE.ChSystem_GetRTF(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRTF(double rtf) {
    corePINVOKE.ChSystem_SetRTF(swigCPtr, rtf);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ResetTimers() {
    corePINVOKE.ChSystem_ResetTimers(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Setup() {
    corePINVOKE.ChSystem_Setup(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Update(double mytime, bool update_assets) {
    corePINVOKE.ChSystem_Update__SWIG_0(swigCPtr, mytime, update_assets);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Update(double mytime) {
    corePINVOKE.ChSystem_Update__SWIG_1(swigCPtr, mytime);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Update(bool update_assets) {
    corePINVOKE.ChSystem_Update__SWIG_2(swigCPtr, update_assets);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Update() {
    corePINVOKE.ChSystem_Update__SWIG_3(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ForceUpdate() {
    corePINVOKE.ChSystem_ForceUpdate(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void IntToDescriptor(uint off_v, ChStateDelta v, ChVectorDynamicD R, uint off_L, ChVectorDynamicD L, ChVectorDynamicD Qc) {
    corePINVOKE.ChSystem_IntToDescriptor(swigCPtr, off_v, ChStateDelta.getCPtr(v), ChVectorDynamicD.getCPtr(R), off_L, ChVectorDynamicD.getCPtr(L), ChVectorDynamicD.getCPtr(Qc));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void IntFromDescriptor(uint off_v, ChStateDelta v, uint off_L, ChVectorDynamicD L) {
    corePINVOKE.ChSystem_IntFromDescriptor(swigCPtr, off_v, ChStateDelta.getCPtr(v), off_L, ChVectorDynamicD.getCPtr(L));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void InjectVariables(SWIGTYPE_p_ChSystemDescriptor mdescriptor) {
    corePINVOKE.ChSystem_InjectVariables(swigCPtr, SWIGTYPE_p_ChSystemDescriptor.getCPtr(mdescriptor));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void InjectConstraints(SWIGTYPE_p_ChSystemDescriptor mdescriptor) {
    corePINVOKE.ChSystem_InjectConstraints(swigCPtr, SWIGTYPE_p_ChSystemDescriptor.getCPtr(mdescriptor));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsLoadJacobians() {
    corePINVOKE.ChSystem_ConstraintsLoadJacobians(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void InjectKRMmatrices(SWIGTYPE_p_ChSystemDescriptor mdescriptor) {
    corePINVOKE.ChSystem_InjectKRMmatrices(swigCPtr, SWIGTYPE_p_ChSystemDescriptor.getCPtr(mdescriptor));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void KRMmatricesLoad(double Kfactor, double Rfactor, double Mfactor) {
    corePINVOKE.ChSystem_KRMmatricesLoad(swigCPtr, Kfactor, Rfactor, Mfactor);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void VariablesFbReset() {
    corePINVOKE.ChSystem_VariablesFbReset(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void VariablesFbLoadForces(double factor) {
    corePINVOKE.ChSystem_VariablesFbLoadForces__SWIG_0(swigCPtr, factor);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void VariablesFbLoadForces() {
    corePINVOKE.ChSystem_VariablesFbLoadForces__SWIG_1(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void VariablesQbLoadSpeed() {
    corePINVOKE.ChSystem_VariablesQbLoadSpeed(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void VariablesFbIncrementMq() {
    corePINVOKE.ChSystem_VariablesFbIncrementMq(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void VariablesQbSetSpeed(double step) {
    corePINVOKE.ChSystem_VariablesQbSetSpeed__SWIG_0(swigCPtr, step);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void VariablesQbSetSpeed() {
    corePINVOKE.ChSystem_VariablesQbSetSpeed__SWIG_1(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void VariablesQbIncrementPosition(double step) {
    corePINVOKE.ChSystem_VariablesQbIncrementPosition(swigCPtr, step);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsBiReset() {
    corePINVOKE.ChSystem_ConstraintsBiReset(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsBiLoad_C(double factor, double recovery_clamp, bool do_clamp) {
    corePINVOKE.ChSystem_ConstraintsBiLoad_C__SWIG_0(swigCPtr, factor, recovery_clamp, do_clamp);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsBiLoad_C(double factor, double recovery_clamp) {
    corePINVOKE.ChSystem_ConstraintsBiLoad_C__SWIG_1(swigCPtr, factor, recovery_clamp);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsBiLoad_C(double factor) {
    corePINVOKE.ChSystem_ConstraintsBiLoad_C__SWIG_2(swigCPtr, factor);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsBiLoad_C() {
    corePINVOKE.ChSystem_ConstraintsBiLoad_C__SWIG_3(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsBiLoad_Ct(double factor) {
    corePINVOKE.ChSystem_ConstraintsBiLoad_Ct__SWIG_0(swigCPtr, factor);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsBiLoad_Ct() {
    corePINVOKE.ChSystem_ConstraintsBiLoad_Ct__SWIG_1(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsBiLoad_Qc(double factor) {
    corePINVOKE.ChSystem_ConstraintsBiLoad_Qc__SWIG_0(swigCPtr, factor);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsBiLoad_Qc() {
    corePINVOKE.ChSystem_ConstraintsBiLoad_Qc__SWIG_1(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsFbLoadForces(double factor) {
    corePINVOKE.ChSystem_ConstraintsFbLoadForces__SWIG_0(swigCPtr, factor);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsFbLoadForces() {
    corePINVOKE.ChSystem_ConstraintsFbLoadForces__SWIG_1(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsFetch_react(double factor) {
    corePINVOKE.ChSystem_ConstraintsFetch_react__SWIG_0(swigCPtr, factor);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsFetch_react() {
    corePINVOKE.ChSystem_ConstraintsFetch_react__SWIG_1(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override int GetNcoords_x() {
    int ret = corePINVOKE.ChSystem_GetNcoords_x(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int GetNcoords_v() {
    int ret = corePINVOKE.ChSystem_GetNcoords_v(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int GetNconstr() {
    int ret = corePINVOKE.ChSystem_GetNconstr(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void StateGather(ChState x, ChStateDelta v, SWIGTYPE_p_double T) {
    corePINVOKE.ChSystem_StateGather(swigCPtr, ChState.getCPtr(x), ChStateDelta.getCPtr(v), SWIGTYPE_p_double.getCPtr(T));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void StateScatter(ChState x, ChStateDelta v, double T, bool full_update) {
    corePINVOKE.ChSystem_StateScatter(swigCPtr, ChState.getCPtr(x), ChStateDelta.getCPtr(v), T, full_update);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void StateGatherAcceleration(ChStateDelta a) {
    corePINVOKE.ChSystem_StateGatherAcceleration(swigCPtr, ChStateDelta.getCPtr(a));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void StateScatterAcceleration(ChStateDelta a) {
    corePINVOKE.ChSystem_StateScatterAcceleration(swigCPtr, ChStateDelta.getCPtr(a));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void StateGatherReactions(ChVectorDynamicD L) {
    corePINVOKE.ChSystem_StateGatherReactions(swigCPtr, ChVectorDynamicD.getCPtr(L));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void StateScatterReactions(ChVectorDynamicD L) {
    corePINVOKE.ChSystem_StateScatterReactions(swigCPtr, ChVectorDynamicD.getCPtr(L));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void StateIncrementX(ChState x_new, ChState x, ChStateDelta Dx) {
    corePINVOKE.ChSystem_StateIncrementX(swigCPtr, ChState.getCPtr(x_new), ChState.getCPtr(x), ChStateDelta.getCPtr(Dx));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool StateSolveCorrection(ChStateDelta Dv, ChVectorDynamicD L, ChVectorDynamicD R, ChVectorDynamicD Qc, double c_a, double c_v, double c_x, ChState x, ChStateDelta v, double T, bool force_state_scatter, bool full_update, bool force_setup) {
    bool ret = corePINVOKE.ChSystem_StateSolveCorrection(swigCPtr, ChStateDelta.getCPtr(Dv), ChVectorDynamicD.getCPtr(L), ChVectorDynamicD.getCPtr(R), ChVectorDynamicD.getCPtr(Qc), c_a, c_v, c_x, ChState.getCPtr(x), ChStateDelta.getCPtr(v), T, force_state_scatter, full_update, force_setup);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void LoadResidual_F(ChVectorDynamicD R, double c) {
    corePINVOKE.ChSystem_LoadResidual_F(swigCPtr, ChVectorDynamicD.getCPtr(R), c);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadResidual_Mv(ChVectorDynamicD R, ChVectorDynamicD w, double c) {
    corePINVOKE.ChSystem_LoadResidual_Mv(swigCPtr, ChVectorDynamicD.getCPtr(R), ChVectorDynamicD.getCPtr(w), c);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadResidual_CqL(ChVectorDynamicD R, ChVectorDynamicD L, double c) {
    corePINVOKE.ChSystem_LoadResidual_CqL(swigCPtr, ChVectorDynamicD.getCPtr(R), ChVectorDynamicD.getCPtr(L), c);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadConstraint_C(ChVectorDynamicD Qc, double c, bool do_clamp, double clamp) {
    corePINVOKE.ChSystem_LoadConstraint_C__SWIG_0(swigCPtr, ChVectorDynamicD.getCPtr(Qc), c, do_clamp, clamp);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadConstraint_C(ChVectorDynamicD Qc, double c, bool do_clamp) {
    corePINVOKE.ChSystem_LoadConstraint_C__SWIG_1(swigCPtr, ChVectorDynamicD.getCPtr(Qc), c, do_clamp);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadConstraint_C(ChVectorDynamicD Qc, double c) {
    corePINVOKE.ChSystem_LoadConstraint_C__SWIG_2(swigCPtr, ChVectorDynamicD.getCPtr(Qc), c);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadConstraint_Ct(ChVectorDynamicD Qc, double c) {
    corePINVOKE.ChSystem_LoadConstraint_Ct(swigCPtr, ChVectorDynamicD.getCPtr(Qc), c);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void CustomEndOfStep() {
    corePINVOKE.ChSystem_CustomEndOfStep(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double ComputeCollisions() {
    double ret = corePINVOKE.ChSystem_ComputeCollisions(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void RegisterCustomCollisionCallback(CustomCollisionCallback callback) {
    corePINVOKE.ChSystem_RegisterCustomCollisionCallback(swigCPtr, CustomCollisionCallback.getCPtr(callback));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void UnregisterCustomCollisionCallback(CustomCollisionCallback callback) {
    corePINVOKE.ChSystem_UnregisterCustomCollisionCallback(swigCPtr, CustomCollisionCallback.getCPtr(callback));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetCollisionSystemType(ChCollisionSystemType type) {
    corePINVOKE.ChSystem_SetCollisionSystemType(swigCPtr, (int)type);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetCollisionSystem(ChCollisionSystem coll_sys) {
    corePINVOKE.ChSystem_SetCollisionSystem(swigCPtr, ChCollisionSystem.getCPtr(coll_sys));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChCollisionSystem GetCollisionSystem() {
    global::System.IntPtr cPtr = corePINVOKE.ChSystem_GetCollisionSystem(swigCPtr);
    ChCollisionSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionSystem(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetContactContainer(ChCollisionSystemType type) {
    corePINVOKE.ChSystem_SetContactContainer__SWIG_0(swigCPtr, (int)type);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetContactContainer(ChContactContainer contactcontainer) {
    corePINVOKE.ChSystem_SetContactContainer__SWIG_1(swigCPtr, ChContactContainer.getCPtr(contactcontainer));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChContactContainer GetContactContainer() {
    global::System.IntPtr cPtr = corePINVOKE.ChSystem_GetContactContainer(swigCPtr);
    ChContactContainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChContactContainer(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetUseSleeping(bool ms) {
    corePINVOKE.ChSystem_SetUseSleeping(swigCPtr, ms);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetUseSleeping() {
    bool ret = corePINVOKE.ChSystem_GetUseSleeping(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int DoStepDynamics(double step_size) {
    int ret = corePINVOKE.ChSystem_DoStepDynamics(swigCPtr, step_size);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoFrameDynamics(double end_time) {
    bool ret = corePINVOKE.ChSystem_DoFrameDynamics(swigCPtr, end_time);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoEntireDynamics(double end_time) {
    bool ret = corePINVOKE.ChSystem_DoEntireDynamics(swigCPtr, end_time);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoEntireUniformDynamics(double end_time, double frame_step) {
    bool ret = corePINVOKE.ChSystem_DoEntireUniformDynamics(swigCPtr, end_time, frame_step);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetStepcount() {
    uint ret = corePINVOKE.ChSystem_GetStepcount(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ResetStepcount() {
    corePINVOKE.ChSystem_ResetStepcount(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetSolverCallsCount() {
    int ret = corePINVOKE.ChSystem_GetSolverCallsCount(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetSolverSetupCount() {
    int ret = corePINVOKE.ChSystem_GetSolverSetupCount(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void EnableSolverMatrixWrite(bool val, string out_dir) {
    corePINVOKE.ChSystem_EnableSolverMatrixWrite__SWIG_0(swigCPtr, val, out_dir);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void EnableSolverMatrixWrite(bool val) {
    corePINVOKE.ChSystem_EnableSolverMatrixWrite__SWIG_1(swigCPtr, val);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsSolverMatrixWriteEnabled() {
    bool ret = corePINVOKE.ChSystem_IsSolverMatrixWriteEnabled(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void DumpSystemMatrices(bool save_M, bool save_K, bool save_R, bool save_Cq, string path) {
    corePINVOKE.ChSystem_DumpSystemMatrices(swigCPtr, save_M, save_K, save_R, save_Cq, path);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetMassMatrix(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t M) {
    corePINVOKE.ChSystem_GetMassMatrix(swigCPtr, SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(M));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetStiffnessMatrix(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t K) {
    corePINVOKE.ChSystem_GetStiffnessMatrix(swigCPtr, SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(K));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetDampingMatrix(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t R) {
    corePINVOKE.ChSystem_GetDampingMatrix(swigCPtr, SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(R));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetConstraintJacobianMatrix(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t Cq) {
    corePINVOKE.ChSystem_GetConstraintJacobianMatrix(swigCPtr, SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(Cq));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool DoStepKinematics(double step_size) {
    bool ret = corePINVOKE.ChSystem_DoStepKinematics(swigCPtr, step_size);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoFrameKinematics(double end_time) {
    bool ret = corePINVOKE.ChSystem_DoFrameKinematics(swigCPtr, end_time);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoEntireKinematics(double end_time) {
    bool ret = corePINVOKE.ChSystem_DoEntireKinematics(swigCPtr, end_time);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoAssembly(int action) {
    bool ret = corePINVOKE.ChSystem_DoAssembly(swigCPtr, action);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoFullAssembly() {
    bool ret = corePINVOKE.ChSystem_DoFullAssembly(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticAnalysis(SWIGTYPE_p_ChStaticAnalysis analysis) {
    bool ret = corePINVOKE.ChSystem_DoStaticAnalysis(swigCPtr, SWIGTYPE_p_ChStaticAnalysis.getCPtr(analysis));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticLinear() {
    bool ret = corePINVOKE.ChSystem_DoStaticLinear(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticNonlinear(int nsteps, bool verbose) {
    bool ret = corePINVOKE.ChSystem_DoStaticNonlinear__SWIG_0(swigCPtr, nsteps, verbose);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticNonlinear(int nsteps) {
    bool ret = corePINVOKE.ChSystem_DoStaticNonlinear__SWIG_1(swigCPtr, nsteps);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticNonlinear() {
    bool ret = corePINVOKE.ChSystem_DoStaticNonlinear__SWIG_2(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticNonlinearRheonomic(int nsteps, bool verbose, SWIGTYPE_p_std__shared_ptrT_ChStaticNonLinearRheonomicAnalysis__IterationCallback_t callback) {
    bool ret = corePINVOKE.ChSystem_DoStaticNonlinearRheonomic__SWIG_0(swigCPtr, nsteps, verbose, SWIGTYPE_p_std__shared_ptrT_ChStaticNonLinearRheonomicAnalysis__IterationCallback_t.getCPtr(callback));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticNonlinearRheonomic(int nsteps, bool verbose) {
    bool ret = corePINVOKE.ChSystem_DoStaticNonlinearRheonomic__SWIG_1(swigCPtr, nsteps, verbose);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticNonlinearRheonomic(int nsteps) {
    bool ret = corePINVOKE.ChSystem_DoStaticNonlinearRheonomic__SWIG_2(swigCPtr, nsteps);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticNonlinearRheonomic() {
    bool ret = corePINVOKE.ChSystem_DoStaticNonlinearRheonomic__SWIG_3(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticRelaxing(int nsteps) {
    bool ret = corePINVOKE.ChSystem_DoStaticRelaxing__SWIG_0(swigCPtr, nsteps);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticRelaxing() {
    bool ret = corePINVOKE.ChSystem_DoStaticRelaxing__SWIG_1(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut marchive) {
    corePINVOKE.ChSystem_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn marchive) {
    corePINVOKE.ChSystem_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public int FileProcessChR(ChStreamInBinary m_file) {
    int ret = corePINVOKE.ChSystem_FileProcessChR(swigCPtr, ChStreamInBinary.getCPtr(m_file));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int FileWriteChR(ChStreamOutBinary m_file) {
    int ret = corePINVOKE.ChSystem_FileWriteChR(swigCPtr, ChStreamOutBinary.getCPtr(m_file));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSolver(ChSolverPSOR solver) {
    corePINVOKE.ChSystem_SetSolver__SWIG_1(swigCPtr, ChSolverPSOR.getCPtr(solver));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSolver(ChSolverPJacobi solver) {
    corePINVOKE.ChSystem_SetSolver__SWIG_2(swigCPtr, ChSolverPJacobi.getCPtr(solver));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSolver(ChSolverBB solver) {
    corePINVOKE.ChSystem_SetSolver__SWIG_3(swigCPtr, ChSolverBB.getCPtr(solver));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSolver(ChSolverAPGD solver) {
    corePINVOKE.ChSystem_SetSolver__SWIG_4(swigCPtr, ChSolverAPGD.getCPtr(solver));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSolver(ChSolverSparseLU solver) {
    corePINVOKE.ChSystem_SetSolver__SWIG_5(swigCPtr, ChSolverSparseLU.getCPtr(solver));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSolver(ChSolverSparseQR solver) {
    corePINVOKE.ChSystem_SetSolver__SWIG_6(swigCPtr, ChSolverSparseQR.getCPtr(solver));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSolver(ChSolverGMRES solver) {
    corePINVOKE.ChSystem_SetSolver__SWIG_7(swigCPtr, ChSolverGMRES.getCPtr(solver));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSolver(ChSolverBiCGSTAB solver) {
    corePINVOKE.ChSystem_SetSolver__SWIG_8(swigCPtr, ChSolverBiCGSTAB.getCPtr(solver));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSolver(ChSolverMINRES solver) {
    corePINVOKE.ChSystem_SetSolver__SWIG_9(swigCPtr, ChSolverMINRES.getCPtr(solver));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

}
