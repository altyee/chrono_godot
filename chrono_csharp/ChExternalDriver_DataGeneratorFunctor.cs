//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChExternalDriver_DataGeneratorFunctor : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChExternalDriver_DataGeneratorFunctor(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChExternalDriver_DataGeneratorFunctor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChExternalDriver_DataGeneratorFunctor() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          vehiclePINVOKE.delete_ChExternalDriver_DataGeneratorFunctor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChExternalDriver_DataGeneratorFunctor(string type, string id) : this(vehiclePINVOKE.new_ChExternalDriver_DataGeneratorFunctor(type, id), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public virtual void Serialize(ChJSONWriter writer) {
    vehiclePINVOKE.ChExternalDriver_DataGeneratorFunctor_Serialize(swigCPtr, ChJSONWriter.getCPtr(writer));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool HasData() {
    bool ret = (SwigDerivedClassHasMethod("HasData", swigMethodTypes1) ? vehiclePINVOKE.ChExternalDriver_DataGeneratorFunctor_HasDataSwigExplicitChExternalDriver_DataGeneratorFunctor(swigCPtr) : vehiclePINVOKE.ChExternalDriver_DataGeneratorFunctor_HasData(swigCPtr));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string type {
    set {
      vehiclePINVOKE.ChExternalDriver_DataGeneratorFunctor_type_set(swigCPtr, value);
      if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = vehiclePINVOKE.ChExternalDriver_DataGeneratorFunctor_type_get(swigCPtr);
      if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string id {
    set {
      vehiclePINVOKE.ChExternalDriver_DataGeneratorFunctor_id_set(swigCPtr, value);
      if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = vehiclePINVOKE.ChExternalDriver_DataGeneratorFunctor_id_get(swigCPtr);
      if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("Serialize", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateChExternalDriver_DataGeneratorFunctor_0(SwigDirectorMethodSerialize);
    if (SwigDerivedClassHasMethod("HasData", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateChExternalDriver_DataGeneratorFunctor_1(SwigDirectorMethodHasData);
    vehiclePINVOKE.ChExternalDriver_DataGeneratorFunctor_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo[] methodInfos = this.GetType().GetMethods(
        global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance);
    foreach (global::System.Reflection.MethodInfo methodInfo in methodInfos) {
      if (methodInfo.DeclaringType == null)
        continue;

      if (methodInfo.Name != methodName)
        continue;

      var parameters = methodInfo.GetParameters();
      if (parameters.Length != methodTypes.Length)
        continue;

      bool parametersMatch = true;
      for (var i = 0; i < parameters.Length; i++) {
        if (parameters[i].ParameterType != methodTypes[i]) {
          parametersMatch = false;
          break;
        }
      }

      if (!parametersMatch)
        continue;

      if (methodInfo.IsVirtual && (methodInfo.DeclaringType.IsSubclassOf(typeof(ChExternalDriver_DataGeneratorFunctor))) &&
        methodInfo.DeclaringType != methodInfo.GetBaseDefinition().DeclaringType) {
        return true;
      }
    }

    return false;
  }

  private void SwigDirectorMethodSerialize(global::System.IntPtr writer) {
    Serialize((writer == global::System.IntPtr.Zero) ? null : new ChJSONWriter(writer, true));
  }

  private bool SwigDirectorMethodHasData() {
    return HasData();
  }

  public delegate void SwigDelegateChExternalDriver_DataGeneratorFunctor_0(global::System.IntPtr writer);
  public delegate bool SwigDelegateChExternalDriver_DataGeneratorFunctor_1();

  private SwigDelegateChExternalDriver_DataGeneratorFunctor_0 swigDelegate0;
  private SwigDelegateChExternalDriver_DataGeneratorFunctor_1 swigDelegate1;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(ChJSONWriter) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
}
