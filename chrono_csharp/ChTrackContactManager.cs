//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChTrackContactManager : ReportContactCallback {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChTrackContactManager(global::System.IntPtr cPtr, bool cMemoryOwn) : base(vehiclePINVOKE.ChTrackContactManager_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChTrackContactManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          vehiclePINVOKE.delete_ChTrackContactManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChTrackContactManager() : this(vehiclePINVOKE.new_ChTrackContactManager(), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void MonitorContacts(int flags) {
    vehiclePINVOKE.ChTrackContactManager_MonitorContacts(swigCPtr, flags);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetContactCollection(bool val) {
    vehiclePINVOKE.ChTrackContactManager_SetContactCollection(swigCPtr, val);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void WriteContacts(string filename) {
    vehiclePINVOKE.ChTrackContactManager_WriteContacts(swigCPtr, filename);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTrackShoeIndexLeft(uint idx) {
    vehiclePINVOKE.ChTrackContactManager_SetTrackShoeIndexLeft(swigCPtr, idx);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTrackShoeIndexRight(uint idx) {
    vehiclePINVOKE.ChTrackContactManager_SetTrackShoeIndexRight(swigCPtr, idx);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRenderNormals(bool val) {
    vehiclePINVOKE.ChTrackContactManager_SetRenderNormals(swigCPtr, val);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRenderForces(bool val, double scale) {
    vehiclePINVOKE.ChTrackContactManager_SetRenderForces(swigCPtr, val, scale);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Process(ChTrackedVehicle vehicle) {
    vehiclePINVOKE.ChTrackContactManager_Process__SWIG_0(swigCPtr, ChTrackedVehicle.getCPtr(vehicle));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Process(SWIGTYPE_p_chrono__vehicle__ChTrackTestRig rig) {
    vehiclePINVOKE.ChTrackContactManager_Process__SWIG_1(swigCPtr, SWIGTYPE_p_chrono__vehicle__ChTrackTestRig.getCPtr(rig));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool InContact(SWIGTYPE_chrono__vehicle__TrackedCollisionFlag__Enum part) {
    bool ret = vehiclePINVOKE.ChTrackContactManager_InContact(swigCPtr, (int)part);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetSprocketResistiveTorque(VehicleSide side) {
    ChVectorD ret = new ChVectorD(vehiclePINVOKE.ChTrackContactManager_GetSprocketResistiveTorque(swigCPtr, (int)side), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
