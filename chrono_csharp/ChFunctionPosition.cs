//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChFunctionPosition : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChFunctionPosition(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChFunctionPosition obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChFunctionPosition() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          corePINVOKE.delete_ChFunctionPosition(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChFunctionPosition() : this(corePINVOKE.new_ChFunctionPosition__SWIG_0(), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public ChFunctionPosition(ChFunctionPosition other) : this(corePINVOKE.new_ChFunctionPosition__SWIG_1(ChFunctionPosition.getCPtr(other)), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public virtual ChVectorD Get_p(double s) {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChFunctionPosition_Get_p(swigCPtr, s), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVectorD Get_p_ds(double s) {
    ChVectorD ret = new ChVectorD((SwigDerivedClassHasMethod("Get_p_ds", swigMethodTypes1) ? corePINVOKE.ChFunctionPosition_Get_p_dsSwigExplicitChFunctionPosition(swigCPtr, s) : corePINVOKE.ChFunctionPosition_Get_p_ds(swigCPtr, s)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVectorD Get_p_dsds(double s) {
    ChVectorD ret = new ChVectorD((SwigDerivedClassHasMethod("Get_p_dsds", swigMethodTypes2) ? corePINVOKE.ChFunctionPosition_Get_p_dsdsSwigExplicitChFunctionPosition(swigCPtr, s) : corePINVOKE.ChFunctionPosition_Get_p_dsds(swigCPtr, s)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Estimate_s_domain(SWIGTYPE_p_double smin, SWIGTYPE_p_double smax) {
    if (SwigDerivedClassHasMethod("Estimate_s_domain", swigMethodTypes3)) corePINVOKE.ChFunctionPosition_Estimate_s_domainSwigExplicitChFunctionPosition(swigCPtr, SWIGTYPE_p_double.getCPtr(smin), SWIGTYPE_p_double.getCPtr(smax)); else corePINVOKE.ChFunctionPosition_Estimate_s_domain(swigCPtr, SWIGTYPE_p_double.getCPtr(smin), SWIGTYPE_p_double.getCPtr(smax));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Estimate_boundingbox(ChVectorD pmin, ChVectorD pmax) {
    if (SwigDerivedClassHasMethod("Estimate_boundingbox", swigMethodTypes4)) corePINVOKE.ChFunctionPosition_Estimate_boundingboxSwigExplicitChFunctionPosition(swigCPtr, ChVectorD.getCPtr(pmin), ChVectorD.getCPtr(pmax)); else corePINVOKE.ChFunctionPosition_Estimate_boundingbox(swigCPtr, ChVectorD.getCPtr(pmin), ChVectorD.getCPtr(pmax));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Update(double t) {
    if (SwigDerivedClassHasMethod("Update", swigMethodTypes5)) corePINVOKE.ChFunctionPosition_UpdateSwigExplicitChFunctionPosition(swigCPtr, t); else corePINVOKE.ChFunctionPosition_Update(swigCPtr, t);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut marchive) {
    if (SwigDerivedClassHasMethod("ArchiveOut", swigMethodTypes6)) corePINVOKE.ChFunctionPosition_ArchiveOutSwigExplicitChFunctionPosition(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(marchive)); else corePINVOKE.ChFunctionPosition_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn marchive) {
    if (SwigDerivedClassHasMethod("ArchiveIn", swigMethodTypes7)) corePINVOKE.ChFunctionPosition_ArchiveInSwigExplicitChFunctionPosition(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive)); else corePINVOKE.ChFunctionPosition_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("Get_p", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateChFunctionPosition_0(SwigDirectorMethodGet_p);
    if (SwigDerivedClassHasMethod("Get_p_ds", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateChFunctionPosition_1(SwigDirectorMethodGet_p_ds);
    if (SwigDerivedClassHasMethod("Get_p_dsds", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateChFunctionPosition_2(SwigDirectorMethodGet_p_dsds);
    if (SwigDerivedClassHasMethod("Estimate_s_domain", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateChFunctionPosition_3(SwigDirectorMethodEstimate_s_domain);
    if (SwigDerivedClassHasMethod("Estimate_boundingbox", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateChFunctionPosition_4(SwigDirectorMethodEstimate_boundingbox);
    if (SwigDerivedClassHasMethod("Update", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateChFunctionPosition_5(SwigDirectorMethodUpdate);
    if (SwigDerivedClassHasMethod("ArchiveOut", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateChFunctionPosition_6(SwigDirectorMethodArchiveOut);
    if (SwigDerivedClassHasMethod("ArchiveIn", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateChFunctionPosition_7(SwigDirectorMethodArchiveIn);
    corePINVOKE.ChFunctionPosition_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(ChFunctionPosition));
    return hasDerivedMethod;
  }

  private global::System.IntPtr SwigDirectorMethodGet_p(double s) {
    return ChVectorD.getCPtr(Get_p(s)).Handle;
  }

  private global::System.IntPtr SwigDirectorMethodGet_p_ds(double s) {
    return ChVectorD.getCPtr(Get_p_ds(s)).Handle;
  }

  private global::System.IntPtr SwigDirectorMethodGet_p_dsds(double s) {
    return ChVectorD.getCPtr(Get_p_dsds(s)).Handle;
  }

  private void SwigDirectorMethodEstimate_s_domain(global::System.IntPtr smin, global::System.IntPtr smax) {
    Estimate_s_domain(new SWIGTYPE_p_double(smin, false), new SWIGTYPE_p_double(smax, false));
  }

  private void SwigDirectorMethodEstimate_boundingbox(global::System.IntPtr pmin, global::System.IntPtr pmax) {
    Estimate_boundingbox(new ChVectorD(pmin, false), new ChVectorD(pmax, false));
  }

  private void SwigDirectorMethodUpdate(double t) {
    Update(t);
  }

  private void SwigDirectorMethodArchiveOut(global::System.IntPtr marchive) {
    ArchiveOut(new SWIGTYPE_p_chrono__ChArchiveOut(marchive, false));
  }

  private void SwigDirectorMethodArchiveIn(global::System.IntPtr marchive) {
    ArchiveIn(new SWIGTYPE_p_chrono__ChArchiveIn(marchive, false));
  }

  public delegate global::System.IntPtr SwigDelegateChFunctionPosition_0(double s);
  public delegate global::System.IntPtr SwigDelegateChFunctionPosition_1(double s);
  public delegate global::System.IntPtr SwigDelegateChFunctionPosition_2(double s);
  public delegate void SwigDelegateChFunctionPosition_3(global::System.IntPtr smin, global::System.IntPtr smax);
  public delegate void SwigDelegateChFunctionPosition_4(global::System.IntPtr pmin, global::System.IntPtr pmax);
  public delegate void SwigDelegateChFunctionPosition_5(double t);
  public delegate void SwigDelegateChFunctionPosition_6(global::System.IntPtr marchive);
  public delegate void SwigDelegateChFunctionPosition_7(global::System.IntPtr marchive);

  private SwigDelegateChFunctionPosition_0 swigDelegate0;
  private SwigDelegateChFunctionPosition_1 swigDelegate1;
  private SwigDelegateChFunctionPosition_2 swigDelegate2;
  private SwigDelegateChFunctionPosition_3 swigDelegate3;
  private SwigDelegateChFunctionPosition_4 swigDelegate4;
  private SwigDelegateChFunctionPosition_5 swigDelegate5;
  private SwigDelegateChFunctionPosition_6 swigDelegate6;
  private SwigDelegateChFunctionPosition_7 swigDelegate7;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(SWIGTYPE_p_double), typeof(SWIGTYPE_p_double) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(ChVectorD), typeof(ChVectorD) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(SWIGTYPE_p_chrono__ChArchiveOut) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(SWIGTYPE_p_chrono__ChArchiveIn) };
}
