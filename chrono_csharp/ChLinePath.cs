//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLinePath : ChLine {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLinePath(global::System.IntPtr cPtr, bool cMemoryOwn) : base(corePINVOKE.ChLinePath_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLinePath obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          corePINVOKE.delete_ChLinePath(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__geometry__ChLine_t_t lines {
    set {
      corePINVOKE.ChLinePath_lines_set(swigCPtr, SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__geometry__ChLine_t_t.getCPtr(value));
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = corePINVOKE.ChLinePath_lines_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__geometry__ChLine_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__geometry__ChLine_t_t(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_double_t end_times {
    set {
      corePINVOKE.ChLinePath_end_times_set(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = corePINVOKE.ChLinePath_end_times_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_double_t durations {
    set {
      corePINVOKE.ChLinePath_durations_set(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = corePINVOKE.ChLinePath_durations_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChLinePath() : this(corePINVOKE.new_ChLinePath__SWIG_0(), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinePath(ChLinePath source) : this(corePINVOKE.new_ChLinePath__SWIG_1(ChLinePath.getCPtr(source)), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChGeometry Clone() {
    global::System.IntPtr cPtr = corePINVOKE.ChLinePath_Clone(swigCPtr);
    ChLinePath ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinePath(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChGeometry.Type GetClassType() {
    ChGeometry.Type ret = (ChGeometry.Type)corePINVOKE.ChLinePath_GetClassType(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int Get_complexity() {
    int ret = corePINVOKE.ChLinePath_Get_complexity(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double Length(int sampling) {
    double ret = corePINVOKE.ChLinePath_Length(swigCPtr, sampling);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Evaluate(ChVectorD pos, double parU) {
    corePINVOKE.ChLinePath_Evaluate(swigCPtr, ChVectorD.getCPtr(pos), parU);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChVectorD GetEndA() {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChLinePath_GetEndA(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChVectorD GetEndB() {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChLinePath_GetEndB(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetSubLinesCount() {
    uint ret = corePINVOKE.ChLinePath_GetSubLinesCount(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLine GetSubLineN(uint n) {
    global::System.IntPtr cPtr = corePINVOKE.ChLinePath_GetSubLineN(swigCPtr, n);
    ChLine ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLine(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSubLineDurationN(uint n) {
    double ret = corePINVOKE.ChLinePath_GetSubLineDurationN(swigCPtr, n);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSubLineDurationN(uint n, double mduration) {
    corePINVOKE.ChLinePath_SetSubLineDurationN(swigCPtr, n, mduration);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddSubLine(ChLine mline, double duration) {
    corePINVOKE.ChLinePath_AddSubLine__SWIG_0(swigCPtr, ChLine.getCPtr(mline), duration);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddSubLine(ChLine mline) {
    corePINVOKE.ChLinePath_AddSubLine__SWIG_1(swigCPtr, ChLine.getCPtr(mline));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertSubLine(uint n, ChLine mline, double duration) {
    corePINVOKE.ChLinePath_InsertSubLine__SWIG_0(swigCPtr, n, ChLine.getCPtr(mline), duration);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertSubLine(uint n, ChLine mline) {
    corePINVOKE.ChLinePath_InsertSubLine__SWIG_1(swigCPtr, n, ChLine.getCPtr(mline));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void EraseSubLine(uint n) {
    corePINVOKE.ChLinePath_EraseSubLine(swigCPtr, n);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetPathDuration() {
    double ret = corePINVOKE.ChLinePath_GetPathDuration(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetPathDuration(double mUduration) {
    corePINVOKE.ChLinePath_SetPathDuration(swigCPtr, mUduration);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetContinuityMaxError() {
    double ret = corePINVOKE.ChLinePath_GetContinuityMaxError(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut marchive) {
    corePINVOKE.ChLinePath_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn marchive) {
    corePINVOKE.ChLinePath_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

}
