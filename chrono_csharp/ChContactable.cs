//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChContactable : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChContactable(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChContactable obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChContactable() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          corePINVOKE.delete_ChContactable(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual bool IsContactActive() {
    bool ret = corePINVOKE.ChContactable_IsContactActive(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int ContactableGet_ndof_x() {
    int ret = corePINVOKE.ChContactable_ContactableGet_ndof_x(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int ContactableGet_ndof_w() {
    int ret = corePINVOKE.ChContactable_ContactableGet_ndof_w(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void ContactableGetStateBlock_x(ChState x) {
    corePINVOKE.ChContactable_ContactableGetStateBlock_x(swigCPtr, ChState.getCPtr(x));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ContactableGetStateBlock_w(ChStateDelta w) {
    corePINVOKE.ChContactable_ContactableGetStateBlock_w(swigCPtr, ChStateDelta.getCPtr(w));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ContactableIncrementState(ChState x, ChStateDelta dw, ChState x_new) {
    corePINVOKE.ChContactable_ContactableIncrementState(swigCPtr, ChState.getCPtr(x), ChStateDelta.getCPtr(dw), ChState.getCPtr(x_new));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ChVectorD GetContactPoint(ChVectorD loc_point, ChState state_x) {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChContactable_GetContactPoint(swigCPtr, ChVectorD.getCPtr(loc_point), ChState.getCPtr(state_x)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVectorD GetContactPointSpeed(ChVectorD loc_point, ChState state_x, ChStateDelta state_w) {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChContactable_GetContactPointSpeed__SWIG_0(swigCPtr, ChVectorD.getCPtr(loc_point), ChState.getCPtr(state_x), ChStateDelta.getCPtr(state_w)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVectorD GetContactPointSpeed(ChVectorD abs_point) {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChContactable_GetContactPointSpeed__SWIG_1(swigCPtr, ChVectorD.getCPtr(abs_point)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChCoordsysD GetCsysForCollisionModel() {
    ChCoordsysD ret = new ChCoordsysD(corePINVOKE.ChContactable_GetCsysForCollisionModel(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void ContactForceLoadResidual_F(ChVectorD F, ChVectorD abs_point, ChVectorDynamicD R) {
    corePINVOKE.ChContactable_ContactForceLoadResidual_F(swigCPtr, ChVectorD.getCPtr(F), ChVectorD.getCPtr(abs_point), ChVectorDynamicD.getCPtr(R));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ContactForceLoadQ(ChVectorD F, ChVectorD point, ChState state_x, ChVectorDynamicD Q, int offset) {
    corePINVOKE.ChContactable_ContactForceLoadQ(swigCPtr, ChVectorD.getCPtr(F), ChVectorD.getCPtr(point), ChState.getCPtr(state_x), ChVectorDynamicD.getCPtr(Q), offset);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double GetContactableMass() {
    double ret = corePINVOKE.ChContactable_GetContactableMass(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChPhysicsItem GetPhysicsItem() {
    global::System.IntPtr cPtr = corePINVOKE.ChContactable_GetPhysicsItem(swigCPtr);
    ChPhysicsItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPhysicsItem(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChContactable.eChContactableType GetContactableType() {
    ChContactable.eChContactableType ret = (ChContactable.eChContactableType)corePINVOKE.ChContactable_GetContactableType(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetUserData(SWIGTYPE_p_std__shared_ptrT_void_t data) {
    corePINVOKE.ChContactable_SetUserData(swigCPtr, SWIGTYPE_p_std__shared_ptrT_void_t.getCPtr(data));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool HasData() {
    bool ret = corePINVOKE.ChContactable_HasData(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum eChContactableType {
    CONTACTABLE_UNKNOWN = 0,
    CONTACTABLE_6,
    CONTACTABLE_3,
    CONTACTABLE_333,
    CONTACTABLE_666
  }

}
