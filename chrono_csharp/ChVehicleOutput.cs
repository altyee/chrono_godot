//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChVehicleOutput : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChVehicleOutput(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChVehicleOutput obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ChVehicleOutput obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ChVehicleOutput() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vehiclePINVOKE.delete_ChVehicleOutput(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual void WriteTime(int frame, double time) {
    vehiclePINVOKE.ChVehicleOutput_WriteTime(swigCPtr, frame, time);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void WriteSection(string name) {
    vehiclePINVOKE.ChVehicleOutput_WriteSection(swigCPtr, name);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void WriteBodies(vector_ChBody bodies) {
    vehiclePINVOKE.ChVehicleOutput_WriteBodies(swigCPtr, vector_ChBody.getCPtr(bodies));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void WriteAuxRefBodies(SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__ChBodyAuxRef_t_t bodies) {
    vehiclePINVOKE.ChVehicleOutput_WriteAuxRefBodies(swigCPtr, SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__ChBodyAuxRef_t_t.getCPtr(bodies));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void WriteMarkers(ChMarkerList markers) {
    vehiclePINVOKE.ChVehicleOutput_WriteMarkers(swigCPtr, ChMarkerList.getCPtr(markers));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void WriteShafts(SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__ChShaft_t_t shafts) {
    vehiclePINVOKE.ChVehicleOutput_WriteShafts(swigCPtr, SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__ChShaft_t_t.getCPtr(shafts));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void WriteJoints(vector_ChLink joints) {
    vehiclePINVOKE.ChVehicleOutput_WriteJoints(swigCPtr, vector_ChLink.getCPtr(joints));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void WriteCouples(SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__ChShaftsCouple_t_t couples) {
    vehiclePINVOKE.ChVehicleOutput_WriteCouples(swigCPtr, SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__ChShaftsCouple_t_t.getCPtr(couples));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void WriteLinSprings(SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__ChLinkTSDA_t_t springs) {
    vehiclePINVOKE.ChVehicleOutput_WriteLinSprings(swigCPtr, SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__ChLinkTSDA_t_t.getCPtr(springs));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void WriteRotSprings(SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__ChLinkRSDA_t_t springs) {
    vehiclePINVOKE.ChVehicleOutput_WriteRotSprings(swigCPtr, SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__ChLinkRSDA_t_t.getCPtr(springs));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void WriteBodyLoads(SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__ChLoadBodyBody_t_t loads) {
    vehiclePINVOKE.ChVehicleOutput_WriteBodyLoads(swigCPtr, SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__ChLoadBodyBody_t_t.getCPtr(loads));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public enum Type {
    ASCII,
    JSON,
    HDF5
  }

}
