//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChContactForceSMC : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChContactForceSMC(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChContactForceSMC obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChContactForceSMC() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          corePINVOKE.delete_ChContactForceSMC(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual ChVectorD CalculateForce(ChSystemSMC sys, ChVectorD normal_dir, ChVectorD p1, ChVectorD p2, ChVectorD vel1, ChVectorD vel2, ChMaterialCompositeSMC mat, double delta, double eff_radius, double mass1, double mass2) {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChContactForceSMC_CalculateForce(swigCPtr, ChSystemSMC.getCPtr(sys), ChVectorD.getCPtr(normal_dir), ChVectorD.getCPtr(p1), ChVectorD.getCPtr(p2), ChVectorD.getCPtr(vel1), ChVectorD.getCPtr(vel2), ChMaterialCompositeSMC.getCPtr(mat), delta, eff_radius, mass1, mass2), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
