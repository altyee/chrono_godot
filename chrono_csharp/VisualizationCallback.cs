//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class VisualizationCallback : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal VisualizationCallback(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VisualizationCallback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~VisualizationCallback() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          corePINVOKE.delete_VisualizationCallback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual void DrawLine(ChVectorD from, ChVectorD to, SWIGTYPE_p_ChColor color) {
    corePINVOKE.VisualizationCallback_DrawLine(swigCPtr, ChVectorD.getCPtr(from), ChVectorD.getCPtr(to), SWIGTYPE_p_ChColor.getCPtr(color));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double GetNormalScale() {
    double ret = (SwigDerivedClassHasMethod("GetNormalScale", swigMethodTypes1) ? corePINVOKE.VisualizationCallback_GetNormalScaleSwigExplicitVisualizationCallback(swigCPtr) : corePINVOKE.VisualizationCallback_GetNormalScale(swigCPtr));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VisualizationCallback() : this(corePINVOKE.new_VisualizationCallback(), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("DrawLine", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateVisualizationCallback_0(SwigDirectorMethodDrawLine);
    if (SwigDerivedClassHasMethod("GetNormalScale", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateVisualizationCallback_1(SwigDirectorMethodGetNormalScale);
    corePINVOKE.VisualizationCallback_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(VisualizationCallback));
    return hasDerivedMethod;
  }

  private void SwigDirectorMethodDrawLine(global::System.IntPtr from, global::System.IntPtr to, global::System.IntPtr color) {
    DrawLine(new ChVectorD(from, false), new ChVectorD(to, false), new SWIGTYPE_p_ChColor(color, false));
  }

  private double SwigDirectorMethodGetNormalScale() {
    return GetNormalScale();
  }

  public delegate void SwigDelegateVisualizationCallback_0(global::System.IntPtr from, global::System.IntPtr to, global::System.IntPtr color);
  public delegate double SwigDelegateVisualizationCallback_1();

  private SwigDelegateVisualizationCallback_0 swigDelegate0;
  private SwigDelegateVisualizationCallback_1 swigDelegate1;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(ChVectorD), typeof(ChVectorD), typeof(SWIGTYPE_p_ChColor) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
}
