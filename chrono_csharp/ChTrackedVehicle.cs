//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChTrackedVehicle : ChVehicle {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChTrackedVehicle(global::System.IntPtr cPtr, bool cMemoryOwn) : base(vehiclePINVOKE.ChTrackedVehicle_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChTrackedVehicle obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          vehiclePINVOKE.delete_ChTrackedVehicle(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public override string GetTemplateName() {
    string ret = vehiclePINVOKE.ChTrackedVehicle_GetTemplateName(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChTrackAssembly GetTrackAssembly(VehicleSide side) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ChTrackedVehicle_GetTrackAssembly(swigCPtr, (int)side);
    ChTrackAssembly ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTrackAssembly(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChDrivelineTV GetDriveline() {
    global::System.IntPtr cPtr = vehiclePINVOKE.ChTrackedVehicle_GetDriveline(swigCPtr);
    ChDrivelineTV ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChDrivelineTV(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumTrackSuspensions(VehicleSide side) {
    uint ret = vehiclePINVOKE.ChTrackedVehicle_GetNumTrackSuspensions(swigCPtr, (int)side);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumTrackShoes(VehicleSide side) {
    uint ret = vehiclePINVOKE.ChTrackedVehicle_GetNumTrackShoes(swigCPtr, (int)side);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChTrackShoe GetTrackShoe(VehicleSide side, uint id) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ChTrackedVehicle_GetTrackShoe(swigCPtr, (int)side, id);
    ChTrackShoe ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTrackShoe(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BodyState GetTrackShoeState(VehicleSide side, uint shoe_id) {
    BodyState ret = new BodyState(vehiclePINVOKE.ChTrackedVehicle_GetTrackShoeState(swigCPtr, (int)side, shoe_id), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetTrackShoeStates(VehicleSide side, SWIGTYPE_p_std__vectorT_chrono__vehicle__BodyState_t states) {
    vehiclePINVOKE.ChTrackedVehicle_GetTrackShoeStates(swigCPtr, (int)side, SWIGTYPE_p_std__vectorT_chrono__vehicle__BodyState_t.getCPtr(states));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSprocketVisualizationType(VisualizationType vis) {
    vehiclePINVOKE.ChTrackedVehicle_SetSprocketVisualizationType(swigCPtr, (int)vis);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetIdlerVisualizationType(VisualizationType vis) {
    vehiclePINVOKE.ChTrackedVehicle_SetIdlerVisualizationType(swigCPtr, (int)vis);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSuspensionVisualizationType(VisualizationType vis) {
    vehiclePINVOKE.ChTrackedVehicle_SetSuspensionVisualizationType(swigCPtr, (int)vis);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetIdlerWheelVisualizationType(VisualizationType vis) {
    vehiclePINVOKE.ChTrackedVehicle_SetIdlerWheelVisualizationType(swigCPtr, (int)vis);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRoadWheelVisualizationType(VisualizationType vis) {
    vehiclePINVOKE.ChTrackedVehicle_SetRoadWheelVisualizationType(swigCPtr, (int)vis);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRollerVisualizationType(VisualizationType vis) {
    vehiclePINVOKE.ChTrackedVehicle_SetRollerVisualizationType(swigCPtr, (int)vis);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTrackShoeVisualizationType(VisualizationType vis) {
    vehiclePINVOKE.ChTrackedVehicle_SetTrackShoeVisualizationType(swigCPtr, (int)vis);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSprocketCollide(bool state) {
    vehiclePINVOKE.ChTrackedVehicle_SetSprocketCollide(swigCPtr, state);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetIdlerCollide(bool state) {
    vehiclePINVOKE.ChTrackedVehicle_SetIdlerCollide(swigCPtr, state);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRoadWheelCollide(bool state) {
    vehiclePINVOKE.ChTrackedVehicle_SetRoadWheelCollide(swigCPtr, state);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRollerCollide(bool state) {
    vehiclePINVOKE.ChTrackedVehicle_SetRollerCollide(swigCPtr, state);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTrackShoeCollide(bool state) {
    vehiclePINVOKE.ChTrackedVehicle_SetTrackShoeCollide(swigCPtr, state);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCollide(int flags) {
    vehiclePINVOKE.ChTrackedVehicle_SetCollide(swigCPtr, flags);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SetChassisVehicleCollide(bool state) {
    vehiclePINVOKE.ChTrackedVehicle_SetChassisVehicleCollide(swigCPtr, state);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void EnableCustomContact(ChTrackCustomContact callback) {
    vehiclePINVOKE.ChTrackedVehicle_EnableCustomContact(swigCPtr, ChTrackCustomContact.getCPtr(callback));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void MonitorContacts(int flags) {
    vehiclePINVOKE.ChTrackedVehicle_MonitorContacts(swigCPtr, flags);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRenderContactNormals(bool val) {
    vehiclePINVOKE.ChTrackedVehicle_SetRenderContactNormals(swigCPtr, val);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRenderContactForces(bool val, double scale) {
    vehiclePINVOKE.ChTrackedVehicle_SetRenderContactForces(swigCPtr, val, scale);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetContactCollection(bool val) {
    vehiclePINVOKE.ChTrackedVehicle_SetContactCollection(swigCPtr, val);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsPartInContact(SWIGTYPE_chrono__vehicle__TrackedCollisionFlag__Enum part) {
    bool ret = vehiclePINVOKE.ChTrackedVehicle_IsPartInContact(swigCPtr, (int)part);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetSprocketResistiveTorque(VehicleSide side) {
    ChVectorD ret = new ChVectorD(vehiclePINVOKE.ChTrackedVehicle_GetSprocketResistiveTorque(swigCPtr, (int)side), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void WriteContacts(string filename) {
    vehiclePINVOKE.ChTrackedVehicle_WriteContacts(swigCPtr, filename);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTrackAssemblyOutput(VehicleSide side, bool state) {
    vehiclePINVOKE.ChTrackedVehicle_SetTrackAssemblyOutput(swigCPtr, (int)side, state);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Initialize(ChCoordsysD chassisPos, double chassisFwdVel) {
    vehiclePINVOKE.ChTrackedVehicle_Initialize__SWIG_0(swigCPtr, ChCoordsysD.getCPtr(chassisPos), chassisFwdVel);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Initialize(ChCoordsysD chassisPos) {
    vehiclePINVOKE.ChTrackedVehicle_Initialize__SWIG_1(swigCPtr, ChCoordsysD.getCPtr(chassisPos));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void InitializeInertiaProperties() {
    vehiclePINVOKE.ChTrackedVehicle_InitializeInertiaProperties(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Synchronize(double time, DriverInputs driver_inputs, TerrainForces shoe_forces_left, TerrainForces shoe_forces_right) {
    vehiclePINVOKE.ChTrackedVehicle_Synchronize(swigCPtr, time, DriverInputs.getCPtr(driver_inputs), TerrainForces.getCPtr(shoe_forces_left), TerrainForces.getCPtr(shoe_forces_right));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Advance(double step) {
    vehiclePINVOKE.ChTrackedVehicle_Advance(swigCPtr, step);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void LockDifferential(bool lock_) {
    vehiclePINVOKE.ChTrackedVehicle_LockDifferential(swigCPtr, lock_);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DisconnectDriveline() {
    vehiclePINVOKE.ChTrackedVehicle_DisconnectDriveline(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LogConstraintViolations() {
    vehiclePINVOKE.ChTrackedVehicle_LogConstraintViolations(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override string ExportComponentList() {
    string ret = vehiclePINVOKE.ChTrackedVehicle_ExportComponentList__SWIG_0(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ExportComponentList(string filename) {
    vehiclePINVOKE.ChTrackedVehicle_ExportComponentList__SWIG_1(swigCPtr, filename);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
