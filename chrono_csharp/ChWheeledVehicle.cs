//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChWheeledVehicle : ChVehicle {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChWheeledVehicle(global::System.IntPtr cPtr, bool cMemoryOwn) : base(vehiclePINVOKE.ChWheeledVehicle_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChWheeledVehicle obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          vehiclePINVOKE.delete_ChWheeledVehicle(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public override string GetTemplateName() {
    string ret = vehiclePINVOKE.ChWheeledVehicle_GetTemplateName(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChAxleList GetAxles() {
    ChAxleList ret = new ChAxleList(vehiclePINVOKE.ChWheeledVehicle_GetAxles(swigCPtr), false);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChAxle GetAxle(int id) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ChWheeledVehicle_GetAxle(swigCPtr, id);
    ChAxle ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChAxle(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChSuspension GetSuspension(int id) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ChWheeledVehicle_GetSuspension(swigCPtr, id);
    ChSuspension ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSuspension(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__vehicle__ChSteering_t_t GetSteerings() {
    SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__vehicle__ChSteering_t_t ret = new SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__vehicle__ChSteering_t_t(vehiclePINVOKE.ChWheeledVehicle_GetSteerings(swigCPtr), false);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChSteering GetSteering(int id) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ChWheeledVehicle_GetSteering(swigCPtr, id);
    ChSteering ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSteering(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChWheel GetWheel(int axle, VehicleSide side, WheelLocation location) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ChWheeledVehicle_GetWheel__SWIG_0(swigCPtr, axle, (int)side, (int)location);
    ChWheel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChWheel(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChWheel GetWheel(int axle, VehicleSide side) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ChWheeledVehicle_GetWheel__SWIG_1(swigCPtr, axle, (int)side);
    ChWheel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChWheel(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChTire GetTire(int axle, VehicleSide side, WheelLocation location) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ChWheeledVehicle_GetTire__SWIG_0(swigCPtr, axle, (int)side, (int)location);
    ChTire ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTire(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChTire GetTire(int axle, VehicleSide side) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ChWheeledVehicle_GetTire__SWIG_1(swigCPtr, axle, (int)side);
    ChTire ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTire(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBrake GetBrake(int axle, VehicleSide side) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ChWheeledVehicle_GetBrake(swigCPtr, axle, (int)side);
    ChBrake ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBrake(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChDrivelineWV GetDriveline() {
    global::System.IntPtr cPtr = vehiclePINVOKE.ChWheeledVehicle_GetDriveline(swigCPtr);
    ChDrivelineWV ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChDrivelineWV(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChSubchassis GetSubchassis(int id) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ChWheeledVehicle_GetSubchassis(swigCPtr, id);
    ChSubchassis ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSubchassis(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetNumberAxles() {
    int ret = vehiclePINVOKE.ChWheeledVehicle_GetNumberAxles(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetSpindlePos(int axle, VehicleSide side) {
    ChVectorD ret = new ChVectorD(vehiclePINVOKE.ChWheeledVehicle_GetSpindlePos(swigCPtr, axle, (int)side), false);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaternionD GetSpindleRot(int axle, VehicleSide side) {
    ChQuaternionD ret = new ChQuaternionD(vehiclePINVOKE.ChWheeledVehicle_GetSpindleRot(swigCPtr, axle, (int)side), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetSpindleLinVel(int axle, VehicleSide side) {
    ChVectorD ret = new ChVectorD(vehiclePINVOKE.ChWheeledVehicle_GetSpindleLinVel(swigCPtr, axle, (int)side), false);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetSpindleAngVel(int axle, VehicleSide side) {
    ChVectorD ret = new ChVectorD(vehiclePINVOKE.ChWheeledVehicle_GetSpindleAngVel(swigCPtr, axle, (int)side), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSpindleOmega(int axle, VehicleSide side) {
    double ret = vehiclePINVOKE.ChWheeledVehicle_GetSpindleOmega(swigCPtr, axle, (int)side);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetWheelbase() {
    double ret = vehiclePINVOKE.ChWheeledVehicle_GetWheelbase(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetWheeltrack(int id) {
    double ret = vehiclePINVOKE.ChWheeledVehicle_GetWheeltrack(swigCPtr, id);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetMinTurningRadius() {
    double ret = vehiclePINVOKE.ChWheeledVehicle_GetMinTurningRadius(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetMaxSteeringAngle() {
    double ret = vehiclePINVOKE.ChWheeledVehicle_GetMaxSteeringAngle(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSubchassisVisualizationType(VisualizationType vis) {
    vehiclePINVOKE.ChWheeledVehicle_SetSubchassisVisualizationType(swigCPtr, (int)vis);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSuspensionVisualizationType(VisualizationType vis) {
    vehiclePINVOKE.ChWheeledVehicle_SetSuspensionVisualizationType(swigCPtr, (int)vis);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSteeringVisualizationType(VisualizationType vis) {
    vehiclePINVOKE.ChWheeledVehicle_SetSteeringVisualizationType(swigCPtr, (int)vis);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetWheelVisualizationType(VisualizationType vis) {
    vehiclePINVOKE.ChWheeledVehicle_SetWheelVisualizationType(swigCPtr, (int)vis);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTireVisualizationType(VisualizationType vis) {
    vehiclePINVOKE.ChWheeledVehicle_SetTireVisualizationType(swigCPtr, (int)vis);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetWheelCollide(bool state) {
    vehiclePINVOKE.ChWheeledVehicle_SetWheelCollide(swigCPtr, state);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SetChassisVehicleCollide(bool state) {
    vehiclePINVOKE.ChWheeledVehicle_SetChassisVehicleCollide(swigCPtr, state);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSuspensionOutput(int id, bool state) {
    vehiclePINVOKE.ChWheeledVehicle_SetSuspensionOutput(swigCPtr, id, state);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSteeringOutput(int id, bool state) {
    vehiclePINVOKE.ChWheeledVehicle_SetSteeringOutput(swigCPtr, id, state);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSubchassisOutput(int id, bool state) {
    vehiclePINVOKE.ChWheeledVehicle_SetSubchassisOutput(swigCPtr, id, state);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAntirollbarOutput(int id, bool state) {
    vehiclePINVOKE.ChWheeledVehicle_SetAntirollbarOutput(swigCPtr, id, state);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDrivelineOutput(bool state) {
    vehiclePINVOKE.ChWheeledVehicle_SetDrivelineOutput(swigCPtr, state);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void InitializeTire(ChTire tire, ChWheel wheel, VisualizationType tire_vis, ChTire.CollisionType tire_coll) {
    vehiclePINVOKE.ChWheeledVehicle_InitializeTire__SWIG_0(swigCPtr, ChTire.getCPtr(tire), ChWheel.getCPtr(wheel), (int)tire_vis, (int)tire_coll);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void InitializeTire(ChTire tire, ChWheel wheel, VisualizationType tire_vis) {
    vehiclePINVOKE.ChWheeledVehicle_InitializeTire__SWIG_1(swigCPtr, ChTire.getCPtr(tire), ChWheel.getCPtr(wheel), (int)tire_vis);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void InitializeTire(ChTire tire, ChWheel wheel) {
    vehiclePINVOKE.ChWheeledVehicle_InitializeTire__SWIG_2(swigCPtr, ChTire.getCPtr(tire), ChWheel.getCPtr(wheel));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void InitializeInertiaProperties() {
    vehiclePINVOKE.ChWheeledVehicle_InitializeInertiaProperties(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Synchronize(double time, DriverInputs driver_inputs, ChTerrain terrain) {
    vehiclePINVOKE.ChWheeledVehicle_Synchronize(swigCPtr, time, DriverInputs.getCPtr(driver_inputs), ChTerrain.getCPtr(terrain));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Advance(double step) {
    vehiclePINVOKE.ChWheeledVehicle_Advance(swigCPtr, step);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void LockAxleDifferential(int axle, bool lock_) {
    vehiclePINVOKE.ChWheeledVehicle_LockAxleDifferential(swigCPtr, axle, lock_);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void LockCentralDifferential(int which, bool lock_) {
    vehiclePINVOKE.ChWheeledVehicle_LockCentralDifferential(swigCPtr, which, lock_);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void EnableBrakeLocking(bool lock_) {
    vehiclePINVOKE.ChWheeledVehicle_EnableBrakeLocking(swigCPtr, lock_);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ApplyParkingBrake(bool lock_) {
    vehiclePINVOKE.ChWheeledVehicle_ApplyParkingBrake(swigCPtr, lock_);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool ParkingBrake() {
    bool ret = vehiclePINVOKE.ChWheeledVehicle_ParkingBrake(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void DisconnectDriveline() {
    vehiclePINVOKE.ChWheeledVehicle_DisconnectDriveline(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LogConstraintViolations() {
    vehiclePINVOKE.ChWheeledVehicle_LogConstraintViolations(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void LogSubsystemTypes() {
    vehiclePINVOKE.ChWheeledVehicle_LogSubsystemTypes(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override string ExportComponentList() {
    string ret = vehiclePINVOKE.ChWheeledVehicle_ExportComponentList__SWIG_0(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ExportComponentList(string filename) {
    vehiclePINVOKE.ChWheeledVehicle_ExportComponentList__SWIG_1(swigCPtr, filename);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
