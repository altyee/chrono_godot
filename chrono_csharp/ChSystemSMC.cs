//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChSystemSMC : ChSystem {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChSystemSMC(global::System.IntPtr cPtr, bool cMemoryOwn) : base(corePINVOKE.ChSystemSMC_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChSystemSMC obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          corePINVOKE.delete_ChSystemSMC(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChSystemSMC(bool use_material_properties) : this(corePINVOKE.new_ChSystemSMC__SWIG_0(use_material_properties), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChSystemSMC() : this(corePINVOKE.new_ChSystemSMC__SWIG_1(), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChSystemSMC(ChSystemSMC other) : this(corePINVOKE.new_ChSystemSMC__SWIG_2(ChSystemSMC.getCPtr(other)), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChSystem Clone() {
    global::System.IntPtr cPtr = corePINVOKE.ChSystemSMC_Clone(swigCPtr);
    ChSystemSMC ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSystemSMC(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChContactMethod GetContactMethod() {
    ChContactMethod ret = (ChContactMethod)corePINVOKE.ChSystemSMC_GetContactMethod(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void SetContactContainer(ChContactContainer container) {
    corePINVOKE.ChSystemSMC_SetContactContainer(swigCPtr, ChContactContainer.getCPtr(container));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void UseMaterialProperties(bool val) {
    corePINVOKE.ChSystemSMC_UseMaterialProperties(swigCPtr, val);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool UsingMaterialProperties() {
    bool ret = corePINVOKE.ChSystemSMC_UsingMaterialProperties(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetContactForceModel(ChSystemSMC.ContactForceModel model) {
    corePINVOKE.ChSystemSMC_SetContactForceModel(swigCPtr, (int)model);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChSystemSMC.ContactForceModel GetContactForceModel() {
    ChSystemSMC.ContactForceModel ret = (ChSystemSMC.ContactForceModel)corePINVOKE.ChSystemSMC_GetContactForceModel(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetAdhesionForceModel(ChSystemSMC.AdhesionForceModel model) {
    corePINVOKE.ChSystemSMC_SetAdhesionForceModel(swigCPtr, (int)model);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChSystemSMC.AdhesionForceModel GetAdhesionForceModel() {
    ChSystemSMC.AdhesionForceModel ret = (ChSystemSMC.AdhesionForceModel)corePINVOKE.ChSystemSMC_GetAdhesionForceModel(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTangentialDisplacementModel(ChSystemSMC.TangentialDisplacementModel model) {
    corePINVOKE.ChSystemSMC_SetTangentialDisplacementModel(swigCPtr, (int)model);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChSystemSMC.TangentialDisplacementModel GetTangentialDisplacementModel() {
    ChSystemSMC.TangentialDisplacementModel ret = (ChSystemSMC.TangentialDisplacementModel)corePINVOKE.ChSystemSMC_GetTangentialDisplacementModel(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetStiffContact(bool val) {
    corePINVOKE.ChSystemSMC_SetStiffContact(swigCPtr, val);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetStiffContact() {
    bool ret = corePINVOKE.ChSystemSMC_GetStiffContact(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSlipVelocityThreshold(double vel) {
    corePINVOKE.ChSystemSMC_SetSlipVelocityThreshold(swigCPtr, vel);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetSlipVelocityThreshold() {
    double ret = corePINVOKE.ChSystemSMC_GetSlipVelocityThreshold(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetCharacteristicImpactVelocity(double vel) {
    corePINVOKE.ChSystemSMC_SetCharacteristicImpactVelocity(swigCPtr, vel);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetCharacteristicImpactVelocity() {
    double ret = corePINVOKE.ChSystemSMC_GetCharacteristicImpactVelocity(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetContactForceAlgorithm(SWIGTYPE_p_std__unique_ptrT_chrono__ChSystemSMC__ChContactForceSMC_t algorithm) {
    corePINVOKE.ChSystemSMC_SetContactForceAlgorithm(swigCPtr, SWIGTYPE_p_std__unique_ptrT_chrono__ChSystemSMC__ChContactForceSMC_t.getCPtr(algorithm));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChContactForceSMC GetContactForceAlgorithm() {
    ChContactForceSMC ret = new ChContactForceSMC(corePINVOKE.ChSystemSMC_GetContactForceAlgorithm(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut marchive) {
    corePINVOKE.ChSystemSMC_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn marchive) {
    corePINVOKE.ChSystemSMC_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public enum ContactForceModel {
    Hooke,
    Hertz,
    PlainCoulomb,
    Flores
  }

  public enum AdhesionForceModel {
    Constant,
    DMT,
    Perko
  }

  public enum TangentialDisplacementModel {
    None,
    OneStep,
    MultiStep
  }

}
