//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChQuaternionD : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChQuaternionD(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChQuaternionD obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChQuaternionD() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          corePINVOKE.delete_ChQuaternionD(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChQuaternionD() : this(corePINVOKE.new_ChQuaternionD__SWIG_0(), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChQuaternionD(double e0, double e1, double e2, double e3) : this(corePINVOKE.new_ChQuaternionD__SWIG_1(e0, e1, e2, e3), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChQuaternionD(double s, ChVectorD v) : this(corePINVOKE.new_ChQuaternionD__SWIG_2(s, ChVectorD.getCPtr(v)), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChQuaternionD(ChQuaternionD other) : this(corePINVOKE.new_ChQuaternionD__SWIG_3(ChQuaternionD.getCPtr(other)), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_double data() {
    global::System.IntPtr cPtr = corePINVOKE.ChQuaternionD_data(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Set(double e0, double e1, double e2, double e3) {
    corePINVOKE.ChQuaternionD_Set__SWIG_0(swigCPtr, e0, e1, e2, e3);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(ChQuaternionD q) {
    corePINVOKE.ChQuaternionD_Set__SWIG_1(swigCPtr, ChQuaternionD.getCPtr(q));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(double s) {
    corePINVOKE.ChQuaternionD_Set__SWIG_2(swigCPtr, s);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetNull() {
    corePINVOKE.ChQuaternionD_SetNull(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetUnit() {
    corePINVOKE.ChQuaternionD_SetUnit(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetScalar(double s) {
    corePINVOKE.ChQuaternionD_SetScalar(swigCPtr, s);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVector(ChVectorD v) {
    corePINVOKE.ChQuaternionD_SetVector(swigCPtr, ChVectorD.getCPtr(v));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Equals(ChQuaternionD other) {
    bool ret = corePINVOKE.ChQuaternionD_Equals__SWIG_0(swigCPtr, ChQuaternionD.getCPtr(other));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equals(ChQuaternionD other, double tol) {
    bool ret = corePINVOKE.ChQuaternionD_Equals__SWIG_1(swigCPtr, ChQuaternionD.getCPtr(other), tol);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetVector() {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChQuaternionD_GetVector(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetXaxis() {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChQuaternionD_GetXaxis(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetYaxis() {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChQuaternionD_GetYaxis(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetZaxis() {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChQuaternionD_GetZaxis(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Length() {
    double ret = corePINVOKE.ChQuaternionD_Length(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Length2() {
    double ret = corePINVOKE.ChQuaternionD_Length2(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double LengthInf() {
    double ret = corePINVOKE.ChQuaternionD_LengthInf(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaternionD conj() {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.ChQuaternionD_conj(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Add(ChQuaternionD A, ChQuaternionD B) {
    corePINVOKE.ChQuaternionD_Add(swigCPtr, ChQuaternionD.getCPtr(A), ChQuaternionD.getCPtr(B));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Sub(ChQuaternionD A, ChQuaternionD B) {
    corePINVOKE.ChQuaternionD_Sub(swigCPtr, ChQuaternionD.getCPtr(A), ChQuaternionD.getCPtr(B));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Cross(ChQuaternionD qa, ChQuaternionD qb) {
    corePINVOKE.ChQuaternionD_Cross(swigCPtr, ChQuaternionD.getCPtr(qa), ChQuaternionD.getCPtr(qb));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double Dot(ChQuaternionD B) {
    double ret = corePINVOKE.ChQuaternionD_Dot(swigCPtr, ChQuaternionD.getCPtr(B));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Mul(ChQuaternionD A, double s) {
    corePINVOKE.ChQuaternionD_Mul(swigCPtr, ChQuaternionD.getCPtr(A), s);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Scale(double s) {
    corePINVOKE.ChQuaternionD_Scale(swigCPtr, s);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Normalize() {
    bool ret = corePINVOKE.ChQuaternionD_Normalize(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaternionD GetNormalized() {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.ChQuaternionD_GetNormalized(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Conjugate(ChQuaternionD A) {
    corePINVOKE.ChQuaternionD_Conjugate__SWIG_0(swigCPtr, ChQuaternionD.getCPtr(A));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Conjugate() {
    corePINVOKE.ChQuaternionD_Conjugate__SWIG_1(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChQuaternionD GetConjugate() {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.ChQuaternionD_GetConjugate(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaternionD GetInverse() {
    ChQuaternionD ret = new ChQuaternionD(corePINVOKE.ChQuaternionD_GetInverse(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD Rotate(ChVectorD A) {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChQuaternionD_Rotate(swigCPtr, ChVectorD.getCPtr(A)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD RotateBack(ChVectorD A) {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChQuaternionD_RotateBack(swigCPtr, ChVectorD.getCPtr(A)), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Q_from_Rotv(ChVectorD angle_axis) {
    corePINVOKE.ChQuaternionD_Q_from_Rotv(swigCPtr, ChVectorD.getCPtr(angle_axis));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVectorD Q_to_Rotv() {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChQuaternionD_Q_to_Rotv(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Q_from_AngAxis(double angle, ChVectorD axis) {
    corePINVOKE.ChQuaternionD_Q_from_AngAxis(swigCPtr, angle, ChVectorD.getCPtr(axis));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Q_from_AngX(double angleX) {
    corePINVOKE.ChQuaternionD_Q_from_AngX(swigCPtr, angleX);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Q_from_AngY(double angleY) {
    corePINVOKE.ChQuaternionD_Q_from_AngY(swigCPtr, angleY);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Q_from_AngZ(double angleZ) {
    corePINVOKE.ChQuaternionD_Q_from_AngZ(swigCPtr, angleZ);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Q_to_AngAxis(SWIGTYPE_p_double a_angle, ChVectorD a_axis) {
    corePINVOKE.ChQuaternionD_Q_to_AngAxis(swigCPtr, SWIGTYPE_p_double.getCPtr(a_angle), ChVectorD.getCPtr(a_axis));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Q_from_NasaAngles(ChVectorD ang) {
    corePINVOKE.ChQuaternionD_Q_from_NasaAngles(swigCPtr, ChVectorD.getCPtr(ang));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVectorD Q_to_NasaAngles() {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChQuaternionD_Q_to_NasaAngles(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Q_from_Euler123(ChVectorD ang) {
    corePINVOKE.ChQuaternionD_Q_from_Euler123(swigCPtr, ChVectorD.getCPtr(ang));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVectorD Q_to_Euler123() {
    ChVectorD ret = new ChVectorD(corePINVOKE.ChQuaternionD_Q_to_Euler123(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Qdt_from_Wabs(ChVectorD w, ChQuaternionD q) {
    corePINVOKE.ChQuaternionD_Qdt_from_Wabs(swigCPtr, ChVectorD.getCPtr(w), ChQuaternionD.getCPtr(q));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Qdt_from_Wrel(ChVectorD w, ChQuaternionD q) {
    corePINVOKE.ChQuaternionD_Qdt_from_Wrel(swigCPtr, ChVectorD.getCPtr(w), ChQuaternionD.getCPtr(q));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Qdt_to_Wabs(ChVectorD w, ChQuaternionD q) {
    corePINVOKE.ChQuaternionD_Qdt_to_Wabs(swigCPtr, ChVectorD.getCPtr(w), ChQuaternionD.getCPtr(q));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Qdt_to_Wrel(ChVectorD w, ChQuaternionD q) {
    corePINVOKE.ChQuaternionD_Qdt_to_Wrel(swigCPtr, ChVectorD.getCPtr(w), ChQuaternionD.getCPtr(q));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Qdtdt_from_Aabs(ChVectorD a, ChQuaternionD q, ChQuaternionD q_dt) {
    corePINVOKE.ChQuaternionD_Qdtdt_from_Aabs(swigCPtr, ChVectorD.getCPtr(a), ChQuaternionD.getCPtr(q), ChQuaternionD.getCPtr(q_dt));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Qdtdt_from_Arel(ChVectorD a, ChQuaternionD q, ChQuaternionD q_dt) {
    corePINVOKE.ChQuaternionD_Qdtdt_from_Arel(swigCPtr, ChVectorD.getCPtr(a), ChQuaternionD.getCPtr(q), ChQuaternionD.getCPtr(q_dt));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Qdt_from_AngAxis(ChQuaternionD q, double angle_dt, ChVectorD axis) {
    corePINVOKE.ChQuaternionD_Qdt_from_AngAxis(swigCPtr, ChQuaternionD.getCPtr(q), angle_dt, ChVectorD.getCPtr(axis));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Qdtdt_from_AngAxis(ChQuaternionD q, ChQuaternionD q_dt, double angle_dtdt, ChVectorD axis) {
    corePINVOKE.ChQuaternionD_Qdtdt_from_AngAxis(swigCPtr, ChQuaternionD.getCPtr(q), ChQuaternionD.getCPtr(q_dt), angle_dtdt, ChVectorD.getCPtr(axis));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ImmQ_complete(ChVectorD qimm) {
    corePINVOKE.ChQuaternionD_ImmQ_complete(swigCPtr, ChVectorD.getCPtr(qimm));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ImmQ_dt_complete(ChQuaternionD q, ChVectorD qimm_dt) {
    corePINVOKE.ChQuaternionD_ImmQ_dt_complete(swigCPtr, ChQuaternionD.getCPtr(q), ChVectorD.getCPtr(qimm_dt));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ImmQ_dtdt_complete(ChQuaternionD q, ChQuaternionD qdt, ChVectorD qimm_dtdt) {
    corePINVOKE.ChQuaternionD_ImmQ_dtdt_complete(swigCPtr, ChQuaternionD.getCPtr(q), ChQuaternionD.getCPtr(qdt), ChVectorD.getCPtr(qimm_dtdt));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut marchive) {
    corePINVOKE.ChQuaternionD_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn marchive) {
    corePINVOKE.ChQuaternionD_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double e0 {
    set {
      corePINVOKE.ChQuaternionD_e0_set(swigCPtr, value);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = corePINVOKE.ChQuaternionD_e0_get(swigCPtr);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double e1 {
    set {
      corePINVOKE.ChQuaternionD_e1_set(swigCPtr, value);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = corePINVOKE.ChQuaternionD_e1_get(swigCPtr);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double e2 {
    set {
      corePINVOKE.ChQuaternionD_e2_set(swigCPtr, value);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = corePINVOKE.ChQuaternionD_e2_get(swigCPtr);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double e3 {
    set {
      corePINVOKE.ChQuaternionD_e3_set(swigCPtr, value);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = corePINVOKE.ChQuaternionD_e3_get(swigCPtr);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
