//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChInteractiveDriver : ChDriver {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChInteractiveDriver(global::System.IntPtr cPtr, bool cMemoryOwn) : base(vehiclePINVOKE.ChInteractiveDriver_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChInteractiveDriver obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          vehiclePINVOKE.delete_ChInteractiveDriver(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChInteractiveDriver(ChVehicle vehicle) : this(vehiclePINVOKE.new_ChInteractiveDriver(ChVehicle.getCPtr(vehicle)), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool HasJoystick() {
    bool ret = vehiclePINVOKE.ChInteractiveDriver_HasJoystick(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Synchronize(double time) {
    vehiclePINVOKE.ChInteractiveDriver_Synchronize(swigCPtr, time);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Advance(double step) {
    vehiclePINVOKE.ChInteractiveDriver_Advance(swigCPtr, step);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInputMode(ChInteractiveDriver.InputMode mode) {
    vehiclePINVOKE.ChInteractiveDriver_SetInputMode(swigCPtr, (int)mode);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetThrottleDelta(double delta) {
    vehiclePINVOKE.ChInteractiveDriver_SetThrottleDelta(swigCPtr, delta);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSteeringDelta(double delta) {
    vehiclePINVOKE.ChInteractiveDriver_SetSteeringDelta(swigCPtr, delta);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBrakingDelta(double delta) {
    vehiclePINVOKE.ChInteractiveDriver_SetBrakingDelta(swigCPtr, delta);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetClutchDelta(double delta) {
    vehiclePINVOKE.ChInteractiveDriver_SetClutchDelta(swigCPtr, delta);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStepsize(double val) {
    vehiclePINVOKE.ChInteractiveDriver_SetStepsize(swigCPtr, val);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGains(double steering_gain, double throttle_gain, double braking_gain, double clutch_gain) {
    vehiclePINVOKE.ChInteractiveDriver_SetGains__SWIG_0(swigCPtr, steering_gain, throttle_gain, braking_gain, clutch_gain);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGains(double steering_gain, double throttle_gain, double braking_gain) {
    vehiclePINVOKE.ChInteractiveDriver_SetGains__SWIG_1(swigCPtr, steering_gain, throttle_gain, braking_gain);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGains(double steering_gain, double throttle_gain) {
    vehiclePINVOKE.ChInteractiveDriver_SetGains__SWIG_2(swigCPtr, steering_gain, throttle_gain);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGains(double steering_gain) {
    vehiclePINVOKE.ChInteractiveDriver_SetGains__SWIG_3(swigCPtr, steering_gain);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGains() {
    vehiclePINVOKE.ChInteractiveDriver_SetGains__SWIG_4(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInputDataFile(string filename) {
    vehiclePINVOKE.ChInteractiveDriver_SetInputDataFile(swigCPtr, filename);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public enum InputMode {
    LOCK,
    KEYBOARD,
    DATAFILE,
    JOYSTICK
  }

}
