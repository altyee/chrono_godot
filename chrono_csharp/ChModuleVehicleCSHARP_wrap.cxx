/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGCSHARP
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_vehicle(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_vehicle(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_vehicle(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <string>
#include <vector>

#include "chrono/core/ChQuaternion.h"
#include "chrono/core/ChVector.h"
#include "chrono/core/ChCoordsys.h"
#include "chrono/core/ChFrame.h"
#include "chrono/solver/ChSolver.h"

#include "chrono/physics/ChSystem.h"
#include "chrono/physics/ChShaft.h"
#include "chrono/physics/ChShaftsLoads.h"
#include "chrono/physics/ChShaftsFreewheel.h"
#include "chrono/physics/ChBody.h"
#include "chrono/physics/ChBodyAuxRef.h"
#include "chrono/physics/ChMarker.h"
#include "chrono/physics/ChLink.h"
#include "chrono/physics/ChShaftsCouple.h"
#include "chrono/physics/ChLinkTSDA.h"
#include "chrono/physics/ChLinkRSDA.h"
#include "chrono/physics/ChLoadsBody.h"
#include "chrono/physics/ChLoadsXYZnode.h"
#include "chrono/physics/ChPhysicsItem.h"

#include "chrono/collision/ChCollisionModel.h"
#include "chrono/collision/ChCollisionModelBullet.h"

#include "chrono/collision/ChCollisionSystem.h"
#include "chrono/collision/ChCollisionSystemBullet.h"

#include "chrono_vehicle/ChApiVehicle.h"
#include "chrono_vehicle/ChVehicle.h"
#include "chrono_vehicle/ChSubsysDefs.h"
#include "chrono_vehicle/ChVehicleOutput.h"
#include "chrono_vehicle/ChVehicleModelData.h"
#include "chrono_vehicle/ChChassis.h"
#include "chrono_vehicle/ChPart.h"
#include "chrono_vehicle/ChWorldFrame.h"

#include "chrono_vehicle/ChPowertrainAssembly.h"

#include "chrono_vehicle/ChDriver.h"
#include "chrono_vehicle/ChTerrain.h"

#ifdef SWIGPYTHON
#include "chrono_vehicle/ChVehicleVisualSystem.h"
#endif

// Wheeled vehicle
#include "chrono_vehicle/wheeled_vehicle/ChWheeledVehicle.h"
#include "chrono_vehicle/wheeled_vehicle/ChWheeledTrailer.h"
#include "chrono_vehicle/wheeled_vehicle/vehicle/WheeledVehicle.h"
#include "chrono_vehicle/wheeled_vehicle/vehicle/WheeledTrailer.h"

#include "chrono_vehicle/wheeled_vehicle/ChWheel.h"
#include "chrono_vehicle/wheeled_vehicle/wheel/Wheel.h"

#include "chrono_vehicle/wheeled_vehicle/ChAxle.h"

#include "chrono_vehicle/wheeled_vehicle/ChBrake.h"
#include "chrono_vehicle/wheeled_vehicle/brake/ChBrakeSimple.h"
#include "chrono_vehicle/wheeled_vehicle/brake/ChBrakeShafts.h"
#include "chrono_vehicle/wheeled_vehicle/brake/BrakeSimple.h"
#include "chrono_vehicle/wheeled_vehicle/brake/BrakeShafts.h"

#include "chrono_vehicle/wheeled_vehicle/test_rig/ChSuspensionTestRig.h"
#include "chrono_vehicle/wheeled_vehicle/test_rig/ChSuspensionTestRigDriver.h"

// Tracked vehicle
#include "chrono_vehicle/tracked_vehicle/ChTrackedVehicle.h"
#include "chrono_vehicle/tracked_vehicle/vehicle/TrackedVehicle.h"

#include "chrono_vehicle/tracked_vehicle/ChSprocket.h"
#include "chrono_vehicle/tracked_vehicle/ChIdler.h"
#include "chrono_vehicle/tracked_vehicle/ChTrackWheel.h"
#include "chrono_vehicle/tracked_vehicle/ChTrackSuspension.h"
#include "chrono_vehicle/tracked_vehicle/ChTrackShoe.h"

#include "chrono_vehicle/tracked_vehicle/ChTrackBrake.h"
#include "chrono_vehicle/tracked_vehicle/brake/ChTrackBrakeSimple.h"
#include "chrono_vehicle/tracked_vehicle/brake/ChTrackBrakeShafts.h"
#include "chrono_vehicle/tracked_vehicle/brake/TrackBrakeSimple.h"
#include "chrono_vehicle/tracked_vehicle/brake/TrackBrakeShafts.h"

#include "chrono_vehicle/tracked_vehicle/ChTrackContactManager.h"

// Vehicle models
#include "chrono_models/ChApiModels.h"
#include "chrono_models/vehicle/ChVehicleModelDefs.h"

#include "chrono_thirdparty/rapidjson/document.h"
#include "Eigen/src/Core/util/Memory.h"

using namespace chrono;
using namespace chrono::vehicle;

using namespace chrono::vehicle::generic;
using namespace chrono::vehicle::hmmwv;
using namespace chrono::vehicle::sedan;
using namespace chrono::vehicle::citybus;
using namespace chrono::vehicle::man;
using namespace chrono::vehicle::uaz;
using namespace chrono::vehicle::gator;
using namespace chrono::vehicle::man;
using namespace chrono::vehicle::fmtv;
using namespace chrono::vehicle::kraz;

using namespace chrono::vehicle::m113;


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


typedef int int_ptr;

SWIGINTERN int_ptr *new_int_ptr(){
  return new int();
}
SWIGINTERN void delete_int_ptr(int_ptr *self){
  delete self;
}
SWIGINTERN void int_ptr_assign(int_ptr *self,int value){
  *self = value;
}
SWIGINTERN int int_ptr_value(int_ptr *self){
  return *self;
}
SWIGINTERN int *int_ptr_cast(int_ptr *self){
  return self;
}
SWIGINTERN int_ptr *int_ptr_frompointer(int *t){
  return (int_ptr *) t;
}

typedef double double_ptr;

SWIGINTERN double_ptr *new_double_ptr(){
  return new double();
}
SWIGINTERN void delete_double_ptr(double_ptr *self){
  delete self;
}
SWIGINTERN void double_ptr_assign(double_ptr *self,double value){
  *self = value;
}
SWIGINTERN double double_ptr_value(double_ptr *self){
  return *self;
}
SWIGINTERN double *double_ptr_cast(double_ptr *self){
  return self;
}
SWIGINTERN double_ptr *double_ptr_frompointer(double *t){
  return (double_ptr *) t;
}

typedef float float_ptr;

SWIGINTERN float_ptr *new_float_ptr(){
  return new float();
}
SWIGINTERN void delete_float_ptr(float_ptr *self){
  delete self;
}
SWIGINTERN void float_ptr_assign(float_ptr *self,float value){
  *self = value;
}
SWIGINTERN float float_ptr_value(float_ptr *self){
  return *self;
}
SWIGINTERN float *float_ptr_cast(float_ptr *self){
  return self;
}
SWIGINTERN float_ptr *float_ptr_frompointer(float *t){
  return (float_ptr *) t;
}

typedef char char_ptr;

SWIGINTERN char_ptr *new_char_ptr(){
  return new char();
}
SWIGINTERN void delete_char_ptr(char_ptr *self){
  delete self;
}
SWIGINTERN void char_ptr_assign(char_ptr *self,char value){
  *self = value;
}
SWIGINTERN char char_ptr_value(char_ptr *self){
  return *self;
}
SWIGINTERN char *char_ptr_cast(char_ptr *self){
  return self;
}
SWIGINTERN char_ptr *char_ptr_frompointer(char *t){
  return (char_ptr *) t;
}
SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(int capacity){
        std::vector< int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN int std_vector_Sl_int_Sg__getitemcopy(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg__getitem(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__setitem(std::vector< int > *self,int index,int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__AddRange(std::vector< int > *self,std::vector< int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__GetRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Insert(std::vector< int > *self,int index,int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__InsertRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveAt(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__Repeat(int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< int >(count, value);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_0(std::vector< int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_1(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__SetRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Contains(std::vector< int > *self,int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int_Sg__IndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int_Sg__LastIndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Remove(std::vector< int > *self,int const &value){
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< double > *new_std_vector_Sl_double_Sg___SWIG_2(int capacity){
        std::vector< double >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< double >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN double std_vector_Sl_double_Sg__getitemcopy(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg__getitem(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__setitem(std::vector< double > *self,int index,double const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__AddRange(std::vector< double > *self,std::vector< double > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__GetRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< double >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Insert(std::vector< double > *self,int index,double const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__InsertRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveAt(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__Repeat(double const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< double >(count, value);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_0(std::vector< double > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_1(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__SetRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Contains(std::vector< double > *self,double const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_double_Sg__IndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_double_Sg__LastIndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Remove(std::vector< double > *self,double const &value){
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< chrono::vehicle::TerrainForce > *new_std_vector_Sl_chrono_vehicle_TerrainForce_Sg___SWIG_2(int capacity){
        std::vector< chrono::vehicle::TerrainForce >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< chrono::vehicle::TerrainForce >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN chrono::vehicle::TerrainForce std_vector_Sl_chrono_vehicle_TerrainForce_Sg__getitemcopy(std::vector< chrono::vehicle::TerrainForce > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< chrono::vehicle::TerrainForce >::value_type const &std_vector_Sl_chrono_vehicle_TerrainForce_Sg__getitem(std::vector< chrono::vehicle::TerrainForce > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_TerrainForce_Sg__setitem(std::vector< chrono::vehicle::TerrainForce > *self,int index,chrono::vehicle::TerrainForce const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_TerrainForce_Sg__AddRange(std::vector< chrono::vehicle::TerrainForce > *self,std::vector< chrono::vehicle::TerrainForce > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< chrono::vehicle::TerrainForce > *std_vector_Sl_chrono_vehicle_TerrainForce_Sg__GetRange(std::vector< chrono::vehicle::TerrainForce > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< chrono::vehicle::TerrainForce >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_TerrainForce_Sg__Insert(std::vector< chrono::vehicle::TerrainForce > *self,int index,chrono::vehicle::TerrainForce const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_TerrainForce_Sg__InsertRange(std::vector< chrono::vehicle::TerrainForce > *self,int index,std::vector< chrono::vehicle::TerrainForce > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_TerrainForce_Sg__RemoveAt(std::vector< chrono::vehicle::TerrainForce > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_TerrainForce_Sg__RemoveRange(std::vector< chrono::vehicle::TerrainForce > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< chrono::vehicle::TerrainForce > *std_vector_Sl_chrono_vehicle_TerrainForce_Sg__Repeat(chrono::vehicle::TerrainForce const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< chrono::vehicle::TerrainForce >(count, value);
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_TerrainForce_Sg__Reverse__SWIG_0(std::vector< chrono::vehicle::TerrainForce > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_TerrainForce_Sg__Reverse__SWIG_1(std::vector< chrono::vehicle::TerrainForce > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_TerrainForce_Sg__SetRange(std::vector< chrono::vehicle::TerrainForce > *self,int index,std::vector< chrono::vehicle::TerrainForce > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< chrono::vehicle::WheelState > *new_std_vector_Sl_chrono_vehicle_WheelState_Sg___SWIG_2(int capacity){
        std::vector< chrono::vehicle::WheelState >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< chrono::vehicle::WheelState >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN chrono::vehicle::WheelState std_vector_Sl_chrono_vehicle_WheelState_Sg__getitemcopy(std::vector< chrono::vehicle::WheelState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< chrono::vehicle::WheelState >::value_type const &std_vector_Sl_chrono_vehicle_WheelState_Sg__getitem(std::vector< chrono::vehicle::WheelState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_WheelState_Sg__setitem(std::vector< chrono::vehicle::WheelState > *self,int index,chrono::vehicle::WheelState const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_WheelState_Sg__AddRange(std::vector< chrono::vehicle::WheelState > *self,std::vector< chrono::vehicle::WheelState > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< chrono::vehicle::WheelState > *std_vector_Sl_chrono_vehicle_WheelState_Sg__GetRange(std::vector< chrono::vehicle::WheelState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< chrono::vehicle::WheelState >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_WheelState_Sg__Insert(std::vector< chrono::vehicle::WheelState > *self,int index,chrono::vehicle::WheelState const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_WheelState_Sg__InsertRange(std::vector< chrono::vehicle::WheelState > *self,int index,std::vector< chrono::vehicle::WheelState > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_WheelState_Sg__RemoveAt(std::vector< chrono::vehicle::WheelState > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_WheelState_Sg__RemoveRange(std::vector< chrono::vehicle::WheelState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< chrono::vehicle::WheelState > *std_vector_Sl_chrono_vehicle_WheelState_Sg__Repeat(chrono::vehicle::WheelState const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< chrono::vehicle::WheelState >(count, value);
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_WheelState_Sg__Reverse__SWIG_0(std::vector< chrono::vehicle::WheelState > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_WheelState_Sg__Reverse__SWIG_1(std::vector< chrono::vehicle::WheelState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_WheelState_Sg__SetRange(std::vector< chrono::vehicle::WheelState > *self,int index,std::vector< chrono::vehicle::WheelState > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *new_std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::shared_ptr< chrono::vehicle::ChWheel > std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__getitemcopy(std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const &std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__getitem(std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__setitem(std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *self,int index,std::shared_ptr< chrono::vehicle::ChWheel > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__AddRange(std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *self,std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__GetRange(std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__Insert(std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *self,int index,std::shared_ptr< chrono::vehicle::ChWheel > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__InsertRange(std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *self,int index,std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__RemoveAt(std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__RemoveRange(std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__Repeat(std::shared_ptr< chrono::vehicle::ChWheel > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__Reverse__SWIG_0(std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__Reverse__SWIG_1(std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__SetRange(std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *self,int index,std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *new_std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::shared_ptr< chrono::vehicle::ChAxle > std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__getitemcopy(std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const &std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__getitem(std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__setitem(std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *self,int index,std::shared_ptr< chrono::vehicle::ChAxle > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__AddRange(std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *self,std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__GetRange(std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__Insert(std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *self,int index,std::shared_ptr< chrono::vehicle::ChAxle > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__InsertRange(std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *self,int index,std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__RemoveAt(std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__RemoveRange(std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__Repeat(std::shared_ptr< chrono::vehicle::ChAxle > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__Reverse__SWIG_0(std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__Reverse__SWIG_1(std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__SetRange(std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *self,int index,std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "chrono/physics/ChNodeXYZ.h"


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


#include <string>
#include <vector>

#include "chrono/physics/ChSystem.h"
#include "chrono/physics/ChBodyAuxRef.h"
#include "chrono/physics/ChShaft.h"
#include "chrono/physics/ChShaftsBody.h"
#include "chrono/assets/ChCylinderShape.h"

#include "chrono_vehicle/ChApiVehicle.h"
#include "chrono_vehicle/ChPart.h"
#include "chrono/core/ChVector.h"
#include "chrono/core/ChFrame.h"
#include "chrono/physics/ChBody.h"

#include "chrono_vehicle/ChPowertrainAssembly.h"

#include "chrono_vehicle/powertrain/ChEngineSimple.h"
#include "chrono_vehicle/powertrain/ChEngineSimpleMap.h"
#include "chrono_vehicle/powertrain/ChEngineShafts.h"
#include "chrono_vehicle/powertrain/EngineSimple.h"
#include "chrono_vehicle/powertrain/EngineSimpleMap.h"
#include "chrono_vehicle/powertrain/EngineShafts.h"

#include "chrono_vehicle/powertrain/ChAutomaticTransmissionSimpleMap.h"
#include "chrono_vehicle/powertrain/ChAutomaticTransmissionShafts.h"
#include "chrono_vehicle/powertrain/AutomaticTransmissionSimpleMap.h"
#include "chrono_vehicle/powertrain/AutomaticTransmissionShafts.h"



/* Includes additional C++ in the wrapper code */

#include <string>
#include <vector>

#include "chrono_vehicle/ChVehicle.h"
#include "chrono_vehicle/ChPowertrainAssembly.h"
#include "chrono/core/ChCubicSpline.h"

//#include "chrono_models/ChApiModels.h"

#include "chrono_models/vehicle/generic/powertrain/Generic_AutomaticTransmissionSimple.h"
#include "chrono_models/vehicle/generic/powertrain/Generic_EngineSimple.h"
#include "chrono_models/vehicle/generic/powertrain/Generic_AutomaticTransmissionSimpleMap.h"
#include "chrono_models/vehicle/generic/powertrain/Generic_EngineSimpleMap.h"

#include "chrono_models/vehicle/hmmwv/powertrain/HMMWV_EngineShafts.h"
#include "chrono_models/vehicle/hmmwv/powertrain/HMMWV_EngineSimpleMap.h"
#include "chrono_models/vehicle/hmmwv/powertrain/HMMWV_EngineSimple.h"
#include "chrono_models/vehicle/hmmwv/powertrain/HMMWV_AutomaticTransmissionShafts.h"
#include "chrono_models/vehicle/hmmwv/powertrain/HMMWV_AutomaticTransmissionSimpleMap.h"

#include "chrono_models/vehicle/sedan/Sedan_EngineSimpleMap.h"
#include "chrono_models/vehicle/sedan/Sedan_AutomaticTransmissionSimpleMap.h"

#include "chrono_models/vehicle/citybus/CityBus_EngineSimpleMap.h"
#include "chrono_models/vehicle/citybus/CityBus_AutomaticTransmissionSimpleMap.h"

#include "chrono_models/vehicle/man/powertrain/MAN_5t_EngineSimple.h"
#include "chrono_models/vehicle/man/powertrain/MAN_5t_AutomaticTransmissionSimple.h"
#include "chrono_models/vehicle/man/powertrain/MAN_5t_EngineSimpleMap.h"
#include "chrono_models/vehicle/man/powertrain/MAN_5t_AutomaticTransmissionSimpleMap.h"
#include "chrono_models/vehicle/man/powertrain/MAN_7t_EngineSimple.h"
#include "chrono_models/vehicle/man/powertrain/MAN_7t_AutomaticTransmissionSimple.h"
#include "chrono_models/vehicle/man/powertrain/MAN_7t_EngineSimpleMap.h"
#include "chrono_models/vehicle/man/powertrain/MAN_7t_AutomaticTransmissionSimpleMap.h"

#include "chrono_models/vehicle/uaz/UAZBUS_EngineSimpleMap.h"
#include "chrono_models/vehicle/uaz/UAZBUS_AutomaticTransmissionSimpleMap.h"

#include "chrono_models/vehicle/gator/Gator_EngineSimpleMap.h"
#include "chrono_models/vehicle/gator/Gator_EngineSimple.h"
#include "chrono_models/vehicle/gator/Gator_AutomaticTransmissionSimpleMap.h"
#include "chrono_models/vehicle/gator/Gator_AutomaticTransmissionSimple.h"

#include "chrono_models/vehicle/rccar/RCCar_EngineSimpleMap.h"
#include "chrono_models/vehicle/rccar/RCCar_AutomaticTransmissionSimpleMap.h"

#include "chrono_models/vehicle/feda/FEDA_EngineSimpleMap.h"
#include "chrono_models/vehicle/feda/FEDA_AutomaticTransmissionSimpleMap.h"

#include "chrono_models/vehicle/m113/powertrain/M113_AutomaticTransmissionShafts.h"
#include "chrono_models/vehicle/m113/powertrain/M113_AutomaticTransmissionSimple.h"
#include "chrono_models/vehicle/m113/powertrain/M113_AutomaticTransmissionSimpleMap.h"
#include "chrono_models/vehicle/m113/powertrain/M113_EngineShafts.h"
#include "chrono_models/vehicle/m113/powertrain/M113_EngineSimple.h"
#include "chrono_models/vehicle/m113/powertrain/M113_EngineSimpleMap.h"



/* Includes additional C++ in the wrapper code */

#include <string>
#include <vector>

#include "chrono/core/ChVector.h"
#include "chrono/core/ChFrame.h"
#include "chrono/assets/ChColor.h"
#include "chrono/geometry/ChTriangleMeshConnected.h"
#include "chrono/physics/ChBody.h"
#include "chrono/physics/ChSystem.h"

#include "chrono_vehicle/ChApiVehicle.h"
#include "chrono_vehicle/ChChassis.h"
#include "chrono_vehicle/chassis/ChRigidChassis.h"
#include "chrono_vehicle/chassis/ChChassisConnectorArticulated.h"
#include "chrono_vehicle/chassis/ChChassisConnectorTorsion.h"
#include "chrono_vehicle/chassis/ChChassisConnectorHitch.h"
#include "chrono_vehicle/chassis/RigidChassis.h"
#include "chrono_vehicle/chassis/ChassisConnectorArticulated.h"
#include "chrono_vehicle/chassis/ChassisConnectorHitch.h"
#include "chrono_vehicle/chassis/ChassisConnectorTorsion.h"

#include "chrono_thirdparty/rapidjson/document.h"




/* Includes additional C++ in the wrapper code */

#include <string>
#include <vector>

#include "chrono_vehicle/ChApiVehicle.h"
#include "chrono_vehicle/ChChassis.h"
#include "chrono_vehicle/chassis/RigidChassis.h"
#include "chrono_vehicle/chassis/ChRigidChassis.h"

#include "chrono_thirdparty/rapidjson/document.h"

#include "chrono_models/ChApiModels.h"
#include "chrono_models/vehicle/ChVehicleModelDefs.h"

#include "chrono_models/vehicle/generic/Generic_Chassis.h"
#include "chrono_models/vehicle/hmmwv/HMMWV_Chassis.h"
#include "chrono_models/vehicle/sedan/Sedan_Chassis.h"
#include "chrono_models/vehicle/citybus/CityBus_Chassis.h"
#include "chrono_models/vehicle/man/MAN_5t_Chassis.h"
#include "chrono_models/vehicle/man/MAN_7t_Chassis.h"
#include "chrono_models/vehicle/man/MAN_10t_Chassis.h"
#include "chrono_models/vehicle/uaz/UAZBUS_Chassis.h"
#include "chrono_models/vehicle/gator/Gator_Chassis.h"
#include "chrono_models/vehicle/rccar/RCCar_Chassis.h"
#include "chrono_models/vehicle/feda/FEDA_Chassis.h"

#include "chrono_models/vehicle/m113/M113_Chassis.h"



/* Includes additional C++ in the wrapper code */
#include <string>
#include <vector>

#include "chrono/ChConfig.h"

#include "chrono/core/ChBezierCurve.h"
#include "chrono/utils/ChUtilsChaseCamera.h"
#include "chrono_vehicle/ChVehicle.h"
#include "chrono_vehicle/utils/ChSpeedController.h"
#include "chrono_vehicle/utils/ChSteeringController.h"
#include "chrono_vehicle/utils/ChAdaptiveSpeedController.h"
#include "chrono_vehicle/driver/ChDataDriver.h"
#include "chrono_vehicle/driver/ChInteractiveDriver.h"
#include "chrono_vehicle/driver/ChPathFollowerDriver.h"
#include "chrono_vehicle/driver/ChPathFollowerACCDriver.h"
#include "chrono_vehicle/driver/ChExternalDriver.h"
#include "chrono_vehicle/wheeled_vehicle/test_rig/ChSuspensionTestRigDriver.h"
#include "chrono_vehicle/wheeled_vehicle/test_rig/ChSuspensionTestRigDataDriver.h"

#ifdef SWIGPYTHON  // --------------------------------------------------------------------- PYTHON

#ifdef CHRONO_IRRLICHT
#include "chrono_vehicle/ChVehicleVisualSystemIrrlicht.h"
#include "chrono_vehicle/driver/ChInteractiveDriverIRR.h"
#include "chrono_vehicle/wheeled_vehicle/test_rig/ChSuspensionTestRigInteractiveDriverIRR.h"
#include "chrono_vehicle/wheeled_vehicle/ChWheeledVehicleVisualSystemIrrlicht.h"
#include "chrono_vehicle/tracked_vehicle/ChTrackedVehicleVisualSystemIrrlicht.h"

//using namespace chrono::irrlicht;
//using namespace irr;
#endif

#endif             // --------------------------------------------------------------------- PYTHON


SWIGINTERN std::vector< chrono::vehicle::ChDataDriver::Entry > *new_std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg___SWIG_2(int capacity){
        std::vector< chrono::vehicle::ChDataDriver::Entry >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< chrono::vehicle::ChDataDriver::Entry >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN chrono::vehicle::ChDataDriver::Entry std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__getitemcopy(std::vector< chrono::vehicle::ChDataDriver::Entry > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< chrono::vehicle::ChDataDriver::Entry >::value_type const &std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__getitem(std::vector< chrono::vehicle::ChDataDriver::Entry > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__setitem(std::vector< chrono::vehicle::ChDataDriver::Entry > *self,int index,chrono::vehicle::ChDataDriver::Entry const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__AddRange(std::vector< chrono::vehicle::ChDataDriver::Entry > *self,std::vector< chrono::vehicle::ChDataDriver::Entry > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< chrono::vehicle::ChDataDriver::Entry > *std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__GetRange(std::vector< chrono::vehicle::ChDataDriver::Entry > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< chrono::vehicle::ChDataDriver::Entry >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__Insert(std::vector< chrono::vehicle::ChDataDriver::Entry > *self,int index,chrono::vehicle::ChDataDriver::Entry const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__InsertRange(std::vector< chrono::vehicle::ChDataDriver::Entry > *self,int index,std::vector< chrono::vehicle::ChDataDriver::Entry > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__RemoveAt(std::vector< chrono::vehicle::ChDataDriver::Entry > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__RemoveRange(std::vector< chrono::vehicle::ChDataDriver::Entry > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< chrono::vehicle::ChDataDriver::Entry > *std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__Repeat(chrono::vehicle::ChDataDriver::Entry const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< chrono::vehicle::ChDataDriver::Entry >(count, value);
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__Reverse__SWIG_0(std::vector< chrono::vehicle::ChDataDriver::Entry > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__Reverse__SWIG_1(std::vector< chrono::vehicle::ChDataDriver::Entry > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__SetRange(std::vector< chrono::vehicle::ChDataDriver::Entry > *self,int index,std::vector< chrono::vehicle::ChDataDriver::Entry > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include <string>
#include <vector>

#include "chrono/core/ChVector.h"
#include "chrono/core/ChFrame.h"
#include "chrono/assets/ChColor.h"
#include "chrono/geometry/ChTriangleMeshConnected.h"
#include "chrono/physics/ChBody.h"
#include "chrono/physics/ChSystem.h"

#include "chrono_vehicle/ChApiVehicle.h"
#include "chrono_vehicle/ChTerrain.h"
#include "chrono_vehicle/terrain/FlatTerrain.h"
#include "chrono_vehicle/terrain/RigidTerrain.h"

#include "chrono_vehicle/terrain/SCMTerrain.h"

#include "chrono_thirdparty/rapidjson/document.h"

SWIGINTERN std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *new_std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__getitemcopy(std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::value_type const &std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__getitem(std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__setitem(std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *self,int index,std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__AddRange(std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *self,std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__GetRange(std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__Insert(std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *self,int index,std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__InsertRange(std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *self,int index,std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__RemoveAt(std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__RemoveRange(std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__Repeat(std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__Reverse__SWIG_0(std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__Reverse__SWIG_1(std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__SetRange(std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *self,int index,std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

static int *new_intp(void) { 
  return new int(); 
}

static int *copy_intp(int value) { 
  return new int(value); 
}

static void delete_intp(int *obj) { 
  delete obj; 
}

static void intp_assign(int *obj, int value) {
  *obj = value;
}

static int intp_value(int *obj) {
  return *obj;
}


static double *new_doublep(void) { 
  return new double(); 
}

static double *copy_doublep(double value) { 
  return new double(value); 
}

static void delete_doublep(double *obj) { 
  delete obj; 
}

static void doublep_assign(double *obj, double value) {
  *obj = value;
}

static double doublep_value(double *obj) {
  return *obj;
}



/* Includes additional C++ in the wrapper code */

#include <string>

#include "chrono/physics/ChSystem.h"
#include "chrono/physics/ChBodyAuxRef.h"

#include "chrono_vehicle/ChApiVehicle.h"
#include "chrono_vehicle/ChPart.h"

#include "chrono_vehicle/wheeled_vehicle/ChSteering.h"

#include "chrono_vehicle/wheeled_vehicle/steering/ChPitmanArm.h"
#include "chrono_vehicle/wheeled_vehicle/steering/ChPitmanArmShafts.h"
#include "chrono_vehicle/wheeled_vehicle/steering/ChRackPinion.h"
#include "chrono_vehicle/wheeled_vehicle/steering/ChRotaryArm.h"

#include "chrono_vehicle/wheeled_vehicle/steering/PitmanArm.h"
#include "chrono_vehicle/wheeled_vehicle/steering/RackPinion.h"
#include "chrono_vehicle/wheeled_vehicle/steering/RotaryArm.h"

#include "chrono_thirdparty/rapidjson/document.h"



/* Includes additional C++ in the wrapper code */

#include "chrono/physics/ChSystem.h"
#include "chrono/physics/ChBodyAuxRef.h"

#include "chrono_vehicle/ChApiVehicle.h"
#include "chrono_vehicle/ChPart.h"

#include "chrono_vehicle/wheeled_vehicle/ChSteering.h"
#include "chrono_vehicle/wheeled_vehicle/steering/ChPitmanArm.h"
#include "chrono_vehicle/wheeled_vehicle/steering/ChPitmanArmShafts.h"
#include "chrono_vehicle/wheeled_vehicle/steering/ChRackPinion.h"
#include "chrono_vehicle/wheeled_vehicle/steering/ChRotaryArm.h"

#include "chrono_vehicle/wheeled_vehicle/steering/PitmanArm.h"
#include "chrono_vehicle/wheeled_vehicle/steering/RackPinion.h"
#include "chrono_vehicle/wheeled_vehicle/steering/RotaryArm.h"

#include "chrono_models/vehicle/hmmwv/steering/HMMWV_PitmanArm.h"
#include "chrono_models/vehicle/hmmwv/steering/HMMWV_RackPinion.h"

#include "chrono_models/vehicle/citybus/CityBus_RotaryArm.h"
#include "chrono_models/vehicle/citybus/CityBus_RackPinion.h"

#include "chrono_models/vehicle/man/MAN_5t_RotaryArm.h"
#include "chrono_models/vehicle/man/MAN_10t_RotaryArm2.h"

#include "chrono_models/vehicle/uaz/UAZBUS_RotaryArm.h"

#include "chrono_models/vehicle/gator/Gator_RackPinion.h"

#include "chrono_models/vehicle/rccar/RCCar_PitmanArm.h"

#include "chrono_models/vehicle/feda/FEDA_PitmanArm.h"



/* Includes additional C++ in the wrapper code */

#include <string>

#include "chrono/physics/ChSystem.h"
#include "chrono/physics/ChBodyAuxRef.h"

#include "chrono_vehicle/ChApiVehicle.h"
#include "chrono_vehicle/ChPart.h"

#include "chrono_vehicle/wheeled_vehicle/ChSubchassis.h"

#include "chrono_vehicle/wheeled_vehicle/subchassis/ChBalancer.h"

#include "chrono_vehicle/wheeled_vehicle/subchassis/Balancer.h"

#include "chrono_thirdparty/rapidjson/document.h"



/* Includes additional C++ in the wrapper code */

#include "chrono/physics/ChSystem.h"
#include "chrono/physics/ChBodyAuxRef.h"

#include "chrono_vehicle/ChApiVehicle.h"
#include "chrono_vehicle/ChPart.h"

#include "chrono_vehicle/wheeled_vehicle/ChSubchassis.h"
#include "chrono_vehicle/wheeled_vehicle/subchassis/ChBalancer.h"
#include "chrono_vehicle/wheeled_vehicle/subchassis/Balancer.h"

#include "chrono_models/vehicle/mtv/MTV_Balancer.h"


#include <string>
#include <vector>

#include "chrono/physics/ChSystem.h"
#include "chrono/physics/ChBodyAuxRef.h"
#include "chrono/physics/ChShaft.h"
#include "chrono/physics/ChShaftsBody.h"
#include "chrono/assets/ChCylinderShape.h"

#include "chrono_vehicle/ChApiVehicle.h"
#include "chrono_vehicle/ChPart.h"

#include "chrono_vehicle/wheeled_vehicle/ChSuspension.h"

#include "chrono_vehicle/wheeled_vehicle/suspension/ChDoubleWishbone.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/ChMacPhersonStrut.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/ChLeafspringAxle.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/ChHendricksonPRIMAXX.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/ChDoubleWishboneReduced.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/ChMultiLink.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/ChRigidPinnedAxle.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/ChSemiTrailingArm.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/ChRigidSuspension.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/ChSolidAxle.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/ChThreeLinkIRS.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/ChToeBarLeafspringAxle.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/ChSolidBellcrankThreeLinkAxle.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/ChSolidThreeLinkAxle.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/ChSingleWishbone.h"

#include "chrono_vehicle/wheeled_vehicle/suspension/DoubleWishbone.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/DoubleWishboneReduced.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/HendricksonPRIMAXX.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/LeafspringAxle.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/MacPhersonStrut.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/MultiLink.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/SemiTrailingArm.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/SolidAxle.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/ThreeLinkIRS.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/ToeBarLeafspringAxle.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/SolidBellcrankThreeLinkAxle.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/SolidThreeLinkAxle.h"
#include "chrono_vehicle/wheeled_vehicle/suspension/SingleWishbone.h"

#include "chrono_thirdparty/rapidjson/document.h"



/* Includes additional C++ in the wrapper code */

#include <string>
#include <vector>
#include "chrono/core/ChVector.h"
#include "chrono/core/ChFrame.h"
#include "chrono/assets/ChColor.h"
#include "chrono/geometry/ChTriangleMeshConnected.h"
#include "chrono/physics/ChBody.h"
#include "chrono/physics/ChSystem.h"

#include "chrono_vehicle/ChApiVehicle.h"
#include "chrono/physics/ChShaft.h"
#include "chrono_vehicle/ChPart.h"
#include "chrono_vehicle/wheeled_vehicle/ChSuspension.h"

#include "chrono_models/vehicle/generic/suspension/Generic_RigidSuspension.h"
#include "chrono_models/vehicle/generic/suspension/Generic_RigidPinnedAxle.h"
#include "chrono_models/vehicle/generic/suspension/Generic_MultiLink.h"
#include "chrono_models/vehicle/generic/suspension/Generic_DoubleWishbone.h"

#include "chrono_models/vehicle/hmmwv/suspension/HMMWV_DoubleWishbone.h"
#include "chrono_models/vehicle/hmmwv/suspension/HMMWV_DoubleWishboneReduced.h"

#include "chrono_models/vehicle/sedan/Sedan_DoubleWishbone.h"
#include "chrono_models/vehicle/sedan/Sedan_MultiLink.h"

#include "chrono_models/vehicle/citybus/CityBus_ToeBarLeafspringAxle.h"
#include "chrono_models/vehicle/citybus/CityBus_SolidAxle.h"
#include "chrono_models/vehicle/citybus/CityBus_LeafspringAxle.h"

#include "chrono_models/vehicle/man/suspension/MAN_5t_BellcrankSolid3LinkAxle.h"
#include "chrono_models/vehicle/man/suspension/MAN_5t_Solid3LinkAxle.h"
#include "chrono_models/vehicle/man/suspension/MAN_10t_Front1Axle.h"
#include "chrono_models/vehicle/man/suspension/MAN_10t_Front2Axle.h"

#include "chrono_models/vehicle/uaz/UAZBUS_ToeBarLeafspringAxle.h"
#include "chrono_models/vehicle/uaz/UAZBUS_LeafspringAxle.h"

#include "chrono_models/vehicle/gator/Gator_SingleWishbone.h"
#include "chrono_models/vehicle/gator/Gator_RigidSuspension.h"

#include "chrono_models/vehicle/rccar/RCCar_DoubleWishbone.h"

#include "chrono_models/vehicle/feda/FEDA_DoubleWishbone.h"



/* Includes additional C++ in the wrapper code */

#include <string>
#include <vector>

#include "chrono/core/ChVector.h"
#include "chrono/core/ChFrame.h"
#include "chrono/assets/ChColor.h"
#include "chrono/geometry/ChTriangleMeshConnected.h"
#include "chrono/physics/ChBody.h"
#include "chrono/physics/ChSystem.h"

#include "chrono_vehicle/ChApiVehicle.h"
#include "chrono/physics/ChShaft.h"
#include "chrono_vehicle/ChPart.h"
#include "chrono_vehicle/wheeled_vehicle/ChSuspension.h"

#include "chrono_vehicle/ChDriveline.h"

#include "chrono_vehicle/wheeled_vehicle/ChDrivelineWV.h"
#include "chrono_vehicle/wheeled_vehicle/driveline/ChShaftsDriveline2WD.h"
#include "chrono_vehicle/wheeled_vehicle/driveline/ChShaftsDriveline4WD.h"
#include "chrono_vehicle/wheeled_vehicle/driveline/ChSimpleDriveline.h"
#include "chrono_vehicle/wheeled_vehicle/driveline/ChSimpleDrivelineXWD.h"
#include "chrono_vehicle/wheeled_vehicle/driveline/ShaftsDriveline2WD.h"
#include "chrono_vehicle/wheeled_vehicle/driveline/SimpleDriveline.h"
#include "chrono_vehicle/wheeled_vehicle/driveline/ShaftsDriveline4WD.h"
#include "chrono_vehicle/wheeled_vehicle/driveline/SimpleDrivelineXWD.h"

#include "chrono_vehicle/tracked_vehicle/ChDrivelineTV.h"
#include "chrono_vehicle/tracked_vehicle/driveline/ChSimpleTrackDriveline.h"
#include "chrono_vehicle/tracked_vehicle/driveline/ChTrackDrivelineBDS.h"
#include "chrono_vehicle/tracked_vehicle/driveline/SimpleTrackDriveline.h"
#include "chrono_vehicle/tracked_vehicle/driveline/TrackDrivelineBDS.h"

#include "chrono_thirdparty/rapidjson/document.h"




/* Includes additional C++ in the wrapper code */

#include <string>
#include <vector>
#include "chrono/core/ChVector.h"
#include "chrono/core/ChFrame.h"
#include "chrono/assets/ChColor.h"
#include "chrono/geometry/ChTriangleMeshConnected.h"
#include "chrono/physics/ChBody.h"
#include "chrono/physics/ChSystem.h"

#include "chrono_vehicle/ChApiVehicle.h"
#include "chrono/physics/ChShaft.h"
#include "chrono_vehicle/ChPart.h"
#include "chrono_vehicle/wheeled_vehicle/ChSuspension.h"

#include "chrono_vehicle/ChDriveline.h"
#include "chrono_vehicle/wheeled_vehicle/ChDrivelineWV.h"
#include "chrono_vehicle/wheeled_vehicle/driveline/ChShaftsDriveline2WD.h"
#include "chrono_vehicle/wheeled_vehicle/driveline/ChShaftsDriveline4WD.h"
#include "chrono_vehicle/wheeled_vehicle/driveline/ChSimpleDriveline.h"
#include "chrono_vehicle/wheeled_vehicle/driveline/ChSimpleDrivelineXWD.h"
#include "chrono_vehicle/wheeled_vehicle/driveline/ShaftsDriveline2WD.h"
#include "chrono_vehicle/wheeled_vehicle/driveline/SimpleDriveline.h"
#include "chrono_vehicle/wheeled_vehicle/driveline/ShaftsDriveline4WD.h"
#include "chrono_vehicle/wheeled_vehicle/driveline/SimpleDrivelineXWD.h"

#include "chrono_models/vehicle/generic/driveline/Generic_Driveline2WD.h"
#include "chrono_models/vehicle/generic/driveline/Generic_SimpleDriveline.h"

#include "chrono_models/vehicle/hmmwv/driveline/HMMWV_Driveline2WD.h"
#include "chrono_models/vehicle/hmmwv/driveline/HMMWV_Driveline4WD.h"
#include "chrono_models/vehicle/hmmwv/driveline/HMMWV_SimpleDriveline.h"

#include "chrono_models/vehicle/sedan/Sedan_Driveline2WD.h"

#include "chrono_models/vehicle/citybus/CityBus_Driveline2WD.h"

#include "chrono_models/vehicle/man/MAN_5t_SimpleDriveline.h"
#include "chrono_models/vehicle/man/MAN_5t_SimpleDrivelineXWD.h"

#include "chrono_models/vehicle/uaz/UAZBUS_Driveline4WD.h"
#include "chrono_models/vehicle/uaz/UAZBUS_Driveline2WD.h"

#include "chrono_models/vehicle/gator/Gator_SimpleDriveline.h"
#include "chrono_models/vehicle/gator/Gator_Driveline2WD.h"

#include "chrono_models/vehicle/rccar/RCCar_Driveline4WD.h"

#include "chrono_models/vehicle/feda/FEDA_Driveline4WD.h"

#include "chrono_models/vehicle/m113/driveline/M113_SimpleDriveline.h"
#include "chrono_models/vehicle/m113/driveline/M113_DrivelineBDS.h"


#include "chrono/core/ChCoordsys.h"
#include "chrono/core/ChQuaternion.h"
#include "chrono/core/ChVector.h"
#include "chrono/core/ChFrame.h"
#include "chrono/motion_functions/ChFunction_Recorder.h"
#include "chrono_vehicle/ChApiVehicle.h"
#include "chrono_vehicle/ChPart.h"
#include "chrono_vehicle/ChTerrain.h"
#include "chrono/assets/ChCylinderShape.h"
#include "chrono/assets/ChTexture.h"

#include "chrono_vehicle/wheeled_vehicle/ChTire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/TMeasyTire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/RigidTire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/ReissnerTire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/ReissnerToroidalTire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/FialaTire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/Pac89Tire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/Pac02Tire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/FEATire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/ChTMeasyTire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/ChRigidTire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/ChForceElementTire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/ChReissnerTire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/ChPac89Tire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/ChPac02Tire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/ChFialaTire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/ChFEATire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/ChDeformableTire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/ChANCFTire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/ANCFToroidalTire.h"
#include "chrono_vehicle/wheeled_vehicle/tire/ANCFTire.h"

#include "chrono_thirdparty/rapidjson/document.h"



/* Includes additional C++ in the wrapper code */

#include "chrono/assets/ChTriangleMeshShape.h"

#include "chrono_vehicle/ChSubsysDefs.h"
#include "chrono_vehicle/ChVehicleModelData.h"
#include "chrono_vehicle/wheeled_vehicle/ChWheel.h"

#include "chrono_models/ChApiModels.h"

#include "chrono_models/vehicle/generic/tire/Generic_RigidTire.h"
#include "chrono_models/vehicle/generic/tire/Generic_RigidMeshTire.h"
#include "chrono_models/vehicle/generic/tire/Generic_FialaTire.h"

#include "chrono_models/vehicle/hmmwv/tire/HMMWV_RigidTire.h"
//#include "chrono_models/vehicle/hmmwv/tire/HMMWV_ReissnerTire.h"
#include "chrono_models/vehicle/hmmwv/tire/HMMWV_Pac89Tire.h"
#include "chrono_models/vehicle/hmmwv/tire/HMMWV_Pac02Tire.h"
#include "chrono_models/vehicle/hmmwv/tire/HMMWV_FialaTire.h"
#include "chrono_models/vehicle/hmmwv/tire/HMMWV_TMeasyTire.h"

#include "chrono_models/vehicle/sedan/Sedan_TMeasyTire.h"
#include "chrono_models/vehicle/sedan/Sedan_RigidTire.h"

#include "chrono_models/vehicle/citybus/CityBus_RigidTire.h"
#include "chrono_models/vehicle/citybus/CityBus_TMeasyTire.h"

#include "chrono_models/vehicle/man/MAN_5t_TMeasyTire.h"

#include "chrono_models/vehicle/uaz/UAZBUS_TMeasyTire.h"
#include "chrono_models/vehicle/uaz/UAZBUS_RigidTire.h"
#include "chrono_models/vehicle/uaz/UAZBUS_Pac02Tire.h"

#include "chrono_models/vehicle/gator/Gator_RigidTire.h"
#include "chrono_models/vehicle/gator/Gator_TMeasyTire.h"

#include "chrono_models/vehicle/rccar/RCCar_RigidTire.h"

#include "chrono_models/vehicle/feda/FEDA_Pac02Tire.h"
#include "chrono_models/vehicle/feda/FEDA_RigidTire.h"


#include <string>

#include "chrono/physics/ChSystem.h"
#include "chrono/physics/ChBodyAuxRef.h"

#include "chrono_vehicle/ChApiVehicle.h"
#include "chrono_vehicle/ChPart.h"

#include "chrono_vehicle/tracked_vehicle/ChSprocket.h"
#include "chrono_vehicle/tracked_vehicle/sprocket/ChSprocketSinglePin.h"
#include "chrono_vehicle/tracked_vehicle/sprocket/ChSprocketDoublePin.h"
#include "chrono_vehicle/tracked_vehicle/sprocket/ChSprocketBand.h"
#include "chrono_vehicle/tracked_vehicle/sprocket/SprocketSinglePin.h"
#include "chrono_vehicle/tracked_vehicle/sprocket/SprocketDoublePin.h"
#include "chrono_vehicle/tracked_vehicle/sprocket/SprocketBand.h"

#include "chrono_vehicle/tracked_vehicle/ChIdler.h"
#include "chrono_vehicle/tracked_vehicle/idler/ChTranslationalIdler.h"
//#include "chrono_vehicle/tracked_vehicle/idler/ChDistanceIdler.h"
#include "chrono_vehicle/tracked_vehicle/idler/TranslationalIdler.h"
//#include "chrono_vehicle/tracked_vehicle/idler/DistanceIdler.h"

#include "chrono_vehicle/tracked_vehicle/ChTrackWheel.h"
#include "chrono_vehicle/tracked_vehicle/track_wheel/ChSingleTrackWheel.h"
#include "chrono_vehicle/tracked_vehicle/track_wheel/ChDoubleTrackWheel.h"
#include "chrono_vehicle/tracked_vehicle/track_wheel/SingleTrackWheel.h"
#include "chrono_vehicle/tracked_vehicle/track_wheel/DoubleTrackWheel.h"

#include "chrono_vehicle/tracked_vehicle/ChTrackSuspension.h"
#include "chrono_vehicle/tracked_vehicle/suspension/ChTranslationalDamperSuspension.h"
#include "chrono_vehicle/tracked_vehicle/suspension/ChRotationalDamperSuspension.h"
#include "chrono_vehicle/tracked_vehicle/suspension/TranslationalDamperSuspension.h"
#include "chrono_vehicle/tracked_vehicle/suspension/RotationalDamperSuspension.h"

#include "chrono_vehicle/tracked_vehicle/ChTrackShoe.h"
#include "chrono_vehicle/tracked_vehicle/track_shoe/ChTrackShoeBand.h"
#include "chrono_vehicle/tracked_vehicle/track_shoe/ChTrackShoeBandANCF.h"
#include "chrono_vehicle/tracked_vehicle/track_shoe/ChTrackShoeBandBushing.h"
#include "chrono_vehicle/tracked_vehicle/track_shoe/ChTrackShoeSegmented.h"
#include "chrono_vehicle/tracked_vehicle/track_shoe/ChTrackShoeSinglePin.h"
#include "chrono_vehicle/tracked_vehicle/track_shoe/ChTrackShoeDoublePin.h"
#include "chrono_vehicle/tracked_vehicle/track_shoe/TrackShoeBandANCF.h"
#include "chrono_vehicle/tracked_vehicle/track_shoe/TrackShoeBandBushing.h"
#include "chrono_vehicle/tracked_vehicle/track_shoe/TrackShoeSinglePin.h"
#include "chrono_vehicle/tracked_vehicle/track_shoe/TrackShoeDoublePin.h"

#include "chrono_vehicle/tracked_vehicle/ChTrackAssembly.h"
#include "chrono_vehicle/tracked_vehicle/track_assembly/ChTrackAssemblyBand.h"
#include "chrono_vehicle/tracked_vehicle/track_assembly/ChTrackAssemblyBandANCF.h"
#include "chrono_vehicle/tracked_vehicle/track_assembly/ChTrackAssemblyBandBushing.h"
#include "chrono_vehicle/tracked_vehicle/track_assembly/ChTrackAssemblySegmented.h"
#include "chrono_vehicle/tracked_vehicle/track_assembly/ChTrackAssemblySinglePin.h"
#include "chrono_vehicle/tracked_vehicle/track_assembly/ChTrackAssemblyDoublePin.h"
#include "chrono_vehicle/tracked_vehicle/track_assembly/TrackAssemblyBandANCF.h"
#include "chrono_vehicle/tracked_vehicle/track_assembly/TrackAssemblyBandBushing.h"
#include "chrono_vehicle/tracked_vehicle/track_assembly/TrackAssemblySinglePin.h"
#include "chrono_vehicle/tracked_vehicle/track_assembly/TrackAssemblyDoublePin.h"

#include "chrono_thirdparty/rapidjson/document.h"



/* Includes additional C++ in the wrapper code */

#include "chrono/physics/ChSystem.h"
#include "chrono/physics/ChBodyAuxRef.h"

#include "chrono_vehicle/ChApiVehicle.h"
#include "chrono_vehicle/ChPart.h"

#include "chrono_models/vehicle/m113/sprocket/M113_SprocketBand.h"
#include "chrono_models/vehicle/m113/sprocket/M113_SprocketSinglePin.h"
#include "chrono_models/vehicle/m113/sprocket/M113_SprocketDoublePin.h"

#include "chrono_models/vehicle/m113/M113_Idler.h"

#include "chrono_models/vehicle/m113/M113_RoadWheel.h"

#include "chrono_models/vehicle/m113/M113_Suspension.h"

#include "chrono_models/vehicle/m113/track_shoe/M113_TrackShoeBandANCF.h"
#include "chrono_models/vehicle/m113/track_shoe/M113_TrackShoeBandBushing.h"
#include "chrono_models/vehicle/m113/track_shoe/M113_TrackShoeSinglePin.h"
#include "chrono_models/vehicle/m113/track_shoe/M113_TrackShoeDoublePin.h"

#include "chrono_models/vehicle/m113/track_assembly/M113_TrackAssemblyBandANCF.h"
#include "chrono_models/vehicle/m113/track_assembly/M113_TrackAssemblyBandBushing.h"
#include "chrono_models/vehicle/m113/track_assembly/M113_TrackAssemblySinglePin.h"
#include "chrono_models/vehicle/m113/track_assembly/M113_TrackAssemblyDoublePin.h"



/* Includes additional C++ in the wrapper code */

#include "chrono/assets/ChTriangleMeshShape.h"

#include "chrono_vehicle/ChSubsysDefs.h"
#include "chrono_vehicle/ChVehicleModelData.h"
#include "chrono_vehicle/wheeled_vehicle/ChWheel.h"

#include "chrono_models/ChApiModels.h"

#include "chrono_models/vehicle/generic/Generic_Wheel.h"
#include "chrono_models/vehicle/hmmwv/HMMWV_Wheel.h"
#include "chrono_models/vehicle/sedan/Sedan_Wheel.h"
#include "chrono_models/vehicle/citybus/CityBus_Wheel.h"
#include "chrono_models/vehicle/man/MAN_5t_Wheel.h"
#include "chrono_models/vehicle/uaz/UAZBUS_Wheel.h"
#include "chrono_models/vehicle/gator/Gator_Wheel.h"
#include "chrono_models/vehicle/rccar/RCCar_Wheel.h"
#include "chrono_models/vehicle/feda/FEDA_Wheel.h"



/* Includes additional C++ in the wrapper code */


#include "chrono_vehicle/ChVehicleModelData.h"


#include "chrono_models/ChApiModels.h"

#include "chrono_vehicle/wheeled_vehicle/brake/ChBrakeSimple.h"
#include "chrono_vehicle/wheeled_vehicle/brake/ChBrakeShafts.h"

#include "chrono_models/vehicle/generic/Generic_BrakeSimple.h"
#include "chrono_models/vehicle/hmmwv/brake/HMMWV_BrakeSimple.h"
#include "chrono_models/vehicle/hmmwv/brake/HMMWV_BrakeShafts.h"
#include "chrono_models/vehicle/sedan/Sedan_BrakeSimple.h"
#include "chrono_models/vehicle/sedan/Sedan_BrakeShafts.h"
#include "chrono_models/vehicle/citybus/CityBus_BrakeSimple.h"
#include "chrono_models/vehicle/citybus/CityBus_BrakeShafts.h"
#include "chrono_models/vehicle/man/MAN_5t_BrakeSimple.h"
#include "chrono_models/vehicle/man/MAN_5t_BrakeShafts.h"
#include "chrono_models/vehicle/uaz/UAZBUS_BrakeSimple.h"
#include "chrono_models/vehicle/uaz/UAZBUS_BrakeShafts.h"
#include "chrono_models/vehicle/gator/Gator_BrakeSimple.h"
#include "chrono_models/vehicle/gator/Gator_BrakeShafts.h"
#include "chrono_models/vehicle/rccar/RCCar_BrakeSimple.h"
#include "chrono_models/vehicle/feda/FEDA_BrakeSimple.h"
#include "chrono_models/vehicle/feda/FEDA_BrakeShafts.h"

#include "chrono_models/vehicle/m113/M113_BrakeSimple.h"
#include "chrono_models/vehicle/m113/M113_BrakeShafts.h"



/* Includes additional C++ in the wrapper code */

#include "chrono/core/ChCoordsys.h"
#include "chrono/physics/ChSystem.h"
#include "chrono/physics/ChMaterialSurface.h"

#include "chrono_vehicle/wheeled_vehicle/ChWheeledVehicle.h"
#include "chrono_vehicle/tracked_vehicle/ChTrackedVehicle.h"

#include "chrono_models/ChApiModels.h"


#include "chrono_models/vehicle/generic/Generic_Vehicle.h"

#include "chrono_models/vehicle/hmmwv/HMMWV.h"
#include "chrono_models/vehicle/hmmwv/HMMWV_Vehicle.h"
#include "chrono_models/vehicle/hmmwv/HMMWV_VehicleReduced.h"
#include "chrono_models/vehicle/hmmwv/HMMWV_VehicleFull.h"

#include "chrono_models/vehicle/sedan/Sedan.h"
#include "chrono_models/vehicle/sedan/Sedan_Vehicle.h"

#include "chrono_models/vehicle/citybus/CityBus.h"
#include "chrono_models/vehicle/citybus/CityBus_Vehicle.h"

#include "chrono_models/vehicle/man/MAN_5t.h"
#include "chrono_models/vehicle/man/MAN_7t.h"
#include "chrono_models/vehicle/man/MAN_10t.h"
#include "chrono_models/vehicle/man/MAN_5t_Vehicle.h"
#include "chrono_models/vehicle/man/MAN_7t_Vehicle.h"
#include "chrono_models/vehicle/man/MAN_10t_Vehicle.h"

#include "chrono_models/vehicle/uaz/UAZBUS.h"
#include "chrono_models/vehicle/uaz/UAZBUS_Vehicle.h"

#include "chrono_models/vehicle/gator/Gator.h"
#include "chrono_models/vehicle/gator/Gator_Vehicle.h"

#include "chrono_models/vehicle/rccar/RCCar.h"
#include "chrono_models/vehicle/rccar/RCCar_Vehicle.h"

#include "chrono_models/vehicle/feda/FEDA.h"
#include "chrono_models/vehicle/feda/FEDA_Vehicle.h"

#include "chrono_models/vehicle/m113/M113.h"
#include "chrono_models/vehicle/m113/M113_Vehicle.h"


#include <string>
#include <vector>

#include "chrono_vehicle/utils/ChSteeringController.h"
#include "chrono_vehicle/utils/ChSpeedController.h"
#include "chrono_vehicle/utils/ChAdaptiveSpeedController.h"
#include "chrono_vehicle/utils/ChVehiclePath.h"
#include "chrono_vehicle/utils/ChUtilsJSON.h"


  std::shared_ptr<chrono::vehicle::ChDoubleWishbone> CastToChDoubleWishbone(std::shared_ptr<chrono::vehicle::ChSuspension> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChDoubleWishbone>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChMacPhersonStrut> CastToChMacPhersonStrut(std::shared_ptr<chrono::vehicle::ChSuspension> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChMacPhersonStrut>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChLeafspringAxle> CastToChLeafspringAxle(std::shared_ptr<chrono::vehicle::ChSuspension> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChLeafspringAxle>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChHendricksonPRIMAXX> CastToChHendricksonPRIMAXX(std::shared_ptr<chrono::vehicle::ChSuspension> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChHendricksonPRIMAXX>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChDoubleWishboneReduced> CastToChDoubleWishboneReduced(std::shared_ptr<chrono::vehicle::ChSuspension> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChDoubleWishboneReduced>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChMultiLink> CastToChMultiLink(std::shared_ptr<chrono::vehicle::ChSuspension> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChMultiLink>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChRigidPinnedAxle> CastToChRigidPinnedAxle(std::shared_ptr<chrono::vehicle::ChSuspension> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChRigidPinnedAxle>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChSemiTrailingArm> CastToChSemiTrailingArm(std::shared_ptr<chrono::vehicle::ChSuspension> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChSemiTrailingArm>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChRigidSuspension> CastToChRigidSuspension(std::shared_ptr<chrono::vehicle::ChSuspension> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChRigidSuspension>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChSolidAxle> CastToChSolidAxle(std::shared_ptr<chrono::vehicle::ChSuspension> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChSolidAxle>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChThreeLinkIRS> CastToChThreeLinkIRS(std::shared_ptr<chrono::vehicle::ChSuspension> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChThreeLinkIRS>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChToeBarLeafspringAxle> CastToChToeBarLeafspringAxle(std::shared_ptr<chrono::vehicle::ChSuspension> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChToeBarLeafspringAxle>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChSolidBellcrankThreeLinkAxle> CastToChSolidBellcrankThreeLinkAxle(std::shared_ptr<chrono::vehicle::ChSuspension> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChSolidBellcrankThreeLinkAxle>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChSolidThreeLinkAxle> CastToChSolidThreeLinkAxle(std::shared_ptr<chrono::vehicle::ChSuspension> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChSolidThreeLinkAxle>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChSingleWishbone> CastToChSingleWishbone(std::shared_ptr<chrono::vehicle::ChSuspension> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChSingleWishbone>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChPitmanArm> CastToChPitmanArm(std::shared_ptr<chrono::vehicle::ChSteering> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChPitmanArm>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChPitmanArmShafts> CastToChPitmanArmShafts(std::shared_ptr<chrono::vehicle::ChSteering> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChPitmanArmShafts>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChRackPinion> CastToChRackPinion(std::shared_ptr<chrono::vehicle::ChSteering> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChRackPinion>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChRotaryArm> CastToChRotaryArm(std::shared_ptr<chrono::vehicle::ChSteering> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChRotaryArm>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChRigidChassis> CastToChRigidChassis(std::shared_ptr<chrono::vehicle::ChChassis> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChRigidChassis>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChRigidChassisRear> CastToChRigidChassisRear(std::shared_ptr<chrono::vehicle::ChChassisRear> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChRigidChassisRear>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChChassisConnectorArticulated> CastToChChassisConnectorArticulated(std::shared_ptr<chrono::vehicle::ChChassisConnector> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChChassisConnectorArticulated>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChChassisConnectorHitch> CastToChChassisConnectorHitch(std::shared_ptr<chrono::vehicle::ChChassisConnector> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChChassisConnectorHitch>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChChassisConnectorTorsion> CastToChChassisConnectorTorsion(std::shared_ptr<chrono::vehicle::ChChassisConnector> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChChassisConnectorTorsion>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChBalancer> CastToChBalancer(std::shared_ptr<chrono::vehicle::ChSubchassis> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChBalancer>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChTMeasyTire> CastToChTMeasyTire(std::shared_ptr<chrono::vehicle::ChTire> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChTMeasyTire>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChRigidTire> CastToChRigidTire(std::shared_ptr<chrono::vehicle::ChTire> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChRigidTire>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChReissnerTire> CastToChReissnerTire(std::shared_ptr<chrono::vehicle::ChTire> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChReissnerTire>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChPac89Tire> CastToChPac89Tire(std::shared_ptr<chrono::vehicle::ChTire> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChPac89Tire>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChPac02Tire> CastToChPac02Tire(std::shared_ptr<chrono::vehicle::ChTire> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChPac02Tire>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChFialaTire> CastToChFialaTire(std::shared_ptr<chrono::vehicle::ChTire> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChFialaTire>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChEngineSimple> CastToChEngineSimple(std::shared_ptr<chrono::vehicle::ChEngine> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChEngineSimple>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChEngineSimpleMap> CastToChEngineSimpleMap(std::shared_ptr<chrono::vehicle::ChEngine> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChEngineSimpleMap>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChEngineShafts> CastToChEngineShafts(std::shared_ptr<chrono::vehicle::ChEngine> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChEngineShafts>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::EngineSimple> CastToEngineSimple(std::shared_ptr<chrono::vehicle::ChEngine> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::EngineSimple>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::EngineSimpleMap> CastToEngineSimpleMap(std::shared_ptr<chrono::vehicle::ChEngine> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::EngineSimpleMap>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::EngineShafts> CastToEngineShafts(std::shared_ptr<chrono::vehicle::ChEngine> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::EngineShafts>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChAutomaticTransmissionSimpleMap> CastToChAutomaticTransmissionSimpleMap(std::shared_ptr<chrono::vehicle::ChTransmission> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChAutomaticTransmissionSimpleMap>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChAutomaticTransmissionShafts> CastToChAutomaticTransmissionShafts(std::shared_ptr<chrono::vehicle::ChTransmission> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChAutomaticTransmissionShafts>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::AutomaticTransmissionSimpleMap> CastToAutomaticTransmissionSimpleMap(std::shared_ptr<chrono::vehicle::ChTransmission> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::AutomaticTransmissionSimpleMap>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::AutomaticTransmissionShafts> CastToAutomaticTransmissionShafts(std::shared_ptr<chrono::vehicle::ChTransmission> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::AutomaticTransmissionShafts>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChDrivelineWV> CastToChDrivelineWV(std::shared_ptr<chrono::vehicle::ChDriveline> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChDrivelineWV>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChShaftsDriveline2WD> CastToChShaftsDriveline2WD(std::shared_ptr<chrono::vehicle::ChDriveline> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChShaftsDriveline2WD>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChShaftsDriveline4WD> CastToChShaftsDriveline4WD(std::shared_ptr<chrono::vehicle::ChDriveline> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChShaftsDriveline4WD>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChSimpleDriveline> CastToChSimpleDriveline(std::shared_ptr<chrono::vehicle::ChDriveline> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChSimpleDriveline>(in_obj));
  }


  std::shared_ptr<chrono::vehicle::ChSimpleDrivelineXWD> CastToChSimpleDrivelineXWD(std::shared_ptr<chrono::vehicle::ChDriveline> in_obj) 
  {
	  return (std::dynamic_pointer_cast<chrono::vehicle::ChSimpleDrivelineXWD>(in_obj));
  }



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "ChModuleVehicleCSHARP_wrap.h"

SwigDirector_ChExternalDriver_DataGeneratorFunctor::SwigDirector_ChExternalDriver_DataGeneratorFunctor(std::string const &type,std::string const &id) : chrono::vehicle::ChExternalDriver::DataGeneratorFunctor(type, id), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ChExternalDriver_DataGeneratorFunctor::~SwigDirector_ChExternalDriver_DataGeneratorFunctor() {
  
}


void SwigDirector_ChExternalDriver_DataGeneratorFunctor::Serialize(chrono::vehicle::ChJSONWriter &writer) {
  void * jwriter = 0 ;
  
  if (!swig_callbackSerialize) {
    Swig::DirectorPureVirtualException::raise("chrono::vehicle::ChExternalDriver::DataGeneratorFunctor::Serialize");
    return;
  } else {
    jwriter = new std::shared_ptr<  chrono::vehicle::ChJSONWriter > (&writer SWIG_NO_NULL_DELETER_0); 
    swig_callbackSerialize(jwriter);
  }
}

bool SwigDirector_ChExternalDriver_DataGeneratorFunctor::HasData() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackHasData) {
    return chrono::vehicle::ChExternalDriver::DataGeneratorFunctor::HasData();
  } else {
    jresult = (unsigned int) swig_callbackHasData();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_ChExternalDriver_DataGeneratorFunctor::swig_connect_director(SWIG_Callback0_t callbackSerialize, SWIG_Callback1_t callbackHasData) {
  swig_callbackSerialize = callbackSerialize;
  swig_callbackHasData = callbackHasData;
}

void SwigDirector_ChExternalDriver_DataGeneratorFunctor::swig_init_callbacks() {
  swig_callbackSerialize = 0;
  swig_callbackHasData = 0;
}

SwigDirector_ChExternalDriver_DataParserFunctor::SwigDirector_ChExternalDriver_DataParserFunctor(std::string const &type) : chrono::vehicle::ChExternalDriver::DataParserFunctor(type), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ChExternalDriver_DataParserFunctor::~SwigDirector_ChExternalDriver_DataParserFunctor() {
  
}


void SwigDirector_ChExternalDriver_DataParserFunctor::Deserialize(chrono::vehicle::ChJSONReader &reader) {
  void * jreader = 0 ;
  
  if (!swig_callbackDeserialize) {
    Swig::DirectorPureVirtualException::raise("chrono::vehicle::ChExternalDriver::DataParserFunctor::Deserialize");
    return;
  } else {
    jreader = new std::shared_ptr<  chrono::vehicle::ChJSONReader > (&reader SWIG_NO_NULL_DELETER_0); 
    swig_callbackDeserialize(jreader);
  }
}

void SwigDirector_ChExternalDriver_DataParserFunctor::swig_connect_director(SWIG_Callback0_t callbackDeserialize) {
  swig_callbackDeserialize = callbackDeserialize;
}

void SwigDirector_ChExternalDriver_DataParserFunctor::swig_init_callbacks() {
  swig_callbackDeserialize = 0;
}

SwigDirector_SoilParametersCallback::SwigDirector_SoilParametersCallback() : chrono::vehicle::SCMTerrain::SoilParametersCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_SoilParametersCallback::~SwigDirector_SoilParametersCallback() {
  
}


void SwigDirector_SoilParametersCallback::Set(chrono::ChVector< > const &loc,double &Bekker_Kphi,double &Bekker_Kc,double &Bekker_n,double &Mohr_cohesion,double &Mohr_friction,double &Janosi_shear,double &elastic_K,double &damping_R) {
  void * jloc = 0 ;
  void * jBekker_Kphi = 0 ;
  void * jBekker_Kc = 0 ;
  void * jBekker_n = 0 ;
  void * jMohr_cohesion = 0 ;
  void * jMohr_friction = 0 ;
  void * jJanosi_shear = 0 ;
  void * jelastic_K = 0 ;
  void * jdamping_R = 0 ;
  
  if (!swig_callbackSet) {
    Swig::DirectorPureVirtualException::raise("chrono::vehicle::SCMTerrain::SoilParametersCallback::Set");
    return;
  } else {
    jloc = (chrono::ChVector< > *) &loc; 
    jBekker_Kphi = (double *) &Bekker_Kphi; 
    jBekker_Kc = (double *) &Bekker_Kc; 
    jBekker_n = (double *) &Bekker_n; 
    jMohr_cohesion = (double *) &Mohr_cohesion; 
    jMohr_friction = (double *) &Mohr_friction; 
    jJanosi_shear = (double *) &Janosi_shear; 
    jelastic_K = (double *) &elastic_K; 
    jdamping_R = (double *) &damping_R; 
    swig_callbackSet(jloc, jBekker_Kphi, jBekker_Kc, jBekker_n, jMohr_cohesion, jMohr_friction, jJanosi_shear, jelastic_K, jdamping_R);
  }
}

void SwigDirector_SoilParametersCallback::swig_connect_director(SWIG_Callback0_t callbackSet) {
  swig_callbackSet = callbackSet;
}

void SwigDirector_SoilParametersCallback::swig_init_callbacks() {
  swig_callbackSet = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_int_ptr() {
  void * jresult ;
  int_ptr *result = 0 ;
  
  {
    try {
      result = (int_ptr *)new_int_ptr();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_int_ptr(void * jarg1) {
  int_ptr *arg1 = (int_ptr *) 0 ;
  
  arg1 = (int_ptr *)jarg1; 
  {
    try {
      delete_int_ptr(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_int_ptr_assign(void * jarg1, int jarg2) {
  int_ptr *arg1 = (int_ptr *) 0 ;
  int arg2 ;
  
  arg1 = (int_ptr *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      int_ptr_assign(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_int_ptr_value(void * jarg1) {
  int jresult ;
  int_ptr *arg1 = (int_ptr *) 0 ;
  int result;
  
  arg1 = (int_ptr *)jarg1; 
  {
    try {
      result = (int)int_ptr_value(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_int_ptr_cast(void * jarg1) {
  void * jresult ;
  int_ptr *arg1 = (int_ptr *) 0 ;
  int *result = 0 ;
  
  arg1 = (int_ptr *)jarg1; 
  {
    try {
      result = (int *)int_ptr_cast(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_int_ptr_frompointer(void * jarg1) {
  void * jresult ;
  int *arg1 = (int *) 0 ;
  int_ptr *result = 0 ;
  
  arg1 = (int *)jarg1; 
  {
    try {
      result = (int_ptr *)int_ptr_frompointer(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_double_ptr() {
  void * jresult ;
  double_ptr *result = 0 ;
  
  {
    try {
      result = (double_ptr *)new_double_ptr();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_double_ptr(void * jarg1) {
  double_ptr *arg1 = (double_ptr *) 0 ;
  
  arg1 = (double_ptr *)jarg1; 
  {
    try {
      delete_double_ptr(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_double_ptr_assign(void * jarg1, double jarg2) {
  double_ptr *arg1 = (double_ptr *) 0 ;
  double arg2 ;
  
  arg1 = (double_ptr *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      double_ptr_assign(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_double_ptr_value(void * jarg1) {
  double jresult ;
  double_ptr *arg1 = (double_ptr *) 0 ;
  double result;
  
  arg1 = (double_ptr *)jarg1; 
  {
    try {
      result = (double)double_ptr_value(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_double_ptr_cast(void * jarg1) {
  void * jresult ;
  double_ptr *arg1 = (double_ptr *) 0 ;
  double *result = 0 ;
  
  arg1 = (double_ptr *)jarg1; 
  {
    try {
      result = (double *)double_ptr_cast(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_double_ptr_frompointer(void * jarg1) {
  void * jresult ;
  double *arg1 = (double *) 0 ;
  double_ptr *result = 0 ;
  
  arg1 = (double *)jarg1; 
  {
    try {
      result = (double_ptr *)double_ptr_frompointer(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_float_ptr() {
  void * jresult ;
  float_ptr *result = 0 ;
  
  {
    try {
      result = (float_ptr *)new_float_ptr();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_float_ptr(void * jarg1) {
  float_ptr *arg1 = (float_ptr *) 0 ;
  
  arg1 = (float_ptr *)jarg1; 
  {
    try {
      delete_float_ptr(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_float_ptr_assign(void * jarg1, float jarg2) {
  float_ptr *arg1 = (float_ptr *) 0 ;
  float arg2 ;
  
  arg1 = (float_ptr *)jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      float_ptr_assign(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_float_ptr_value(void * jarg1) {
  float jresult ;
  float_ptr *arg1 = (float_ptr *) 0 ;
  float result;
  
  arg1 = (float_ptr *)jarg1; 
  {
    try {
      result = (float)float_ptr_value(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_float_ptr_cast(void * jarg1) {
  void * jresult ;
  float_ptr *arg1 = (float_ptr *) 0 ;
  float *result = 0 ;
  
  arg1 = (float_ptr *)jarg1; 
  {
    try {
      result = (float *)float_ptr_cast(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_float_ptr_frompointer(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  float_ptr *result = 0 ;
  
  arg1 = (float *)jarg1; 
  {
    try {
      result = (float_ptr *)float_ptr_frompointer(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_char_ptr() {
  void * jresult ;
  char_ptr *result = 0 ;
  
  {
    try {
      result = (char_ptr *)new_char_ptr();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_char_ptr(void * jarg1) {
  char_ptr *arg1 = (char_ptr *) 0 ;
  
  arg1 = (char_ptr *)jarg1; 
  {
    try {
      delete_char_ptr(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_char_ptr_assign(void * jarg1, char jarg2) {
  char_ptr *arg1 = (char_ptr *) 0 ;
  char arg2 ;
  
  arg1 = (char_ptr *)jarg1; 
  arg2 = (char)jarg2; 
  {
    try {
      char_ptr_assign(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char SWIGSTDCALL CSharp_char_ptr_value(void * jarg1) {
  char jresult ;
  char_ptr *arg1 = (char_ptr *) 0 ;
  char result;
  
  arg1 = (char_ptr *)jarg1; 
  {
    try {
      result = (char)char_ptr_value(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_char_ptr_cast(void * jarg1) {
  char * jresult ;
  char_ptr *arg1 = (char_ptr *) 0 ;
  char *result = 0 ;
  
  arg1 = (char_ptr *)jarg1; 
  {
    try {
      result = (char *)char_ptr_cast(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_char_ptr_frompointer(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char_ptr *result = 0 ;
  
  arg1 = (char *)jarg1; 
  {
    try {
      result = (char_ptr *)char_ptr_frompointer(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_int_Clear(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_int_Add(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((int const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_int_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  {
    try {
      result = ((std::vector< int > const *)arg1)->size();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_int_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  {
    try {
      result = ((std::vector< int > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_int_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_int__SWIG_0() {
  void * jresult ;
  std::vector< int > *result = 0 ;
  
  {
    try {
      result = (std::vector< int > *)new std::vector< int >();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_int__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_int__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vector_int_getitemcopy(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (int)std_vector_Sl_int_Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vector_int_getitem(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_int_setitem(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_int_AddRange(void * jarg1, void * jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_int_Sg__AddRange(arg1,(std::vector< int > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_int_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< int > *)std_vector_Sl_int_Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_int_Insert(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_int_Sg__Insert(arg1,arg2,(int const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_int_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_int_Sg__InsertRange(arg1,arg2,(std::vector< int > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_int_RemoveAt(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_int_Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_int_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_int_Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_int_Repeat(int jarg1, int jarg2) {
  void * jresult ;
  int *arg1 = 0 ;
  int arg2 ;
  int temp1 ;
  std::vector< int > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< int > *)std_vector_Sl_int_Sg__Repeat((int const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_int_Reverse__SWIG_0(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  {
    try {
      std_vector_Sl_int_Sg__Reverse__SWIG_0(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_int_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_int_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_int_Sg__SetRange(arg1,arg2,(std::vector< int > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vector_int_Contains(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (bool)std_vector_Sl_int_Sg__Contains(arg1,(int const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vector_int_IndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (int)std_vector_Sl_int_Sg__IndexOf(arg1,(int const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vector_int_LastIndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (int)std_vector_Sl_int_Sg__LastIndexOf(arg1,(int const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vector_int_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (bool)std_vector_Sl_int_Sg__Remove(arg1,(int const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vector_int(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_Clear(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_Add(void * jarg1, double jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((double const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_double_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  {
    try {
      result = ((std::vector< double > const *)arg1)->size();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_double_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  {
    try {
      result = ((std::vector< double > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_double__SWIG_0() {
  void * jresult ;
  std::vector< double > *result = 0 ;
  
  {
    try {
      result = (std::vector< double > *)new std::vector< double >();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_double__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_double__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< double > *)new_std_vector_Sl_double_Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_vector_double_getitemcopy(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (double)std_vector_Sl_double_Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_vector_double_getitem(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_setitem(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_double_Sg__setitem(arg1,arg2,(double const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_AddRange(void * jarg1, void * jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_double_Sg__AddRange(arg1,(std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_double_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< double > *)std_vector_Sl_double_Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_Insert(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_double_Sg__Insert(arg1,arg2,(double const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_double_Sg__InsertRange(arg1,arg2,(std::vector< double > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_RemoveAt(void * jarg1, int jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_double_Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_double_Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_double_Repeat(double jarg1, int jarg2) {
  void * jresult ;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  std::vector< double > *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< double > *)std_vector_Sl_double_Sg__Repeat((double const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_Reverse__SWIG_0(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  {
    try {
      std_vector_Sl_double_Sg__Reverse__SWIG_0(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_double_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_double_Sg__SetRange(arg1,arg2,(std::vector< double > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vector_double_Contains(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (bool)std_vector_Sl_double_Sg__Contains(arg1,(double const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vector_double_IndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (int)std_vector_Sl_double_Sg__IndexOf(arg1,(double const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vector_double_LastIndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (int)std_vector_Sl_double_Sg__LastIndexOf(arg1,(double const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vector_double_Remove(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (bool)std_vector_Sl_double_Sg__Remove(arg1,(double const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vector_double(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TerrainForces_Clear(void * jarg1) {
  std::vector< chrono::vehicle::TerrainForce > *arg1 = (std::vector< chrono::vehicle::TerrainForce > *) 0 ;
  
  arg1 = (std::vector< chrono::vehicle::TerrainForce > *)jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TerrainForces_Add(void * jarg1, void * jarg2) {
  std::vector< chrono::vehicle::TerrainForce > *arg1 = (std::vector< chrono::vehicle::TerrainForce > *) 0 ;
  chrono::vehicle::TerrainForce *arg2 = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::TerrainForce > *)jarg1; 
  arg2 = (chrono::vehicle::TerrainForce *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::TerrainForce const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->push_back((chrono::vehicle::TerrainForce const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TerrainForces_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< chrono::vehicle::TerrainForce > *arg1 = (std::vector< chrono::vehicle::TerrainForce > *) 0 ;
  std::vector< chrono::vehicle::TerrainForce >::size_type result;
  
  arg1 = (std::vector< chrono::vehicle::TerrainForce > *)jarg1; 
  {
    try {
      result = ((std::vector< chrono::vehicle::TerrainForce > const *)arg1)->size();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TerrainForces_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< chrono::vehicle::TerrainForce > *arg1 = (std::vector< chrono::vehicle::TerrainForce > *) 0 ;
  std::vector< chrono::vehicle::TerrainForce >::size_type result;
  
  arg1 = (std::vector< chrono::vehicle::TerrainForce > *)jarg1; 
  {
    try {
      result = ((std::vector< chrono::vehicle::TerrainForce > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TerrainForces_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< chrono::vehicle::TerrainForce > *arg1 = (std::vector< chrono::vehicle::TerrainForce > *) 0 ;
  std::vector< chrono::vehicle::TerrainForce >::size_type arg2 ;
  
  arg1 = (std::vector< chrono::vehicle::TerrainForce > *)jarg1; 
  arg2 = (std::vector< chrono::vehicle::TerrainForce >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TerrainForces__SWIG_0() {
  void * jresult ;
  std::vector< chrono::vehicle::TerrainForce > *result = 0 ;
  
  {
    try {
      result = (std::vector< chrono::vehicle::TerrainForce > *)new std::vector< chrono::vehicle::TerrainForce >();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TerrainForces__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< chrono::vehicle::TerrainForce > *arg1 = 0 ;
  std::vector< chrono::vehicle::TerrainForce > *result = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::TerrainForce > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< chrono::vehicle::TerrainForce > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< chrono::vehicle::TerrainForce > *)new std::vector< chrono::vehicle::TerrainForce >((std::vector< chrono::vehicle::TerrainForce > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TerrainForces__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< chrono::vehicle::TerrainForce > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< chrono::vehicle::TerrainForce > *)new_std_vector_Sl_chrono_vehicle_TerrainForce_Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TerrainForces_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< chrono::vehicle::TerrainForce > *arg1 = (std::vector< chrono::vehicle::TerrainForce > *) 0 ;
  int arg2 ;
  chrono::vehicle::TerrainForce result;
  
  arg1 = (std::vector< chrono::vehicle::TerrainForce > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = std_vector_Sl_chrono_vehicle_TerrainForce_Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::vehicle::TerrainForce(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TerrainForces_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< chrono::vehicle::TerrainForce > *arg1 = (std::vector< chrono::vehicle::TerrainForce > *) 0 ;
  int arg2 ;
  std::vector< chrono::vehicle::TerrainForce >::value_type *result = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::TerrainForce > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< chrono::vehicle::TerrainForce >::value_type *) &std_vector_Sl_chrono_vehicle_TerrainForce_Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TerrainForces_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< chrono::vehicle::TerrainForce > *arg1 = (std::vector< chrono::vehicle::TerrainForce > *) 0 ;
  int arg2 ;
  chrono::vehicle::TerrainForce *arg3 = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::TerrainForce > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::TerrainForce *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::TerrainForce const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_TerrainForce_Sg__setitem(arg1,arg2,(chrono::vehicle::TerrainForce const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TerrainForces_AddRange(void * jarg1, void * jarg2) {
  std::vector< chrono::vehicle::TerrainForce > *arg1 = (std::vector< chrono::vehicle::TerrainForce > *) 0 ;
  std::vector< chrono::vehicle::TerrainForce > *arg2 = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::TerrainForce > *)jarg1; 
  arg2 = (std::vector< chrono::vehicle::TerrainForce > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< chrono::vehicle::TerrainForce > const & is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_chrono_vehicle_TerrainForce_Sg__AddRange(arg1,(std::vector< chrono::vehicle::TerrainForce > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TerrainForces_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< chrono::vehicle::TerrainForce > *arg1 = (std::vector< chrono::vehicle::TerrainForce > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< chrono::vehicle::TerrainForce > *result = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::TerrainForce > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< chrono::vehicle::TerrainForce > *)std_vector_Sl_chrono_vehicle_TerrainForce_Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TerrainForces_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< chrono::vehicle::TerrainForce > *arg1 = (std::vector< chrono::vehicle::TerrainForce > *) 0 ;
  int arg2 ;
  chrono::vehicle::TerrainForce *arg3 = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::TerrainForce > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::TerrainForce *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::TerrainForce const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_TerrainForce_Sg__Insert(arg1,arg2,(chrono::vehicle::TerrainForce const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TerrainForces_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< chrono::vehicle::TerrainForce > *arg1 = (std::vector< chrono::vehicle::TerrainForce > *) 0 ;
  int arg2 ;
  std::vector< chrono::vehicle::TerrainForce > *arg3 = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::TerrainForce > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< chrono::vehicle::TerrainForce > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< chrono::vehicle::TerrainForce > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_TerrainForce_Sg__InsertRange(arg1,arg2,(std::vector< chrono::vehicle::TerrainForce > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TerrainForces_RemoveAt(void * jarg1, int jarg2) {
  std::vector< chrono::vehicle::TerrainForce > *arg1 = (std::vector< chrono::vehicle::TerrainForce > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< chrono::vehicle::TerrainForce > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_TerrainForce_Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TerrainForces_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< chrono::vehicle::TerrainForce > *arg1 = (std::vector< chrono::vehicle::TerrainForce > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< chrono::vehicle::TerrainForce > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_TerrainForce_Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TerrainForces_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::TerrainForce *arg1 = 0 ;
  int arg2 ;
  std::vector< chrono::vehicle::TerrainForce > *result = 0 ;
  
  arg1 = (chrono::vehicle::TerrainForce *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::TerrainForce const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< chrono::vehicle::TerrainForce > *)std_vector_Sl_chrono_vehicle_TerrainForce_Sg__Repeat((chrono::vehicle::TerrainForce const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TerrainForces_Reverse__SWIG_0(void * jarg1) {
  std::vector< chrono::vehicle::TerrainForce > *arg1 = (std::vector< chrono::vehicle::TerrainForce > *) 0 ;
  
  arg1 = (std::vector< chrono::vehicle::TerrainForce > *)jarg1; 
  {
    try {
      std_vector_Sl_chrono_vehicle_TerrainForce_Sg__Reverse__SWIG_0(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TerrainForces_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< chrono::vehicle::TerrainForce > *arg1 = (std::vector< chrono::vehicle::TerrainForce > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< chrono::vehicle::TerrainForce > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_TerrainForce_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TerrainForces_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< chrono::vehicle::TerrainForce > *arg1 = (std::vector< chrono::vehicle::TerrainForce > *) 0 ;
  int arg2 ;
  std::vector< chrono::vehicle::TerrainForce > *arg3 = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::TerrainForce > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< chrono::vehicle::TerrainForce > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< chrono::vehicle::TerrainForce > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_TerrainForce_Sg__SetRange(arg1,arg2,(std::vector< chrono::vehicle::TerrainForce > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TerrainForces(void * jarg1) {
  std::vector< chrono::vehicle::TerrainForce > *arg1 = (std::vector< chrono::vehicle::TerrainForce > *) 0 ;
  
  arg1 = (std::vector< chrono::vehicle::TerrainForce > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheelStates_Clear(void * jarg1) {
  std::vector< chrono::vehicle::WheelState > *arg1 = (std::vector< chrono::vehicle::WheelState > *) 0 ;
  
  arg1 = (std::vector< chrono::vehicle::WheelState > *)jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheelStates_Add(void * jarg1, void * jarg2) {
  std::vector< chrono::vehicle::WheelState > *arg1 = (std::vector< chrono::vehicle::WheelState > *) 0 ;
  chrono::vehicle::WheelState *arg2 = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::WheelState > *)jarg1; 
  arg2 = (chrono::vehicle::WheelState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::WheelState const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->push_back((chrono::vehicle::WheelState const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_WheelStates_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< chrono::vehicle::WheelState > *arg1 = (std::vector< chrono::vehicle::WheelState > *) 0 ;
  std::vector< chrono::vehicle::WheelState >::size_type result;
  
  arg1 = (std::vector< chrono::vehicle::WheelState > *)jarg1; 
  {
    try {
      result = ((std::vector< chrono::vehicle::WheelState > const *)arg1)->size();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_WheelStates_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< chrono::vehicle::WheelState > *arg1 = (std::vector< chrono::vehicle::WheelState > *) 0 ;
  std::vector< chrono::vehicle::WheelState >::size_type result;
  
  arg1 = (std::vector< chrono::vehicle::WheelState > *)jarg1; 
  {
    try {
      result = ((std::vector< chrono::vehicle::WheelState > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheelStates_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< chrono::vehicle::WheelState > *arg1 = (std::vector< chrono::vehicle::WheelState > *) 0 ;
  std::vector< chrono::vehicle::WheelState >::size_type arg2 ;
  
  arg1 = (std::vector< chrono::vehicle::WheelState > *)jarg1; 
  arg2 = (std::vector< chrono::vehicle::WheelState >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WheelStates__SWIG_0() {
  void * jresult ;
  std::vector< chrono::vehicle::WheelState > *result = 0 ;
  
  {
    try {
      result = (std::vector< chrono::vehicle::WheelState > *)new std::vector< chrono::vehicle::WheelState >();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WheelStates__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< chrono::vehicle::WheelState > *arg1 = 0 ;
  std::vector< chrono::vehicle::WheelState > *result = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::WheelState > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< chrono::vehicle::WheelState > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< chrono::vehicle::WheelState > *)new std::vector< chrono::vehicle::WheelState >((std::vector< chrono::vehicle::WheelState > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WheelStates__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< chrono::vehicle::WheelState > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< chrono::vehicle::WheelState > *)new_std_vector_Sl_chrono_vehicle_WheelState_Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WheelStates_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< chrono::vehicle::WheelState > *arg1 = (std::vector< chrono::vehicle::WheelState > *) 0 ;
  int arg2 ;
  chrono::vehicle::WheelState result;
  
  arg1 = (std::vector< chrono::vehicle::WheelState > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = std_vector_Sl_chrono_vehicle_WheelState_Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::vehicle::WheelState(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WheelStates_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< chrono::vehicle::WheelState > *arg1 = (std::vector< chrono::vehicle::WheelState > *) 0 ;
  int arg2 ;
  std::vector< chrono::vehicle::WheelState >::value_type *result = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::WheelState > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< chrono::vehicle::WheelState >::value_type *) &std_vector_Sl_chrono_vehicle_WheelState_Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheelStates_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< chrono::vehicle::WheelState > *arg1 = (std::vector< chrono::vehicle::WheelState > *) 0 ;
  int arg2 ;
  chrono::vehicle::WheelState *arg3 = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::WheelState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::WheelState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::WheelState const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_WheelState_Sg__setitem(arg1,arg2,(chrono::vehicle::WheelState const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheelStates_AddRange(void * jarg1, void * jarg2) {
  std::vector< chrono::vehicle::WheelState > *arg1 = (std::vector< chrono::vehicle::WheelState > *) 0 ;
  std::vector< chrono::vehicle::WheelState > *arg2 = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::WheelState > *)jarg1; 
  arg2 = (std::vector< chrono::vehicle::WheelState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< chrono::vehicle::WheelState > const & is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_chrono_vehicle_WheelState_Sg__AddRange(arg1,(std::vector< chrono::vehicle::WheelState > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WheelStates_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< chrono::vehicle::WheelState > *arg1 = (std::vector< chrono::vehicle::WheelState > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< chrono::vehicle::WheelState > *result = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::WheelState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< chrono::vehicle::WheelState > *)std_vector_Sl_chrono_vehicle_WheelState_Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheelStates_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< chrono::vehicle::WheelState > *arg1 = (std::vector< chrono::vehicle::WheelState > *) 0 ;
  int arg2 ;
  chrono::vehicle::WheelState *arg3 = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::WheelState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::WheelState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::WheelState const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_WheelState_Sg__Insert(arg1,arg2,(chrono::vehicle::WheelState const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheelStates_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< chrono::vehicle::WheelState > *arg1 = (std::vector< chrono::vehicle::WheelState > *) 0 ;
  int arg2 ;
  std::vector< chrono::vehicle::WheelState > *arg3 = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::WheelState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< chrono::vehicle::WheelState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< chrono::vehicle::WheelState > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_WheelState_Sg__InsertRange(arg1,arg2,(std::vector< chrono::vehicle::WheelState > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheelStates_RemoveAt(void * jarg1, int jarg2) {
  std::vector< chrono::vehicle::WheelState > *arg1 = (std::vector< chrono::vehicle::WheelState > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< chrono::vehicle::WheelState > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_WheelState_Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheelStates_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< chrono::vehicle::WheelState > *arg1 = (std::vector< chrono::vehicle::WheelState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< chrono::vehicle::WheelState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_WheelState_Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WheelStates_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::WheelState *arg1 = 0 ;
  int arg2 ;
  std::vector< chrono::vehicle::WheelState > *result = 0 ;
  
  arg1 = (chrono::vehicle::WheelState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::WheelState const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< chrono::vehicle::WheelState > *)std_vector_Sl_chrono_vehicle_WheelState_Sg__Repeat((chrono::vehicle::WheelState const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheelStates_Reverse__SWIG_0(void * jarg1) {
  std::vector< chrono::vehicle::WheelState > *arg1 = (std::vector< chrono::vehicle::WheelState > *) 0 ;
  
  arg1 = (std::vector< chrono::vehicle::WheelState > *)jarg1; 
  {
    try {
      std_vector_Sl_chrono_vehicle_WheelState_Sg__Reverse__SWIG_0(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheelStates_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< chrono::vehicle::WheelState > *arg1 = (std::vector< chrono::vehicle::WheelState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< chrono::vehicle::WheelState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_WheelState_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheelStates_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< chrono::vehicle::WheelState > *arg1 = (std::vector< chrono::vehicle::WheelState > *) 0 ;
  int arg2 ;
  std::vector< chrono::vehicle::WheelState > *arg3 = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::WheelState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< chrono::vehicle::WheelState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< chrono::vehicle::WheelState > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_WheelState_Sg__SetRange(arg1,arg2,(std::vector< chrono::vehicle::WheelState > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WheelStates(void * jarg1) {
  std::vector< chrono::vehicle::WheelState > *arg1 = (std::vector< chrono::vehicle::WheelState > *) 0 ;
  
  arg1 = (std::vector< chrono::vehicle::WheelState > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheelList_Clear(void * jarg1) {
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheelList_Add(void * jarg1, void * jarg2) {
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheel > *arg2 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg1; 
  arg2 = (std::shared_ptr< chrono::vehicle::ChWheel > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< chrono::vehicle::ChWheel > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::shared_ptr< chrono::vehicle::ChWheel > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChWheelList_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *) 0 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type result;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg1; 
  {
    try {
      result = ((std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > const *)arg1)->size();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChWheelList_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *) 0 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type result;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg1; 
  {
    try {
      result = ((std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheelList_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *) 0 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type arg2 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChWheelList__SWIG_0() {
  void * jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *result = 0 ;
  
  {
    try {
      result = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)new std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChWheelList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg1 = 0 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)new std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >((std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChWheelList__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)new_std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheelList_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheel > result;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< chrono::vehicle::ChWheel >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheelList_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheelList_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheel > *arg3 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::shared_ptr< chrono::vehicle::ChWheel > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< chrono::vehicle::ChWheel > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__setitem(arg1,arg2,(std::shared_ptr< chrono::vehicle::ChWheel > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheelList_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *) 0 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > const & is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__AddRange(arg1,(std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheelList_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheelList_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheel > *arg3 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::shared_ptr< chrono::vehicle::ChWheel > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< chrono::vehicle::ChWheel > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__Insert(arg1,arg2,(std::shared_ptr< chrono::vehicle::ChWheel > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheelList_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheelList_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheelList_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheelList_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChWheel > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *result = 0 ;
  
  arg1 = (std::shared_ptr< chrono::vehicle::ChWheel > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< chrono::vehicle::ChWheel > const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__Repeat((std::shared_ptr< chrono::vehicle::ChWheel > const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheelList_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg1; 
  {
    try {
      std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__Reverse__SWIG_0(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheelList_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheelList_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChWheel_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChWheelList(void * jarg1) {
  std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxleList_Clear(void * jarg1) {
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxleList_Add(void * jarg1, void * jarg2) {
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *arg2 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg1; 
  arg2 = (std::shared_ptr< chrono::vehicle::ChAxle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< chrono::vehicle::ChAxle > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::shared_ptr< chrono::vehicle::ChAxle > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChAxleList_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *) 0 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type result;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg1; 
  {
    try {
      result = ((std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > const *)arg1)->size();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChAxleList_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *) 0 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type result;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg1; 
  {
    try {
      result = ((std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxleList_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *) 0 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type arg2 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChAxleList__SWIG_0() {
  void * jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *result = 0 ;
  
  {
    try {
      result = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)new std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChAxleList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg1 = 0 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)new std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >((std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChAxleList__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)new_std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChAxleList_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChAxle > result;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< chrono::vehicle::ChAxle >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChAxleList_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxleList_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *arg3 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::shared_ptr< chrono::vehicle::ChAxle > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< chrono::vehicle::ChAxle > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__setitem(arg1,arg2,(std::shared_ptr< chrono::vehicle::ChAxle > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxleList_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *) 0 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > const & is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__AddRange(arg1,(std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChAxleList_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxleList_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *arg3 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::shared_ptr< chrono::vehicle::ChAxle > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< chrono::vehicle::ChAxle > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__Insert(arg1,arg2,(std::shared_ptr< chrono::vehicle::ChAxle > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxleList_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxleList_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxleList_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChAxleList_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChAxle > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *result = 0 ;
  
  arg1 = (std::shared_ptr< chrono::vehicle::ChAxle > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< chrono::vehicle::ChAxle > const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__Repeat((std::shared_ptr< chrono::vehicle::ChAxle > const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxleList_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg1; 
  {
    try {
      std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__Reverse__SWIG_0(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxleList_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxleList_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_ChAxle_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChAxleList(void * jarg1) {
  std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChNodeXYZ(void * jarg1) {
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChNodeXYZ_Variables(void * jarg1) {
  void * jresult ;
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  ChVariablesNode *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ChVariablesNode *) &(arg1)->Variables();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChNodeXYZ_GetPos(void * jarg1) {
  void * jresult ;
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  std::shared_ptr< chrono::ChNodeXYZ const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::ChNodeXYZ const *)arg1)->GetPos();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChNodeXYZ_SetPos(void * jarg1, void * jarg2) {
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetPos((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChNodeXYZ_GetPos_dt(void * jarg1) {
  void * jresult ;
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  std::shared_ptr< chrono::ChNodeXYZ const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::ChNodeXYZ const *)arg1)->GetPos_dt();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChNodeXYZ_SetPos_dt(void * jarg1, void * jarg2) {
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetPos_dt((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChNodeXYZ_GetPos_dtdt(void * jarg1) {
  void * jresult ;
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  std::shared_ptr< chrono::ChNodeXYZ const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::ChNodeXYZ const *)arg1)->GetPos_dtdt();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChNodeXYZ_SetPos_dtdt(void * jarg1, void * jarg2) {
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetPos_dtdt((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChNodeXYZ_GetMass(void * jarg1) {
  double jresult ;
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  std::shared_ptr< chrono::ChNodeXYZ const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::ChNodeXYZ const *)arg1)->GetMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChNodeXYZ_SetMass(void * jarg1, double jarg2) {
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetMass(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChNodeXYZ_GetNdofX(void * jarg1) {
  int jresult ;
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  std::shared_ptr< chrono::ChNodeXYZ const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::ChNodeXYZ const *)arg1)->GetNdofX();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChNodeXYZ_LoadableGet_ndof_x(void * jarg1) {
  int jresult ;
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)(arg1)->LoadableGet_ndof_x();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChNodeXYZ_LoadableGet_ndof_w(void * jarg1) {
  int jresult ;
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)(arg1)->LoadableGet_ndof_w();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChNodeXYZ_LoadableGetStateBlock_x(void * jarg1, int jarg2, void * jarg3) {
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  int arg2 ;
  chrono::ChState *arg3 = 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::ChState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChState & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->LoadableGetStateBlock_x(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChNodeXYZ_LoadableGetStateBlock_w(void * jarg1, int jarg2, void * jarg3) {
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  int arg2 ;
  chrono::ChStateDelta *arg3 = 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::ChStateDelta *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChStateDelta & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->LoadableGetStateBlock_w(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChNodeXYZ_LoadableStateIncrement(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4, unsigned int jarg5, void * jarg6) {
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  unsigned int arg2 ;
  chrono::ChState *arg3 = 0 ;
  chrono::ChState *arg4 = 0 ;
  unsigned int arg5 ;
  chrono::ChStateDelta *arg6 = 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (chrono::ChState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChState & is null", 0);
    return ;
  } 
  arg4 = (chrono::ChState *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChState const & is null", 0);
    return ;
  } 
  arg5 = (unsigned int)jarg5; 
  arg6 = (chrono::ChStateDelta *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChStateDelta const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->LoadableStateIncrement(arg2,*arg3,(chrono::ChState const &)*arg4,arg5,(chrono::ChStateDelta const &)*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChNodeXYZ_Get_field_ncoords(void * jarg1) {
  int jresult ;
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)(arg1)->Get_field_ncoords();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChNodeXYZ_GetSubBlocks(void * jarg1) {
  int jresult ;
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)(arg1)->GetSubBlocks();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChNodeXYZ_GetSubBlockOffset(void * jarg1, int jarg2) {
  unsigned int jresult ;
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (unsigned int)(arg1)->GetSubBlockOffset(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChNodeXYZ_GetSubBlockSize(void * jarg1, int jarg2) {
  unsigned int jresult ;
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (unsigned int)(arg1)->GetSubBlockSize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChNodeXYZ_IsSubBlockActive(void * jarg1, int jarg2) {
  unsigned int jresult ;
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::ChNodeXYZ const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((chrono::ChNodeXYZ const *)arg1)->IsSubBlockActive(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChNodeXYZ_LoadableGetVariables(void * jarg1, void * jarg2) {
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  std::vector< ChVariables * > *arg2 = 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< ChVariables * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ChVariables * > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->LoadableGetVariables(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChNodeXYZ_ComputeNF(void * jarg1, double jarg2, double jarg3, double jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  chrono::ChVectorDynamic< > *arg5 = 0 ;
  double *arg6 = 0 ;
  chrono::ChVectorDynamic< > *arg7 = 0 ;
  chrono::ChVectorDynamic< > *arg8 = (chrono::ChVectorDynamic< > *) 0 ;
  chrono::ChVectorDynamic< > *arg9 = (chrono::ChVectorDynamic< > *) 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (chrono::ChVectorDynamic< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVectorDynamic< > & is null", 0);
    return ;
  } 
  arg6 = (double *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  arg7 = (chrono::ChVectorDynamic< > *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVectorDynamic< > const & is null", 0);
    return ;
  } 
  arg8 = (chrono::ChVectorDynamic< > *)jarg8; 
  arg9 = (chrono::ChVectorDynamic< > *)jarg9; 
  {
    try {
      (arg1)->ComputeNF(arg2,arg3,arg4,*arg5,*arg6,(chrono::ChVectorDynamic< > const &)*arg7,arg8,arg9);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChNodeXYZ_GetDensity(void * jarg1) {
  double jresult ;
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetDensity();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChNodeXYZ_ArchiveOut(void * jarg1, void * jarg2) {
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  chrono::ChArchiveOut *arg2 = 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChArchiveOut *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChArchiveOut & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->ArchiveOut(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChNodeXYZ_ArchiveIn(void * jarg1, void * jarg2) {
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  chrono::ChArchiveIn *arg2 = 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChArchiveIn *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChArchiveIn & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->ArchiveIn(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChNodeXYZ_pos_set(void * jarg1, void * jarg2) {
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  chrono::ChVector< > *arg2 = (chrono::ChVector< > *) 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2; 
  if (arg1) (arg1)->pos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChNodeXYZ_pos_get(void * jarg1) {
  void * jresult ;
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  result = (chrono::ChVector< > *)& ((arg1)->pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChNodeXYZ_pos_dt_set(void * jarg1, void * jarg2) {
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  chrono::ChVector< > *arg2 = (chrono::ChVector< > *) 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2; 
  if (arg1) (arg1)->pos_dt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChNodeXYZ_pos_dt_get(void * jarg1) {
  void * jresult ;
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  result = (chrono::ChVector< > *)& ((arg1)->pos_dt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChNodeXYZ_pos_dtdt_set(void * jarg1, void * jarg2) {
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  chrono::ChVector< > *arg2 = (chrono::ChVector< > *) 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2; 
  if (arg1) (arg1)->pos_dtdt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChNodeXYZ_pos_dtdt_get(void * jarg1) {
  void * jresult ;
  chrono::ChNodeXYZ *arg1 = (chrono::ChNodeXYZ *) 0 ;
  std::shared_ptr< chrono::ChNodeXYZ > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChNodeXYZ > *)jarg1;
  arg1 = (chrono::ChNodeXYZ *)(smartarg1 ? smartarg1->get() : 0); 
  result = (chrono::ChVector< > *)& ((arg1)->pos_dtdt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyState_pos_set(void * jarg1, void * jarg2) {
  chrono::vehicle::BodyState *arg1 = (chrono::vehicle::BodyState *) 0 ;
  chrono::ChVector< > *arg2 = (chrono::ChVector< > *) 0 ;
  
  arg1 = (chrono::vehicle::BodyState *)jarg1; 
  arg2 = (chrono::ChVector< > *)jarg2; 
  if (arg1) (arg1)->pos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BodyState_pos_get(void * jarg1) {
  void * jresult ;
  chrono::vehicle::BodyState *arg1 = (chrono::vehicle::BodyState *) 0 ;
  chrono::ChVector< > *result = 0 ;
  
  arg1 = (chrono::vehicle::BodyState *)jarg1; 
  result = (chrono::ChVector< > *)& ((arg1)->pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyState_rot_set(void * jarg1, void * jarg2) {
  chrono::vehicle::BodyState *arg1 = (chrono::vehicle::BodyState *) 0 ;
  chrono::ChQuaternion< > *arg2 = (chrono::ChQuaternion< > *) 0 ;
  
  arg1 = (chrono::vehicle::BodyState *)jarg1; 
  arg2 = (chrono::ChQuaternion< > *)jarg2; 
  if (arg1) (arg1)->rot = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BodyState_rot_get(void * jarg1) {
  void * jresult ;
  chrono::vehicle::BodyState *arg1 = (chrono::vehicle::BodyState *) 0 ;
  chrono::ChQuaternion< > *result = 0 ;
  
  arg1 = (chrono::vehicle::BodyState *)jarg1; 
  result = (chrono::ChQuaternion< > *)& ((arg1)->rot);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyState_lin_vel_set(void * jarg1, void * jarg2) {
  chrono::vehicle::BodyState *arg1 = (chrono::vehicle::BodyState *) 0 ;
  chrono::ChVector< > *arg2 = (chrono::ChVector< > *) 0 ;
  
  arg1 = (chrono::vehicle::BodyState *)jarg1; 
  arg2 = (chrono::ChVector< > *)jarg2; 
  if (arg1) (arg1)->lin_vel = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BodyState_lin_vel_get(void * jarg1) {
  void * jresult ;
  chrono::vehicle::BodyState *arg1 = (chrono::vehicle::BodyState *) 0 ;
  chrono::ChVector< > *result = 0 ;
  
  arg1 = (chrono::vehicle::BodyState *)jarg1; 
  result = (chrono::ChVector< > *)& ((arg1)->lin_vel);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BodyState_ang_vel_set(void * jarg1, void * jarg2) {
  chrono::vehicle::BodyState *arg1 = (chrono::vehicle::BodyState *) 0 ;
  chrono::ChVector< > *arg2 = (chrono::ChVector< > *) 0 ;
  
  arg1 = (chrono::vehicle::BodyState *)jarg1; 
  arg2 = (chrono::ChVector< > *)jarg2; 
  if (arg1) (arg1)->ang_vel = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BodyState_ang_vel_get(void * jarg1) {
  void * jresult ;
  chrono::vehicle::BodyState *arg1 = (chrono::vehicle::BodyState *) 0 ;
  chrono::ChVector< > *result = 0 ;
  
  arg1 = (chrono::vehicle::BodyState *)jarg1; 
  result = (chrono::ChVector< > *)& ((arg1)->ang_vel);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BodyState() {
  void * jresult ;
  chrono::vehicle::BodyState *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::BodyState *)new chrono::vehicle::BodyState();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BodyState(void * jarg1) {
  chrono::vehicle::BodyState *arg1 = (chrono::vehicle::BodyState *) 0 ;
  
  arg1 = (chrono::vehicle::BodyState *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheelState_pos_set(void * jarg1, void * jarg2) {
  chrono::vehicle::WheelState *arg1 = (chrono::vehicle::WheelState *) 0 ;
  chrono::ChVector< > *arg2 = (chrono::ChVector< > *) 0 ;
  
  arg1 = (chrono::vehicle::WheelState *)jarg1; 
  arg2 = (chrono::ChVector< > *)jarg2; 
  if (arg1) (arg1)->pos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WheelState_pos_get(void * jarg1) {
  void * jresult ;
  chrono::vehicle::WheelState *arg1 = (chrono::vehicle::WheelState *) 0 ;
  chrono::ChVector< > *result = 0 ;
  
  arg1 = (chrono::vehicle::WheelState *)jarg1; 
  result = (chrono::ChVector< > *)& ((arg1)->pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheelState_rot_set(void * jarg1, void * jarg2) {
  chrono::vehicle::WheelState *arg1 = (chrono::vehicle::WheelState *) 0 ;
  chrono::ChQuaternion< > *arg2 = (chrono::ChQuaternion< > *) 0 ;
  
  arg1 = (chrono::vehicle::WheelState *)jarg1; 
  arg2 = (chrono::ChQuaternion< > *)jarg2; 
  if (arg1) (arg1)->rot = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WheelState_rot_get(void * jarg1) {
  void * jresult ;
  chrono::vehicle::WheelState *arg1 = (chrono::vehicle::WheelState *) 0 ;
  chrono::ChQuaternion< > *result = 0 ;
  
  arg1 = (chrono::vehicle::WheelState *)jarg1; 
  result = (chrono::ChQuaternion< > *)& ((arg1)->rot);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheelState_lin_vel_set(void * jarg1, void * jarg2) {
  chrono::vehicle::WheelState *arg1 = (chrono::vehicle::WheelState *) 0 ;
  chrono::ChVector< > *arg2 = (chrono::ChVector< > *) 0 ;
  
  arg1 = (chrono::vehicle::WheelState *)jarg1; 
  arg2 = (chrono::ChVector< > *)jarg2; 
  if (arg1) (arg1)->lin_vel = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WheelState_lin_vel_get(void * jarg1) {
  void * jresult ;
  chrono::vehicle::WheelState *arg1 = (chrono::vehicle::WheelState *) 0 ;
  chrono::ChVector< > *result = 0 ;
  
  arg1 = (chrono::vehicle::WheelState *)jarg1; 
  result = (chrono::ChVector< > *)& ((arg1)->lin_vel);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheelState_ang_vel_set(void * jarg1, void * jarg2) {
  chrono::vehicle::WheelState *arg1 = (chrono::vehicle::WheelState *) 0 ;
  chrono::ChVector< > *arg2 = (chrono::ChVector< > *) 0 ;
  
  arg1 = (chrono::vehicle::WheelState *)jarg1; 
  arg2 = (chrono::ChVector< > *)jarg2; 
  if (arg1) (arg1)->ang_vel = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WheelState_ang_vel_get(void * jarg1) {
  void * jresult ;
  chrono::vehicle::WheelState *arg1 = (chrono::vehicle::WheelState *) 0 ;
  chrono::ChVector< > *result = 0 ;
  
  arg1 = (chrono::vehicle::WheelState *)jarg1; 
  result = (chrono::ChVector< > *)& ((arg1)->ang_vel);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheelState_omega_set(void * jarg1, double jarg2) {
  chrono::vehicle::WheelState *arg1 = (chrono::vehicle::WheelState *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::WheelState *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->omega = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WheelState_omega_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::WheelState *arg1 = (chrono::vehicle::WheelState *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::WheelState *)jarg1; 
  result = (double) ((arg1)->omega);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WheelState() {
  void * jresult ;
  chrono::vehicle::WheelState *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::WheelState *)new chrono::vehicle::WheelState();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WheelState(void * jarg1) {
  chrono::vehicle::WheelState *arg1 = (chrono::vehicle::WheelState *) 0 ;
  
  arg1 = (chrono::vehicle::WheelState *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TerrainForce() {
  void * jresult ;
  chrono::vehicle::TerrainForce *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::TerrainForce *)new chrono::vehicle::TerrainForce();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TerrainForce_force_set(void * jarg1, void * jarg2) {
  chrono::vehicle::TerrainForce *arg1 = (chrono::vehicle::TerrainForce *) 0 ;
  chrono::ChVector< > *arg2 = (chrono::ChVector< > *) 0 ;
  
  arg1 = (chrono::vehicle::TerrainForce *)jarg1; 
  arg2 = (chrono::ChVector< > *)jarg2; 
  if (arg1) (arg1)->force = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TerrainForce_force_get(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TerrainForce *arg1 = (chrono::vehicle::TerrainForce *) 0 ;
  chrono::ChVector< > *result = 0 ;
  
  arg1 = (chrono::vehicle::TerrainForce *)jarg1; 
  result = (chrono::ChVector< > *)& ((arg1)->force);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TerrainForce_point_set(void * jarg1, void * jarg2) {
  chrono::vehicle::TerrainForce *arg1 = (chrono::vehicle::TerrainForce *) 0 ;
  chrono::ChVector< > *arg2 = (chrono::ChVector< > *) 0 ;
  
  arg1 = (chrono::vehicle::TerrainForce *)jarg1; 
  arg2 = (chrono::ChVector< > *)jarg2; 
  if (arg1) (arg1)->point = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TerrainForce_point_get(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TerrainForce *arg1 = (chrono::vehicle::TerrainForce *) 0 ;
  chrono::ChVector< > *result = 0 ;
  
  arg1 = (chrono::vehicle::TerrainForce *)jarg1; 
  result = (chrono::ChVector< > *)& ((arg1)->point);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TerrainForce_moment_set(void * jarg1, void * jarg2) {
  chrono::vehicle::TerrainForce *arg1 = (chrono::vehicle::TerrainForce *) 0 ;
  chrono::ChVector< > *arg2 = (chrono::ChVector< > *) 0 ;
  
  arg1 = (chrono::vehicle::TerrainForce *)jarg1; 
  arg2 = (chrono::ChVector< > *)jarg2; 
  if (arg1) (arg1)->moment = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TerrainForce_moment_get(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TerrainForce *arg1 = (chrono::vehicle::TerrainForce *) 0 ;
  chrono::ChVector< > *result = 0 ;
  
  arg1 = (chrono::vehicle::TerrainForce *)jarg1; 
  result = (chrono::ChVector< > *)& ((arg1)->moment);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TerrainForce(void * jarg1) {
  chrono::vehicle::TerrainForce *arg1 = (chrono::vehicle::TerrainForce *) 0 ;
  
  arg1 = (chrono::vehicle::TerrainForce *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DriverInputs_m_steering_set(void * jarg1, double jarg2) {
  chrono::vehicle::DriverInputs *arg1 = (chrono::vehicle::DriverInputs *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::DriverInputs *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_steering = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DriverInputs_m_steering_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::DriverInputs *arg1 = (chrono::vehicle::DriverInputs *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::DriverInputs *)jarg1; 
  result = (double) ((arg1)->m_steering);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DriverInputs_m_throttle_set(void * jarg1, double jarg2) {
  chrono::vehicle::DriverInputs *arg1 = (chrono::vehicle::DriverInputs *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::DriverInputs *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_throttle = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DriverInputs_m_throttle_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::DriverInputs *arg1 = (chrono::vehicle::DriverInputs *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::DriverInputs *)jarg1; 
  result = (double) ((arg1)->m_throttle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DriverInputs_m_braking_set(void * jarg1, double jarg2) {
  chrono::vehicle::DriverInputs *arg1 = (chrono::vehicle::DriverInputs *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::DriverInputs *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_braking = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DriverInputs_m_braking_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::DriverInputs *arg1 = (chrono::vehicle::DriverInputs *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::DriverInputs *)jarg1; 
  result = (double) ((arg1)->m_braking);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DriverInputs_m_clutch_set(void * jarg1, double jarg2) {
  chrono::vehicle::DriverInputs *arg1 = (chrono::vehicle::DriverInputs *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::DriverInputs *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_clutch = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DriverInputs_m_clutch_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::DriverInputs *arg1 = (chrono::vehicle::DriverInputs *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::DriverInputs *)jarg1; 
  result = (double) ((arg1)->m_clutch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DriverInputs() {
  void * jresult ;
  chrono::vehicle::DriverInputs *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::DriverInputs *)new chrono::vehicle::DriverInputs();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DriverInputs(void * jarg1) {
  chrono::vehicle::DriverInputs *arg1 = (chrono::vehicle::DriverInputs *) 0 ;
  
  arg1 = (chrono::vehicle::DriverInputs *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpringForce_enable_stops(void * jarg1, double jarg2, double jarg3) {
  chrono::vehicle::SpringForce *arg1 = (chrono::vehicle::SpringForce *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::SpringForce > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SpringForce > *)jarg1;
  arg1 = (chrono::vehicle::SpringForce *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->enable_stops(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpringForce_set_stops__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::SpringForce *arg1 = (chrono::vehicle::SpringForce *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  std::vector< std::pair< double,double > > *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::SpringForce > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SpringForce > *)jarg1;
  arg1 = (chrono::vehicle::SpringForce *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > const & is null", 0);
    return ;
  } 
  arg3 = (std::vector< std::pair< double,double > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->set_stops((std::vector< std::pair< double,double > > const &)*arg2,(std::vector< std::pair< double,double > > const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpringForce_set_stops__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  chrono::vehicle::SpringForce *arg1 = (chrono::vehicle::SpringForce *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::SpringForce > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SpringForce > *)jarg1;
  arg1 = (chrono::vehicle::SpringForce *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->set_stops(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_SpringForce_evaluate_stops(void * jarg1, double jarg2) {
  double jresult ;
  chrono::vehicle::SpringForce *arg1 = (chrono::vehicle::SpringForce *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::SpringForce > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SpringForce > *)jarg1;
  arg1 = (chrono::vehicle::SpringForce *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)(arg1)->evaluate_stops(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpringForce(void * jarg1) {
  chrono::vehicle::SpringForce *arg1 = (chrono::vehicle::SpringForce *) 0 ;
  std::shared_ptr< chrono::vehicle::SpringForce > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SpringForce > *)jarg1;
  arg1 = (chrono::vehicle::SpringForce *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinearSpringForce__SWIG_0(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  chrono::vehicle::LinearSpringForce *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (chrono::vehicle::LinearSpringForce *)new chrono::vehicle::LinearSpringForce(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::LinearSpringForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinearSpringForce__SWIG_1(double jarg1) {
  void * jresult ;
  double arg1 ;
  chrono::vehicle::LinearSpringForce *result = 0 ;
  
  arg1 = (double)jarg1; 
  {
    try {
      result = (chrono::vehicle::LinearSpringForce *)new chrono::vehicle::LinearSpringForce(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::LinearSpringForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_LinearSpringForce_evaluate(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6) {
  double jresult ;
  chrono::vehicle::LinearSpringForce *arg1 = (chrono::vehicle::LinearSpringForce *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  chrono::ChLinkTSDA *arg6 = 0 ;
  std::shared_ptr< chrono::vehicle::LinearSpringForce > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::LinearSpringForce > *)jarg1;
  arg1 = (chrono::vehicle::LinearSpringForce *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  
  arg6 = (chrono::ChLinkTSDA *)(((std::shared_ptr< const chrono::ChLinkTSDA > *)jarg6) ? ((std::shared_ptr< const chrono::ChLinkTSDA > *)jarg6)->get() : 0);
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChLinkTSDA const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evaluate(arg2,arg3,arg4,arg5,(chrono::ChLinkTSDA const &)*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LinearSpringForce(void * jarg1) {
  chrono::vehicle::LinearSpringForce *arg1 = (chrono::vehicle::LinearSpringForce *) 0 ;
  std::shared_ptr< chrono::vehicle::LinearSpringForce > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::LinearSpringForce > *)jarg1;
  arg1 = (chrono::vehicle::LinearSpringForce *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearSpringForce__SWIG_0(double jarg1) {
  void * jresult ;
  double arg1 ;
  chrono::vehicle::NonlinearSpringForce *result = 0 ;
  
  arg1 = (double)jarg1; 
  {
    try {
      result = (chrono::vehicle::NonlinearSpringForce *)new chrono::vehicle::NonlinearSpringForce(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearSpringForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearSpringForce__SWIG_1() {
  void * jresult ;
  chrono::vehicle::NonlinearSpringForce *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::NonlinearSpringForce *)new chrono::vehicle::NonlinearSpringForce();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearSpringForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearSpringForce__SWIG_2(void * jarg1, double jarg2) {
  void * jresult ;
  std::vector< std::pair< double,double > > *arg1 = 0 ;
  double arg2 ;
  chrono::vehicle::NonlinearSpringForce *result = 0 ;
  
  arg1 = (std::vector< std::pair< double,double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > const & is null", 0);
    return 0;
  } 
  arg2 = (double)jarg2; 
  {
    try {
      result = (chrono::vehicle::NonlinearSpringForce *)new chrono::vehicle::NonlinearSpringForce((std::vector< std::pair< double,double > > const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearSpringForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearSpringForce__SWIG_3(void * jarg1) {
  void * jresult ;
  std::vector< std::pair< double,double > > *arg1 = 0 ;
  chrono::vehicle::NonlinearSpringForce *result = 0 ;
  
  arg1 = (std::vector< std::pair< double,double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::NonlinearSpringForce *)new chrono::vehicle::NonlinearSpringForce((std::vector< std::pair< double,double > > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearSpringForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NonlinearSpringForce_add_pointK(void * jarg1, double jarg2, double jarg3) {
  chrono::vehicle::NonlinearSpringForce *arg1 = (chrono::vehicle::NonlinearSpringForce *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::NonlinearSpringForce > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearSpringForce > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearSpringForce *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->add_pointK(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_NonlinearSpringForce_evaluate(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6) {
  double jresult ;
  chrono::vehicle::NonlinearSpringForce *arg1 = (chrono::vehicle::NonlinearSpringForce *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  chrono::ChLinkTSDA *arg6 = 0 ;
  std::shared_ptr< chrono::vehicle::NonlinearSpringForce > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearSpringForce > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearSpringForce *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  
  arg6 = (chrono::ChLinkTSDA *)(((std::shared_ptr< const chrono::ChLinkTSDA > *)jarg6) ? ((std::shared_ptr< const chrono::ChLinkTSDA > *)jarg6)->get() : 0);
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChLinkTSDA const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evaluate(arg2,arg3,arg4,arg5,(chrono::ChLinkTSDA const &)*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NonlinearSpringForce(void * jarg1) {
  chrono::vehicle::NonlinearSpringForce *arg1 = (chrono::vehicle::NonlinearSpringForce *) 0 ;
  std::shared_ptr< chrono::vehicle::NonlinearSpringForce > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearSpringForce > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearSpringForce *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinearDamperForce__SWIG_0(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  chrono::vehicle::LinearDamperForce *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (chrono::vehicle::LinearDamperForce *)new chrono::vehicle::LinearDamperForce(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::LinearDamperForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinearDamperForce__SWIG_1(double jarg1) {
  void * jresult ;
  double arg1 ;
  chrono::vehicle::LinearDamperForce *result = 0 ;
  
  arg1 = (double)jarg1; 
  {
    try {
      result = (chrono::vehicle::LinearDamperForce *)new chrono::vehicle::LinearDamperForce(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::LinearDamperForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_LinearDamperForce_evaluate(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6) {
  double jresult ;
  chrono::vehicle::LinearDamperForce *arg1 = (chrono::vehicle::LinearDamperForce *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  chrono::ChLinkTSDA *arg6 = 0 ;
  std::shared_ptr< chrono::vehicle::LinearDamperForce > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::LinearDamperForce > *)jarg1;
  arg1 = (chrono::vehicle::LinearDamperForce *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  
  arg6 = (chrono::ChLinkTSDA *)(((std::shared_ptr< const chrono::ChLinkTSDA > *)jarg6) ? ((std::shared_ptr< const chrono::ChLinkTSDA > *)jarg6)->get() : 0);
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChLinkTSDA const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evaluate(arg2,arg3,arg4,arg5,(chrono::ChLinkTSDA const &)*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LinearDamperForce(void * jarg1) {
  chrono::vehicle::LinearDamperForce *arg1 = (chrono::vehicle::LinearDamperForce *) 0 ;
  std::shared_ptr< chrono::vehicle::LinearDamperForce > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::LinearDamperForce > *)jarg1;
  arg1 = (chrono::vehicle::LinearDamperForce *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearDamperForce__SWIG_0() {
  void * jresult ;
  chrono::vehicle::NonlinearDamperForce *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::NonlinearDamperForce *)new chrono::vehicle::NonlinearDamperForce();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearDamperForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearDamperForce__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::pair< double,double > > *arg1 = 0 ;
  chrono::vehicle::NonlinearDamperForce *result = 0 ;
  
  arg1 = (std::vector< std::pair< double,double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::NonlinearDamperForce *)new chrono::vehicle::NonlinearDamperForce((std::vector< std::pair< double,double > > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearDamperForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NonlinearDamperForce_add_pointC(void * jarg1, double jarg2, double jarg3) {
  chrono::vehicle::NonlinearDamperForce *arg1 = (chrono::vehicle::NonlinearDamperForce *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::NonlinearDamperForce > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearDamperForce > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearDamperForce *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->add_pointC(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_NonlinearDamperForce_evaluate(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6) {
  double jresult ;
  chrono::vehicle::NonlinearDamperForce *arg1 = (chrono::vehicle::NonlinearDamperForce *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  chrono::ChLinkTSDA *arg6 = 0 ;
  std::shared_ptr< chrono::vehicle::NonlinearDamperForce > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearDamperForce > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearDamperForce *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  
  arg6 = (chrono::ChLinkTSDA *)(((std::shared_ptr< const chrono::ChLinkTSDA > *)jarg6) ? ((std::shared_ptr< const chrono::ChLinkTSDA > *)jarg6)->get() : 0);
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChLinkTSDA const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evaluate(arg2,arg3,arg4,arg5,(chrono::ChLinkTSDA const &)*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NonlinearDamperForce(void * jarg1) {
  chrono::vehicle::NonlinearDamperForce *arg1 = (chrono::vehicle::NonlinearDamperForce *) 0 ;
  std::shared_ptr< chrono::vehicle::NonlinearDamperForce > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearDamperForce > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearDamperForce *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DegressiveDamperForce__SWIG_0(double jarg1) {
  void * jresult ;
  double arg1 ;
  chrono::vehicle::DegressiveDamperForce *result = 0 ;
  
  arg1 = (double)jarg1; 
  {
    try {
      result = (chrono::vehicle::DegressiveDamperForce *)new chrono::vehicle::DegressiveDamperForce(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::DegressiveDamperForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DegressiveDamperForce__SWIG_1(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  chrono::vehicle::DegressiveDamperForce *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (chrono::vehicle::DegressiveDamperForce *)new chrono::vehicle::DegressiveDamperForce(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::DegressiveDamperForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DegressiveDamperForce__SWIG_2(double jarg1, double jarg2, double jarg3) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  chrono::vehicle::DegressiveDamperForce *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (chrono::vehicle::DegressiveDamperForce *)new chrono::vehicle::DegressiveDamperForce(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::DegressiveDamperForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DegressiveDamperForce__SWIG_3(double jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  chrono::vehicle::DegressiveDamperForce *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (chrono::vehicle::DegressiveDamperForce *)new chrono::vehicle::DegressiveDamperForce(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::DegressiveDamperForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DegressiveDamperForce_evaluate(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6) {
  double jresult ;
  chrono::vehicle::DegressiveDamperForce *arg1 = (chrono::vehicle::DegressiveDamperForce *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  chrono::ChLinkTSDA *arg6 = 0 ;
  std::shared_ptr< chrono::vehicle::DegressiveDamperForce > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::DegressiveDamperForce > *)jarg1;
  arg1 = (chrono::vehicle::DegressiveDamperForce *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  
  arg6 = (chrono::ChLinkTSDA *)(((std::shared_ptr< const chrono::ChLinkTSDA > *)jarg6) ? ((std::shared_ptr< const chrono::ChLinkTSDA > *)jarg6)->get() : 0);
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChLinkTSDA const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evaluate(arg2,arg3,arg4,arg5,(chrono::ChLinkTSDA const &)*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DegressiveDamperForce(void * jarg1) {
  chrono::vehicle::DegressiveDamperForce *arg1 = (chrono::vehicle::DegressiveDamperForce *) 0 ;
  std::shared_ptr< chrono::vehicle::DegressiveDamperForce > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::DegressiveDamperForce > *)jarg1;
  arg1 = (chrono::vehicle::DegressiveDamperForce *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinearSpringDamperForce__SWIG_0(double jarg1, double jarg2, double jarg3) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  chrono::vehicle::LinearSpringDamperForce *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (chrono::vehicle::LinearSpringDamperForce *)new chrono::vehicle::LinearSpringDamperForce(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::LinearSpringDamperForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinearSpringDamperForce__SWIG_1(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  chrono::vehicle::LinearSpringDamperForce *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (chrono::vehicle::LinearSpringDamperForce *)new chrono::vehicle::LinearSpringDamperForce(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::LinearSpringDamperForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_LinearSpringDamperForce_evaluate(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6) {
  double jresult ;
  chrono::vehicle::LinearSpringDamperForce *arg1 = (chrono::vehicle::LinearSpringDamperForce *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  chrono::ChLinkTSDA *arg6 = 0 ;
  std::shared_ptr< chrono::vehicle::LinearSpringDamperForce > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::LinearSpringDamperForce > *)jarg1;
  arg1 = (chrono::vehicle::LinearSpringDamperForce *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  
  arg6 = (chrono::ChLinkTSDA *)(((std::shared_ptr< const chrono::ChLinkTSDA > *)jarg6) ? ((std::shared_ptr< const chrono::ChLinkTSDA > *)jarg6)->get() : 0);
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChLinkTSDA const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evaluate(arg2,arg3,arg4,arg5,(chrono::ChLinkTSDA const &)*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LinearSpringDamperForce(void * jarg1) {
  chrono::vehicle::LinearSpringDamperForce *arg1 = (chrono::vehicle::LinearSpringDamperForce *) 0 ;
  std::shared_ptr< chrono::vehicle::LinearSpringDamperForce > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::LinearSpringDamperForce > *)jarg1;
  arg1 = (chrono::vehicle::LinearSpringDamperForce *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearSpringDamperForce__SWIG_0(double jarg1) {
  void * jresult ;
  double arg1 ;
  chrono::vehicle::NonlinearSpringDamperForce *result = 0 ;
  
  arg1 = (double)jarg1; 
  {
    try {
      result = (chrono::vehicle::NonlinearSpringDamperForce *)new chrono::vehicle::NonlinearSpringDamperForce(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearSpringDamperForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearSpringDamperForce__SWIG_1() {
  void * jresult ;
  chrono::vehicle::NonlinearSpringDamperForce *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::NonlinearSpringDamperForce *)new chrono::vehicle::NonlinearSpringDamperForce();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearSpringDamperForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearSpringDamperForce__SWIG_2(void * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  std::vector< std::pair< double,double > > *arg1 = 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  double arg3 ;
  chrono::vehicle::NonlinearSpringDamperForce *result = 0 ;
  
  arg1 = (std::vector< std::pair< double,double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > const & is null", 0);
    return 0;
  } 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > const & is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      result = (chrono::vehicle::NonlinearSpringDamperForce *)new chrono::vehicle::NonlinearSpringDamperForce((std::vector< std::pair< double,double > > const &)*arg1,(std::vector< std::pair< double,double > > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearSpringDamperForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearSpringDamperForce__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  std::vector< std::pair< double,double > > *arg1 = 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  chrono::vehicle::NonlinearSpringDamperForce *result = 0 ;
  
  arg1 = (std::vector< std::pair< double,double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > const & is null", 0);
    return 0;
  } 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::NonlinearSpringDamperForce *)new chrono::vehicle::NonlinearSpringDamperForce((std::vector< std::pair< double,double > > const &)*arg1,(std::vector< std::pair< double,double > > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearSpringDamperForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NonlinearSpringDamperForce_add_pointK(void * jarg1, double jarg2, double jarg3) {
  chrono::vehicle::NonlinearSpringDamperForce *arg1 = (chrono::vehicle::NonlinearSpringDamperForce *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::NonlinearSpringDamperForce > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearSpringDamperForce > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearSpringDamperForce *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->add_pointK(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NonlinearSpringDamperForce_add_pointC(void * jarg1, double jarg2, double jarg3) {
  chrono::vehicle::NonlinearSpringDamperForce *arg1 = (chrono::vehicle::NonlinearSpringDamperForce *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::NonlinearSpringDamperForce > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearSpringDamperForce > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearSpringDamperForce *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->add_pointC(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_NonlinearSpringDamperForce_evaluate(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6) {
  double jresult ;
  chrono::vehicle::NonlinearSpringDamperForce *arg1 = (chrono::vehicle::NonlinearSpringDamperForce *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  chrono::ChLinkTSDA *arg6 = 0 ;
  std::shared_ptr< chrono::vehicle::NonlinearSpringDamperForce > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearSpringDamperForce > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearSpringDamperForce *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  
  arg6 = (chrono::ChLinkTSDA *)(((std::shared_ptr< const chrono::ChLinkTSDA > *)jarg6) ? ((std::shared_ptr< const chrono::ChLinkTSDA > *)jarg6)->get() : 0);
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChLinkTSDA const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evaluate(arg2,arg3,arg4,arg5,(chrono::ChLinkTSDA const &)*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NonlinearSpringDamperForce(void * jarg1) {
  chrono::vehicle::NonlinearSpringDamperForce *arg1 = (chrono::vehicle::NonlinearSpringDamperForce *) 0 ;
  std::shared_ptr< chrono::vehicle::NonlinearSpringDamperForce > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearSpringDamperForce > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearSpringDamperForce *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapSpringDamperForce__SWIG_0(double jarg1) {
  void * jresult ;
  double arg1 ;
  chrono::vehicle::MapSpringDamperForce *result = 0 ;
  
  arg1 = (double)jarg1; 
  {
    try {
      result = (chrono::vehicle::MapSpringDamperForce *)new chrono::vehicle::MapSpringDamperForce(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::MapSpringDamperForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapSpringDamperForce__SWIG_1() {
  void * jresult ;
  chrono::vehicle::MapSpringDamperForce *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::MapSpringDamperForce *)new chrono::vehicle::MapSpringDamperForce();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::MapSpringDamperForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapSpringDamperForce__SWIG_2(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *arg2 = 0 ;
  Eigen::Ref< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic,Eigen::RowMajor > const > *arg3 = 0 ;
  double arg4 ;
  chrono::vehicle::MapSpringDamperForce *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  arg3 = (Eigen::Ref< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic,Eigen::RowMajor > const > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChMatrixConstRef is null", 0);
    return 0;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      result = (chrono::vehicle::MapSpringDamperForce *)new chrono::vehicle::MapSpringDamperForce((std::vector< double > const &)*arg1,(std::vector< double > const &)*arg2,(Eigen::Ref< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic,Eigen::RowMajor > const > const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::MapSpringDamperForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapSpringDamperForce__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *arg2 = 0 ;
  Eigen::Ref< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic,Eigen::RowMajor > const > *arg3 = 0 ;
  chrono::vehicle::MapSpringDamperForce *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  arg3 = (Eigen::Ref< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic,Eigen::RowMajor > const > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChMatrixConstRef is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::MapSpringDamperForce *)new chrono::vehicle::MapSpringDamperForce((std::vector< double > const &)*arg1,(std::vector< double > const &)*arg2,(Eigen::Ref< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic,Eigen::RowMajor > const > const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::MapSpringDamperForce >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapSpringDamperForce_set_deformations(void * jarg1, void * jarg2) {
  chrono::vehicle::MapSpringDamperForce *arg1 = (chrono::vehicle::MapSpringDamperForce *) 0 ;
  std::vector< double > arg2 ;
  std::shared_ptr< chrono::vehicle::MapSpringDamperForce > *smartarg1 = 0 ;
  std::vector< double > const *argp2 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::MapSpringDamperForce > *)jarg1;
  arg1 = (chrono::vehicle::MapSpringDamperForce *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (std::vector< double > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< double > const", 0);
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->set_deformations(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapSpringDamperForce_add_pointC(void * jarg1, double jarg2, void * jarg3) {
  chrono::vehicle::MapSpringDamperForce *arg1 = (chrono::vehicle::MapSpringDamperForce *) 0 ;
  double arg2 ;
  std::vector< double > *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::MapSpringDamperForce > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::MapSpringDamperForce > *)jarg1;
  arg1 = (chrono::vehicle::MapSpringDamperForce *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->add_pointC(arg2,(std::vector< double > const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_MapSpringDamperForce_evaluate(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6) {
  double jresult ;
  chrono::vehicle::MapSpringDamperForce *arg1 = (chrono::vehicle::MapSpringDamperForce *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  chrono::ChLinkTSDA *arg6 = 0 ;
  std::shared_ptr< chrono::vehicle::MapSpringDamperForce > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::MapSpringDamperForce > *)jarg1;
  arg1 = (chrono::vehicle::MapSpringDamperForce *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  
  arg6 = (chrono::ChLinkTSDA *)(((std::shared_ptr< const chrono::ChLinkTSDA > *)jarg6) ? ((std::shared_ptr< const chrono::ChLinkTSDA > *)jarg6)->get() : 0);
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChLinkTSDA const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evaluate(arg2,arg3,arg4,arg5,(chrono::ChLinkTSDA const &)*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapSpringDamperForce_print_data(void * jarg1) {
  chrono::vehicle::MapSpringDamperForce *arg1 = (chrono::vehicle::MapSpringDamperForce *) 0 ;
  std::shared_ptr< chrono::vehicle::MapSpringDamperForce > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::MapSpringDamperForce > *)jarg1;
  arg1 = (chrono::vehicle::MapSpringDamperForce *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->print_data();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MapSpringDamperForce(void * jarg1) {
  chrono::vehicle::MapSpringDamperForce *arg1 = (chrono::vehicle::MapSpringDamperForce *) 0 ;
  std::shared_ptr< chrono::vehicle::MapSpringDamperForce > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::MapSpringDamperForce > *)jarg1;
  arg1 = (chrono::vehicle::MapSpringDamperForce *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinearSpringTorque__SWIG_0(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  chrono::vehicle::LinearSpringTorque *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (chrono::vehicle::LinearSpringTorque *)new chrono::vehicle::LinearSpringTorque(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::LinearSpringTorque >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinearSpringTorque__SWIG_1(double jarg1) {
  void * jresult ;
  double arg1 ;
  chrono::vehicle::LinearSpringTorque *result = 0 ;
  
  arg1 = (double)jarg1; 
  {
    try {
      result = (chrono::vehicle::LinearSpringTorque *)new chrono::vehicle::LinearSpringTorque(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::LinearSpringTorque >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_LinearSpringTorque_evaluate(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6) {
  double jresult ;
  chrono::vehicle::LinearSpringTorque *arg1 = (chrono::vehicle::LinearSpringTorque *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  chrono::ChLinkRSDA *arg6 = 0 ;
  std::shared_ptr< chrono::vehicle::LinearSpringTorque > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::LinearSpringTorque > *)jarg1;
  arg1 = (chrono::vehicle::LinearSpringTorque *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  
  arg6 = (chrono::ChLinkRSDA *)(((std::shared_ptr< const chrono::ChLinkRSDA > *)jarg6) ? ((std::shared_ptr< const chrono::ChLinkRSDA > *)jarg6)->get() : 0);
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChLinkRSDA const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evaluate(arg2,arg3,arg4,arg5,(chrono::ChLinkRSDA const &)*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LinearSpringTorque(void * jarg1) {
  chrono::vehicle::LinearSpringTorque *arg1 = (chrono::vehicle::LinearSpringTorque *) 0 ;
  std::shared_ptr< chrono::vehicle::LinearSpringTorque > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::LinearSpringTorque > *)jarg1;
  arg1 = (chrono::vehicle::LinearSpringTorque *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearSpringTorque__SWIG_0(double jarg1) {
  void * jresult ;
  double arg1 ;
  chrono::vehicle::NonlinearSpringTorque *result = 0 ;
  
  arg1 = (double)jarg1; 
  {
    try {
      result = (chrono::vehicle::NonlinearSpringTorque *)new chrono::vehicle::NonlinearSpringTorque(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearSpringTorque >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearSpringTorque__SWIG_1() {
  void * jresult ;
  chrono::vehicle::NonlinearSpringTorque *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::NonlinearSpringTorque *)new chrono::vehicle::NonlinearSpringTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearSpringTorque >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearSpringTorque__SWIG_2(void * jarg1, double jarg2) {
  void * jresult ;
  std::vector< std::pair< double,double > > *arg1 = 0 ;
  double arg2 ;
  chrono::vehicle::NonlinearSpringTorque *result = 0 ;
  
  arg1 = (std::vector< std::pair< double,double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > const & is null", 0);
    return 0;
  } 
  arg2 = (double)jarg2; 
  {
    try {
      result = (chrono::vehicle::NonlinearSpringTorque *)new chrono::vehicle::NonlinearSpringTorque((std::vector< std::pair< double,double > > const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearSpringTorque >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearSpringTorque__SWIG_3(void * jarg1) {
  void * jresult ;
  std::vector< std::pair< double,double > > *arg1 = 0 ;
  chrono::vehicle::NonlinearSpringTorque *result = 0 ;
  
  arg1 = (std::vector< std::pair< double,double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::NonlinearSpringTorque *)new chrono::vehicle::NonlinearSpringTorque((std::vector< std::pair< double,double > > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearSpringTorque >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NonlinearSpringTorque_add_pointK(void * jarg1, double jarg2, double jarg3) {
  chrono::vehicle::NonlinearSpringTorque *arg1 = (chrono::vehicle::NonlinearSpringTorque *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::NonlinearSpringTorque > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearSpringTorque > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearSpringTorque *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->add_pointK(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_NonlinearSpringTorque_evaluate(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6) {
  double jresult ;
  chrono::vehicle::NonlinearSpringTorque *arg1 = (chrono::vehicle::NonlinearSpringTorque *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  chrono::ChLinkRSDA *arg6 = 0 ;
  std::shared_ptr< chrono::vehicle::NonlinearSpringTorque > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearSpringTorque > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearSpringTorque *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  
  arg6 = (chrono::ChLinkRSDA *)(((std::shared_ptr< const chrono::ChLinkRSDA > *)jarg6) ? ((std::shared_ptr< const chrono::ChLinkRSDA > *)jarg6)->get() : 0);
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChLinkRSDA const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evaluate(arg2,arg3,arg4,arg5,(chrono::ChLinkRSDA const &)*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NonlinearSpringTorque(void * jarg1) {
  chrono::vehicle::NonlinearSpringTorque *arg1 = (chrono::vehicle::NonlinearSpringTorque *) 0 ;
  std::shared_ptr< chrono::vehicle::NonlinearSpringTorque > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearSpringTorque > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearSpringTorque *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinearDamperTorque(double jarg1) {
  void * jresult ;
  double arg1 ;
  chrono::vehicle::LinearDamperTorque *result = 0 ;
  
  arg1 = (double)jarg1; 
  {
    try {
      result = (chrono::vehicle::LinearDamperTorque *)new chrono::vehicle::LinearDamperTorque(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::LinearDamperTorque >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_LinearDamperTorque_evaluate(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6) {
  double jresult ;
  chrono::vehicle::LinearDamperTorque *arg1 = (chrono::vehicle::LinearDamperTorque *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  chrono::ChLinkRSDA *arg6 = 0 ;
  std::shared_ptr< chrono::vehicle::LinearDamperTorque > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::LinearDamperTorque > *)jarg1;
  arg1 = (chrono::vehicle::LinearDamperTorque *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  
  arg6 = (chrono::ChLinkRSDA *)(((std::shared_ptr< const chrono::ChLinkRSDA > *)jarg6) ? ((std::shared_ptr< const chrono::ChLinkRSDA > *)jarg6)->get() : 0);
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChLinkRSDA const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evaluate(arg2,arg3,arg4,arg5,(chrono::ChLinkRSDA const &)*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LinearDamperTorque(void * jarg1) {
  chrono::vehicle::LinearDamperTorque *arg1 = (chrono::vehicle::LinearDamperTorque *) 0 ;
  std::shared_ptr< chrono::vehicle::LinearDamperTorque > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::LinearDamperTorque > *)jarg1;
  arg1 = (chrono::vehicle::LinearDamperTorque *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearDamperTorque__SWIG_0() {
  void * jresult ;
  chrono::vehicle::NonlinearDamperTorque *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::NonlinearDamperTorque *)new chrono::vehicle::NonlinearDamperTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearDamperTorque >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearDamperTorque__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::pair< double,double > > *arg1 = 0 ;
  chrono::vehicle::NonlinearDamperTorque *result = 0 ;
  
  arg1 = (std::vector< std::pair< double,double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::NonlinearDamperTorque *)new chrono::vehicle::NonlinearDamperTorque((std::vector< std::pair< double,double > > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearDamperTorque >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NonlinearDamperTorque_add_pointC(void * jarg1, double jarg2, double jarg3) {
  chrono::vehicle::NonlinearDamperTorque *arg1 = (chrono::vehicle::NonlinearDamperTorque *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::NonlinearDamperTorque > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearDamperTorque > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearDamperTorque *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->add_pointC(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_NonlinearDamperTorque_evaluate(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6) {
  double jresult ;
  chrono::vehicle::NonlinearDamperTorque *arg1 = (chrono::vehicle::NonlinearDamperTorque *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  chrono::ChLinkRSDA *arg6 = 0 ;
  std::shared_ptr< chrono::vehicle::NonlinearDamperTorque > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearDamperTorque > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearDamperTorque *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  
  arg6 = (chrono::ChLinkRSDA *)(((std::shared_ptr< const chrono::ChLinkRSDA > *)jarg6) ? ((std::shared_ptr< const chrono::ChLinkRSDA > *)jarg6)->get() : 0);
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChLinkRSDA const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evaluate(arg2,arg3,arg4,arg5,(chrono::ChLinkRSDA const &)*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NonlinearDamperTorque(void * jarg1) {
  chrono::vehicle::NonlinearDamperTorque *arg1 = (chrono::vehicle::NonlinearDamperTorque *) 0 ;
  std::shared_ptr< chrono::vehicle::NonlinearDamperTorque > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearDamperTorque > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearDamperTorque *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinearSpringDamperTorque__SWIG_0(double jarg1, double jarg2, double jarg3) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  chrono::vehicle::LinearSpringDamperTorque *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (chrono::vehicle::LinearSpringDamperTorque *)new chrono::vehicle::LinearSpringDamperTorque(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::LinearSpringDamperTorque >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinearSpringDamperTorque__SWIG_1(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  chrono::vehicle::LinearSpringDamperTorque *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (chrono::vehicle::LinearSpringDamperTorque *)new chrono::vehicle::LinearSpringDamperTorque(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::LinearSpringDamperTorque >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_LinearSpringDamperTorque_evaluate(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6) {
  double jresult ;
  chrono::vehicle::LinearSpringDamperTorque *arg1 = (chrono::vehicle::LinearSpringDamperTorque *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  chrono::ChLinkRSDA *arg6 = 0 ;
  std::shared_ptr< chrono::vehicle::LinearSpringDamperTorque > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::LinearSpringDamperTorque > *)jarg1;
  arg1 = (chrono::vehicle::LinearSpringDamperTorque *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  
  arg6 = (chrono::ChLinkRSDA *)(((std::shared_ptr< const chrono::ChLinkRSDA > *)jarg6) ? ((std::shared_ptr< const chrono::ChLinkRSDA > *)jarg6)->get() : 0);
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChLinkRSDA const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evaluate(arg2,arg3,arg4,arg5,(chrono::ChLinkRSDA const &)*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LinearSpringDamperTorque(void * jarg1) {
  chrono::vehicle::LinearSpringDamperTorque *arg1 = (chrono::vehicle::LinearSpringDamperTorque *) 0 ;
  std::shared_ptr< chrono::vehicle::LinearSpringDamperTorque > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::LinearSpringDamperTorque > *)jarg1;
  arg1 = (chrono::vehicle::LinearSpringDamperTorque *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearSpringDamperTorque__SWIG_0(double jarg1) {
  void * jresult ;
  double arg1 ;
  chrono::vehicle::NonlinearSpringDamperTorque *result = 0 ;
  
  arg1 = (double)jarg1; 
  {
    try {
      result = (chrono::vehicle::NonlinearSpringDamperTorque *)new chrono::vehicle::NonlinearSpringDamperTorque(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearSpringDamperTorque >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearSpringDamperTorque__SWIG_1() {
  void * jresult ;
  chrono::vehicle::NonlinearSpringDamperTorque *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::NonlinearSpringDamperTorque *)new chrono::vehicle::NonlinearSpringDamperTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearSpringDamperTorque >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearSpringDamperTorque__SWIG_2(void * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  std::vector< std::pair< double,double > > *arg1 = 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  double arg3 ;
  chrono::vehicle::NonlinearSpringDamperTorque *result = 0 ;
  
  arg1 = (std::vector< std::pair< double,double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > const & is null", 0);
    return 0;
  } 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > const & is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      result = (chrono::vehicle::NonlinearSpringDamperTorque *)new chrono::vehicle::NonlinearSpringDamperTorque((std::vector< std::pair< double,double > > const &)*arg1,(std::vector< std::pair< double,double > > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearSpringDamperTorque >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NonlinearSpringDamperTorque__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  std::vector< std::pair< double,double > > *arg1 = 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  chrono::vehicle::NonlinearSpringDamperTorque *result = 0 ;
  
  arg1 = (std::vector< std::pair< double,double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > const & is null", 0);
    return 0;
  } 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::NonlinearSpringDamperTorque *)new chrono::vehicle::NonlinearSpringDamperTorque((std::vector< std::pair< double,double > > const &)*arg1,(std::vector< std::pair< double,double > > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::NonlinearSpringDamperTorque >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NonlinearSpringDamperTorque_add_pointK(void * jarg1, double jarg2, double jarg3) {
  chrono::vehicle::NonlinearSpringDamperTorque *arg1 = (chrono::vehicle::NonlinearSpringDamperTorque *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::NonlinearSpringDamperTorque > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearSpringDamperTorque > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearSpringDamperTorque *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->add_pointK(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NonlinearSpringDamperTorque_add_pointC(void * jarg1, double jarg2, double jarg3) {
  chrono::vehicle::NonlinearSpringDamperTorque *arg1 = (chrono::vehicle::NonlinearSpringDamperTorque *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::NonlinearSpringDamperTorque > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearSpringDamperTorque > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearSpringDamperTorque *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->add_pointC(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_NonlinearSpringDamperTorque_evaluate(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6) {
  double jresult ;
  chrono::vehicle::NonlinearSpringDamperTorque *arg1 = (chrono::vehicle::NonlinearSpringDamperTorque *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  chrono::ChLinkRSDA *arg6 = 0 ;
  std::shared_ptr< chrono::vehicle::NonlinearSpringDamperTorque > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearSpringDamperTorque > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearSpringDamperTorque *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  
  arg6 = (chrono::ChLinkRSDA *)(((std::shared_ptr< const chrono::ChLinkRSDA > *)jarg6) ? ((std::shared_ptr< const chrono::ChLinkRSDA > *)jarg6)->get() : 0);
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChLinkRSDA const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evaluate(arg2,arg3,arg4,arg5,(chrono::ChLinkRSDA const &)*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NonlinearSpringDamperTorque(void * jarg1) {
  chrono::vehicle::NonlinearSpringDamperTorque *arg1 = (chrono::vehicle::NonlinearSpringDamperTorque *) 0 ;
  std::shared_ptr< chrono::vehicle::NonlinearSpringDamperTorque > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::NonlinearSpringDamperTorque > *)jarg1;
  arg1 = (chrono::vehicle::NonlinearSpringDamperTorque *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChVehicleOutput(void * jarg1) {
  chrono::vehicle::ChVehicleOutput *arg1 = (chrono::vehicle::ChVehicleOutput *) 0 ;
  
  arg1 = (chrono::vehicle::ChVehicleOutput *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicleOutput_WriteTime(void * jarg1, int jarg2, double jarg3) {
  chrono::vehicle::ChVehicleOutput *arg1 = (chrono::vehicle::ChVehicleOutput *) 0 ;
  int arg2 ;
  double arg3 ;
  
  arg1 = (chrono::vehicle::ChVehicleOutput *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->WriteTime(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicleOutput_WriteSection(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChVehicleOutput *arg1 = (chrono::vehicle::ChVehicleOutput *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChVehicleOutput *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->WriteSection((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicleOutput_WriteBodies(void * jarg1, void * jarg2) {
  chrono::vehicle::ChVehicleOutput *arg1 = (chrono::vehicle::ChVehicleOutput *) 0 ;
  std::vector< std::shared_ptr< chrono::ChBody > > *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChVehicleOutput *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< chrono::ChBody > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::ChBody > > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->WriteBodies((std::vector< std::shared_ptr< chrono::ChBody > > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicleOutput_WriteAuxRefBodies(void * jarg1, void * jarg2) {
  chrono::vehicle::ChVehicleOutput *arg1 = (chrono::vehicle::ChVehicleOutput *) 0 ;
  std::vector< std::shared_ptr< chrono::ChBodyAuxRef > > *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChVehicleOutput *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< chrono::ChBodyAuxRef > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::ChBodyAuxRef > > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->WriteAuxRefBodies((std::vector< std::shared_ptr< chrono::ChBodyAuxRef > > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicleOutput_WriteMarkers(void * jarg1, void * jarg2) {
  chrono::vehicle::ChVehicleOutput *arg1 = (chrono::vehicle::ChVehicleOutput *) 0 ;
  std::vector< std::shared_ptr< chrono::ChMarker > > *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChVehicleOutput *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< chrono::ChMarker > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::ChMarker > > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->WriteMarkers((std::vector< std::shared_ptr< chrono::ChMarker > > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicleOutput_WriteShafts(void * jarg1, void * jarg2) {
  chrono::vehicle::ChVehicleOutput *arg1 = (chrono::vehicle::ChVehicleOutput *) 0 ;
  std::vector< std::shared_ptr< chrono::ChShaft > > *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChVehicleOutput *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< chrono::ChShaft > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::ChShaft > > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->WriteShafts((std::vector< std::shared_ptr< chrono::ChShaft > > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicleOutput_WriteJoints(void * jarg1, void * jarg2) {
  chrono::vehicle::ChVehicleOutput *arg1 = (chrono::vehicle::ChVehicleOutput *) 0 ;
  std::vector< std::shared_ptr< chrono::ChLink > > *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChVehicleOutput *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< chrono::ChLink > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::ChLink > > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->WriteJoints((std::vector< std::shared_ptr< chrono::ChLink > > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicleOutput_WriteCouples(void * jarg1, void * jarg2) {
  chrono::vehicle::ChVehicleOutput *arg1 = (chrono::vehicle::ChVehicleOutput *) 0 ;
  std::vector< std::shared_ptr< chrono::ChShaftsCouple > > *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChVehicleOutput *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< chrono::ChShaftsCouple > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::ChShaftsCouple > > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->WriteCouples((std::vector< std::shared_ptr< chrono::ChShaftsCouple > > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicleOutput_WriteLinSprings(void * jarg1, void * jarg2) {
  chrono::vehicle::ChVehicleOutput *arg1 = (chrono::vehicle::ChVehicleOutput *) 0 ;
  std::vector< std::shared_ptr< chrono::ChLinkTSDA > > *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChVehicleOutput *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< chrono::ChLinkTSDA > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::ChLinkTSDA > > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->WriteLinSprings((std::vector< std::shared_ptr< chrono::ChLinkTSDA > > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicleOutput_WriteRotSprings(void * jarg1, void * jarg2) {
  chrono::vehicle::ChVehicleOutput *arg1 = (chrono::vehicle::ChVehicleOutput *) 0 ;
  std::vector< std::shared_ptr< chrono::ChLinkRSDA > > *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChVehicleOutput *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< chrono::ChLinkRSDA > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::ChLinkRSDA > > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->WriteRotSprings((std::vector< std::shared_ptr< chrono::ChLinkRSDA > > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicleOutput_WriteBodyLoads(void * jarg1, void * jarg2) {
  chrono::vehicle::ChVehicleOutput *arg1 = (chrono::vehicle::ChVehicleOutput *) 0 ;
  std::vector< std::shared_ptr< chrono::ChLoadBodyBody > > *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChVehicleOutput *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< chrono::ChLoadBodyBody > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::ChLoadBodyBody > > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->WriteBodyLoads((std::vector< std::shared_ptr< chrono::ChLoadBodyBody > > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetDataPath(const char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      chrono::vehicle::SetDataPath((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_GetDataPath() {
  const char * jresult ;
  std::string *result = 0 ;
  
  {
    try {
      result = (std::string *) &chrono::vehicle::GetDataPath();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_GetDataFile(const char * jarg1) {
  const char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = chrono::vehicle::GetDataFile((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChPart(void * jarg1) {
  chrono::vehicle::ChPart *arg1 = (chrono::vehicle::ChPart *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPart > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPart > *)jarg1;
  arg1 = (chrono::vehicle::ChPart *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChPart_GetName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChPart *arg1 = (chrono::vehicle::ChPart *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPart const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPart > *)jarg1;
  arg1 = (chrono::vehicle::ChPart *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::string *) &((chrono::vehicle::ChPart const *)arg1)->GetName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPart_SetName(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChPart *arg1 = (chrono::vehicle::ChPart *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChPart > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPart > *)jarg1;
  arg1 = (chrono::vehicle::ChPart *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->SetName((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChPart_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChPart *arg1 = (chrono::vehicle::ChPart *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPart const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPart > *)jarg1;
  arg1 = (chrono::vehicle::ChPart *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChPart const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChPart_IsInitialized(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChPart *arg1 = (chrono::vehicle::ChPart *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPart const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPart > *)jarg1;
  arg1 = (chrono::vehicle::ChPart *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChPart const *)arg1)->IsInitialized();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPart_GetMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChPart *arg1 = (chrono::vehicle::ChPart *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPart const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPart > *)jarg1;
  arg1 = (chrono::vehicle::ChPart *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChPart const *)arg1)->GetMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChPart_GetCOMFrame(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChPart *arg1 = (chrono::vehicle::ChPart *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPart const > *smartarg1 = 0 ;
  chrono::ChFrame< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPart > *)jarg1;
  arg1 = (chrono::vehicle::ChPart *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChFrame< > *) &((chrono::vehicle::ChPart const *)arg1)->GetCOMFrame();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< const chrono::ChFrame<double> >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChPart_GetInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChPart *arg1 = (chrono::vehicle::ChPart *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPart const > *smartarg1 = 0 ;
  chrono::ChMatrix33< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPart > *)jarg1;
  arg1 = (chrono::vehicle::ChPart *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChMatrix33< > *) &((chrono::vehicle::ChPart const *)arg1)->GetInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChPart_GetTransform(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChPart *arg1 = (chrono::vehicle::ChPart *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPart const > *smartarg1 = 0 ;
  chrono::ChFrame< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPart > *)jarg1;
  arg1 = (chrono::vehicle::ChPart *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChFrame< > *) &((chrono::vehicle::ChPart const *)arg1)->GetTransform();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< const chrono::ChFrame<double> >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPart_SetVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChPart *arg1 = (chrono::vehicle::ChPart *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChPart > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPart > *)jarg1;
  arg1 = (chrono::vehicle::ChPart *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPart_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChPart *arg1 = (chrono::vehicle::ChPart *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChPart > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPart > *)jarg1;
  arg1 = (chrono::vehicle::ChPart *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPart_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChPart *arg1 = (chrono::vehicle::ChPart *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPart > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPart > *)jarg1;
  arg1 = (chrono::vehicle::ChPart *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPart_SetOutput(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChPart *arg1 = (chrono::vehicle::ChPart *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChPart > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPart > *)jarg1;
  arg1 = (chrono::vehicle::ChPart *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetOutput(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChPart_OutputEnabled(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChPart *arg1 = (chrono::vehicle::ChPart *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPart const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPart > *)jarg1;
  arg1 = (chrono::vehicle::ChPart *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChPart const *)arg1)->OutputEnabled();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPart_ExportComponentList(void * jarg1, void * jarg2) {
  chrono::vehicle::ChPart *arg1 = (chrono::vehicle::ChPart *) 0 ;
  rapidjson::Document *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChPart const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPart > *)jarg1;
  arg1 = (chrono::vehicle::ChPart *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (rapidjson::Document *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document & is null", 0);
    return ;
  } 
  {
    try {
      ((chrono::vehicle::ChPart const *)arg1)->ExportComponentList(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPart_Output(void * jarg1, void * jarg2) {
  chrono::vehicle::ChPart *arg1 = (chrono::vehicle::ChPart *) 0 ;
  chrono::vehicle::ChVehicleOutput *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChPart const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPart > *)jarg1;
  arg1 = (chrono::vehicle::ChPart *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::ChVehicleOutput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicleOutput & is null", 0);
    return ;
  } 
  {
    try {
      ((chrono::vehicle::ChPart const *)arg1)->Output(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChPart_TransformInertiaMatrix(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  chrono::ChVector< > *arg1 = 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  chrono::ChMatrix33< > *arg3 = 0 ;
  chrono::ChMatrix33< > *arg4 = 0 ;
  chrono::ChMatrix33< > result;
  
  arg1 = (chrono::ChVector< > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  arg3 = (chrono::ChMatrix33< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChMatrix33< > const & is null", 0);
    return 0;
  } 
  arg4 = (chrono::ChMatrix33< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChMatrix33< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = chrono::vehicle::ChPart::TransformInertiaMatrix((chrono::ChVector< > const &)*arg1,(chrono::ChVector< > const &)*arg2,(chrono::ChMatrix33< > const &)*arg3,(chrono::ChMatrix33< > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChMatrix33< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWorldFrame_Set(void * jarg1) {
  chrono::ChMatrix33< > *arg1 = 0 ;
  
  arg1 = (chrono::ChMatrix33< > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChMatrix33< > const & is null", 0);
    return ;
  } 
  {
    try {
      chrono::vehicle::ChWorldFrame::Set((chrono::ChMatrix33< > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWorldFrame_SetYUP() {
  {
    try {
      chrono::vehicle::ChWorldFrame::SetYUP();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChWorldFrame_IsISO() {
  unsigned int jresult ;
  bool result;
  
  {
    try {
      result = (bool)chrono::vehicle::ChWorldFrame::IsISO();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWorldFrame_Rotation() {
  void * jresult ;
  chrono::ChMatrix33< > *result = 0 ;
  
  {
    try {
      result = (chrono::ChMatrix33< > *) &chrono::vehicle::ChWorldFrame::Rotation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWorldFrame_Quaternion() {
  void * jresult ;
  chrono::ChQuaternion< > *result = 0 ;
  
  {
    try {
      result = (chrono::ChQuaternion< > *) &chrono::vehicle::ChWorldFrame::Quaternion();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWorldFrame_Vertical() {
  void * jresult ;
  chrono::ChVector< > *result = 0 ;
  
  {
    try {
      result = (chrono::ChVector< > *) &chrono::vehicle::ChWorldFrame::Vertical();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWorldFrame_Forward() {
  void * jresult ;
  chrono::ChVector< > *result = 0 ;
  
  {
    try {
      result = (chrono::ChVector< > *) &chrono::vehicle::ChWorldFrame::Forward();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWorldFrame_ToISO(void * jarg1) {
  void * jresult ;
  chrono::ChVector< > *arg1 = 0 ;
  chrono::ChVector< > result;
  
  arg1 = (chrono::ChVector< > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = chrono::vehicle::ChWorldFrame::ToISO((chrono::ChVector< > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWorldFrame_FromISO(void * jarg1) {
  void * jresult ;
  chrono::ChVector< > *arg1 = 0 ;
  chrono::ChVector< > result;
  
  arg1 = (chrono::ChVector< > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = chrono::vehicle::ChWorldFrame::FromISO((chrono::ChVector< > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChWorldFrame_Height(void * jarg1) {
  double jresult ;
  chrono::ChVector< > *arg1 = 0 ;
  double result;
  
  arg1 = (chrono::ChVector< > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)chrono::vehicle::ChWorldFrame::Height((chrono::ChVector< > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWorldFrame_Project(void * jarg1) {
  chrono::ChVector< > *arg1 = 0 ;
  
  arg1 = (chrono::ChVector< > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > & is null", 0);
    return ;
  } 
  {
    try {
      chrono::vehicle::ChWorldFrame::Project(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChWorldFrame(void * jarg1) {
  chrono::vehicle::ChWorldFrame *arg1 = (chrono::vehicle::ChWorldFrame *) 0 ;
  
  arg1 = (chrono::vehicle::ChWorldFrame *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPowertrainAssembly(void * jarg1, void * jarg2) {
  void * jresult ;
  SwigValueWrapper< std::shared_ptr< ChEngine > > arg1 ;
  SwigValueWrapper< std::shared_ptr< ChTransmission > > arg2 ;
  std::shared_ptr< ChEngine > *argp1 ;
  std::shared_ptr< ChTransmission > *argp2 ;
  chrono::vehicle::ChPowertrainAssembly *result = 0 ;
  
  argp1 = (std::shared_ptr< ChEngine > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< ChEngine >", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (std::shared_ptr< ChTransmission > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< ChTransmission >", 0);
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (chrono::vehicle::ChPowertrainAssembly *)new chrono::vehicle::ChPowertrainAssembly(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChPowertrainAssembly >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChPowertrainAssembly(void * jarg1) {
  chrono::vehicle::ChPowertrainAssembly *arg1 = (chrono::vehicle::ChPowertrainAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPowertrainAssembly > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPowertrainAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChPowertrainAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChPowertrainAssembly_GetEngine(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChPowertrainAssembly *arg1 = (chrono::vehicle::ChPowertrainAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPowertrainAssembly const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChEngine > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPowertrainAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChPowertrainAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChPowertrainAssembly const *)arg1)->GetEngine();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChEngine >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChPowertrainAssembly_GetTransmission(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChPowertrainAssembly *arg1 = (chrono::vehicle::ChPowertrainAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPowertrainAssembly const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChTransmission > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPowertrainAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChPowertrainAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChPowertrainAssembly const *)arg1)->GetTransmission();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChTransmission >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPowertrainAssembly_GetOutputTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChPowertrainAssembly *arg1 = (chrono::vehicle::ChPowertrainAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPowertrainAssembly const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPowertrainAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChPowertrainAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChPowertrainAssembly const *)arg1)->GetOutputTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPowertrainAssembly_Initialize(void * jarg1, void * jarg2) {
  chrono::vehicle::ChPowertrainAssembly *arg1 = (chrono::vehicle::ChPowertrainAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChPowertrainAssembly > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > *argp2 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPowertrainAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChPowertrainAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< chrono::vehicle::ChChassis >", 0);
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->Initialize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPowertrainAssembly_Synchronize(void * jarg1, double jarg2, void * jarg3, double jarg4) {
  chrono::vehicle::ChPowertrainAssembly *arg1 = (chrono::vehicle::ChPowertrainAssembly *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::ChPowertrainAssembly > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPowertrainAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChPowertrainAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPowertrainAssembly_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::ChPowertrainAssembly *arg1 = (chrono::vehicle::ChPowertrainAssembly *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChPowertrainAssembly > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPowertrainAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChPowertrainAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChEngineSimple(void * jarg1) {
  chrono::vehicle::ChEngineSimple *arg1 = (chrono::vehicle::ChEngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::ChEngineSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChEngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::ChEngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChEngineSimple_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChEngineSimple *arg1 = (chrono::vehicle::ChEngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::ChEngineSimple const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChEngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::ChEngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChEngineSimple const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChEngineSimple_GetMotorSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChEngineSimple *arg1 = (chrono::vehicle::ChEngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::ChEngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChEngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::ChEngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChEngineSimple const *)arg1)->GetMotorSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChEngineSimple_GetOutputMotorshaftTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChEngineSimple *arg1 = (chrono::vehicle::ChEngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::ChEngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChEngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::ChEngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChEngineSimple const *)arg1)->GetOutputMotorshaftTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChEngineSimpleMap(void * jarg1) {
  chrono::vehicle::ChEngineSimpleMap *arg1 = (chrono::vehicle::ChEngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::ChEngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChEngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::ChEngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChEngineSimpleMap_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChEngineSimpleMap *arg1 = (chrono::vehicle::ChEngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::ChEngineSimpleMap const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChEngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::ChEngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChEngineSimpleMap const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChEngineSimpleMap_GetMotorSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChEngineSimpleMap *arg1 = (chrono::vehicle::ChEngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::ChEngineSimpleMap const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChEngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::ChEngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChEngineSimpleMap const *)arg1)->GetMotorSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChEngineSimpleMap_GetOutputMotorshaftTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChEngineSimpleMap *arg1 = (chrono::vehicle::ChEngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::ChEngineSimpleMap const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChEngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::ChEngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChEngineSimpleMap const *)arg1)->GetOutputMotorshaftTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChEngineShafts(void * jarg1) {
  chrono::vehicle::ChEngineShafts *arg1 = (chrono::vehicle::ChEngineShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChEngineShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChEngineShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChEngineShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChEngineShafts_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChEngineShafts *arg1 = (chrono::vehicle::ChEngineShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChEngineShafts const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChEngineShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChEngineShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChEngineShafts const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChEngineShafts_GetMotorSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChEngineShafts *arg1 = (chrono::vehicle::ChEngineShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChEngineShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChEngineShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChEngineShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChEngineShafts const *)arg1)->GetMotorSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChEngineShafts_GetOutputMotorshaftTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChEngineShafts *arg1 = (chrono::vehicle::ChEngineShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChEngineShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChEngineShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChEngineShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChEngineShafts const *)arg1)->GetOutputMotorshaftTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EngineSimple__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::EngineSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::EngineSimple *)new chrono::vehicle::EngineSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::EngineSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EngineSimple__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::EngineSimple *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::EngineSimple *)new chrono::vehicle::EngineSimple((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::EngineSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EngineSimple(void * jarg1) {
  chrono::vehicle::EngineSimple *arg1 = (chrono::vehicle::EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::EngineSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_EngineSimple_GetMaxTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::EngineSimple *arg1 = (chrono::vehicle::EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::EngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::EngineSimple const *)arg1)->GetMaxTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_EngineSimple_GetMaxPower(void * jarg1) {
  double jresult ;
  chrono::vehicle::EngineSimple *arg1 = (chrono::vehicle::EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::EngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::EngineSimple const *)arg1)->GetMaxPower();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_EngineSimple_GetMaxSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::EngineSimple *arg1 = (chrono::vehicle::EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::EngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::EngineSimple const *)arg1)->GetMaxSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EngineSimpleMap__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::EngineSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::EngineSimpleMap *)new chrono::vehicle::EngineSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::EngineSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EngineSimpleMap__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::EngineSimpleMap *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::EngineSimpleMap *)new chrono::vehicle::EngineSimpleMap((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::EngineSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EngineSimpleMap(void * jarg1) {
  chrono::vehicle::EngineSimpleMap *arg1 = (chrono::vehicle::EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_EngineSimpleMap_GetMaxEngineSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::EngineSimpleMap *arg1 = (chrono::vehicle::EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::EngineSimpleMap > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxEngineSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineSimpleMap_SetEngineTorqueMaps(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::EngineSimpleMap *arg1 = (chrono::vehicle::EngineSimpleMap *) 0 ;
  ChFunction_Recorder *arg2 = 0 ;
  ChFunction_Recorder *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ChFunction_Recorder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  arg3 = (ChFunction_Recorder *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetEngineTorqueMaps(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EngineShafts__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::EngineShafts *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::EngineShafts *)new chrono::vehicle::EngineShafts((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::EngineShafts >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EngineShafts__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::EngineShafts *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::EngineShafts *)new chrono::vehicle::EngineShafts((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::EngineShafts >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EngineShafts(void * jarg1) {
  chrono::vehicle::EngineShafts *arg1 = (chrono::vehicle::EngineShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::EngineShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::EngineShafts > *)jarg1;
  arg1 = (chrono::vehicle::EngineShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_EngineShafts_GetMotorBlockInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::EngineShafts *arg1 = (chrono::vehicle::EngineShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::EngineShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::EngineShafts > *)jarg1;
  arg1 = (chrono::vehicle::EngineShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::EngineShafts const *)arg1)->GetMotorBlockInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_EngineShafts_GetMotorshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::EngineShafts *arg1 = (chrono::vehicle::EngineShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::EngineShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::EngineShafts > *)jarg1;
  arg1 = (chrono::vehicle::EngineShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::EngineShafts const *)arg1)->GetMotorshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineShafts_SetEngineTorqueMap(void * jarg1, void * jarg2) {
  chrono::vehicle::EngineShafts *arg1 = (chrono::vehicle::EngineShafts *) 0 ;
  std::shared_ptr< ChFunction_Recorder > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::EngineShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::EngineShafts > *)jarg1;
  arg1 = (chrono::vehicle::EngineShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::shared_ptr< ChFunction_Recorder > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< ChFunction_Recorder > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetEngineTorqueMap(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineShafts_SetEngineLossesMap(void * jarg1, void * jarg2) {
  chrono::vehicle::EngineShafts *arg1 = (chrono::vehicle::EngineShafts *) 0 ;
  std::shared_ptr< ChFunction_Recorder > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::EngineShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::EngineShafts > *)jarg1;
  arg1 = (chrono::vehicle::EngineShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::shared_ptr< ChFunction_Recorder > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< ChFunction_Recorder > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetEngineLossesMap(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChAutomaticTransmissionSimpleMap(void * jarg1) {
  chrono::vehicle::ChAutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::ChAutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChAutomaticTransmissionSimpleMap_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChAutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::ChAutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChAutomaticTransmissionSimpleMap const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChAutomaticTransmissionSimpleMap_HasTorqueConverter(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChAutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::ChAutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChAutomaticTransmissionSimpleMap const *)arg1)->HasTorqueConverter();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChAutomaticTransmissionSimpleMap_GetTorqueConverterSlippage(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChAutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::ChAutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChAutomaticTransmissionSimpleMap const *)arg1)->GetTorqueConverterSlippage();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChAutomaticTransmissionSimpleMap_GetTorqueConverterInputTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChAutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::ChAutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChAutomaticTransmissionSimpleMap const *)arg1)->GetTorqueConverterInputTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChAutomaticTransmissionSimpleMap_GetTorqueConverterOutputTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChAutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::ChAutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChAutomaticTransmissionSimpleMap const *)arg1)->GetTorqueConverterOutputTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChAutomaticTransmissionSimpleMap_GetTorqueConverterOutputSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChAutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::ChAutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChAutomaticTransmissionSimpleMap const *)arg1)->GetTorqueConverterOutputSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChAutomaticTransmissionSimpleMap_GetOutputDriveshaftTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChAutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::ChAutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChAutomaticTransmissionSimpleMap const *)arg1)->GetOutputDriveshaftTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChAutomaticTransmissionSimpleMap_GetOutputMotorshaftSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChAutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::ChAutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChAutomaticTransmissionSimpleMap const *)arg1)->GetOutputMotorshaftSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChAutomaticTransmissionShafts(void * jarg1) {
  chrono::vehicle::ChAutomaticTransmissionShafts *arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChAutomaticTransmissionShafts_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChAutomaticTransmissionShafts *arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChAutomaticTransmissionShafts const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChAutomaticTransmissionShafts_HasTorqueConverter(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChAutomaticTransmissionShafts *arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChAutomaticTransmissionShafts const *)arg1)->HasTorqueConverter();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChAutomaticTransmissionShafts_GetTorqueConverterSlippage(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChAutomaticTransmissionShafts *arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChAutomaticTransmissionShafts const *)arg1)->GetTorqueConverterSlippage();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChAutomaticTransmissionShafts_GetTorqueConverterInputTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChAutomaticTransmissionShafts *arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChAutomaticTransmissionShafts const *)arg1)->GetTorqueConverterInputTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChAutomaticTransmissionShafts_GetTorqueConverterOutputTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChAutomaticTransmissionShafts *arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChAutomaticTransmissionShafts const *)arg1)->GetTorqueConverterOutputTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChAutomaticTransmissionShafts_GetTorqueConverterOutputSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChAutomaticTransmissionShafts *arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChAutomaticTransmissionShafts const *)arg1)->GetTorqueConverterOutputSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAutomaticTransmissionShafts_SetGearShiftLatency(void * jarg1, double jarg2) {
  chrono::vehicle::ChAutomaticTransmissionShafts *arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetGearShiftLatency(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChAutomaticTransmissionShafts_GetGearShiftLatency(void * jarg1, double jarg2) {
  double jresult ;
  chrono::vehicle::ChAutomaticTransmissionShafts *arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)(arg1)->GetGearShiftLatency(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChAutomaticTransmissionShafts_GetOutputDriveshaftTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChAutomaticTransmissionShafts *arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChAutomaticTransmissionShafts const *)arg1)->GetOutputDriveshaftTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChAutomaticTransmissionShafts_GetOutputMotorshaftSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChAutomaticTransmissionShafts *arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChAutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChAutomaticTransmissionShafts const *)arg1)->GetOutputMotorshaftSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutomaticTransmissionSimpleMap__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::AutomaticTransmissionSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::AutomaticTransmissionSimpleMap *)new chrono::vehicle::AutomaticTransmissionSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::AutomaticTransmissionSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutomaticTransmissionSimpleMap__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::AutomaticTransmissionSimpleMap *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::AutomaticTransmissionSimpleMap *)new chrono::vehicle::AutomaticTransmissionSimpleMap((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::AutomaticTransmissionSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AutomaticTransmissionSimpleMap(void * jarg1) {
  chrono::vehicle::AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::AutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutomaticTransmissionSimpleMap_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutomaticTransmissionSimpleMap_SetShiftPoints(void * jarg1, void * jarg2) {
  chrono::vehicle::AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetShiftPoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutomaticTransmissionShafts__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::AutomaticTransmissionShafts *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::AutomaticTransmissionShafts *)new chrono::vehicle::AutomaticTransmissionShafts((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::AutomaticTransmissionShafts >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutomaticTransmissionShafts__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::AutomaticTransmissionShafts *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::AutomaticTransmissionShafts *)new chrono::vehicle::AutomaticTransmissionShafts((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::AutomaticTransmissionShafts >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AutomaticTransmissionShafts(void * jarg1) {
  chrono::vehicle::AutomaticTransmissionShafts *arg1 = (chrono::vehicle::AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::AutomaticTransmissionShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutomaticTransmissionShafts_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::AutomaticTransmissionShafts *arg1 = (chrono::vehicle::AutomaticTransmissionShafts *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::AutomaticTransmissionShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_AutomaticTransmissionShafts_GetTransmissionBlockInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::AutomaticTransmissionShafts *arg1 = (chrono::vehicle::AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::AutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::AutomaticTransmissionShafts const *)arg1)->GetTransmissionBlockInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_AutomaticTransmissionShafts_GetIngearShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::AutomaticTransmissionShafts *arg1 = (chrono::vehicle::AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::AutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::AutomaticTransmissionShafts const *)arg1)->GetIngearShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_AutomaticTransmissionShafts_GetMotorshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::AutomaticTransmissionShafts *arg1 = (chrono::vehicle::AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::AutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::AutomaticTransmissionShafts const *)arg1)->GetMotorshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_AutomaticTransmissionShafts_GetDriveshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::AutomaticTransmissionShafts *arg1 = (chrono::vehicle::AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::AutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::AutomaticTransmissionShafts const *)arg1)->GetDriveshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_AutomaticTransmissionShafts_GetUpshiftRPM(void * jarg1) {
  double jresult ;
  chrono::vehicle::AutomaticTransmissionShafts *arg1 = (chrono::vehicle::AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::AutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::AutomaticTransmissionShafts const *)arg1)->GetUpshiftRPM();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_AutomaticTransmissionShafts_GetDownshiftRPM(void * jarg1) {
  double jresult ;
  chrono::vehicle::AutomaticTransmissionShafts *arg1 = (chrono::vehicle::AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::AutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::AutomaticTransmissionShafts const *)arg1)->GetDownshiftRPM();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutomaticTransmissionShafts_SetTorqueConverterCapacityFactorMap(void * jarg1, void * jarg2) {
  chrono::vehicle::AutomaticTransmissionShafts *arg1 = (chrono::vehicle::AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< ChFunction_Recorder > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::AutomaticTransmissionShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::shared_ptr< ChFunction_Recorder > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< ChFunction_Recorder > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetTorqueConverterCapacityFactorMap(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutomaticTransmissionShafts_SetTorqeConverterTorqueRatioMap(void * jarg1, void * jarg2) {
  chrono::vehicle::AutomaticTransmissionShafts *arg1 = (chrono::vehicle::AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< ChFunction_Recorder > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::AutomaticTransmissionShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::shared_ptr< ChFunction_Recorder > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< ChFunction_Recorder > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetTorqeConverterTorqueRatioMap(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_AutomaticTransmissionSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::generic::Generic_AutomaticTransmissionSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_AutomaticTransmissionSimple *)new chrono::vehicle::generic::Generic_AutomaticTransmissionSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_AutomaticTransmissionSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic_AutomaticTransmissionSimple_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::generic::Generic_AutomaticTransmissionSimple *arg1 = (chrono::vehicle::generic::Generic_AutomaticTransmissionSimple *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_AutomaticTransmissionSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_AutomaticTransmissionSimple > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_AutomaticTransmissionSimple *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic_AutomaticTransmissionSimple_SetShiftPoints(void * jarg1, void * jarg2) {
  chrono::vehicle::generic::Generic_AutomaticTransmissionSimple *arg1 = (chrono::vehicle::generic::Generic_AutomaticTransmissionSimple *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_AutomaticTransmissionSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_AutomaticTransmissionSimple > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_AutomaticTransmissionSimple *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetShiftPoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Generic_AutomaticTransmissionSimple(void * jarg1) {
  chrono::vehicle::generic::Generic_AutomaticTransmissionSimple *arg1 = (chrono::vehicle::generic::Generic_AutomaticTransmissionSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_AutomaticTransmissionSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_AutomaticTransmissionSimple > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_AutomaticTransmissionSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_EngineSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::generic::Generic_EngineSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_EngineSimple *)new chrono::vehicle::generic::Generic_EngineSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_EngineSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_EngineSimple_GetMaxTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_EngineSimple *arg1 = (chrono::vehicle::generic::Generic_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_EngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_EngineSimple const *)arg1)->GetMaxTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_EngineSimple_GetMaxSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_EngineSimple *arg1 = (chrono::vehicle::generic::Generic_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_EngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_EngineSimple const *)arg1)->GetMaxSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_EngineSimple_GetMaxPower(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_EngineSimple *arg1 = (chrono::vehicle::generic::Generic_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_EngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_EngineSimple const *)arg1)->GetMaxPower();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Generic_EngineSimple(void * jarg1) {
  chrono::vehicle::generic::Generic_EngineSimple *arg1 = (chrono::vehicle::generic::Generic_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_EngineSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_AutomaticTransmissionSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap *)new chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic_AutomaticTransmissionSimpleMap_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic_AutomaticTransmissionSimpleMap_SetShiftPoints(void * jarg1, void * jarg2) {
  chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetShiftPoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Generic_AutomaticTransmissionSimpleMap(void * jarg1) {
  chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_EngineSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::generic::Generic_EngineSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_EngineSimpleMap *)new chrono::vehicle::generic::Generic_EngineSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_EngineSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_EngineSimpleMap_GetMaxEngineSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_EngineSimpleMap *arg1 = (chrono::vehicle::generic::Generic_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_EngineSimpleMap > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxEngineSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic_EngineSimpleMap_SetEngineTorqueMaps(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::generic::Generic_EngineSimpleMap *arg1 = (chrono::vehicle::generic::Generic_EngineSimpleMap *) 0 ;
  ChFunction_Recorder *arg2 = 0 ;
  ChFunction_Recorder *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ChFunction_Recorder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  arg3 = (ChFunction_Recorder *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetEngineTorqueMaps(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Generic_EngineSimpleMap(void * jarg1) {
  chrono::vehicle::generic::Generic_EngineSimpleMap *arg1 = (chrono::vehicle::generic::Generic_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_EngineShafts(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_EngineShafts *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_EngineShafts *)new chrono::vehicle::hmmwv::HMMWV_EngineShafts((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_EngineShafts >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_EngineShafts(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_EngineShafts *arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_EngineShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_EngineShafts > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_EngineShafts_GetMotorBlockInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_EngineShafts *arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_EngineShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_EngineShafts > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_EngineShafts const *)arg1)->GetMotorBlockInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_EngineShafts_GetMotorshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_EngineShafts *arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_EngineShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_EngineShafts > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_EngineShafts const *)arg1)->GetMotorshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_EngineShafts_SetEngineTorqueMap(void * jarg1, void * jarg2) {
  chrono::vehicle::hmmwv::HMMWV_EngineShafts *arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineShafts *) 0 ;
  std::shared_ptr< ChFunction_Recorder > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_EngineShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_EngineShafts > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::shared_ptr< ChFunction_Recorder > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< ChFunction_Recorder > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetEngineTorqueMap(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_EngineShafts_SetEngineLossesMap(void * jarg1, void * jarg2) {
  chrono::vehicle::hmmwv::HMMWV_EngineShafts *arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineShafts *) 0 ;
  std::shared_ptr< ChFunction_Recorder > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_EngineShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_EngineShafts > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::shared_ptr< ChFunction_Recorder > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< ChFunction_Recorder > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetEngineLossesMap(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_EngineSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap *)new chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_EngineSimpleMap_GetMaxEngineSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap *arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxEngineSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_EngineSimpleMap_SetEngineTorqueMaps(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap *arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap *) 0 ;
  ChFunction_Recorder *arg2 = 0 ;
  ChFunction_Recorder *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ChFunction_Recorder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  arg3 = (ChFunction_Recorder *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetEngineTorqueMaps(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_EngineSimpleMap(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap *arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_EngineSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_EngineSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_EngineSimple *)new chrono::vehicle::hmmwv::HMMWV_EngineSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_EngineSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_EngineSimple(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_EngineSimple *arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_EngineSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_EngineSimple_GetMaxTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_EngineSimple *arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_EngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_EngineSimple const *)arg1)->GetMaxTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_EngineSimple_GetMaxPower(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_EngineSimple *arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_EngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_EngineSimple const *)arg1)->GetMaxPower();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_EngineSimple_GetMaxSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_EngineSimple *arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_EngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_EngineSimple const *)arg1)->GetMaxSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_AutomaticTransmissionShafts(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *)new chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_AutomaticTransmissionShafts(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_AutomaticTransmissionShafts_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_AutomaticTransmissionShafts_GetTransmissionBlockInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts const *)arg1)->GetTransmissionBlockInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_AutomaticTransmissionShafts_GetIngearShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts const *)arg1)->GetIngearShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_AutomaticTransmissionShafts_GetMotorshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts const *)arg1)->GetMotorshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_AutomaticTransmissionShafts_GetDriveshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts const *)arg1)->GetDriveshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_AutomaticTransmissionShafts_GetUpshiftRPM(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts const *)arg1)->GetUpshiftRPM();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_AutomaticTransmissionShafts_GetDownshiftRPM(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts const *)arg1)->GetDownshiftRPM();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_AutomaticTransmissionShafts_SetTorqueConverterCapacityFactorMap(void * jarg1, void * jarg2) {
  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< ChFunction_Recorder > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::shared_ptr< ChFunction_Recorder > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< ChFunction_Recorder > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetTorqueConverterCapacityFactorMap(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_AutomaticTransmissionShafts_SetTorqeConverterTorqueRatioMap(void * jarg1, void * jarg2) {
  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< ChFunction_Recorder > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::shared_ptr< ChFunction_Recorder > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< ChFunction_Recorder > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetTorqeConverterTorqueRatioMap(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_AutomaticTransmissionSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap *)new chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_AutomaticTransmissionSimpleMap(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_AutomaticTransmissionSimpleMap_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_AutomaticTransmissionSimpleMap_SetShiftPoints(void * jarg1, void * jarg2) {
  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetShiftPoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan_EngineSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::sedan::Sedan_EngineSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan_EngineSimpleMap *)new chrono::vehicle::sedan::Sedan_EngineSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan_EngineSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_EngineSimpleMap_GetMaxEngineSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_EngineSimpleMap *arg1 = (chrono::vehicle::sedan::Sedan_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_EngineSimpleMap > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxEngineSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_EngineSimpleMap_SetEngineTorqueMaps(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::sedan::Sedan_EngineSimpleMap *arg1 = (chrono::vehicle::sedan::Sedan_EngineSimpleMap *) 0 ;
  ChFunction_Recorder *arg2 = 0 ;
  ChFunction_Recorder *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ChFunction_Recorder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  arg3 = (ChFunction_Recorder *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetEngineTorqueMaps(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sedan_EngineSimpleMap(void * jarg1) {
  chrono::vehicle::sedan::Sedan_EngineSimpleMap *arg1 = (chrono::vehicle::sedan::Sedan_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan_AutomaticTransmissionSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap *)new chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_AutomaticTransmissionSimpleMap_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_AutomaticTransmissionSimpleMap_SetShiftPoints(void * jarg1, void * jarg2) {
  chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetShiftPoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sedan_AutomaticTransmissionSimpleMap(void * jarg1) {
  chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_EngineSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::citybus::CityBus_EngineSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_EngineSimpleMap *)new chrono::vehicle::citybus::CityBus_EngineSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_EngineSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_EngineSimpleMap_GetMaxEngineSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_EngineSimpleMap *arg1 = (chrono::vehicle::citybus::CityBus_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_EngineSimpleMap > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxEngineSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_EngineSimpleMap_SetEngineTorqueMaps(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::citybus::CityBus_EngineSimpleMap *arg1 = (chrono::vehicle::citybus::CityBus_EngineSimpleMap *) 0 ;
  ChFunction_Recorder *arg2 = 0 ;
  ChFunction_Recorder *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ChFunction_Recorder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  arg3 = (ChFunction_Recorder *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetEngineTorqueMaps(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CityBus_EngineSimpleMap(void * jarg1) {
  chrono::vehicle::citybus::CityBus_EngineSimpleMap *arg1 = (chrono::vehicle::citybus::CityBus_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_AutomaticTransmissionSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap *)new chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_AutomaticTransmissionSimpleMap_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_AutomaticTransmissionSimpleMap_SetShiftPoints(void * jarg1, void * jarg2) {
  chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetShiftPoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CityBus_AutomaticTransmissionSimpleMap(void * jarg1) {
  chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_EngineSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_5t_EngineSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_EngineSimple *)new chrono::vehicle::man::MAN_5t_EngineSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_EngineSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_5t_EngineSimple(void * jarg1) {
  chrono::vehicle::man::MAN_5t_EngineSimple *arg1 = (chrono::vehicle::man::MAN_5t_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_EngineSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_EngineSimple_GetMaxTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_EngineSimple *arg1 = (chrono::vehicle::man::MAN_5t_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_EngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_EngineSimple const *)arg1)->GetMaxTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_EngineSimple_GetMaxPower(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_EngineSimple *arg1 = (chrono::vehicle::man::MAN_5t_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_EngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_EngineSimple const *)arg1)->GetMaxPower();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_EngineSimple_GetMaxSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_EngineSimple *arg1 = (chrono::vehicle::man::MAN_5t_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_EngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_EngineSimple const *)arg1)->GetMaxSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_AutomaticTransmissionSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple *)new chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_AutomaticTransmissionSimple_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple *arg1 = (chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_AutomaticTransmissionSimple_SetShiftPoints(void * jarg1, void * jarg2) {
  chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple *arg1 = (chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetShiftPoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_5t_AutomaticTransmissionSimple(void * jarg1) {
  chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple *arg1 = (chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_EngineSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_5t_EngineSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_EngineSimpleMap *)new chrono::vehicle::man::MAN_5t_EngineSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_EngineSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_EngineSimpleMap_GetMaxEngineSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_EngineSimpleMap *arg1 = (chrono::vehicle::man::MAN_5t_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_EngineSimpleMap > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxEngineSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_EngineSimpleMap_SetEngineTorqueMaps(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::man::MAN_5t_EngineSimpleMap *arg1 = (chrono::vehicle::man::MAN_5t_EngineSimpleMap *) 0 ;
  ChFunction_Recorder *arg2 = 0 ;
  ChFunction_Recorder *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ChFunction_Recorder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  arg3 = (ChFunction_Recorder *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetEngineTorqueMaps(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_5t_EngineSimpleMap(void * jarg1) {
  chrono::vehicle::man::MAN_5t_EngineSimpleMap *arg1 = (chrono::vehicle::man::MAN_5t_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_AutomaticTransmissionSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap *)new chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_AutomaticTransmissionSimpleMap_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_AutomaticTransmissionSimpleMap_SetShiftPoints(void * jarg1, void * jarg2) {
  chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetShiftPoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_5t_AutomaticTransmissionSimpleMap(void * jarg1) {
  chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_7t_EngineSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_7t_EngineSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_7t_EngineSimple *)new chrono::vehicle::man::MAN_7t_EngineSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_7t_EngineSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_7t_EngineSimple(void * jarg1) {
  chrono::vehicle::man::MAN_7t_EngineSimple *arg1 = (chrono::vehicle::man::MAN_7t_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_EngineSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_7t_EngineSimple_GetMaxTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_7t_EngineSimple *arg1 = (chrono::vehicle::man::MAN_7t_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_EngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_7t_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_7t_EngineSimple const *)arg1)->GetMaxTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_7t_EngineSimple_GetMaxPower(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_7t_EngineSimple *arg1 = (chrono::vehicle::man::MAN_7t_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_EngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_7t_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_7t_EngineSimple const *)arg1)->GetMaxPower();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_7t_EngineSimple_GetMaxSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_7t_EngineSimple *arg1 = (chrono::vehicle::man::MAN_7t_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_EngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_7t_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_7t_EngineSimple const *)arg1)->GetMaxSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_7t_AutomaticTransmissionSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple *)new chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_AutomaticTransmissionSimple_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple *arg1 = (chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_AutomaticTransmissionSimple_SetShiftPoints(void * jarg1, void * jarg2) {
  chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple *arg1 = (chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetShiftPoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_7t_AutomaticTransmissionSimple(void * jarg1) {
  chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple *arg1 = (chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_7t_EngineSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_7t_EngineSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_7t_EngineSimpleMap *)new chrono::vehicle::man::MAN_7t_EngineSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_7t_EngineSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_7t_EngineSimpleMap_GetMaxEngineSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_7t_EngineSimpleMap *arg1 = (chrono::vehicle::man::MAN_7t_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_EngineSimpleMap > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxEngineSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_EngineSimpleMap_SetEngineTorqueMaps(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::man::MAN_7t_EngineSimpleMap *arg1 = (chrono::vehicle::man::MAN_7t_EngineSimpleMap *) 0 ;
  ChFunction_Recorder *arg2 = 0 ;
  ChFunction_Recorder *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ChFunction_Recorder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  arg3 = (ChFunction_Recorder *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetEngineTorqueMaps(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_7t_EngineSimpleMap(void * jarg1) {
  chrono::vehicle::man::MAN_7t_EngineSimpleMap *arg1 = (chrono::vehicle::man::MAN_7t_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_7t_AutomaticTransmissionSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap *)new chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_AutomaticTransmissionSimpleMap_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_AutomaticTransmissionSimpleMap_SetShiftPoints(void * jarg1, void * jarg2) {
  chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetShiftPoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_7t_AutomaticTransmissionSimpleMap(void * jarg1) {
  chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCCar_EngineSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::rccar::RCCar_EngineSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::rccar::RCCar_EngineSimpleMap *)new chrono::vehicle::rccar::RCCar_EngineSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::rccar::RCCar_EngineSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_EngineSimpleMap_GetMaxEngineSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_EngineSimpleMap *arg1 = (chrono::vehicle::rccar::RCCar_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_EngineSimpleMap > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxEngineSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_EngineSimpleMap_SetEngineTorqueMaps(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::rccar::RCCar_EngineSimpleMap *arg1 = (chrono::vehicle::rccar::RCCar_EngineSimpleMap *) 0 ;
  ChFunction_Recorder *arg2 = 0 ;
  ChFunction_Recorder *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ChFunction_Recorder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  arg3 = (ChFunction_Recorder *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetEngineTorqueMaps(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RCCar_EngineSimpleMap(void * jarg1) {
  chrono::vehicle::rccar::RCCar_EngineSimpleMap *arg1 = (chrono::vehicle::rccar::RCCar_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCCar_AutomaticTransmissionSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap *)new chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_AutomaticTransmissionSimpleMap_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_AutomaticTransmissionSimpleMap_SetShiftPoints(void * jarg1, void * jarg2) {
  chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetShiftPoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RCCar_AutomaticTransmissionSimpleMap(void * jarg1) {
  chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_EngineSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS_EngineSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_EngineSimpleMap *)new chrono::vehicle::uaz::UAZBUS_EngineSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_EngineSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_EngineSimpleMap_GetMaxEngineSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_EngineSimpleMap *arg1 = (chrono::vehicle::uaz::UAZBUS_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_EngineSimpleMap > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxEngineSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_EngineSimpleMap_SetEngineTorqueMaps(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::uaz::UAZBUS_EngineSimpleMap *arg1 = (chrono::vehicle::uaz::UAZBUS_EngineSimpleMap *) 0 ;
  ChFunction_Recorder *arg2 = 0 ;
  ChFunction_Recorder *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ChFunction_Recorder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  arg3 = (ChFunction_Recorder *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetEngineTorqueMaps(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UAZBUS_EngineSimpleMap(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_EngineSimpleMap *arg1 = (chrono::vehicle::uaz::UAZBUS_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_AutomaticTransmissionSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap *)new chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_AutomaticTransmissionSimpleMap_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_AutomaticTransmissionSimpleMap_SetShiftPoints(void * jarg1, void * jarg2) {
  chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetShiftPoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UAZBUS_AutomaticTransmissionSimpleMap(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_EngineSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::gator::Gator_EngineSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_EngineSimpleMap *)new chrono::vehicle::gator::Gator_EngineSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_EngineSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_EngineSimpleMap_GetMaxEngineSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_EngineSimpleMap *arg1 = (chrono::vehicle::gator::Gator_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_EngineSimpleMap > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxEngineSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_EngineSimpleMap_SetEngineTorqueMaps(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::gator::Gator_EngineSimpleMap *arg1 = (chrono::vehicle::gator::Gator_EngineSimpleMap *) 0 ;
  ChFunction_Recorder *arg2 = 0 ;
  ChFunction_Recorder *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ChFunction_Recorder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  arg3 = (ChFunction_Recorder *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetEngineTorqueMaps(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Gator_EngineSimpleMap(void * jarg1) {
  chrono::vehicle::gator::Gator_EngineSimpleMap *arg1 = (chrono::vehicle::gator::Gator_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_EngineSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::gator::Gator_EngineSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_EngineSimple *)new chrono::vehicle::gator::Gator_EngineSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_EngineSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Gator_EngineSimple(void * jarg1) {
  chrono::vehicle::gator::Gator_EngineSimple *arg1 = (chrono::vehicle::gator::Gator_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_EngineSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_AutomaticTransmissionSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap *)new chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_AutomaticTransmissionSimpleMap_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_AutomaticTransmissionSimpleMap_SetShiftPoints(void * jarg1, void * jarg2) {
  chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetShiftPoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Gator_AutomaticTransmissionSimpleMap(void * jarg1) {
  chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_AutomaticTransmissionSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::gator::Gator_AutomaticTransmissionSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_AutomaticTransmissionSimple *)new chrono::vehicle::gator::Gator_AutomaticTransmissionSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_AutomaticTransmissionSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_AutomaticTransmissionSimple_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::gator::Gator_AutomaticTransmissionSimple *arg1 = (chrono::vehicle::gator::Gator_AutomaticTransmissionSimple *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_AutomaticTransmissionSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_AutomaticTransmissionSimple > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_AutomaticTransmissionSimple *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_AutomaticTransmissionSimple_SetShiftPoints(void * jarg1, void * jarg2) {
  chrono::vehicle::gator::Gator_AutomaticTransmissionSimple *arg1 = (chrono::vehicle::gator::Gator_AutomaticTransmissionSimple *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_AutomaticTransmissionSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_AutomaticTransmissionSimple > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_AutomaticTransmissionSimple *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetShiftPoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Gator_AutomaticTransmissionSimple(void * jarg1) {
  chrono::vehicle::gator::Gator_AutomaticTransmissionSimple *arg1 = (chrono::vehicle::gator::Gator_AutomaticTransmissionSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_AutomaticTransmissionSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_AutomaticTransmissionSimple > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_AutomaticTransmissionSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_EngineSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::feda::FEDA_EngineSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_EngineSimpleMap *)new chrono::vehicle::feda::FEDA_EngineSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_EngineSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_EngineSimpleMap_GetMaxEngineSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_EngineSimpleMap *arg1 = (chrono::vehicle::feda::FEDA_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_EngineSimpleMap > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxEngineSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_EngineSimpleMap_SetEngineTorqueMaps(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::feda::FEDA_EngineSimpleMap *arg1 = (chrono::vehicle::feda::FEDA_EngineSimpleMap *) 0 ;
  ChFunction_Recorder *arg2 = 0 ;
  ChFunction_Recorder *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ChFunction_Recorder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  arg3 = (ChFunction_Recorder *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetEngineTorqueMaps(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FEDA_EngineSimpleMap(void * jarg1) {
  chrono::vehicle::feda::FEDA_EngineSimpleMap *arg1 = (chrono::vehicle::feda::FEDA_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_AutomaticTransmissionSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap *)new chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_AutomaticTransmissionSimpleMap_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_AutomaticTransmissionSimpleMap_SetShiftPoints(void * jarg1, void * jarg2) {
  chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetShiftPoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FEDA_AutomaticTransmissionSimpleMap(void * jarg1) {
  chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_AutomaticTransmissionShafts(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::m113::M113_AutomaticTransmissionShafts *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *)new chrono::vehicle::m113::M113_AutomaticTransmissionShafts((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_AutomaticTransmissionShafts >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_AutomaticTransmissionShafts(void * jarg1) {
  chrono::vehicle::m113::M113_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_AutomaticTransmissionShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_AutomaticTransmissionShafts_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::m113::M113_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_AutomaticTransmissionShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_AutomaticTransmissionShafts_GetTransmissionBlockInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_AutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_AutomaticTransmissionShafts const *)arg1)->GetTransmissionBlockInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_AutomaticTransmissionShafts_GetIngearShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_AutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_AutomaticTransmissionShafts const *)arg1)->GetIngearShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_AutomaticTransmissionShafts_GetMotorshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_AutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_AutomaticTransmissionShafts const *)arg1)->GetMotorshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_AutomaticTransmissionShafts_GetDriveshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_AutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_AutomaticTransmissionShafts const *)arg1)->GetDriveshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_AutomaticTransmissionShafts_GetUpshiftRPM(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_AutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_AutomaticTransmissionShafts const *)arg1)->GetUpshiftRPM();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_AutomaticTransmissionShafts_GetDownshiftRPM(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_AutomaticTransmissionShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_AutomaticTransmissionShafts const *)arg1)->GetDownshiftRPM();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_AutomaticTransmissionShafts_SetTorqueConverterCapacityFactorMap(void * jarg1, void * jarg2) {
  chrono::vehicle::m113::M113_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< ChFunction_Recorder > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_AutomaticTransmissionShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::shared_ptr< ChFunction_Recorder > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< ChFunction_Recorder > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetTorqueConverterCapacityFactorMap(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_AutomaticTransmissionShafts_SetTorqeConverterTorqueRatioMap(void * jarg1, void * jarg2) {
  chrono::vehicle::m113::M113_AutomaticTransmissionShafts *arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *) 0 ;
  std::shared_ptr< ChFunction_Recorder > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_AutomaticTransmissionShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_AutomaticTransmissionShafts > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::shared_ptr< ChFunction_Recorder > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< ChFunction_Recorder > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetTorqeConverterTorqueRatioMap(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_AutomaticTransmissionSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::m113::M113_AutomaticTransmissionSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::m113::M113_AutomaticTransmissionSimple *)new chrono::vehicle::m113::M113_AutomaticTransmissionSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_AutomaticTransmissionSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_AutomaticTransmissionSimple(void * jarg1) {
  chrono::vehicle::m113::M113_AutomaticTransmissionSimple *arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_AutomaticTransmissionSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_AutomaticTransmissionSimple > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_AutomaticTransmissionSimple_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::m113::M113_AutomaticTransmissionSimple *arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionSimple *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_AutomaticTransmissionSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_AutomaticTransmissionSimple > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionSimple *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_AutomaticTransmissionSimple_SetShiftPoints(void * jarg1, void * jarg2) {
  chrono::vehicle::m113::M113_AutomaticTransmissionSimple *arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionSimple *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_AutomaticTransmissionSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_AutomaticTransmissionSimple > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionSimple *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetShiftPoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_AutomaticTransmissionSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap *)new chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_AutomaticTransmissionSimpleMap(void * jarg1) {
  chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_AutomaticTransmissionSimpleMap_SetGearRatios(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetGearRatios(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_AutomaticTransmissionSimpleMap_SetShiftPoints(void * jarg1, void * jarg2) {
  chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap *arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetShiftPoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_EngineShafts(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::m113::M113_EngineShafts *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::m113::M113_EngineShafts *)new chrono::vehicle::m113::M113_EngineShafts((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_EngineShafts >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_EngineShafts(void * jarg1) {
  chrono::vehicle::m113::M113_EngineShafts *arg1 = (chrono::vehicle::m113::M113_EngineShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_EngineShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_EngineShafts > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_EngineShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_EngineShafts_GetMotorBlockInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_EngineShafts *arg1 = (chrono::vehicle::m113::M113_EngineShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_EngineShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_EngineShafts > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_EngineShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_EngineShafts const *)arg1)->GetMotorBlockInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_EngineShafts_GetMotorshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_EngineShafts *arg1 = (chrono::vehicle::m113::M113_EngineShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_EngineShafts const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_EngineShafts > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_EngineShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_EngineShafts const *)arg1)->GetMotorshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_EngineShafts_SetEngineTorqueMap(void * jarg1, void * jarg2) {
  chrono::vehicle::m113::M113_EngineShafts *arg1 = (chrono::vehicle::m113::M113_EngineShafts *) 0 ;
  std::shared_ptr< ChFunction_Recorder > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_EngineShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_EngineShafts > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_EngineShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::shared_ptr< ChFunction_Recorder > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< ChFunction_Recorder > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetEngineTorqueMap(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_EngineShafts_SetEngineLossesMap(void * jarg1, void * jarg2) {
  chrono::vehicle::m113::M113_EngineShafts *arg1 = (chrono::vehicle::m113::M113_EngineShafts *) 0 ;
  std::shared_ptr< ChFunction_Recorder > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_EngineShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_EngineShafts > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_EngineShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::shared_ptr< ChFunction_Recorder > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< ChFunction_Recorder > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetEngineLossesMap(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_EngineSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::m113::M113_EngineSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::m113::M113_EngineSimple *)new chrono::vehicle::m113::M113_EngineSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_EngineSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_EngineSimple(void * jarg1) {
  chrono::vehicle::m113::M113_EngineSimple *arg1 = (chrono::vehicle::m113::M113_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_EngineSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_EngineSimple_GetMaxTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_EngineSimple *arg1 = (chrono::vehicle::m113::M113_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_EngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_EngineSimple const *)arg1)->GetMaxTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_EngineSimple_GetMaxPower(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_EngineSimple *arg1 = (chrono::vehicle::m113::M113_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_EngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_EngineSimple const *)arg1)->GetMaxPower();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_EngineSimple_GetMaxSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_EngineSimple *arg1 = (chrono::vehicle::m113::M113_EngineSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_EngineSimple const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_EngineSimple > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_EngineSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_EngineSimple const *)arg1)->GetMaxSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_EngineSimpleMap(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::m113::M113_EngineSimpleMap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::m113::M113_EngineSimpleMap *)new chrono::vehicle::m113::M113_EngineSimpleMap((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_EngineSimpleMap >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_EngineSimpleMap_GetMaxEngineSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_EngineSimpleMap *arg1 = (chrono::vehicle::m113::M113_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_EngineSimpleMap > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxEngineSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_EngineSimpleMap_SetEngineTorqueMaps(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::m113::M113_EngineSimpleMap *arg1 = (chrono::vehicle::m113::M113_EngineSimpleMap *) 0 ;
  ChFunction_Recorder *arg2 = 0 ;
  ChFunction_Recorder *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ChFunction_Recorder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  arg3 = (ChFunction_Recorder *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetEngineTorqueMaps(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_EngineSimpleMap(void * jarg1) {
  chrono::vehicle::m113::M113_EngineSimpleMap *arg1 = (chrono::vehicle::m113::M113_EngineSimpleMap *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_EngineSimpleMap > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_EngineSimpleMap > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_EngineSimpleMap *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChChassis(void * jarg1) {
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChChassis_GetLocalDriverCoordsys(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis const > *smartarg1 = 0 ;
  chrono::ChCoordsys< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChChassis const *)arg1)->GetLocalDriverCoordsys();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChCoordsys< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChChassis_GetLocalPosRearConnector(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChChassis const *)arg1)->GetLocalPosRearConnector();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChChassis_GetBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChChassis const *)arg1)->GetBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBodyAuxRef >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChChassis_GetSystem(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis const > *smartarg1 = 0 ;
  chrono::ChSystem *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChSystem *)((chrono::vehicle::ChChassis const *)arg1)->GetSystem();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::ChSystem >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChChassis_GetPos(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::ChChassis const *)arg1)->GetPos();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChChassis_GetRot(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis const > *smartarg1 = 0 ;
  chrono::ChQuaternion< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChChassis const *)arg1)->GetRot();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChQuaternion< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChChassis_GetDriverPos(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChChassis const *)arg1)->GetDriverPos();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChChassis_GetSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChChassis const *)arg1)->GetSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChChassis_GetCOMSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChChassis const *)arg1)->GetCOMSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChChassis_GetPointLocation(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = ((chrono::vehicle::ChChassis const *)arg1)->GetPointLocation((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChChassis_GetPointVelocity(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = ((chrono::vehicle::ChChassis const *)arg1)->GetPointVelocity((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChChassis_GetPointAcceleration(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = ((chrono::vehicle::ChChassis const *)arg1)->GetPointAcceleration((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassis_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, double jarg4, int jarg5) {
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  chrono::ChSystem *arg2 = (chrono::ChSystem *) 0 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  double arg4 ;
  int arg5 ;
  std::shared_ptr< chrono::vehicle::ChChassis > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg2 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  
  smartarg2 = (std::shared_ptr<  chrono::ChSystem > *)jarg2;
  arg2 = (chrono::ChSystem *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChCoordsys< > const &)*arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassis_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  chrono::ChSystem *arg2 = (chrono::ChSystem *) 0 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::ChChassis > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg2 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  
  smartarg2 = (std::shared_ptr<  chrono::ChSystem > *)jarg2;
  arg2 = (chrono::ChSystem *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChCoordsys< > const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassis_SetCollide(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChChassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetCollide(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassis_SetFixed(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChChassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetFixed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChChassis_IsFixed(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChChassis const *)arg1)->IsFixed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChChassis_HasBushings(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChChassis const *)arg1)->HasBushings();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassis_AddMarker(void * jarg1, const char * jarg2, void * jarg3) {
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  std::string *arg2 = 0 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->AddMarker((std::string const &)*arg2,(chrono::ChCoordsys< > const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChChassis_GetMarkers(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< chrono::ChMarker > > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::vector< std::shared_ptr< chrono::ChMarker > > *) &((chrono::vehicle::ChChassis const *)arg1)->GetMarkers();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassis_SetAerodynamicDrag(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::ChChassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->SetAerodynamicDrag(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassis_Synchronize(void * jarg1, double jarg2) {
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChChassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Synchronize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassis_AddJoint(void * jarg1, void * jarg2) {
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleJoint > > arg2 ;
  std::shared_ptr< chrono::vehicle::ChChassis > *smartarg1 = 0 ;
  std::shared_ptr< ChVehicleJoint > *argp2 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (std::shared_ptr< ChVehicleJoint > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< ChVehicleJoint >", 0);
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->AddJoint(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassis_RemoveJoint(void * jarg1) {
  SwigValueWrapper< std::shared_ptr< ChVehicleJoint > > arg1 ;
  std::shared_ptr< ChVehicleJoint > *argp1 ;
  
  argp1 = (std::shared_ptr< ChVehicleJoint > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< ChVehicleJoint >", 0);
    return ;
  }
  arg1 = *argp1; 
  {
    try {
      chrono::vehicle::ChChassis::RemoveJoint(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassis_AddExternalForce(void * jarg1, void * jarg2) {
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  SwigValueWrapper< std::shared_ptr< chrono::vehicle::ChChassis::ExternalForce > > arg2 ;
  std::shared_ptr< chrono::vehicle::ChChassis > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis::ExternalForce > *argp2 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (std::shared_ptr< chrono::vehicle::ChChassis::ExternalForce > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< chrono::vehicle::ChChassis::ExternalForce >", 0);
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->AddExternalForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassis_InitializeInertiaProperties(void * jarg1) {
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->InitializeInertiaProperties();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassis_UpdateInertiaProperties(void * jarg1) {
  chrono::vehicle::ChChassis *arg1 = (chrono::vehicle::ChChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->UpdateInertiaProperties();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ExternalForce(void * jarg1) {
  chrono::vehicle::ChChassis::ExternalForce *arg1 = (chrono::vehicle::ChChassis::ExternalForce *) 0 ;
  
  arg1 = (chrono::vehicle::ChChassis::ExternalForce *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExternalForce_Update(void * jarg1, double jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChChassis::ExternalForce *arg1 = (chrono::vehicle::ChChassis::ExternalForce *) 0 ;
  double arg2 ;
  chrono::vehicle::ChChassis *arg3 = 0 ;
  chrono::ChVector< > *arg4 = 0 ;
  chrono::ChVector< > *arg5 = 0 ;
  
  arg1 = (chrono::vehicle::ChChassis::ExternalForce *)jarg1; 
  arg2 = (double)jarg2; 
  
  arg3 = (chrono::vehicle::ChChassis *)(((std::shared_ptr< const chrono::vehicle::ChChassis > *)jarg3) ? ((std::shared_ptr< const chrono::vehicle::ChChassis > *)jarg3)->get() : 0);
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChChassis const & reference is null", 0);
    return ;
  } 
  arg4 = (chrono::ChVector< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > & is null", 0);
    return ;
  } 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Update(arg2,(chrono::vehicle::ChChassis const &)*arg3,*arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExternalForce() {
  void * jresult ;
  chrono::vehicle::ChChassis::ExternalForce *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::ChChassis::ExternalForce *)new chrono::vehicle::ChChassis::ExternalForce();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChChassisRear(void * jarg1) {
  chrono::vehicle::ChChassisRear *arg1 = (chrono::vehicle::ChChassisRear *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassisRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassisRear > *)jarg1;
  arg1 = (chrono::vehicle::ChChassisRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChChassisRear_GetLocalPosFrontConnector(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChChassisRear *arg1 = (chrono::vehicle::ChChassisRear *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassisRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChChassisRear > *)jarg1;
  arg1 = (chrono::vehicle::ChChassisRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::ChChassisRear const *)arg1)->GetLocalPosFrontConnector();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassisRear_Initialize__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  chrono::vehicle::ChChassisRear *arg1 = (chrono::vehicle::ChChassisRear *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  int arg3 ;
  std::shared_ptr< chrono::vehicle::ChChassisRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassisRear > *)jarg1;
  arg1 = (chrono::vehicle::ChChassisRear *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->Initialize(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassisRear_Initialize__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::ChChassisRear *arg1 = (chrono::vehicle::ChChassisRear *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChChassisRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassisRear > *)jarg1;
  arg1 = (chrono::vehicle::ChChassisRear *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  {
    try {
      (arg1)->Initialize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChChassisConnector(void * jarg1) {
  chrono::vehicle::ChChassisConnector *arg1 = (chrono::vehicle::ChChassisConnector *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassisConnector > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassisConnector > *)jarg1;
  arg1 = (chrono::vehicle::ChChassisConnector *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassisConnector_Initialize(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::ChChassisConnector *arg1 = (chrono::vehicle::ChChassisConnector *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChChassisRear > arg3 ;
  std::shared_ptr< chrono::vehicle::ChChassisConnector > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassisConnector > *)jarg1;
  arg1 = (chrono::vehicle::ChChassisConnector *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChChassisRear > *)jarg3; 
  {
    try {
      (arg1)->Initialize(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassisConnector_Synchronize(void * jarg1, double jarg2, void * jarg3) {
  chrono::vehicle::ChChassisConnector *arg1 = (chrono::vehicle::ChChassisConnector *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassisConnector > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassisConnector > *)jarg1;
  arg1 = (chrono::vehicle::ChChassisConnector *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChRigidChassis(void * jarg1) {
  chrono::vehicle::ChRigidChassis *arg1 = (chrono::vehicle::ChRigidChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChRigidChassis_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChRigidChassis *arg1 = (chrono::vehicle::ChRigidChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassis const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChRigidChassis const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChRigidChassis_HasCollision(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChRigidChassis *arg1 = (chrono::vehicle::ChRigidChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassis const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChRigidChassis const *)arg1)->HasCollision();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChRigidChassis_HasPrimitives(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChRigidChassis *arg1 = (chrono::vehicle::ChRigidChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassis const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChRigidChassis const *)arg1)->HasPrimitives();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChRigidChassis_HasMesh(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChRigidChassis *arg1 = (chrono::vehicle::ChRigidChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassis const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChRigidChassis const *)arg1)->HasMesh();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChRigidChassis_GetMeshFilename(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChRigidChassis *arg1 = (chrono::vehicle::ChRigidChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassis const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::string *) &((chrono::vehicle::ChRigidChassis const *)arg1)->GetMeshFilename();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidChassis_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, double jarg4, int jarg5) {
  chrono::vehicle::ChRigidChassis *arg1 = (chrono::vehicle::ChRigidChassis *) 0 ;
  chrono::ChSystem *arg2 = (chrono::ChSystem *) 0 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  double arg4 ;
  int arg5 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassis > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg2 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassis *)(smartarg1 ? smartarg1->get() : 0); 
  
  smartarg2 = (std::shared_ptr<  chrono::ChSystem > *)jarg2;
  arg2 = (chrono::ChSystem *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChCoordsys< > const &)*arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidChassis_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  chrono::vehicle::ChRigidChassis *arg1 = (chrono::vehicle::ChRigidChassis *) 0 ;
  chrono::ChSystem *arg2 = (chrono::ChSystem *) 0 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassis > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg2 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassis *)(smartarg1 ? smartarg1->get() : 0); 
  
  smartarg2 = (std::shared_ptr<  chrono::ChSystem > *)jarg2;
  arg2 = (chrono::ChSystem *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChCoordsys< > const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidChassis_SetCollide(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChRigidChassis *arg1 = (chrono::vehicle::ChRigidChassis *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassis *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetCollide(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidChassis_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChRigidChassis *arg1 = (chrono::vehicle::ChRigidChassis *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassis *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidChassis_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChRigidChassis *arg1 = (chrono::vehicle::ChRigidChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidChassis > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChRigidChassisRear(void * jarg1) {
  chrono::vehicle::ChRigidChassisRear *arg1 = (chrono::vehicle::ChRigidChassisRear *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassisRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidChassisRear > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassisRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChRigidChassisRear_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChRigidChassisRear *arg1 = (chrono::vehicle::ChRigidChassisRear *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassisRear const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidChassisRear > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassisRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChRigidChassisRear const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChRigidChassisRear_HasCollision(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChRigidChassisRear *arg1 = (chrono::vehicle::ChRigidChassisRear *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassisRear const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidChassisRear > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassisRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChRigidChassisRear const *)arg1)->HasCollision();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChRigidChassisRear_HasPrimitives(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChRigidChassisRear *arg1 = (chrono::vehicle::ChRigidChassisRear *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassisRear const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidChassisRear > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassisRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChRigidChassisRear const *)arg1)->HasPrimitives();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChRigidChassisRear_HasMesh(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChRigidChassisRear *arg1 = (chrono::vehicle::ChRigidChassisRear *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassisRear const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidChassisRear > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassisRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChRigidChassisRear const *)arg1)->HasMesh();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChRigidChassisRear_GetMeshFilename(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChRigidChassisRear *arg1 = (chrono::vehicle::ChRigidChassisRear *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassisRear const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidChassisRear > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassisRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::string *) &((chrono::vehicle::ChRigidChassisRear const *)arg1)->GetMeshFilename();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidChassisRear_SetCollide(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChRigidChassisRear *arg1 = (chrono::vehicle::ChRigidChassisRear *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassisRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidChassisRear > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassisRear *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetCollide(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidChassisRear_Initialize__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  chrono::vehicle::ChRigidChassisRear *arg1 = (chrono::vehicle::ChRigidChassisRear *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  int arg3 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassisRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidChassisRear > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassisRear *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->Initialize(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidChassisRear_Initialize__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::ChRigidChassisRear *arg1 = (chrono::vehicle::ChRigidChassisRear *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassisRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidChassisRear > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassisRear *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  {
    try {
      (arg1)->Initialize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidChassisRear_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChRigidChassisRear *arg1 = (chrono::vehicle::ChRigidChassisRear *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassisRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidChassisRear > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassisRear *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidChassisRear_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChRigidChassisRear *arg1 = (chrono::vehicle::ChRigidChassisRear *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassisRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidChassisRear > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidChassisRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChChassisConnectorArticulated(void * jarg1) {
  chrono::vehicle::ChChassisConnectorArticulated *arg1 = (chrono::vehicle::ChChassisConnectorArticulated *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassisConnectorArticulated > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassisConnectorArticulated > *)jarg1;
  arg1 = (chrono::vehicle::ChChassisConnectorArticulated *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChChassisConnectorArticulated_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChChassisConnectorArticulated *arg1 = (chrono::vehicle::ChChassisConnectorArticulated *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassisConnectorArticulated const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChChassisConnectorArticulated > *)jarg1;
  arg1 = (chrono::vehicle::ChChassisConnectorArticulated *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChChassisConnectorArticulated const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassisConnectorArticulated_Initialize(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::ChChassisConnectorArticulated *arg1 = (chrono::vehicle::ChChassisConnectorArticulated *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChChassisRear > arg3 ;
  std::shared_ptr< chrono::vehicle::ChChassisConnectorArticulated > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassisConnectorArticulated > *)jarg1;
  arg1 = (chrono::vehicle::ChChassisConnectorArticulated *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChChassisRear > *)jarg3; 
  {
    try {
      (arg1)->Initialize(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassisConnectorArticulated_Synchronize(void * jarg1, double jarg2, void * jarg3) {
  chrono::vehicle::ChChassisConnectorArticulated *arg1 = (chrono::vehicle::ChChassisConnectorArticulated *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassisConnectorArticulated > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassisConnectorArticulated > *)jarg1;
  arg1 = (chrono::vehicle::ChChassisConnectorArticulated *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChChassisConnectorTorsion(void * jarg1) {
  chrono::vehicle::ChChassisConnectorTorsion *arg1 = (chrono::vehicle::ChChassisConnectorTorsion *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassisConnectorTorsion > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassisConnectorTorsion > *)jarg1;
  arg1 = (chrono::vehicle::ChChassisConnectorTorsion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChChassisConnectorTorsion_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChChassisConnectorTorsion *arg1 = (chrono::vehicle::ChChassisConnectorTorsion *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassisConnectorTorsion const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChChassisConnectorTorsion > *)jarg1;
  arg1 = (chrono::vehicle::ChChassisConnectorTorsion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChChassisConnectorTorsion const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassisConnectorTorsion_Initialize(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::ChChassisConnectorTorsion *arg1 = (chrono::vehicle::ChChassisConnectorTorsion *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChChassisRear > arg3 ;
  std::shared_ptr< chrono::vehicle::ChChassisConnectorTorsion > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassisConnectorTorsion > *)jarg1;
  arg1 = (chrono::vehicle::ChChassisConnectorTorsion *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChChassisRear > *)jarg3; 
  {
    try {
      (arg1)->Initialize(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChChassisConnectorHitch(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::ChChassisConnectorHitch *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::ChChassisConnectorHitch *)new chrono::vehicle::ChChassisConnectorHitch((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChChassisConnectorHitch >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChChassisConnectorHitch(void * jarg1) {
  chrono::vehicle::ChChassisConnectorHitch *arg1 = (chrono::vehicle::ChChassisConnectorHitch *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassisConnectorHitch > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassisConnectorHitch > *)jarg1;
  arg1 = (chrono::vehicle::ChChassisConnectorHitch *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChChassisConnectorHitch_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChChassisConnectorHitch *arg1 = (chrono::vehicle::ChChassisConnectorHitch *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassisConnectorHitch const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChChassisConnectorHitch > *)jarg1;
  arg1 = (chrono::vehicle::ChChassisConnectorHitch *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChChassisConnectorHitch const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChassisConnectorHitch_Initialize(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::ChChassisConnectorHitch *arg1 = (chrono::vehicle::ChChassisConnectorHitch *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChChassisRear > arg3 ;
  std::shared_ptr< chrono::vehicle::ChChassisConnectorHitch > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChChassisConnectorHitch > *)jarg1;
  arg1 = (chrono::vehicle::ChChassisConnectorHitch *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChChassisRear > *)jarg3; 
  {
    try {
      (arg1)->Initialize(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RigidChassis__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::RigidChassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::RigidChassis *)new chrono::vehicle::RigidChassis((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::RigidChassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RigidChassis__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::RigidChassis *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::RigidChassis *)new chrono::vehicle::RigidChassis((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::RigidChassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RigidChassis(void * jarg1) {
  chrono::vehicle::RigidChassis *arg1 = (chrono::vehicle::RigidChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::RigidChassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidChassis > *)jarg1;
  arg1 = (chrono::vehicle::RigidChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidChassis_GetLocalPosRearConnector(void * jarg1) {
  void * jresult ;
  chrono::vehicle::RigidChassis *arg1 = (chrono::vehicle::RigidChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::RigidChassis const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RigidChassis > *)jarg1;
  arg1 = (chrono::vehicle::RigidChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::RigidChassis const *)arg1)->GetLocalPosRearConnector();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidChassis_GetLocalDriverCoordsys(void * jarg1) {
  void * jresult ;
  chrono::vehicle::RigidChassis *arg1 = (chrono::vehicle::RigidChassis *) 0 ;
  std::shared_ptr< chrono::vehicle::RigidChassis const > *smartarg1 = 0 ;
  chrono::ChCoordsys< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RigidChassis > *)jarg1;
  arg1 = (chrono::vehicle::RigidChassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::RigidChassis const *)arg1)->GetLocalDriverCoordsys();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChCoordsys< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RigidChassisRear__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::RigidChassisRear *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::RigidChassisRear *)new chrono::vehicle::RigidChassisRear((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::RigidChassisRear >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RigidChassisRear__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::RigidChassisRear *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::RigidChassisRear *)new chrono::vehicle::RigidChassisRear((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::RigidChassisRear >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RigidChassisRear(void * jarg1) {
  chrono::vehicle::RigidChassisRear *arg1 = (chrono::vehicle::RigidChassisRear *) 0 ;
  std::shared_ptr< chrono::vehicle::RigidChassisRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidChassisRear > *)jarg1;
  arg1 = (chrono::vehicle::RigidChassisRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidChassisRear_GetLocalPosFrontConnector(void * jarg1) {
  void * jresult ;
  chrono::vehicle::RigidChassisRear *arg1 = (chrono::vehicle::RigidChassisRear *) 0 ;
  std::shared_ptr< chrono::vehicle::RigidChassisRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RigidChassisRear > *)jarg1;
  arg1 = (chrono::vehicle::RigidChassisRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::RigidChassisRear const *)arg1)->GetLocalPosFrontConnector();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidChassisRear_GetLocalPosRearConnector(void * jarg1) {
  void * jresult ;
  chrono::vehicle::RigidChassisRear *arg1 = (chrono::vehicle::RigidChassisRear *) 0 ;
  std::shared_ptr< chrono::vehicle::RigidChassisRear const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RigidChassisRear > *)jarg1;
  arg1 = (chrono::vehicle::RigidChassisRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::RigidChassisRear const *)arg1)->GetLocalPosRearConnector();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChassisConnectorArticulated__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::ChassisConnectorArticulated *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::ChassisConnectorArticulated *)new chrono::vehicle::ChassisConnectorArticulated((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChassisConnectorArticulated >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChassisConnectorArticulated__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::ChassisConnectorArticulated *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::ChassisConnectorArticulated *)new chrono::vehicle::ChassisConnectorArticulated((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChassisConnectorArticulated >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChassisConnectorArticulated(void * jarg1) {
  chrono::vehicle::ChassisConnectorArticulated *arg1 = (chrono::vehicle::ChassisConnectorArticulated *) 0 ;
  std::shared_ptr< chrono::vehicle::ChassisConnectorArticulated > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChassisConnectorArticulated > *)jarg1;
  arg1 = (chrono::vehicle::ChassisConnectorArticulated *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChassisConnectorArticulated_GetMaxSteeringAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChassisConnectorArticulated *arg1 = (chrono::vehicle::ChassisConnectorArticulated *) 0 ;
  std::shared_ptr< chrono::vehicle::ChassisConnectorArticulated const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChassisConnectorArticulated > *)jarg1;
  arg1 = (chrono::vehicle::ChassisConnectorArticulated *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChassisConnectorArticulated const *)arg1)->GetMaxSteeringAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChassisConnectorHitch__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::ChassisConnectorHitch *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::ChassisConnectorHitch *)new chrono::vehicle::ChassisConnectorHitch((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChassisConnectorHitch >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChassisConnectorHitch__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::ChassisConnectorHitch *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::ChassisConnectorHitch *)new chrono::vehicle::ChassisConnectorHitch((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChassisConnectorHitch >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChassisConnectorHitch(void * jarg1) {
  chrono::vehicle::ChassisConnectorHitch *arg1 = (chrono::vehicle::ChassisConnectorHitch *) 0 ;
  std::shared_ptr< chrono::vehicle::ChassisConnectorHitch > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChassisConnectorHitch > *)jarg1;
  arg1 = (chrono::vehicle::ChassisConnectorHitch *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChassisConnectorTorsion__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::ChassisConnectorTorsion *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::ChassisConnectorTorsion *)new chrono::vehicle::ChassisConnectorTorsion((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChassisConnectorTorsion >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChassisConnectorTorsion__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::ChassisConnectorTorsion *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::ChassisConnectorTorsion *)new chrono::vehicle::ChassisConnectorTorsion((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChassisConnectorTorsion >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChassisConnectorTorsion(void * jarg1) {
  chrono::vehicle::ChassisConnectorTorsion *arg1 = (chrono::vehicle::ChassisConnectorTorsion *) 0 ;
  std::shared_ptr< chrono::vehicle::ChassisConnectorTorsion > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChassisConnectorTorsion > *)jarg1;
  arg1 = (chrono::vehicle::ChassisConnectorTorsion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChassisConnectorTorsion_GetTorsionStiffness(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChassisConnectorTorsion *arg1 = (chrono::vehicle::ChassisConnectorTorsion *) 0 ;
  std::shared_ptr< chrono::vehicle::ChassisConnectorTorsion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChassisConnectorTorsion > *)jarg1;
  arg1 = (chrono::vehicle::ChassisConnectorTorsion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChassisConnectorTorsion const *)arg1)->GetTorsionStiffness();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_Chassis__SWIG_0(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::generic::Generic_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_Chassis *)new chrono::vehicle::generic::Generic_Chassis((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_Chassis__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::generic::Generic_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_Chassis *)new chrono::vehicle::generic::Generic_Chassis((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Generic_Chassis(void * jarg1) {
  chrono::vehicle::generic::Generic_Chassis *arg1 = (chrono::vehicle::generic::Generic_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Chassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_Chassis_GetLocalDriverCoordsys(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_Chassis *arg1 = (chrono::vehicle::generic::Generic_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Chassis const > *smartarg1 = 0 ;
  chrono::ChCoordsys< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::generic::Generic_Chassis const *)arg1)->GetLocalDriverCoordsys();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChCoordsys< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic_Chassis_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::generic::Generic_Chassis *arg1 = (chrono::vehicle::generic::Generic_Chassis *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Chassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_Chassis__SWIG_0(const char * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::CollisionType arg3 ;
  chrono::vehicle::hmmwv::HMMWV_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::CollisionType)jarg3; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_Chassis *)new chrono::vehicle::hmmwv::HMMWV_Chassis((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_Chassis__SWIG_1(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::hmmwv::HMMWV_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_Chassis *)new chrono::vehicle::hmmwv::HMMWV_Chassis((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_Chassis__SWIG_2(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_Chassis *)new chrono::vehicle::hmmwv::HMMWV_Chassis((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_Chassis(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_Chassis *arg1 = (chrono::vehicle::hmmwv::HMMWV_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Chassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_Chassis_GetLocalPosRearConnector(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_Chassis *arg1 = (chrono::vehicle::hmmwv::HMMWV_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Chassis const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::hmmwv::HMMWV_Chassis const *)arg1)->GetLocalPosRearConnector();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_Chassis_GetLocalDriverCoordsys(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_Chassis *arg1 = (chrono::vehicle::hmmwv::HMMWV_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Chassis const > *smartarg1 = 0 ;
  chrono::ChCoordsys< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::hmmwv::HMMWV_Chassis const *)arg1)->GetLocalDriverCoordsys();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChCoordsys< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan_Chassis__SWIG_0(const char * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::CollisionType arg3 ;
  chrono::vehicle::sedan::Sedan_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::CollisionType)jarg3; 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan_Chassis *)new chrono::vehicle::sedan::Sedan_Chassis((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan_Chassis__SWIG_1(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::sedan::Sedan_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan_Chassis *)new chrono::vehicle::sedan::Sedan_Chassis((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan_Chassis__SWIG_2(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::sedan::Sedan_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan_Chassis *)new chrono::vehicle::sedan::Sedan_Chassis((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sedan_Chassis(void * jarg1) {
  chrono::vehicle::sedan::Sedan_Chassis *arg1 = (chrono::vehicle::sedan::Sedan_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Chassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_Chassis_GetLocalPosRearConnector(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_Chassis *arg1 = (chrono::vehicle::sedan::Sedan_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Chassis const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::sedan::Sedan_Chassis const *)arg1)->GetLocalPosRearConnector();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_Chassis_GetLocalDriverCoordsys(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_Chassis *arg1 = (chrono::vehicle::sedan::Sedan_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Chassis const > *smartarg1 = 0 ;
  chrono::ChCoordsys< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::sedan::Sedan_Chassis const *)arg1)->GetLocalDriverCoordsys();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChCoordsys< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_Chassis__SWIG_0(const char * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::CollisionType arg3 ;
  chrono::vehicle::citybus::CityBus_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::CollisionType)jarg3; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_Chassis *)new chrono::vehicle::citybus::CityBus_Chassis((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_Chassis__SWIG_1(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::citybus::CityBus_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_Chassis *)new chrono::vehicle::citybus::CityBus_Chassis((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_Chassis__SWIG_2(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::citybus::CityBus_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_Chassis *)new chrono::vehicle::citybus::CityBus_Chassis((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CityBus_Chassis(void * jarg1) {
  chrono::vehicle::citybus::CityBus_Chassis *arg1 = (chrono::vehicle::citybus::CityBus_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Chassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_Chassis_GetLocalDriverCoordsys(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_Chassis *arg1 = (chrono::vehicle::citybus::CityBus_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Chassis const > *smartarg1 = 0 ;
  chrono::ChCoordsys< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::citybus::CityBus_Chassis const *)arg1)->GetLocalDriverCoordsys();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChCoordsys< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_Chassis__SWIG_0(const char * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::CollisionType arg3 ;
  chrono::vehicle::man::MAN_5t_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::CollisionType)jarg3; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_Chassis *)new chrono::vehicle::man::MAN_5t_Chassis((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_Chassis__SWIG_1(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::man::MAN_5t_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_Chassis *)new chrono::vehicle::man::MAN_5t_Chassis((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_Chassis__SWIG_2(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_5t_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_Chassis *)new chrono::vehicle::man::MAN_5t_Chassis((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_5t_Chassis(void * jarg1) {
  chrono::vehicle::man::MAN_5t_Chassis *arg1 = (chrono::vehicle::man::MAN_5t_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Chassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_5t_Chassis_GetLocalDriverCoordsys(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_5t_Chassis *arg1 = (chrono::vehicle::man::MAN_5t_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Chassis const > *smartarg1 = 0 ;
  chrono::ChCoordsys< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::man::MAN_5t_Chassis const *)arg1)->GetLocalDriverCoordsys();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChCoordsys< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_7t_Chassis__SWIG_0(const char * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::CollisionType arg3 ;
  chrono::vehicle::man::MAN_7t_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::CollisionType)jarg3; 
  {
    try {
      result = (chrono::vehicle::man::MAN_7t_Chassis *)new chrono::vehicle::man::MAN_7t_Chassis((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_7t_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_7t_Chassis__SWIG_1(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::man::MAN_7t_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::man::MAN_7t_Chassis *)new chrono::vehicle::man::MAN_7t_Chassis((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_7t_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_7t_Chassis__SWIG_2(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_7t_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_7t_Chassis *)new chrono::vehicle::man::MAN_7t_Chassis((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_7t_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_7t_Chassis(void * jarg1) {
  chrono::vehicle::man::MAN_7t_Chassis *arg1 = (chrono::vehicle::man::MAN_7t_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_Chassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_7t_Chassis_GetLocalDriverCoordsys(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_7t_Chassis *arg1 = (chrono::vehicle::man::MAN_7t_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_Chassis const > *smartarg1 = 0 ;
  chrono::ChCoordsys< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_7t_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::man::MAN_7t_Chassis const *)arg1)->GetLocalDriverCoordsys();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChCoordsys< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_10t_Chassis__SWIG_0(const char * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::CollisionType arg3 ;
  chrono::vehicle::man::MAN_10t_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::CollisionType)jarg3; 
  {
    try {
      result = (chrono::vehicle::man::MAN_10t_Chassis *)new chrono::vehicle::man::MAN_10t_Chassis((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_10t_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_10t_Chassis__SWIG_1(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::man::MAN_10t_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::man::MAN_10t_Chassis *)new chrono::vehicle::man::MAN_10t_Chassis((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_10t_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_10t_Chassis__SWIG_2(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_10t_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_10t_Chassis *)new chrono::vehicle::man::MAN_10t_Chassis((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_10t_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_10t_Chassis(void * jarg1) {
  chrono::vehicle::man::MAN_10t_Chassis *arg1 = (chrono::vehicle::man::MAN_10t_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Chassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_10t_Chassis_GetLocalDriverCoordsys(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_10t_Chassis *arg1 = (chrono::vehicle::man::MAN_10t_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Chassis const > *smartarg1 = 0 ;
  chrono::ChCoordsys< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::man::MAN_10t_Chassis const *)arg1)->GetLocalDriverCoordsys();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChCoordsys< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_Chassis__SWIG_0(const char * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::CollisionType arg3 ;
  chrono::vehicle::uaz::UAZBUS_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::CollisionType)jarg3; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_Chassis *)new chrono::vehicle::uaz::UAZBUS_Chassis((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_Chassis__SWIG_1(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::uaz::UAZBUS_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_Chassis *)new chrono::vehicle::uaz::UAZBUS_Chassis((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_Chassis__SWIG_2(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_Chassis *)new chrono::vehicle::uaz::UAZBUS_Chassis((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UAZBUS_Chassis(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_Chassis *arg1 = (chrono::vehicle::uaz::UAZBUS_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Chassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UAZBUS_Chassis_GetLocalPosRearConnector(void * jarg1) {
  void * jresult ;
  chrono::vehicle::uaz::UAZBUS_Chassis *arg1 = (chrono::vehicle::uaz::UAZBUS_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Chassis const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::uaz::UAZBUS_Chassis const *)arg1)->GetLocalPosRearConnector();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UAZBUS_Chassis_GetLocalDriverCoordsys(void * jarg1) {
  void * jresult ;
  chrono::vehicle::uaz::UAZBUS_Chassis *arg1 = (chrono::vehicle::uaz::UAZBUS_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Chassis const > *smartarg1 = 0 ;
  chrono::ChCoordsys< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::uaz::UAZBUS_Chassis const *)arg1)->GetLocalDriverCoordsys();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChCoordsys< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_Chassis__SWIG_0(const char * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::CollisionType arg3 ;
  chrono::vehicle::gator::Gator_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::CollisionType)jarg3; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_Chassis *)new chrono::vehicle::gator::Gator_Chassis((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_Chassis__SWIG_1(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::gator::Gator_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_Chassis *)new chrono::vehicle::gator::Gator_Chassis((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_Chassis__SWIG_2(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::gator::Gator_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_Chassis *)new chrono::vehicle::gator::Gator_Chassis((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Gator_Chassis(void * jarg1) {
  chrono::vehicle::gator::Gator_Chassis *arg1 = (chrono::vehicle::gator::Gator_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Chassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gator_Chassis_GetLocalDriverCoordsys(void * jarg1) {
  void * jresult ;
  chrono::vehicle::gator::Gator_Chassis *arg1 = (chrono::vehicle::gator::Gator_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Chassis const > *smartarg1 = 0 ;
  chrono::ChCoordsys< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::gator::Gator_Chassis const *)arg1)->GetLocalDriverCoordsys();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChCoordsys< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCCar_Chassis__SWIG_0(const char * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::CollisionType arg3 ;
  chrono::vehicle::rccar::RCCar_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::CollisionType)jarg3; 
  {
    try {
      result = (chrono::vehicle::rccar::RCCar_Chassis *)new chrono::vehicle::rccar::RCCar_Chassis((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::rccar::RCCar_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCCar_Chassis__SWIG_1(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::rccar::RCCar_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::rccar::RCCar_Chassis *)new chrono::vehicle::rccar::RCCar_Chassis((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::rccar::RCCar_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCCar_Chassis__SWIG_2(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::rccar::RCCar_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::rccar::RCCar_Chassis *)new chrono::vehicle::rccar::RCCar_Chassis((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::rccar::RCCar_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RCCar_Chassis(void * jarg1) {
  chrono::vehicle::rccar::RCCar_Chassis *arg1 = (chrono::vehicle::rccar::RCCar_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Chassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_Chassis_GetLocalDriverCoordsys(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_Chassis *arg1 = (chrono::vehicle::rccar::RCCar_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Chassis const > *smartarg1 = 0 ;
  chrono::ChCoordsys< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::rccar::RCCar_Chassis const *)arg1)->GetLocalDriverCoordsys();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChCoordsys< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Chassis__SWIG_0(const char * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::CollisionType arg3 ;
  chrono::vehicle::feda::FEDA_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::CollisionType)jarg3; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Chassis *)new chrono::vehicle::feda::FEDA_Chassis((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Chassis__SWIG_1(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::feda::FEDA_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Chassis *)new chrono::vehicle::feda::FEDA_Chassis((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Chassis__SWIG_2(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::feda::FEDA_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Chassis *)new chrono::vehicle::feda::FEDA_Chassis((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FEDA_Chassis(void * jarg1) {
  chrono::vehicle::feda::FEDA_Chassis *arg1 = (chrono::vehicle::feda::FEDA_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Chassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_Chassis_GetLocalDriverCoordsys(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_Chassis *arg1 = (chrono::vehicle::feda::FEDA_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Chassis const > *smartarg1 = 0 ;
  chrono::ChCoordsys< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::feda::FEDA_Chassis const *)arg1)->GetLocalDriverCoordsys();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChCoordsys< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Chassis__SWIG_0(const char * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::CollisionType arg3 ;
  chrono::vehicle::m113::M113_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::CollisionType)jarg3; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Chassis *)new chrono::vehicle::m113::M113_Chassis((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Chassis__SWIG_1(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::m113::M113_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Chassis *)new chrono::vehicle::m113::M113_Chassis((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Chassis__SWIG_2(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::m113::M113_Chassis *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Chassis *)new chrono::vehicle::m113::M113_Chassis((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Chassis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_Chassis(void * jarg1) {
  chrono::vehicle::m113::M113_Chassis *arg1 = (chrono::vehicle::m113::M113_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Chassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_Chassis_GetLocalDriverCoordsys(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_Chassis *arg1 = (chrono::vehicle::m113::M113_Chassis *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Chassis const > *smartarg1 = 0 ;
  chrono::ChCoordsys< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_Chassis > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Chassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_Chassis const *)arg1)->GetLocalDriverCoordsys();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChCoordsys< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChVehicle(void * jarg1) {
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChVehicle_GetName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::string *) &((chrono::vehicle::ChVehicle const *)arg1)->GetName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicle_SetName(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->SetName((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChVehicle_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChVehicle const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChVehicle_GetSystem(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle > *smartarg1 = 0 ;
  chrono::ChSystem *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChSystem *)(arg1)->GetSystem();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::ChSystem >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChVehicle_GetChTime(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChVehicle const *)arg1)->GetChTime();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChVehicle_GetChassis(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChVehicle const *)arg1)->GetChassis();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassis >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChVehicle_GetChassisRear(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassisRear > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChVehicle const *)arg1)->GetChassisRear(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassisRear >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChVehicle_GetChassisConnector(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassisConnector > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChVehicle const *)arg1)->GetChassisConnector(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassisConnector >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChVehicle_GetChassisBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChVehicle const *)arg1)->GetChassisBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBodyAuxRef >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChVehicle_GetChassisRearBody(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChVehicle const *)arg1)->GetChassisRearBody(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBodyAuxRef >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChVehicle_GetPowertrainAssembly(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChPowertrainAssembly > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChVehicle const *)arg1)->GetPowertrainAssembly();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChPowertrainAssembly >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChVehicle_GetEngine(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChEngine > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChVehicle const *)arg1)->GetEngine();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChEngine >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChVehicle_GetTransmission(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChTransmission > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChVehicle const *)arg1)->GetTransmission();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChTransmission >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChVehicle_GetMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChVehicle const *)arg1)->GetMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChVehicle_GetCOMFrame(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  chrono::ChFrame< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChFrame< > *) &((chrono::vehicle::ChVehicle const *)arg1)->GetCOMFrame();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< const chrono::ChFrame<double> >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChVehicle_GetInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  chrono::ChMatrix33< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChMatrix33< > *) &((chrono::vehicle::ChVehicle const *)arg1)->GetInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChVehicle_GetTransform(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  chrono::ChFrame< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChFrame< > *) &((chrono::vehicle::ChVehicle const *)arg1)->GetTransform();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< const chrono::ChFrame<double> >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChVehicle_GetPos(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::ChVehicle const *)arg1)->GetPos();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChVehicle_GetRot(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  chrono::ChQuaternion< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChVehicle const *)arg1)->GetRot();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChQuaternion< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChVehicle_GetSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChVehicle const *)arg1)->GetSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChVehicle_GetPointLocation(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = ((chrono::vehicle::ChVehicle const *)arg1)->GetPointLocation((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChVehicle_GetPointVelocity(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = ((chrono::vehicle::ChVehicle const *)arg1)->GetPointVelocity((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChVehicle_GetPointAcceleration(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = ((chrono::vehicle::ChVehicle const *)arg1)->GetPointAcceleration((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChVehicle_GetDriverPos(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChVehicle const *)arg1)->GetDriverPos();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicle_EnableRealtime(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->EnableRealtime(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChVehicle_GetRTF(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChVehicle const *)arg1)->GetRTF();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicle_SetCollisionSystemType(void * jarg1, int jarg2) {
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  chrono::collision::ChCollisionSystemType arg2 ;
  std::shared_ptr< chrono::vehicle::ChVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::collision::ChCollisionSystemType)jarg2; 
  {
    try {
      (arg1)->SetCollisionSystemType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicle_SetOutput(void * jarg1, int jarg2, const char * jarg3, const char * jarg4, double jarg5) {
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  chrono::vehicle::ChVehicleOutput::Type arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  std::shared_ptr< chrono::vehicle::ChVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::ChVehicleOutput::Type)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->SetOutput(arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicle_Initialize__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::ChVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicle_Initialize__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicle_InitializePowertrain(void * jarg1, void * jarg2) {
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPowertrainAssembly > arg2 ;
  std::shared_ptr< chrono::vehicle::ChVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChPowertrainAssembly > *)jarg2; 
  {
    try {
      (arg1)->InitializePowertrain(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicle_InitializeInertiaProperties(void * jarg1) {
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->InitializeInertiaProperties();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicle_SetChassisVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetChassisVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicle_SetChassisRearVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetChassisRearVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicle_SetChassisCollide(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetChassisCollide(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicle_SetChassisVehicleCollide(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetChassisVehicleCollide(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicle_SetChassisOutput(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetChassisOutput(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChVehicle_HasBushings(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChVehicle const *)arg1)->HasBushings();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicle_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicle_LogConstraintViolations(void * jarg1) {
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogConstraintViolations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChVehicle_ExportComponentList__SWIG_0(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChVehicle const *)arg1)->ExportComponentList();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicle_ExportComponentList__SWIG_1(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      ((chrono::vehicle::ChVehicle const *)arg1)->ExportComponentList((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChVehicle_Output(void * jarg1, int jarg2, void * jarg3) {
  chrono::vehicle::ChVehicle *arg1 = (chrono::vehicle::ChVehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::ChVehicleOutput *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChVehicle const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::ChVehicleOutput *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicleOutput & is null", 0);
    return ;
  } 
  {
    try {
      ((chrono::vehicle::ChVehicle const *)arg1)->Output(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_Entry_Clear(void * jarg1) {
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *) 0 ;
  
  arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_Entry_Add(void * jarg1, void * jarg2) {
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *) 0 ;
  chrono::vehicle::ChDataDriver::Entry *arg2 = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg1; 
  arg2 = (chrono::vehicle::ChDataDriver::Entry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChDataDriver::Entry const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->push_back((chrono::vehicle::ChDataDriver::Entry const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_Entry_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *) 0 ;
  std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type result;
  
  arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg1; 
  {
    try {
      result = ((std::vector< chrono::vehicle::ChDataDriver::Entry > const *)arg1)->size();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_Entry_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *) 0 ;
  std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type result;
  
  arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg1; 
  {
    try {
      result = ((std::vector< chrono::vehicle::ChDataDriver::Entry > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_Entry_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *) 0 ;
  std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type arg2 ;
  
  arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg1; 
  arg2 = (std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_Entry__SWIG_0() {
  void * jresult ;
  std::vector< chrono::vehicle::ChDataDriver::Entry > *result = 0 ;
  
  {
    try {
      result = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)new std::vector< chrono::vehicle::ChDataDriver::Entry >();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_Entry__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg1 = 0 ;
  std::vector< chrono::vehicle::ChDataDriver::Entry > *result = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< chrono::vehicle::ChDataDriver::Entry > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)new std::vector< chrono::vehicle::ChDataDriver::Entry >((std::vector< chrono::vehicle::ChDataDriver::Entry > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_Entry__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< chrono::vehicle::ChDataDriver::Entry > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)new_std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_Entry_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *) 0 ;
  int arg2 ;
  chrono::vehicle::ChDataDriver::Entry result;
  
  arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::vehicle::ChDataDriver::Entry(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_Entry_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *) 0 ;
  int arg2 ;
  std::vector< chrono::vehicle::ChDataDriver::Entry >::value_type *result = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< chrono::vehicle::ChDataDriver::Entry >::value_type *) &std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_Entry_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *) 0 ;
  int arg2 ;
  chrono::vehicle::ChDataDriver::Entry *arg3 = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::ChDataDriver::Entry *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChDataDriver::Entry const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__setitem(arg1,arg2,(chrono::vehicle::ChDataDriver::Entry const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_Entry_AddRange(void * jarg1, void * jarg2) {
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *) 0 ;
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg2 = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg1; 
  arg2 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< chrono::vehicle::ChDataDriver::Entry > const & is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__AddRange(arg1,(std::vector< chrono::vehicle::ChDataDriver::Entry > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_Entry_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< chrono::vehicle::ChDataDriver::Entry > *result = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_Entry_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *) 0 ;
  int arg2 ;
  chrono::vehicle::ChDataDriver::Entry *arg3 = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::ChDataDriver::Entry *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChDataDriver::Entry const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__Insert(arg1,arg2,(chrono::vehicle::ChDataDriver::Entry const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_Entry_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *) 0 ;
  int arg2 ;
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg3 = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< chrono::vehicle::ChDataDriver::Entry > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__InsertRange(arg1,arg2,(std::vector< chrono::vehicle::ChDataDriver::Entry > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_Entry_RemoveAt(void * jarg1, int jarg2) {
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_Entry_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_Entry_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChDataDriver::Entry *arg1 = 0 ;
  int arg2 ;
  std::vector< chrono::vehicle::ChDataDriver::Entry > *result = 0 ;
  
  arg1 = (chrono::vehicle::ChDataDriver::Entry *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChDataDriver::Entry const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__Repeat((chrono::vehicle::ChDataDriver::Entry const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_Entry_Reverse__SWIG_0(void * jarg1) {
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *) 0 ;
  
  arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg1; 
  {
    try {
      std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__Reverse__SWIG_0(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_Entry_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_Entry_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *) 0 ;
  int arg2 ;
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg3 = 0 ;
  
  arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< chrono::vehicle::ChDataDriver::Entry > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_chrono_vehicle_ChDataDriver_Entry_Sg__SetRange(arg1,arg2,(std::vector< chrono::vehicle::ChDataDriver::Entry > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vector_Entry(void * jarg1) {
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *) 0 ;
  
  arg1 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChChaseCamera(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::ChBody > arg1 ;
  chrono::utils::ChChaseCamera *result = 0 ;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::ChBody > *)jarg1; 
  {
    try {
      result = (chrono::utils::ChChaseCamera *)new chrono::utils::ChChaseCamera(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChChaseCamera(void * jarg1) {
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChaseCamera_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, double jarg4, double jarg5, void * jarg6, void * jarg7) {
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  chrono::ChVector< > *arg6 = 0 ;
  chrono::ChVector< > *arg7 = 0 ;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (chrono::ChVector< > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg7 = (chrono::ChVector< > *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize((chrono::ChVector< > const &)*arg2,(chrono::ChCoordsys< > const &)*arg3,arg4,arg5,(chrono::ChVector< > const &)*arg6,(chrono::ChVector< > const &)*arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChaseCamera_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, double jarg4, double jarg5, void * jarg6) {
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  chrono::ChVector< > *arg6 = 0 ;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (chrono::ChVector< > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize((chrono::ChVector< > const &)*arg2,(chrono::ChCoordsys< > const &)*arg3,arg4,arg5,(chrono::ChVector< > const &)*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChaseCamera_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, double jarg4, double jarg5) {
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->Initialize((chrono::ChVector< > const &)*arg2,(chrono::ChCoordsys< > const &)*arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChaseCamera_Update(void * jarg1, double jarg2) {
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Update(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChaseCamera_Zoom(void * jarg1, int jarg2) {
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  int arg2 ;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->Zoom(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChaseCamera_Turn(void * jarg1, int jarg2) {
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  int arg2 ;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->Turn(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChaseCamera_Raise(void * jarg1, int jarg2) {
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  int arg2 ;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->Raise(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChaseCamera_SetState(void * jarg1, int jarg2) {
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  chrono::utils::ChChaseCamera::State arg2 ;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  arg2 = (chrono::utils::ChChaseCamera::State)jarg2; 
  {
    try {
      (arg1)->SetState(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChaseCamera_SetCameraPos(void * jarg1, void * jarg2) {
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetCameraPos((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChaseCamera_SetCameraAngle(void * jarg1, double jarg2) {
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetCameraAngle(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChChaseCamera_GetState(void * jarg1) {
  int jresult ;
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  chrono::utils::ChChaseCamera::State result;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  {
    try {
      result = (chrono::utils::ChChaseCamera::State)((chrono::utils::ChChaseCamera const *)arg1)->GetState();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChChaseCamera_GetStateName(void * jarg1) {
  const char * jresult ;
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  {
    try {
      result = (std::string *) &((chrono::utils::ChChaseCamera const *)arg1)->GetStateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChChaseCamera_GetCameraPos(void * jarg1) {
  void * jresult ;
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  chrono::ChVector< > result;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  {
    try {
      result = ((chrono::utils::ChChaseCamera const *)arg1)->GetCameraPos();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChChaseCamera_GetTargetPos(void * jarg1) {
  void * jresult ;
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  chrono::ChVector< > result;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  {
    try {
      result = ((chrono::utils::ChChaseCamera const *)arg1)->GetTargetPos();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChaseCamera_SetHorizGain(void * jarg1, double jarg2) {
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetHorizGain(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChaseCamera_SetVertGain(void * jarg1, double jarg2) {
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetVertGain(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChaseCamera_SetMultLimits(void * jarg1, double jarg2, double jarg3) {
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->SetMultLimits(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChaseCamera_SetChassis(void * jarg1, void * jarg2) {
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  std::shared_ptr< chrono::ChBody > arg2 ;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBody > *)jarg2; 
  {
    try {
      (arg1)->SetChassis(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChaseCamera_SetTargetPoint(void * jarg1, void * jarg2) {
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetTargetPoint((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChaseCamera_SetChaseDistance(void * jarg1, double jarg2) {
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetChaseDistance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChChaseCamera_SetChaseHeight(void * jarg1, double jarg2) {
  chrono::utils::ChChaseCamera *arg1 = (chrono::utils::ChChaseCamera *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::utils::ChChaseCamera *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetChaseHeight(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChDriver(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  chrono::vehicle::ChDriver *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::ChDriver *)new chrono::vehicle::ChDriver(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChDriver >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChDriver(void * jarg1) {
  chrono::vehicle::ChDriver *arg1 = (chrono::vehicle::ChDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChDriver_GetThrottle(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChDriver *arg1 = (chrono::vehicle::ChDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDriver const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChDriver const *)arg1)->GetThrottle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChDriver_GetSteering(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChDriver *arg1 = (chrono::vehicle::ChDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDriver const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChDriver const *)arg1)->GetSteering();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChDriver_GetBraking(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChDriver *arg1 = (chrono::vehicle::ChDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDriver const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChDriver const *)arg1)->GetBraking();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChDriver_GetClutch(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChDriver *arg1 = (chrono::vehicle::ChDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDriver const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChDriver const *)arg1)->GetClutch();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChDriver_GetInputs(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChDriver *arg1 = (chrono::vehicle::ChDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDriver const > *smartarg1 = 0 ;
  chrono::vehicle::DriverInputs result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChDriver const *)arg1)->GetInputs();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::vehicle::DriverInputs(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDriver_Initialize(void * jarg1) {
  chrono::vehicle::ChDriver *arg1 = (chrono::vehicle::ChDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Initialize();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDriver_Synchronize(void * jarg1, double jarg2) {
  chrono::vehicle::ChDriver *arg1 = (chrono::vehicle::ChDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Synchronize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDriver_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::ChDriver *arg1 = (chrono::vehicle::ChDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChDriver_LogInit(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  chrono::vehicle::ChDriver *arg1 = (chrono::vehicle::ChDriver *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChDriver > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChDriver *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)(arg1)->LogInit((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChDriver_Log(void * jarg1, double jarg2) {
  unsigned int jresult ;
  chrono::vehicle::ChDriver *arg1 = (chrono::vehicle::ChDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChDriver > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      result = (bool)(arg1)->Log(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDriver_SetSteering(void * jarg1, double jarg2) {
  chrono::vehicle::ChDriver *arg1 = (chrono::vehicle::ChDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetSteering(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDriver_SetThrottle(void * jarg1, double jarg2) {
  chrono::vehicle::ChDriver *arg1 = (chrono::vehicle::ChDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetThrottle(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDriver_SetBraking(void * jarg1, double jarg2) {
  chrono::vehicle::ChDriver *arg1 = (chrono::vehicle::ChDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetBraking(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDriver_SetClutch(void * jarg1, double jarg2) {
  chrono::vehicle::ChDriver *arg1 = (chrono::vehicle::ChDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetClutch(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChDataDriver__SWIG_0(void * jarg1, const char * jarg2, unsigned int jarg3) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  chrono::vehicle::ChDataDriver *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (chrono::vehicle::ChDataDriver *)new chrono::vehicle::ChDataDriver(*arg1,(std::string const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChDataDriver >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChDataDriver__SWIG_1(void * jarg1, const char * jarg2) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  chrono::vehicle::ChDataDriver *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (chrono::vehicle::ChDataDriver *)new chrono::vehicle::ChDataDriver(*arg1,(std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChDataDriver >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChDataDriver__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg2 = 0 ;
  bool arg3 ;
  chrono::vehicle::ChDataDriver *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  arg2 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< chrono::vehicle::ChDataDriver::Entry > const & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (chrono::vehicle::ChDataDriver *)new chrono::vehicle::ChDataDriver(*arg1,(std::vector< chrono::vehicle::ChDataDriver::Entry > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChDataDriver >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChDataDriver__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::vector< chrono::vehicle::ChDataDriver::Entry > *arg2 = 0 ;
  chrono::vehicle::ChDataDriver *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  arg2 = (std::vector< chrono::vehicle::ChDataDriver::Entry > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< chrono::vehicle::ChDataDriver::Entry > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::ChDataDriver *)new chrono::vehicle::ChDataDriver(*arg1,(std::vector< chrono::vehicle::ChDataDriver::Entry > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChDataDriver >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChDataDriver(void * jarg1) {
  chrono::vehicle::ChDataDriver *arg1 = (chrono::vehicle::ChDataDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDataDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDataDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChDataDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDataDriver_Synchronize(void * jarg1, double jarg2) {
  chrono::vehicle::ChDataDriver *arg1 = (chrono::vehicle::ChDataDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChDataDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDataDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChDataDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Synchronize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DataDriverEntry__SWIG_0() {
  void * jresult ;
  chrono::vehicle::ChDataDriver::Entry *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::ChDataDriver::Entry *)new chrono::vehicle::ChDataDriver::Entry();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DataDriverEntry__SWIG_1(double jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  chrono::vehicle::ChDataDriver::Entry *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (chrono::vehicle::ChDataDriver::Entry *)new chrono::vehicle::ChDataDriver::Entry(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataDriverEntry_m_time_set(void * jarg1, double jarg2) {
  chrono::vehicle::ChDataDriver::Entry *arg1 = (chrono::vehicle::ChDataDriver::Entry *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::ChDataDriver::Entry *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_time = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DataDriverEntry_m_time_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChDataDriver::Entry *arg1 = (chrono::vehicle::ChDataDriver::Entry *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::ChDataDriver::Entry *)jarg1; 
  result = (double) ((arg1)->m_time);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataDriverEntry_m_steering_set(void * jarg1, double jarg2) {
  chrono::vehicle::ChDataDriver::Entry *arg1 = (chrono::vehicle::ChDataDriver::Entry *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::ChDataDriver::Entry *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_steering = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DataDriverEntry_m_steering_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChDataDriver::Entry *arg1 = (chrono::vehicle::ChDataDriver::Entry *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::ChDataDriver::Entry *)jarg1; 
  result = (double) ((arg1)->m_steering);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataDriverEntry_m_throttle_set(void * jarg1, double jarg2) {
  chrono::vehicle::ChDataDriver::Entry *arg1 = (chrono::vehicle::ChDataDriver::Entry *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::ChDataDriver::Entry *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_throttle = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DataDriverEntry_m_throttle_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChDataDriver::Entry *arg1 = (chrono::vehicle::ChDataDriver::Entry *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::ChDataDriver::Entry *)jarg1; 
  result = (double) ((arg1)->m_throttle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataDriverEntry_m_braking_set(void * jarg1, double jarg2) {
  chrono::vehicle::ChDataDriver::Entry *arg1 = (chrono::vehicle::ChDataDriver::Entry *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::ChDataDriver::Entry *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_braking = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DataDriverEntry_m_braking_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChDataDriver::Entry *arg1 = (chrono::vehicle::ChDataDriver::Entry *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::ChDataDriver::Entry *)jarg1; 
  result = (double) ((arg1)->m_braking);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataDriverEntry_m_clutch_set(void * jarg1, double jarg2) {
  chrono::vehicle::ChDataDriver::Entry *arg1 = (chrono::vehicle::ChDataDriver::Entry *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::ChDataDriver::Entry *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_clutch = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DataDriverEntry_m_clutch_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChDataDriver::Entry *arg1 = (chrono::vehicle::ChDataDriver::Entry *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::ChDataDriver::Entry *)jarg1; 
  result = (double) ((arg1)->m_clutch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DataDriverEntry(void * jarg1) {
  chrono::vehicle::ChDataDriver::Entry *arg1 = (chrono::vehicle::ChDataDriver::Entry *) 0 ;
  
  arg1 = (chrono::vehicle::ChDataDriver::Entry *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChInteractiveDriver(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  chrono::vehicle::ChInteractiveDriver *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::ChInteractiveDriver *)new chrono::vehicle::ChInteractiveDriver(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChInteractiveDriver >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChInteractiveDriver(void * jarg1) {
  chrono::vehicle::ChInteractiveDriver *arg1 = (chrono::vehicle::ChInteractiveDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChInteractiveDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChInteractiveDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChInteractiveDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChInteractiveDriver_HasJoystick(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChInteractiveDriver *arg1 = (chrono::vehicle::ChInteractiveDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChInteractiveDriver const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChInteractiveDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChInteractiveDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChInteractiveDriver const *)arg1)->HasJoystick();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChInteractiveDriver_Synchronize(void * jarg1, double jarg2) {
  chrono::vehicle::ChInteractiveDriver *arg1 = (chrono::vehicle::ChInteractiveDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChInteractiveDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChInteractiveDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChInteractiveDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Synchronize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChInteractiveDriver_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::ChInteractiveDriver *arg1 = (chrono::vehicle::ChInteractiveDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChInteractiveDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChInteractiveDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChInteractiveDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChInteractiveDriver_SetInputMode(void * jarg1, int jarg2) {
  chrono::vehicle::ChInteractiveDriver *arg1 = (chrono::vehicle::ChInteractiveDriver *) 0 ;
  chrono::vehicle::ChInteractiveDriver::InputMode arg2 ;
  std::shared_ptr< chrono::vehicle::ChInteractiveDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChInteractiveDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChInteractiveDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::ChInteractiveDriver::InputMode)jarg2; 
  {
    try {
      (arg1)->SetInputMode(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChInteractiveDriver_SetThrottleDelta(void * jarg1, double jarg2) {
  chrono::vehicle::ChInteractiveDriver *arg1 = (chrono::vehicle::ChInteractiveDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChInteractiveDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChInteractiveDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChInteractiveDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetThrottleDelta(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChInteractiveDriver_SetSteeringDelta(void * jarg1, double jarg2) {
  chrono::vehicle::ChInteractiveDriver *arg1 = (chrono::vehicle::ChInteractiveDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChInteractiveDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChInteractiveDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChInteractiveDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetSteeringDelta(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChInteractiveDriver_SetBrakingDelta(void * jarg1, double jarg2) {
  chrono::vehicle::ChInteractiveDriver *arg1 = (chrono::vehicle::ChInteractiveDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChInteractiveDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChInteractiveDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChInteractiveDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetBrakingDelta(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChInteractiveDriver_SetClutchDelta(void * jarg1, double jarg2) {
  chrono::vehicle::ChInteractiveDriver *arg1 = (chrono::vehicle::ChInteractiveDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChInteractiveDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChInteractiveDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChInteractiveDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetClutchDelta(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChInteractiveDriver_SetStepsize(void * jarg1, double jarg2) {
  chrono::vehicle::ChInteractiveDriver *arg1 = (chrono::vehicle::ChInteractiveDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChInteractiveDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChInteractiveDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChInteractiveDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetStepsize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChInteractiveDriver_SetGains__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  chrono::vehicle::ChInteractiveDriver *arg1 = (chrono::vehicle::ChInteractiveDriver *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< chrono::vehicle::ChInteractiveDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChInteractiveDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChInteractiveDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->SetGains(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChInteractiveDriver_SetGains__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::ChInteractiveDriver *arg1 = (chrono::vehicle::ChInteractiveDriver *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::ChInteractiveDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChInteractiveDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChInteractiveDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->SetGains(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChInteractiveDriver_SetGains__SWIG_2(void * jarg1, double jarg2, double jarg3) {
  chrono::vehicle::ChInteractiveDriver *arg1 = (chrono::vehicle::ChInteractiveDriver *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::ChInteractiveDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChInteractiveDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChInteractiveDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->SetGains(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChInteractiveDriver_SetGains__SWIG_3(void * jarg1, double jarg2) {
  chrono::vehicle::ChInteractiveDriver *arg1 = (chrono::vehicle::ChInteractiveDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChInteractiveDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChInteractiveDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChInteractiveDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetGains(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChInteractiveDriver_SetGains__SWIG_4(void * jarg1) {
  chrono::vehicle::ChInteractiveDriver *arg1 = (chrono::vehicle::ChInteractiveDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChInteractiveDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChInteractiveDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChInteractiveDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetGains();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChInteractiveDriver_SetInputDataFile(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChInteractiveDriver *arg1 = (chrono::vehicle::ChInteractiveDriver *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChInteractiveDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChInteractiveDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChInteractiveDriver *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->SetInputDataFile((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChClosedLoopDriver__SWIG_0(void * jarg1, const char * jarg2, double jarg3) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  chrono::vehicle::ChClosedLoopDriver *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (chrono::vehicle::ChClosedLoopDriver *)new chrono::vehicle::ChClosedLoopDriver(*arg1,(std::string const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChClosedLoopDriver >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChClosedLoopDriver__SWIG_1(void * jarg1, const char * jarg2, const char * jarg3, double jarg4) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  chrono::vehicle::ChClosedLoopDriver *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (chrono::vehicle::ChClosedLoopDriver *)new chrono::vehicle::ChClosedLoopDriver(*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChClosedLoopDriver >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChClosedLoopDriver(void * jarg1) {
  chrono::vehicle::ChClosedLoopDriver *arg1 = (chrono::vehicle::ChClosedLoopDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChClosedLoopDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChClosedLoopDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChClosedLoopDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChClosedLoopDriver_SetDesiredSpeed(void * jarg1, double jarg2) {
  chrono::vehicle::ChClosedLoopDriver *arg1 = (chrono::vehicle::ChClosedLoopDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChClosedLoopDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChClosedLoopDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChClosedLoopDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetDesiredSpeed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChClosedLoopDriver_SetThresholdThrottle(void * jarg1, double jarg2) {
  chrono::vehicle::ChClosedLoopDriver *arg1 = (chrono::vehicle::ChClosedLoopDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChClosedLoopDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChClosedLoopDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChClosedLoopDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetThresholdThrottle(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChClosedLoopDriver_GetSpeedController(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChClosedLoopDriver *arg1 = (chrono::vehicle::ChClosedLoopDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChClosedLoopDriver const > *smartarg1 = 0 ;
  ChSpeedController *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChClosedLoopDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChClosedLoopDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ChSpeedController *) &((chrono::vehicle::ChClosedLoopDriver const *)arg1)->GetSpeedController();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChClosedLoopDriver_Reset(void * jarg1) {
  chrono::vehicle::ChClosedLoopDriver *arg1 = (chrono::vehicle::ChClosedLoopDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChClosedLoopDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChClosedLoopDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChClosedLoopDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Reset();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChClosedLoopDriver_Initialize(void * jarg1) {
  chrono::vehicle::ChClosedLoopDriver *arg1 = (chrono::vehicle::ChClosedLoopDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChClosedLoopDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChClosedLoopDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChClosedLoopDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Initialize();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChClosedLoopDriver_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::ChClosedLoopDriver *arg1 = (chrono::vehicle::ChClosedLoopDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChClosedLoopDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChClosedLoopDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChClosedLoopDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChClosedLoopDriver_SetColor(void * jarg1, void * jarg2) {
  chrono::vehicle::ChClosedLoopDriver *arg1 = (chrono::vehicle::ChClosedLoopDriver *) 0 ;
  ChColor *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChClosedLoopDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChClosedLoopDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChClosedLoopDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ChColor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChColor const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetColor((ChColor const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChClosedLoopDriver_ExportPathPovray(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChClosedLoopDriver *arg1 = (chrono::vehicle::ChClosedLoopDriver *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChClosedLoopDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChClosedLoopDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChClosedLoopDriver *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->ExportPathPovray((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathFollowerDriver__SWIG_0(void * jarg1, void * jarg2, const char * jarg3, double jarg4) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg2 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  chrono::vehicle::ChPathFollowerDriver *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (chrono::vehicle::ChPathFollowerDriver *)new chrono::vehicle::ChPathFollowerDriver(*arg1,arg2,(std::string const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChPathFollowerDriver >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathFollowerDriver__SWIG_1(void * jarg1, const char * jarg2, const char * jarg3, void * jarg4, const char * jarg5, double jarg6) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg4 ;
  std::string *arg5 = 0 ;
  double arg6 ;
  chrono::vehicle::ChPathFollowerDriver *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (chrono::vehicle::ChPathFollowerDriver *)new chrono::vehicle::ChPathFollowerDriver(*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChPathFollowerDriver >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChPathFollowerDriver(void * jarg1) {
  chrono::vehicle::ChPathFollowerDriver *arg1 = (chrono::vehicle::ChPathFollowerDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPathFollowerDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPathFollowerDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChPathFollowerDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChPathFollowerDriver_GetSteeringController(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChPathFollowerDriver *arg1 = (chrono::vehicle::ChPathFollowerDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPathFollowerDriver const > *smartarg1 = 0 ;
  ChPathSteeringController *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPathFollowerDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChPathFollowerDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ChPathSteeringController *) &((chrono::vehicle::ChPathFollowerDriver const *)arg1)->GetSteeringController();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathFollowerDriverXT__SWIG_0(void * jarg1, void * jarg2, const char * jarg3, double jarg4, double jarg5) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg2 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  chrono::vehicle::ChPathFollowerDriverXT *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (chrono::vehicle::ChPathFollowerDriverXT *)new chrono::vehicle::ChPathFollowerDriverXT(*arg1,arg2,(std::string const &)*arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChPathFollowerDriverXT >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathFollowerDriverXT__SWIG_1(void * jarg1, void * jarg2, const char * jarg3, double jarg4) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg2 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  chrono::vehicle::ChPathFollowerDriverXT *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (chrono::vehicle::ChPathFollowerDriverXT *)new chrono::vehicle::ChPathFollowerDriverXT(*arg1,arg2,(std::string const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChPathFollowerDriverXT >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathFollowerDriverXT__SWIG_2(void * jarg1, const char * jarg2, const char * jarg3, void * jarg4, const char * jarg5, double jarg6, double jarg7) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg4 ;
  std::string *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  chrono::vehicle::ChPathFollowerDriverXT *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      result = (chrono::vehicle::ChPathFollowerDriverXT *)new chrono::vehicle::ChPathFollowerDriverXT(*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChPathFollowerDriverXT >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathFollowerDriverXT__SWIG_3(void * jarg1, const char * jarg2, const char * jarg3, void * jarg4, const char * jarg5, double jarg6) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg4 ;
  std::string *arg5 = 0 ;
  double arg6 ;
  chrono::vehicle::ChPathFollowerDriverXT *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (chrono::vehicle::ChPathFollowerDriverXT *)new chrono::vehicle::ChPathFollowerDriverXT(*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChPathFollowerDriverXT >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChPathFollowerDriverXT(void * jarg1) {
  chrono::vehicle::ChPathFollowerDriverXT *arg1 = (chrono::vehicle::ChPathFollowerDriverXT *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPathFollowerDriverXT > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPathFollowerDriverXT > *)jarg1;
  arg1 = (chrono::vehicle::ChPathFollowerDriverXT *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChPathFollowerDriverXT_GetSteeringController(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChPathFollowerDriverXT *arg1 = (chrono::vehicle::ChPathFollowerDriverXT *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPathFollowerDriverXT const > *smartarg1 = 0 ;
  ChPathSteeringControllerXT *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPathFollowerDriverXT > *)jarg1;
  arg1 = (chrono::vehicle::ChPathFollowerDriverXT *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ChPathSteeringControllerXT *) &((chrono::vehicle::ChPathFollowerDriverXT const *)arg1)->GetSteeringController();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathFollowerDriverSR__SWIG_0(void * jarg1, void * jarg2, const char * jarg3, double jarg4, double jarg5, double jarg6) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg2 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  chrono::vehicle::ChPathFollowerDriverSR *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (chrono::vehicle::ChPathFollowerDriverSR *)new chrono::vehicle::ChPathFollowerDriverSR(*arg1,arg2,(std::string const &)*arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChPathFollowerDriverSR >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathFollowerDriverSR__SWIG_1(void * jarg1, void * jarg2, const char * jarg3, double jarg4, double jarg5) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg2 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  chrono::vehicle::ChPathFollowerDriverSR *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (chrono::vehicle::ChPathFollowerDriverSR *)new chrono::vehicle::ChPathFollowerDriverSR(*arg1,arg2,(std::string const &)*arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChPathFollowerDriverSR >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathFollowerDriverSR__SWIG_2(void * jarg1, void * jarg2, const char * jarg3, double jarg4) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg2 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  chrono::vehicle::ChPathFollowerDriverSR *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (chrono::vehicle::ChPathFollowerDriverSR *)new chrono::vehicle::ChPathFollowerDriverSR(*arg1,arg2,(std::string const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChPathFollowerDriverSR >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathFollowerDriverSR__SWIG_3(void * jarg1, const char * jarg2, const char * jarg3, void * jarg4, const char * jarg5, double jarg6, double jarg7, double jarg8) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg4 ;
  std::string *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  chrono::vehicle::ChPathFollowerDriverSR *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    try {
      result = (chrono::vehicle::ChPathFollowerDriverSR *)new chrono::vehicle::ChPathFollowerDriverSR(*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChPathFollowerDriverSR >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathFollowerDriverSR__SWIG_4(void * jarg1, const char * jarg2, const char * jarg3, void * jarg4, const char * jarg5, double jarg6, double jarg7) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg4 ;
  std::string *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  chrono::vehicle::ChPathFollowerDriverSR *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      result = (chrono::vehicle::ChPathFollowerDriverSR *)new chrono::vehicle::ChPathFollowerDriverSR(*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChPathFollowerDriverSR >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathFollowerDriverSR__SWIG_5(void * jarg1, const char * jarg2, const char * jarg3, void * jarg4, const char * jarg5, double jarg6) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg4 ;
  std::string *arg5 = 0 ;
  double arg6 ;
  chrono::vehicle::ChPathFollowerDriverSR *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (chrono::vehicle::ChPathFollowerDriverSR *)new chrono::vehicle::ChPathFollowerDriverSR(*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChPathFollowerDriverSR >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChPathFollowerDriverSR(void * jarg1) {
  chrono::vehicle::ChPathFollowerDriverSR *arg1 = (chrono::vehicle::ChPathFollowerDriverSR *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPathFollowerDriverSR > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPathFollowerDriverSR > *)jarg1;
  arg1 = (chrono::vehicle::ChPathFollowerDriverSR *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChPathFollowerDriverSR_GetSteeringController(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChPathFollowerDriverSR *arg1 = (chrono::vehicle::ChPathFollowerDriverSR *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPathFollowerDriverSR const > *smartarg1 = 0 ;
  ChPathSteeringControllerSR *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPathFollowerDriverSR > *)jarg1;
  arg1 = (chrono::vehicle::ChPathFollowerDriverSR *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ChPathSteeringControllerSR *) &((chrono::vehicle::ChPathFollowerDriverSR const *)arg1)->GetSteeringController();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathFollowerDriverStanley__SWIG_0(void * jarg1, void * jarg2, const char * jarg3, double jarg4, double jarg5) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg2 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  chrono::vehicle::ChPathFollowerDriverStanley *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (chrono::vehicle::ChPathFollowerDriverStanley *)new chrono::vehicle::ChPathFollowerDriverStanley(*arg1,arg2,(std::string const &)*arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChPathFollowerDriverStanley >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathFollowerDriverStanley__SWIG_1(void * jarg1, void * jarg2, const char * jarg3, double jarg4) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg2 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  chrono::vehicle::ChPathFollowerDriverStanley *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (chrono::vehicle::ChPathFollowerDriverStanley *)new chrono::vehicle::ChPathFollowerDriverStanley(*arg1,arg2,(std::string const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChPathFollowerDriverStanley >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathFollowerDriverStanley__SWIG_2(void * jarg1, const char * jarg2, const char * jarg3, void * jarg4, const char * jarg5, double jarg6, double jarg7) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg4 ;
  std::string *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  chrono::vehicle::ChPathFollowerDriverStanley *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      result = (chrono::vehicle::ChPathFollowerDriverStanley *)new chrono::vehicle::ChPathFollowerDriverStanley(*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChPathFollowerDriverStanley >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathFollowerDriverStanley__SWIG_3(void * jarg1, const char * jarg2, const char * jarg3, void * jarg4, const char * jarg5, double jarg6) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg4 ;
  std::string *arg5 = 0 ;
  double arg6 ;
  chrono::vehicle::ChPathFollowerDriverStanley *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (chrono::vehicle::ChPathFollowerDriverStanley *)new chrono::vehicle::ChPathFollowerDriverStanley(*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChPathFollowerDriverStanley >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChPathFollowerDriverStanley(void * jarg1) {
  chrono::vehicle::ChPathFollowerDriverStanley *arg1 = (chrono::vehicle::ChPathFollowerDriverStanley *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPathFollowerDriverStanley > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPathFollowerDriverStanley > *)jarg1;
  arg1 = (chrono::vehicle::ChPathFollowerDriverStanley *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChPathFollowerDriverStanley_GetSteeringController(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChPathFollowerDriverStanley *arg1 = (chrono::vehicle::ChPathFollowerDriverStanley *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPathFollowerDriverStanley const > *smartarg1 = 0 ;
  ChPathSteeringControllerStanley *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPathFollowerDriverStanley > *)jarg1;
  arg1 = (chrono::vehicle::ChPathFollowerDriverStanley *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ChPathSteeringControllerStanley *) &((chrono::vehicle::ChPathFollowerDriverStanley const *)arg1)->GetSteeringController();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathFollowerACCDriver__SWIG_0(void * jarg1, void * jarg2, const char * jarg3, double jarg4, double jarg5, double jarg6, double jarg7) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg2 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  chrono::vehicle::ChPathFollowerACCDriver *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      result = (chrono::vehicle::ChPathFollowerACCDriver *)new chrono::vehicle::ChPathFollowerACCDriver(*arg1,arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChPathFollowerACCDriver >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathFollowerACCDriver__SWIG_1(void * jarg1, const char * jarg2, const char * jarg3, void * jarg4, const char * jarg5, double jarg6, double jarg7, double jarg8, double jarg9) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg4 ;
  std::string *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  chrono::vehicle::ChPathFollowerACCDriver *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  {
    try {
      result = (chrono::vehicle::ChPathFollowerACCDriver *)new chrono::vehicle::ChPathFollowerACCDriver(*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,arg6,arg7,arg8,arg9);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChPathFollowerACCDriver >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChPathFollowerACCDriver(void * jarg1) {
  chrono::vehicle::ChPathFollowerACCDriver *arg1 = (chrono::vehicle::ChPathFollowerACCDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPathFollowerACCDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPathFollowerACCDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChPathFollowerACCDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathFollowerACCDriver_SetDesiredSpeed(void * jarg1, double jarg2) {
  chrono::vehicle::ChPathFollowerACCDriver *arg1 = (chrono::vehicle::ChPathFollowerACCDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChPathFollowerACCDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPathFollowerACCDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChPathFollowerACCDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetDesiredSpeed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathFollowerACCDriver_SetDesiredFollowingTime(void * jarg1, double jarg2) {
  chrono::vehicle::ChPathFollowerACCDriver *arg1 = (chrono::vehicle::ChPathFollowerACCDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChPathFollowerACCDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPathFollowerACCDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChPathFollowerACCDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetDesiredFollowingTime(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathFollowerACCDriver_SetDesiredFollowingMinDistance(void * jarg1, double jarg2) {
  chrono::vehicle::ChPathFollowerACCDriver *arg1 = (chrono::vehicle::ChPathFollowerACCDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChPathFollowerACCDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPathFollowerACCDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChPathFollowerACCDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetDesiredFollowingMinDistance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathFollowerACCDriver_SetCurrentDistance(void * jarg1, double jarg2) {
  chrono::vehicle::ChPathFollowerACCDriver *arg1 = (chrono::vehicle::ChPathFollowerACCDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChPathFollowerACCDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPathFollowerACCDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChPathFollowerACCDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetCurrentDistance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathFollowerACCDriver_SetThresholdThrottle(void * jarg1, double jarg2) {
  chrono::vehicle::ChPathFollowerACCDriver *arg1 = (chrono::vehicle::ChPathFollowerACCDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChPathFollowerACCDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPathFollowerACCDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChPathFollowerACCDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetThresholdThrottle(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChPathFollowerACCDriver_GetSteeringController(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChPathFollowerACCDriver *arg1 = (chrono::vehicle::ChPathFollowerACCDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPathFollowerACCDriver > *smartarg1 = 0 ;
  ChPathSteeringController *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPathFollowerACCDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChPathFollowerACCDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ChPathSteeringController *) &(arg1)->GetSteeringController();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChPathFollowerACCDriver_GetSpeedController(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChPathFollowerACCDriver *arg1 = (chrono::vehicle::ChPathFollowerACCDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPathFollowerACCDriver > *smartarg1 = 0 ;
  ChAdaptiveSpeedController *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPathFollowerACCDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChPathFollowerACCDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ChAdaptiveSpeedController *) &(arg1)->GetSpeedController();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathFollowerACCDriver_Reset(void * jarg1) {
  chrono::vehicle::ChPathFollowerACCDriver *arg1 = (chrono::vehicle::ChPathFollowerACCDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPathFollowerACCDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPathFollowerACCDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChPathFollowerACCDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Reset();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathFollowerACCDriver_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::ChPathFollowerACCDriver *arg1 = (chrono::vehicle::ChPathFollowerACCDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChPathFollowerACCDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPathFollowerACCDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChPathFollowerACCDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathFollowerACCDriver_ExportPathPovray(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChPathFollowerACCDriver *arg1 = (chrono::vehicle::ChPathFollowerACCDriver *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChPathFollowerACCDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPathFollowerACCDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChPathFollowerACCDriver *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->ExportPathPovray((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChExternalDriver(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChVehicle *arg1 = 0 ;
  int arg2 ;
  chrono::vehicle::ChExternalDriver *result = 0 ;
  
  
  arg1 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1) ? ((std::shared_ptr<  chrono::vehicle::ChVehicle > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle & reference is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      result = (chrono::vehicle::ChExternalDriver *)new chrono::vehicle::ChExternalDriver(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChExternalDriver >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChExternalDriver(void * jarg1) {
  chrono::vehicle::ChExternalDriver *arg1 = (chrono::vehicle::ChExternalDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChExternalDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChExternalDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChExternalDriver_Synchronize(void * jarg1, double jarg2) {
  chrono::vehicle::ChExternalDriver *arg1 = (chrono::vehicle::ChExternalDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChExternalDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChExternalDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Synchronize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChExternalDriver_AddDataGenerator__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  chrono::vehicle::ChExternalDriver *arg1 = (chrono::vehicle::ChExternalDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > arg2 ;
  float arg3 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChExternalDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChExternalDriver *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *)jarg2; 
  arg3 = (float)jarg3; 
  {
    try {
      (arg1)->AddDataGenerator(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChExternalDriver_AddDataGenerator__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::ChExternalDriver *arg1 = (chrono::vehicle::ChExternalDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > arg2 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChExternalDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChExternalDriver *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *)jarg2; 
  {
    try {
      (arg1)->AddDataGenerator(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChExternalDriver_AddDataParser(void * jarg1, void * jarg2) {
  chrono::vehicle::ChExternalDriver *arg1 = (chrono::vehicle::ChExternalDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver::DataParserFunctor > arg2 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChExternalDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChExternalDriver *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChExternalDriver::DataParserFunctor > *)jarg2; 
  {
    try {
      (arg1)->AddDataParser(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChExternalDriver_DataGeneratorFunctor(const char * jarg1, const char * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *)new SwigDirector_ChExternalDriver_DataGeneratorFunctor((std::string const &)*arg1,(std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChExternalDriver::DataGeneratorFunctor >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChExternalDriver_DataGeneratorFunctor(void * jarg1) {
  chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *arg1 = (chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *) 0 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *)jarg1;
  arg1 = (chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChExternalDriver_DataGeneratorFunctor_Serialize(void * jarg1, void * jarg2) {
  chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *arg1 = (chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *) 0 ;
  chrono::vehicle::ChJSONWriter *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *)jarg1;
  arg1 = (chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (chrono::vehicle::ChJSONWriter *)(((std::shared_ptr<  chrono::vehicle::ChJSONWriter > *)jarg2) ? ((std::shared_ptr<  chrono::vehicle::ChJSONWriter > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChJSONWriter & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Serialize(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChExternalDriver_DataGeneratorFunctor_HasData(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *arg1 = (chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *) 0 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *)jarg1;
  arg1 = (chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)(arg1)->HasData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChExternalDriver_DataGeneratorFunctor_HasDataSwigExplicitChExternalDriver_DataGeneratorFunctor(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *arg1 = (chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *) 0 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *)jarg1;
  arg1 = (chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)(arg1)->chrono::vehicle::ChExternalDriver::DataGeneratorFunctor::HasData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChExternalDriver_DataGeneratorFunctor_type_set(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *arg1 = (chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *)jarg1;
  arg1 = (chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChExternalDriver_DataGeneratorFunctor_type_get(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *arg1 = (chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *) 0 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *)jarg1;
  arg1 = (chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->type);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChExternalDriver_DataGeneratorFunctor_id_set(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *arg1 = (chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *)jarg1;
  arg1 = (chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->id = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChExternalDriver_DataGeneratorFunctor_id_get(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *arg1 = (chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *) 0 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *)jarg1;
  arg1 = (chrono::vehicle::ChExternalDriver::DataGeneratorFunctor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->id);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChExternalDriver_DataGeneratorFunctor_director_connect(void *objarg, SwigDirector_ChExternalDriver_DataGeneratorFunctor::SWIG_Callback0_t callback0, SwigDirector_ChExternalDriver_DataGeneratorFunctor::SWIG_Callback1_t callback1) {
  std::shared_ptr< chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *obj = (std::shared_ptr< chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > *)objarg;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_ChExternalDriver_DataGeneratorFunctor *director = static_cast<SwigDirector_ChExternalDriver_DataGeneratorFunctor *>(obj->operator->());
  director->swig_connect_director(callback0, callback1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChExternalDriver_DataParserFunctor(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::ChExternalDriver::DataParserFunctor *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::ChExternalDriver::DataParserFunctor *)new SwigDirector_ChExternalDriver_DataParserFunctor((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChExternalDriver::DataParserFunctor >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChExternalDriver_DataParserFunctor(void * jarg1) {
  chrono::vehicle::ChExternalDriver::DataParserFunctor *arg1 = (chrono::vehicle::ChExternalDriver::DataParserFunctor *) 0 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver::DataParserFunctor > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChExternalDriver::DataParserFunctor > *)jarg1;
  arg1 = (chrono::vehicle::ChExternalDriver::DataParserFunctor *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChExternalDriver_DataParserFunctor_Deserialize(void * jarg1, void * jarg2) {
  chrono::vehicle::ChExternalDriver::DataParserFunctor *arg1 = (chrono::vehicle::ChExternalDriver::DataParserFunctor *) 0 ;
  chrono::vehicle::ChJSONReader *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver::DataParserFunctor > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChExternalDriver::DataParserFunctor > *)jarg1;
  arg1 = (chrono::vehicle::ChExternalDriver::DataParserFunctor *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (chrono::vehicle::ChJSONReader *)(((std::shared_ptr<  chrono::vehicle::ChJSONReader > *)jarg2) ? ((std::shared_ptr<  chrono::vehicle::ChJSONReader > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChJSONReader & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Deserialize(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChExternalDriver_DataParserFunctor_type_set(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChExternalDriver::DataParserFunctor *arg1 = (chrono::vehicle::ChExternalDriver::DataParserFunctor *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver::DataParserFunctor > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChExternalDriver::DataParserFunctor > *)jarg1;
  arg1 = (chrono::vehicle::ChExternalDriver::DataParserFunctor *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChExternalDriver_DataParserFunctor_type_get(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChExternalDriver::DataParserFunctor *arg1 = (chrono::vehicle::ChExternalDriver::DataParserFunctor *) 0 ;
  std::shared_ptr< chrono::vehicle::ChExternalDriver::DataParserFunctor > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChExternalDriver::DataParserFunctor > *)jarg1;
  arg1 = (chrono::vehicle::ChExternalDriver::DataParserFunctor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->type);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChExternalDriver_DataParserFunctor_director_connect(void *objarg, SwigDirector_ChExternalDriver_DataParserFunctor::SWIG_Callback0_t callback0) {
  std::shared_ptr< chrono::vehicle::ChExternalDriver::DataParserFunctor > *obj = (std::shared_ptr< chrono::vehicle::ChExternalDriver::DataParserFunctor > *)objarg;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_ChExternalDriver_DataParserFunctor *director = static_cast<SwigDirector_ChExternalDriver_DataParserFunctor *>(obj->operator->());
  director->swig_connect_director(callback0);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChJSONWriter() {
  void * jresult ;
  chrono::vehicle::ChJSONWriter *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::ChJSONWriter *)new chrono::vehicle::ChJSONWriter();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChJSONWriter >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChJSONWriter_Key(void * jarg1, const char * jarg2) {
  void * jresult ;
  chrono::vehicle::ChJSONWriter *arg1 = (chrono::vehicle::ChJSONWriter *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONWriter > *smartarg1 = 0 ;
  chrono::vehicle::ChJSONWriter *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONWriter > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONWriter *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (chrono::vehicle::ChJSONWriter *) &(arg1)->Key((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChJSONWriter >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChJSONWriter_PointerAsString(void * jarg1, unsigned long jarg2, unsigned int jarg3) {
  void * jresult ;
  chrono::vehicle::ChJSONWriter *arg1 = (chrono::vehicle::ChJSONWriter *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  std::shared_ptr< chrono::vehicle::ChJSONWriter > *smartarg1 = 0 ;
  chrono::vehicle::ChJSONWriter *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONWriter > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONWriter *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (chrono::vehicle::ChJSONWriter *) &(arg1)->PointerAsString(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChJSONWriter >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChJSONWriter_StartObject(void * jarg1, const char * jarg2, const char * jarg3) {
  void * jresult ;
  chrono::vehicle::ChJSONWriter *arg1 = (chrono::vehicle::ChJSONWriter *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONWriter > *smartarg1 = 0 ;
  chrono::vehicle::ChJSONWriter *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONWriter > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONWriter *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (chrono::vehicle::ChJSONWriter *) &(arg1)->StartObject((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChJSONWriter >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChJSONWriter_EndObject(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChJSONWriter *arg1 = (chrono::vehicle::ChJSONWriter *) 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONWriter > *smartarg1 = 0 ;
  chrono::vehicle::ChJSONWriter *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONWriter > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONWriter *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChJSONWriter *) &(arg1)->EndObject();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChJSONWriter >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChJSONWriter_Finish(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChJSONWriter *arg1 = (chrono::vehicle::ChJSONWriter *) 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONWriter > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONWriter > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONWriter *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->Finish();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChJSONWriter(void * jarg1) {
  chrono::vehicle::ChJSONWriter *arg1 = (chrono::vehicle::ChJSONWriter *) 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONWriter > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONWriter > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONWriter *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChJSONReader() {
  void * jresult ;
  chrono::vehicle::ChJSONReader *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::ChJSONReader *)new chrono::vehicle::ChJSONReader();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChJSONReader >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChJSONReader_Parse(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChJSONReader *arg1 = (chrono::vehicle::ChJSONReader *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONReader > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONReader > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONReader *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->Parse((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChJSONReader_GetBool(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChJSONReader *arg1 = (chrono::vehicle::ChJSONReader *) 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONReader > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONReader > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONReader *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)(arg1)->GetBool();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChJSONReader_GetInt(void * jarg1) {
  int jresult ;
  chrono::vehicle::ChJSONReader *arg1 = (chrono::vehicle::ChJSONReader *) 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONReader > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONReader > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONReader *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)(arg1)->GetInt();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ChJSONReader_GetLongInt(void * jarg1) {
  long jresult ;
  chrono::vehicle::ChJSONReader *arg1 = (chrono::vehicle::ChJSONReader *) 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONReader > *smartarg1 = 0 ;
  long result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONReader > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONReader *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (long)(arg1)->GetLongInt();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChJSONReader_GetDouble(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChJSONReader *arg1 = (chrono::vehicle::ChJSONReader *) 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONReader > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONReader > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONReader *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetDouble();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ChJSONReader_GetFloat(void * jarg1) {
  float jresult ;
  chrono::vehicle::ChJSONReader *arg1 = (chrono::vehicle::ChJSONReader *) 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONReader > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONReader > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONReader *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (float)(arg1)->GetFloat();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChJSONReader_GetUint(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChJSONReader *arg1 = (chrono::vehicle::ChJSONReader *) 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONReader > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONReader > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONReader *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)(arg1)->GetUint();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChJSONReader_GetString(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChJSONReader *arg1 = (chrono::vehicle::ChJSONReader *) 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONReader > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONReader > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONReader *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->GetString();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChJSONReader_Next(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChJSONReader *arg1 = (chrono::vehicle::ChJSONReader *) 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONReader > *smartarg1 = 0 ;
  chrono::vehicle::ChJSONReader *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONReader > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONReader *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChJSONReader *) &(arg1)->Next();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChJSONReader >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChJSONReader_Back(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChJSONReader *arg1 = (chrono::vehicle::ChJSONReader *) 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONReader > *smartarg1 = 0 ;
  chrono::vehicle::ChJSONReader *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONReader > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONReader *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChJSONReader *) &(arg1)->Back();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChJSONReader >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChJSONReader_StartObject(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChJSONReader *arg1 = (chrono::vehicle::ChJSONReader *) 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONReader > *smartarg1 = 0 ;
  chrono::vehicle::ChJSONReader *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONReader > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONReader *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChJSONReader *) &(arg1)->StartObject();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChJSONReader >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChJSONReader_GetObject(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChJSONReader *arg1 = (chrono::vehicle::ChJSONReader *) 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONReader > *smartarg1 = 0 ;
  chrono::vehicle::ChJSONReader *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONReader > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONReader *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChJSONReader *) &(arg1)->GetObject();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChJSONReader >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChJSONReader_EndObject(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChJSONReader *arg1 = (chrono::vehicle::ChJSONReader *) 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONReader > *smartarg1 = 0 ;
  chrono::vehicle::ChJSONReader *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONReader > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONReader *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChJSONReader *) &(arg1)->EndObject();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChJSONReader >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChJSONReader_HasMembers(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChJSONReader *arg1 = (chrono::vehicle::ChJSONReader *) 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONReader > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONReader > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONReader *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)(arg1)->HasMembers();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChJSONReader(void * jarg1) {
  chrono::vehicle::ChJSONReader *arg1 = (chrono::vehicle::ChJSONReader *) 0 ;
  std::shared_ptr< chrono::vehicle::ChJSONReader > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChJSONReader > *)jarg1;
  arg1 = (chrono::vehicle::ChJSONReader *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSuspensionTestRigDriver(void * jarg1) {
  chrono::vehicle::ChSuspensionTestRigDriver *arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRigDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSuspensionTestRigDriver_GetSteering(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSuspensionTestRigDriver *arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigDriver const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRigDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChSuspensionTestRigDriver const *)arg1)->GetSteering();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspensionTestRigDriver_GetDisplacementLeft(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChSuspensionTestRigDriver *arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigDriver const > *smartarg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRigDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::vector< double > *) &((chrono::vehicle::ChSuspensionTestRigDriver const *)arg1)->GetDisplacementLeft();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspensionTestRigDriver_GetDisplacementRight(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChSuspensionTestRigDriver *arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigDriver const > *smartarg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRigDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::vector< double > *) &((chrono::vehicle::ChSuspensionTestRigDriver const *)arg1)->GetDisplacementRight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspensionTestRigDriver_GetDisplacementSpeedLeft(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChSuspensionTestRigDriver *arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigDriver const > *smartarg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRigDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::vector< double > *) &((chrono::vehicle::ChSuspensionTestRigDriver const *)arg1)->GetDisplacementSpeedLeft();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspensionTestRigDriver_GetDisplacementSpeedRight(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChSuspensionTestRigDriver *arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigDriver const > *smartarg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRigDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::vector< double > *) &((chrono::vehicle::ChSuspensionTestRigDriver const *)arg1)->GetDisplacementSpeedRight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSuspensionTestRigDriver_Started(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSuspensionTestRigDriver *arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigDriver const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRigDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChSuspensionTestRigDriver const *)arg1)->Started();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSuspensionTestRigDriver_Ended(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSuspensionTestRigDriver *arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigDriver const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRigDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChSuspensionTestRigDriver const *)arg1)->Ended();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSuspensionTestRigDriver_LogInit(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  chrono::vehicle::ChSuspensionTestRigDriver *arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigDriver > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRigDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)(arg1)->LogInit((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSuspensionTestRigDriver_Log(void * jarg1, double jarg2) {
  unsigned int jresult ;
  chrono::vehicle::ChSuspensionTestRigDriver *arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigDriver > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRigDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigDriver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      result = (bool)(arg1)->Log(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChSuspensionTestRigDataDriver(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::ChSuspensionTestRigDataDriver *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::ChSuspensionTestRigDataDriver *)new chrono::vehicle::ChSuspensionTestRigDataDriver((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChSuspensionTestRigDataDriver >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSuspensionTestRigDataDriver(void * jarg1) {
  chrono::vehicle::ChSuspensionTestRigDataDriver *arg1 = (chrono::vehicle::ChSuspensionTestRigDataDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigDataDriver > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRigDataDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigDataDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSuspensionTestRigDataDriver_Ended(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSuspensionTestRigDataDriver *arg1 = (chrono::vehicle::ChSuspensionTestRigDataDriver *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigDataDriver const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRigDataDriver > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigDataDriver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChSuspensionTestRigDataDriver const *)arg1)->Ended();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChSpeedController__SWIG_0() {
  void * jresult ;
  chrono::vehicle::ChSpeedController *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::ChSpeedController *)new chrono::vehicle::ChSpeedController();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChSpeedController__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::ChSpeedController *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::ChSpeedController *)new chrono::vehicle::ChSpeedController((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSpeedController(void * jarg1) {
  chrono::vehicle::ChSpeedController *arg1 = (chrono::vehicle::ChSpeedController *) 0 ;
  
  arg1 = (chrono::vehicle::ChSpeedController *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSpeedController_SetGains(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::ChSpeedController *arg1 = (chrono::vehicle::ChSpeedController *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (chrono::vehicle::ChSpeedController *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->SetGains(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSpeedController_GetCurrentSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSpeedController *arg1 = (chrono::vehicle::ChSpeedController *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::ChSpeedController *)jarg1; 
  {
    try {
      result = (double)((chrono::vehicle::ChSpeedController const *)arg1)->GetCurrentSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSpeedController_Reset(void * jarg1, void * jarg2) {
  chrono::vehicle::ChSpeedController *arg1 = (chrono::vehicle::ChSpeedController *) 0 ;
  chrono::vehicle::ChVehicle *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChSpeedController *)jarg1; 
  
  arg2 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2) ? ((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Reset((chrono::vehicle::ChVehicle const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSpeedController_Advance(void * jarg1, void * jarg2, double jarg3, double jarg4) {
  double jresult ;
  chrono::vehicle::ChSpeedController *arg1 = (chrono::vehicle::ChSpeedController *) 0 ;
  chrono::vehicle::ChVehicle *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  arg1 = (chrono::vehicle::ChSpeedController *)jarg1; 
  
  arg2 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2) ? ((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle const & reference is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->Advance((chrono::vehicle::ChVehicle const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSpeedController_StartDataCollection(void * jarg1) {
  chrono::vehicle::ChSpeedController *arg1 = (chrono::vehicle::ChSpeedController *) 0 ;
  
  arg1 = (chrono::vehicle::ChSpeedController *)jarg1; 
  {
    try {
      (arg1)->StartDataCollection();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSpeedController_StopDataCollection(void * jarg1) {
  chrono::vehicle::ChSpeedController *arg1 = (chrono::vehicle::ChSpeedController *) 0 ;
  
  arg1 = (chrono::vehicle::ChSpeedController *)jarg1; 
  {
    try {
      (arg1)->StopDataCollection();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSpeedController_IsDataCollectionEnabled(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSpeedController *arg1 = (chrono::vehicle::ChSpeedController *) 0 ;
  bool result;
  
  arg1 = (chrono::vehicle::ChSpeedController *)jarg1; 
  {
    try {
      result = (bool)((chrono::vehicle::ChSpeedController const *)arg1)->IsDataCollectionEnabled();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSpeedController_IsDataAvailable(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSpeedController *arg1 = (chrono::vehicle::ChSpeedController *) 0 ;
  bool result;
  
  arg1 = (chrono::vehicle::ChSpeedController *)jarg1; 
  {
    try {
      result = (bool)((chrono::vehicle::ChSpeedController const *)arg1)->IsDataAvailable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSpeedController_WriteOutputFile(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChSpeedController *arg1 = (chrono::vehicle::ChSpeedController *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChSpeedController *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->WriteOutputFile((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSteeringController(void * jarg1) {
  chrono::vehicle::ChSteeringController *arg1 = (chrono::vehicle::ChSteeringController *) 0 ;
  
  arg1 = (chrono::vehicle::ChSteeringController *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSteeringController_SetLookAheadDistance(void * jarg1, double jarg2) {
  chrono::vehicle::ChSteeringController *arg1 = (chrono::vehicle::ChSteeringController *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::ChSteeringController *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetLookAheadDistance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSteeringController_GetSentinelLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChSteeringController *arg1 = (chrono::vehicle::ChSteeringController *) 0 ;
  chrono::ChVector< > *result = 0 ;
  
  arg1 = (chrono::vehicle::ChSteeringController *)jarg1; 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::ChSteeringController const *)arg1)->GetSentinelLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSteeringController_GetTargetLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChSteeringController *arg1 = (chrono::vehicle::ChSteeringController *) 0 ;
  chrono::ChVector< > *result = 0 ;
  
  arg1 = (chrono::vehicle::ChSteeringController *)jarg1; 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::ChSteeringController const *)arg1)->GetTargetLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSteeringController_GetPath(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChSteeringController *arg1 = (chrono::vehicle::ChSteeringController *) 0 ;
  std::shared_ptr< chrono::ChBezierCurve > result;
  
  arg1 = (chrono::vehicle::ChSteeringController *)jarg1; 
  {
    try {
      result = ((chrono::vehicle::ChSteeringController const *)arg1)->GetPath();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBezierCurve >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSteeringController_Reset(void * jarg1, void * jarg2) {
  chrono::vehicle::ChSteeringController *arg1 = (chrono::vehicle::ChSteeringController *) 0 ;
  chrono::vehicle::ChVehicle *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChSteeringController *)jarg1; 
  
  arg2 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2) ? ((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Reset((chrono::vehicle::ChVehicle const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSteeringController_Advance(void * jarg1, void * jarg2, double jarg3) {
  double jresult ;
  chrono::vehicle::ChSteeringController *arg1 = (chrono::vehicle::ChSteeringController *) 0 ;
  chrono::vehicle::ChVehicle *arg2 = 0 ;
  double arg3 ;
  double result;
  
  arg1 = (chrono::vehicle::ChSteeringController *)jarg1; 
  
  arg2 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2) ? ((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle const & reference is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)(arg1)->Advance((chrono::vehicle::ChVehicle const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSteeringController_StartDataCollection(void * jarg1) {
  chrono::vehicle::ChSteeringController *arg1 = (chrono::vehicle::ChSteeringController *) 0 ;
  
  arg1 = (chrono::vehicle::ChSteeringController *)jarg1; 
  {
    try {
      (arg1)->StartDataCollection();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSteeringController_StopDataCollection(void * jarg1) {
  chrono::vehicle::ChSteeringController *arg1 = (chrono::vehicle::ChSteeringController *) 0 ;
  
  arg1 = (chrono::vehicle::ChSteeringController *)jarg1; 
  {
    try {
      (arg1)->StopDataCollection();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSteeringController_IsDataCollectionEnabled(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSteeringController *arg1 = (chrono::vehicle::ChSteeringController *) 0 ;
  bool result;
  
  arg1 = (chrono::vehicle::ChSteeringController *)jarg1; 
  {
    try {
      result = (bool)((chrono::vehicle::ChSteeringController const *)arg1)->IsDataCollectionEnabled();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSteeringController_IsDataAvailable(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSteeringController *arg1 = (chrono::vehicle::ChSteeringController *) 0 ;
  bool result;
  
  arg1 = (chrono::vehicle::ChSteeringController *)jarg1; 
  {
    try {
      result = (bool)((chrono::vehicle::ChSteeringController const *)arg1)->IsDataAvailable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSteeringController_WriteOutputFile(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChSteeringController *arg1 = (chrono::vehicle::ChSteeringController *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChSteeringController *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->WriteOutputFile((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathSteeringController__SWIG_0(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::ChBezierCurve > arg1 ;
  chrono::vehicle::ChPathSteeringController *result = 0 ;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg1; 
  {
    try {
      result = (chrono::vehicle::ChPathSteeringController *)new chrono::vehicle::ChPathSteeringController(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathSteeringController__SWIG_1(const char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg2 ;
  chrono::vehicle::ChPathSteeringController *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg2; 
  {
    try {
      result = (chrono::vehicle::ChPathSteeringController *)new chrono::vehicle::ChPathSteeringController((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChPathSteeringController(void * jarg1) {
  chrono::vehicle::ChPathSteeringController *arg1 = (chrono::vehicle::ChPathSteeringController *) 0 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringController *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringController_SetGains(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::ChPathSteeringController *arg1 = (chrono::vehicle::ChPathSteeringController *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringController *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->SetGains(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringController_Reset(void * jarg1, void * jarg2) {
  chrono::vehicle::ChPathSteeringController *arg1 = (chrono::vehicle::ChPathSteeringController *) 0 ;
  chrono::vehicle::ChVehicle *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringController *)jarg1; 
  
  arg2 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2) ? ((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Reset((chrono::vehicle::ChVehicle const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringController_CalcTargetLocation(void * jarg1) {
  chrono::vehicle::ChPathSteeringController *arg1 = (chrono::vehicle::ChPathSteeringController *) 0 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringController *)jarg1; 
  {
    try {
      (arg1)->CalcTargetLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPathSteeringController_Advance(void * jarg1, void * jarg2, double jarg3) {
  double jresult ;
  chrono::vehicle::ChPathSteeringController *arg1 = (chrono::vehicle::ChPathSteeringController *) 0 ;
  chrono::vehicle::ChVehicle *arg2 = 0 ;
  double arg3 ;
  double result;
  
  arg1 = (chrono::vehicle::ChPathSteeringController *)jarg1; 
  
  arg2 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2) ? ((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle const & reference is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)(arg1)->Advance((chrono::vehicle::ChVehicle const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathSteeringControllerXT__SWIG_0(void * jarg1, double jarg2) {
  void * jresult ;
  std::shared_ptr< chrono::ChBezierCurve > arg1 ;
  double arg2 ;
  chrono::vehicle::ChPathSteeringControllerXT *result = 0 ;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (chrono::vehicle::ChPathSteeringControllerXT *)new chrono::vehicle::ChPathSteeringControllerXT(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathSteeringControllerXT__SWIG_1(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::ChBezierCurve > arg1 ;
  chrono::vehicle::ChPathSteeringControllerXT *result = 0 ;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg1; 
  {
    try {
      result = (chrono::vehicle::ChPathSteeringControllerXT *)new chrono::vehicle::ChPathSteeringControllerXT(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathSteeringControllerXT__SWIG_2(const char * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg2 ;
  double arg3 ;
  chrono::vehicle::ChPathSteeringControllerXT *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (chrono::vehicle::ChPathSteeringControllerXT *)new chrono::vehicle::ChPathSteeringControllerXT((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathSteeringControllerXT__SWIG_3(const char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg2 ;
  chrono::vehicle::ChPathSteeringControllerXT *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg2; 
  {
    try {
      result = (chrono::vehicle::ChPathSteeringControllerXT *)new chrono::vehicle::ChPathSteeringControllerXT((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChPathSteeringControllerXT(void * jarg1) {
  chrono::vehicle::ChPathSteeringControllerXT *arg1 = (chrono::vehicle::ChPathSteeringControllerXT *) 0 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerXT *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringControllerXT_Reset(void * jarg1, void * jarg2) {
  chrono::vehicle::ChPathSteeringControllerXT *arg1 = (chrono::vehicle::ChPathSteeringControllerXT *) 0 ;
  chrono::vehicle::ChVehicle *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerXT *)jarg1; 
  
  arg2 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2) ? ((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Reset((chrono::vehicle::ChVehicle const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringControllerXT_SetGains__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  chrono::vehicle::ChPathSteeringControllerXT *arg1 = (chrono::vehicle::ChPathSteeringControllerXT *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerXT *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->SetGains(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringControllerXT_SetGains__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::ChPathSteeringControllerXT *arg1 = (chrono::vehicle::ChPathSteeringControllerXT *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerXT *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->SetGains(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringControllerXT_SetGains__SWIG_2(void * jarg1, double jarg2, double jarg3) {
  chrono::vehicle::ChPathSteeringControllerXT *arg1 = (chrono::vehicle::ChPathSteeringControllerXT *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerXT *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->SetGains(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringControllerXT_SetGains__SWIG_3(void * jarg1, double jarg2) {
  chrono::vehicle::ChPathSteeringControllerXT *arg1 = (chrono::vehicle::ChPathSteeringControllerXT *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerXT *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetGains(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringControllerXT_SetGains__SWIG_4(void * jarg1) {
  chrono::vehicle::ChPathSteeringControllerXT *arg1 = (chrono::vehicle::ChPathSteeringControllerXT *) 0 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerXT *)jarg1; 
  {
    try {
      (arg1)->SetGains();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringControllerXT_CalcTargetLocation(void * jarg1) {
  chrono::vehicle::ChPathSteeringControllerXT *arg1 = (chrono::vehicle::ChPathSteeringControllerXT *) 0 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerXT *)jarg1; 
  {
    try {
      (arg1)->CalcTargetLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPathSteeringControllerXT_Advance(void * jarg1, void * jarg2, double jarg3) {
  double jresult ;
  chrono::vehicle::ChPathSteeringControllerXT *arg1 = (chrono::vehicle::ChPathSteeringControllerXT *) 0 ;
  chrono::vehicle::ChVehicle *arg2 = 0 ;
  double arg3 ;
  double result;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerXT *)jarg1; 
  
  arg2 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2) ? ((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle const & reference is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)(arg1)->Advance((chrono::vehicle::ChVehicle const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathSteeringControllerSR__SWIG_0(void * jarg1, unsigned int jarg2, double jarg3, double jarg4) {
  void * jresult ;
  std::shared_ptr< chrono::ChBezierCurve > arg1 ;
  bool arg2 ;
  double arg3 ;
  double arg4 ;
  chrono::vehicle::ChPathSteeringControllerSR *result = 0 ;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (chrono::vehicle::ChPathSteeringControllerSR *)new chrono::vehicle::ChPathSteeringControllerSR(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathSteeringControllerSR__SWIG_1(void * jarg1, unsigned int jarg2, double jarg3) {
  void * jresult ;
  std::shared_ptr< chrono::ChBezierCurve > arg1 ;
  bool arg2 ;
  double arg3 ;
  chrono::vehicle::ChPathSteeringControllerSR *result = 0 ;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (chrono::vehicle::ChPathSteeringControllerSR *)new chrono::vehicle::ChPathSteeringControllerSR(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathSteeringControllerSR__SWIG_2(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::shared_ptr< chrono::ChBezierCurve > arg1 ;
  bool arg2 ;
  chrono::vehicle::ChPathSteeringControllerSR *result = 0 ;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::ChPathSteeringControllerSR *)new chrono::vehicle::ChPathSteeringControllerSR(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathSteeringControllerSR__SWIG_3(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::ChBezierCurve > arg1 ;
  chrono::vehicle::ChPathSteeringControllerSR *result = 0 ;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg1; 
  {
    try {
      result = (chrono::vehicle::ChPathSteeringControllerSR *)new chrono::vehicle::ChPathSteeringControllerSR(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathSteeringControllerSR__SWIG_4(const char * jarg1, void * jarg2, unsigned int jarg3, double jarg4, double jarg5) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg2 ;
  bool arg3 ;
  double arg4 ;
  double arg5 ;
  chrono::vehicle::ChPathSteeringControllerSR *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (chrono::vehicle::ChPathSteeringControllerSR *)new chrono::vehicle::ChPathSteeringControllerSR((std::string const &)*arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathSteeringControllerSR__SWIG_5(const char * jarg1, void * jarg2, unsigned int jarg3, double jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg2 ;
  bool arg3 ;
  double arg4 ;
  chrono::vehicle::ChPathSteeringControllerSR *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (chrono::vehicle::ChPathSteeringControllerSR *)new chrono::vehicle::ChPathSteeringControllerSR((std::string const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathSteeringControllerSR__SWIG_6(const char * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg2 ;
  bool arg3 ;
  chrono::vehicle::ChPathSteeringControllerSR *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (chrono::vehicle::ChPathSteeringControllerSR *)new chrono::vehicle::ChPathSteeringControllerSR((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathSteeringControllerSR__SWIG_7(const char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg2 ;
  chrono::vehicle::ChPathSteeringControllerSR *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg2; 
  {
    try {
      result = (chrono::vehicle::ChPathSteeringControllerSR *)new chrono::vehicle::ChPathSteeringControllerSR((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChPathSteeringControllerSR(void * jarg1) {
  chrono::vehicle::ChPathSteeringControllerSR *arg1 = (chrono::vehicle::ChPathSteeringControllerSR *) 0 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerSR *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringControllerSR_SetGains__SWIG_0(void * jarg1, double jarg2, double jarg3) {
  chrono::vehicle::ChPathSteeringControllerSR *arg1 = (chrono::vehicle::ChPathSteeringControllerSR *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerSR *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->SetGains(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringControllerSR_SetGains__SWIG_1(void * jarg1, double jarg2) {
  chrono::vehicle::ChPathSteeringControllerSR *arg1 = (chrono::vehicle::ChPathSteeringControllerSR *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerSR *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetGains(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringControllerSR_SetGains__SWIG_2(void * jarg1) {
  chrono::vehicle::ChPathSteeringControllerSR *arg1 = (chrono::vehicle::ChPathSteeringControllerSR *) 0 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerSR *)jarg1; 
  {
    try {
      (arg1)->SetGains();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringControllerSR_SetPreviewTime__SWIG_0(void * jarg1, double jarg2) {
  chrono::vehicle::ChPathSteeringControllerSR *arg1 = (chrono::vehicle::ChPathSteeringControllerSR *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerSR *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetPreviewTime(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringControllerSR_SetPreviewTime__SWIG_1(void * jarg1) {
  chrono::vehicle::ChPathSteeringControllerSR *arg1 = (chrono::vehicle::ChPathSteeringControllerSR *) 0 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerSR *)jarg1; 
  {
    try {
      (arg1)->SetPreviewTime();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPathSteeringControllerSR_Advance(void * jarg1, void * jarg2, double jarg3) {
  double jresult ;
  chrono::vehicle::ChPathSteeringControllerSR *arg1 = (chrono::vehicle::ChPathSteeringControllerSR *) 0 ;
  chrono::vehicle::ChVehicle *arg2 = 0 ;
  double arg3 ;
  double result;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerSR *)jarg1; 
  
  arg2 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2) ? ((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle const & reference is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)(arg1)->Advance((chrono::vehicle::ChVehicle const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringControllerSR_Reset(void * jarg1, void * jarg2) {
  chrono::vehicle::ChPathSteeringControllerSR *arg1 = (chrono::vehicle::ChPathSteeringControllerSR *) 0 ;
  chrono::vehicle::ChVehicle *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerSR *)jarg1; 
  
  arg2 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2) ? ((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Reset((chrono::vehicle::ChVehicle const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringControllerSR_CalcTargetLocation(void * jarg1) {
  chrono::vehicle::ChPathSteeringControllerSR *arg1 = (chrono::vehicle::ChPathSteeringControllerSR *) 0 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerSR *)jarg1; 
  {
    try {
      (arg1)->CalcTargetLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathSteeringControllerStanley__SWIG_0(void * jarg1, double jarg2) {
  void * jresult ;
  std::shared_ptr< chrono::ChBezierCurve > arg1 ;
  double arg2 ;
  chrono::vehicle::ChPathSteeringControllerStanley *result = 0 ;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (chrono::vehicle::ChPathSteeringControllerStanley *)new chrono::vehicle::ChPathSteeringControllerStanley(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathSteeringControllerStanley__SWIG_1(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::ChBezierCurve > arg1 ;
  chrono::vehicle::ChPathSteeringControllerStanley *result = 0 ;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg1; 
  {
    try {
      result = (chrono::vehicle::ChPathSteeringControllerStanley *)new chrono::vehicle::ChPathSteeringControllerStanley(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathSteeringControllerStanley__SWIG_2(const char * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg2 ;
  double arg3 ;
  chrono::vehicle::ChPathSteeringControllerStanley *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (chrono::vehicle::ChPathSteeringControllerStanley *)new chrono::vehicle::ChPathSteeringControllerStanley((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPathSteeringControllerStanley__SWIG_3(const char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::ChBezierCurve > arg2 ;
  chrono::vehicle::ChPathSteeringControllerStanley *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBezierCurve > *)jarg2; 
  {
    try {
      result = (chrono::vehicle::ChPathSteeringControllerStanley *)new chrono::vehicle::ChPathSteeringControllerStanley((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChPathSteeringControllerStanley(void * jarg1) {
  chrono::vehicle::ChPathSteeringControllerStanley *arg1 = (chrono::vehicle::ChPathSteeringControllerStanley *) 0 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerStanley *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringControllerStanley_SetGains(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::ChPathSteeringControllerStanley *arg1 = (chrono::vehicle::ChPathSteeringControllerStanley *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerStanley *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->SetGains(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringControllerStanley_SetDeadZone__SWIG_0(void * jarg1, double jarg2) {
  chrono::vehicle::ChPathSteeringControllerStanley *arg1 = (chrono::vehicle::ChPathSteeringControllerStanley *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerStanley *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetDeadZone(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringControllerStanley_SetDeadZone__SWIG_1(void * jarg1) {
  chrono::vehicle::ChPathSteeringControllerStanley *arg1 = (chrono::vehicle::ChPathSteeringControllerStanley *) 0 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerStanley *)jarg1; 
  {
    try {
      (arg1)->SetDeadZone();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPathSteeringControllerStanley_Advance(void * jarg1, void * jarg2, double jarg3) {
  double jresult ;
  chrono::vehicle::ChPathSteeringControllerStanley *arg1 = (chrono::vehicle::ChPathSteeringControllerStanley *) 0 ;
  chrono::vehicle::ChVehicle *arg2 = 0 ;
  double arg3 ;
  double result;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerStanley *)jarg1; 
  
  arg2 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2) ? ((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle const & reference is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)(arg1)->Advance((chrono::vehicle::ChVehicle const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringControllerStanley_Reset(void * jarg1, void * jarg2) {
  chrono::vehicle::ChPathSteeringControllerStanley *arg1 = (chrono::vehicle::ChPathSteeringControllerStanley *) 0 ;
  chrono::vehicle::ChVehicle *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerStanley *)jarg1; 
  
  arg2 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2) ? ((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Reset((chrono::vehicle::ChVehicle const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPathSteeringControllerStanley_CalcTargetLocation(void * jarg1) {
  chrono::vehicle::ChPathSteeringControllerStanley *arg1 = (chrono::vehicle::ChPathSteeringControllerStanley *) 0 ;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerStanley *)jarg1; 
  {
    try {
      (arg1)->CalcTargetLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPathSteeringControllerStanley_CalcHeadingError(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  chrono::vehicle::ChPathSteeringControllerStanley *arg1 = (chrono::vehicle::ChPathSteeringControllerStanley *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  chrono::ChVector< > *arg3 = 0 ;
  double result;
  
  arg1 = (chrono::vehicle::ChPathSteeringControllerStanley *)jarg1; 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > & is null", 0);
    return 0;
  } 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > & is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->CalcHeadingError(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChAdaptiveSpeedController__SWIG_0() {
  void * jresult ;
  chrono::vehicle::ChAdaptiveSpeedController *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::ChAdaptiveSpeedController *)new chrono::vehicle::ChAdaptiveSpeedController();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChAdaptiveSpeedController__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::ChAdaptiveSpeedController *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::ChAdaptiveSpeedController *)new chrono::vehicle::ChAdaptiveSpeedController((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChAdaptiveSpeedController(void * jarg1) {
  chrono::vehicle::ChAdaptiveSpeedController *arg1 = (chrono::vehicle::ChAdaptiveSpeedController *) 0 ;
  
  arg1 = (chrono::vehicle::ChAdaptiveSpeedController *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAdaptiveSpeedController_SetGains(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::ChAdaptiveSpeedController *arg1 = (chrono::vehicle::ChAdaptiveSpeedController *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (chrono::vehicle::ChAdaptiveSpeedController *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->SetGains(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChAdaptiveSpeedController_GetCurrentSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChAdaptiveSpeedController *arg1 = (chrono::vehicle::ChAdaptiveSpeedController *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::ChAdaptiveSpeedController *)jarg1; 
  {
    try {
      result = (double)((chrono::vehicle::ChAdaptiveSpeedController const *)arg1)->GetCurrentSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAdaptiveSpeedController_Reset(void * jarg1, void * jarg2) {
  chrono::vehicle::ChAdaptiveSpeedController *arg1 = (chrono::vehicle::ChAdaptiveSpeedController *) 0 ;
  chrono::vehicle::ChVehicle *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChAdaptiveSpeedController *)jarg1; 
  
  arg2 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2) ? ((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Reset((chrono::vehicle::ChVehicle const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChAdaptiveSpeedController_Advance(void * jarg1, void * jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7) {
  double jresult ;
  chrono::vehicle::ChAdaptiveSpeedController *arg1 = (chrono::vehicle::ChAdaptiveSpeedController *) 0 ;
  chrono::vehicle::ChVehicle *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double result;
  
  arg1 = (chrono::vehicle::ChAdaptiveSpeedController *)jarg1; 
  
  arg2 = (chrono::vehicle::ChVehicle *)(((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2) ? ((std::shared_ptr< const chrono::vehicle::ChVehicle > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChVehicle const & reference is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      result = (double)(arg1)->Advance((chrono::vehicle::ChVehicle const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAdaptiveSpeedController_StartDataCollection(void * jarg1) {
  chrono::vehicle::ChAdaptiveSpeedController *arg1 = (chrono::vehicle::ChAdaptiveSpeedController *) 0 ;
  
  arg1 = (chrono::vehicle::ChAdaptiveSpeedController *)jarg1; 
  {
    try {
      (arg1)->StartDataCollection();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAdaptiveSpeedController_StopDataCollection(void * jarg1) {
  chrono::vehicle::ChAdaptiveSpeedController *arg1 = (chrono::vehicle::ChAdaptiveSpeedController *) 0 ;
  
  arg1 = (chrono::vehicle::ChAdaptiveSpeedController *)jarg1; 
  {
    try {
      (arg1)->StopDataCollection();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChAdaptiveSpeedController_IsDataCollectionEnabled(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChAdaptiveSpeedController *arg1 = (chrono::vehicle::ChAdaptiveSpeedController *) 0 ;
  bool result;
  
  arg1 = (chrono::vehicle::ChAdaptiveSpeedController *)jarg1; 
  {
    try {
      result = (bool)((chrono::vehicle::ChAdaptiveSpeedController const *)arg1)->IsDataCollectionEnabled();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChAdaptiveSpeedController_IsDataAvailable(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChAdaptiveSpeedController *arg1 = (chrono::vehicle::ChAdaptiveSpeedController *) 0 ;
  bool result;
  
  arg1 = (chrono::vehicle::ChAdaptiveSpeedController *)jarg1; 
  {
    try {
      result = (bool)((chrono::vehicle::ChAdaptiveSpeedController const *)arg1)->IsDataAvailable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAdaptiveSpeedController_WriteOutputFile(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChAdaptiveSpeedController *arg1 = (chrono::vehicle::ChAdaptiveSpeedController *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChAdaptiveSpeedController *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->WriteOutputFile((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPatchList_Clear(void * jarg1) {
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPatchList_Add(void * jarg1, void * jarg2) {
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *) 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > tempnull2 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg1; 
  arg2 = jarg2 ? (std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > *)jarg2 : &tempnull2; 
  {
    try {
      (arg1)->push_back((std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChPatchList_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *) 0 ;
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::size_type result;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg1; 
  {
    try {
      result = ((std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > const *)arg1)->size();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChPatchList_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *) 0 ;
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::size_type result;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg1; 
  {
    try {
      result = ((std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPatchList_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *) 0 ;
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::size_type arg2 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPatchList__SWIG_0() {
  void * jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *result = 0 ;
  
  {
    try {
      result = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)new std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPatchList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg1 = 0 ;
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)new std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >((std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChPatchList__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)new_std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChPatchList_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > result;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChPatchList_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPatchList_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > tempnull3 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > *)jarg3 : &tempnull3; 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__setitem(arg1,arg2,(std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPatchList_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *) 0 ;
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > const & is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__AddRange(arg1,(std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChPatchList_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPatchList_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > tempnull3 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > *)jarg3 : &tempnull3; 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__Insert(arg1,arg2,(std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPatchList_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPatchList_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPatchList_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChPatchList_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > *arg1 = 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > tempnull1 ;
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > *)jarg1 : &tempnull1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__Repeat((std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPatchList_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg1; 
  {
    try {
      std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__Reverse__SWIG_0(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPatchList_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPatchList_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_chrono_vehicle_RigidTerrain_Patch_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChPatchList(void * jarg1) {
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChTerrain() {
  void * jresult ;
  chrono::vehicle::ChTerrain *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::ChTerrain *)new chrono::vehicle::ChTerrain();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChTerrain >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTerrain(void * jarg1) {
  chrono::vehicle::ChTerrain *arg1 = (chrono::vehicle::ChTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTerrain > *)jarg1;
  arg1 = (chrono::vehicle::ChTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTerrain_Synchronize(void * jarg1, double jarg2) {
  chrono::vehicle::ChTerrain *arg1 = (chrono::vehicle::ChTerrain *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTerrain > *)jarg1;
  arg1 = (chrono::vehicle::ChTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Synchronize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTerrain_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::ChTerrain *arg1 = (chrono::vehicle::ChTerrain *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTerrain > *)jarg1;
  arg1 = (chrono::vehicle::ChTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTerrain_GetHeight(void * jarg1, void * jarg2) {
  double jresult ;
  chrono::vehicle::ChTerrain *arg1 = (chrono::vehicle::ChTerrain *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTerrain const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg1;
  arg1 = (chrono::vehicle::ChTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)((chrono::vehicle::ChTerrain const *)arg1)->GetHeight((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTerrain_GetNormal(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::ChTerrain *arg1 = (chrono::vehicle::ChTerrain *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTerrain const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg1;
  arg1 = (chrono::vehicle::ChTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = ((chrono::vehicle::ChTerrain const *)arg1)->GetNormal((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ChTerrain_GetCoefficientFriction(void * jarg1, void * jarg2) {
  float jresult ;
  chrono::vehicle::ChTerrain *arg1 = (chrono::vehicle::ChTerrain *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTerrain const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg1;
  arg1 = (chrono::vehicle::ChTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (float)((chrono::vehicle::ChTerrain const *)arg1)->GetCoefficientFriction((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTerrain_GetProperties(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChTerrain *arg1 = (chrono::vehicle::ChTerrain *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  double *arg3 = 0 ;
  chrono::ChVector< > *arg4 = 0 ;
  float *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTerrain const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg1;
  arg1 = (chrono::vehicle::ChTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  arg4 = (chrono::ChVector< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > & is null", 0);
    return ;
  } 
  arg5 = (float *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return ;
  } 
  {
    try {
      ((chrono::vehicle::ChTerrain const *)arg1)->GetProperties((chrono::ChVector< > const &)*arg2,*arg3,*arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTerrain_RegisterHeightFunctor(void * jarg1, void * jarg2) {
  chrono::vehicle::ChTerrain *arg1 = (chrono::vehicle::ChTerrain *) 0 ;
  SwigValueWrapper< std::shared_ptr< chrono::vehicle::ChTerrain::HeightFunctor > > arg2 ;
  std::shared_ptr< chrono::vehicle::ChTerrain > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTerrain::HeightFunctor > *argp2 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTerrain > *)jarg1;
  arg1 = (chrono::vehicle::ChTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (std::shared_ptr< chrono::vehicle::ChTerrain::HeightFunctor > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< chrono::vehicle::ChTerrain::HeightFunctor >", 0);
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->RegisterHeightFunctor(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTerrain_RegisterNormalFunctor(void * jarg1, void * jarg2) {
  chrono::vehicle::ChTerrain *arg1 = (chrono::vehicle::ChTerrain *) 0 ;
  SwigValueWrapper< std::shared_ptr< chrono::vehicle::ChTerrain::NormalFunctor > > arg2 ;
  std::shared_ptr< chrono::vehicle::ChTerrain > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTerrain::NormalFunctor > *argp2 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTerrain > *)jarg1;
  arg1 = (chrono::vehicle::ChTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (std::shared_ptr< chrono::vehicle::ChTerrain::NormalFunctor > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< chrono::vehicle::ChTerrain::NormalFunctor >", 0);
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->RegisterNormalFunctor(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTerrain_RegisterFrictionFunctor(void * jarg1, void * jarg2) {
  chrono::vehicle::ChTerrain *arg1 = (chrono::vehicle::ChTerrain *) 0 ;
  SwigValueWrapper< std::shared_ptr< chrono::vehicle::ChTerrain::FrictionFunctor > > arg2 ;
  std::shared_ptr< chrono::vehicle::ChTerrain > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTerrain::FrictionFunctor > *argp2 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTerrain > *)jarg1;
  arg1 = (chrono::vehicle::ChTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (std::shared_ptr< chrono::vehicle::ChTerrain::FrictionFunctor > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< chrono::vehicle::ChTerrain::FrictionFunctor >", 0);
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->RegisterFrictionFunctor(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HeightFunctor(void * jarg1) {
  chrono::vehicle::ChTerrain::HeightFunctor *arg1 = (chrono::vehicle::ChTerrain::HeightFunctor *) 0 ;
  
  arg1 = (chrono::vehicle::ChTerrain::HeightFunctor *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NormalFunctor(void * jarg1) {
  chrono::vehicle::ChTerrain::NormalFunctor *arg1 = (chrono::vehicle::ChTerrain::NormalFunctor *) 0 ;
  
  arg1 = (chrono::vehicle::ChTerrain::NormalFunctor *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FrictionFunctor(void * jarg1) {
  chrono::vehicle::ChTerrain::FrictionFunctor *arg1 = (chrono::vehicle::ChTerrain::FrictionFunctor *) 0 ;
  
  arg1 = (chrono::vehicle::ChTerrain::FrictionFunctor *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FlatTerrain__SWIG_0(double jarg1, float jarg2) {
  void * jresult ;
  double arg1 ;
  float arg2 ;
  chrono::vehicle::FlatTerrain *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      result = (chrono::vehicle::FlatTerrain *)new chrono::vehicle::FlatTerrain(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::FlatTerrain >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FlatTerrain__SWIG_1(double jarg1) {
  void * jresult ;
  double arg1 ;
  chrono::vehicle::FlatTerrain *result = 0 ;
  
  arg1 = (double)jarg1; 
  {
    try {
      result = (chrono::vehicle::FlatTerrain *)new chrono::vehicle::FlatTerrain(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::FlatTerrain >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FlatTerrain(void * jarg1) {
  chrono::vehicle::FlatTerrain *arg1 = (chrono::vehicle::FlatTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::FlatTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::FlatTerrain > *)jarg1;
  arg1 = (chrono::vehicle::FlatTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_FlatTerrain_GetHeight(void * jarg1, void * jarg2) {
  double jresult ;
  chrono::vehicle::FlatTerrain *arg1 = (chrono::vehicle::FlatTerrain *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::FlatTerrain const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::FlatTerrain > *)jarg1;
  arg1 = (chrono::vehicle::FlatTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)((chrono::vehicle::FlatTerrain const *)arg1)->GetHeight((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FlatTerrain_GetNormal(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::FlatTerrain *arg1 = (chrono::vehicle::FlatTerrain *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::FlatTerrain const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::FlatTerrain > *)jarg1;
  arg1 = (chrono::vehicle::FlatTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = ((chrono::vehicle::FlatTerrain const *)arg1)->GetNormal((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FlatTerrain_GetCoefficientFriction(void * jarg1, void * jarg2) {
  float jresult ;
  chrono::vehicle::FlatTerrain *arg1 = (chrono::vehicle::FlatTerrain *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::FlatTerrain const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::FlatTerrain > *)jarg1;
  arg1 = (chrono::vehicle::FlatTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (float)((chrono::vehicle::FlatTerrain const *)arg1)->GetCoefficientFriction((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RigidTerrain__SWIG_0(void * jarg1) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::RigidTerrain *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::RigidTerrain *)new chrono::vehicle::RigidTerrain(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::RigidTerrain >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RigidTerrain__SWIG_1(void * jarg1, const char * jarg2) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::RigidTerrain *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (chrono::vehicle::RigidTerrain *)new chrono::vehicle::RigidTerrain(arg1,(std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::RigidTerrain >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RigidTerrain(void * jarg1) {
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidTerrain_AddPatch__SWIG_0(void * jarg1, void * jarg2, void * jarg3, double jarg4, double jarg5, double jarg6, unsigned int jarg7, double jarg8, unsigned int jarg9) {
  void * jresult ;
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  std::shared_ptr< chrono::ChMaterialSurface > arg2 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  double arg8 ;
  bool arg9 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChMaterialSurface > *)jarg2; 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return 0;
  } 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (double)jarg8; 
  arg9 = jarg9 ? true : false; 
  {
    try {
      result = (arg1)->AddPatch(arg2,(chrono::ChCoordsys< > const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidTerrain_AddPatch__SWIG_1(void * jarg1, void * jarg2, void * jarg3, double jarg4, double jarg5, double jarg6, unsigned int jarg7, double jarg8) {
  void * jresult ;
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  std::shared_ptr< chrono::ChMaterialSurface > arg2 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  double arg8 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChMaterialSurface > *)jarg2; 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return 0;
  } 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (double)jarg8; 
  {
    try {
      result = (arg1)->AddPatch(arg2,(chrono::ChCoordsys< > const &)*arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidTerrain_AddPatch__SWIG_2(void * jarg1, void * jarg2, void * jarg3, double jarg4, double jarg5, double jarg6, unsigned int jarg7) {
  void * jresult ;
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  std::shared_ptr< chrono::ChMaterialSurface > arg2 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChMaterialSurface > *)jarg2; 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return 0;
  } 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = (arg1)->AddPatch(arg2,(chrono::ChCoordsys< > const &)*arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidTerrain_AddPatch__SWIG_3(void * jarg1, void * jarg2, void * jarg3, double jarg4, double jarg5, double jarg6) {
  void * jresult ;
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  std::shared_ptr< chrono::ChMaterialSurface > arg2 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChMaterialSurface > *)jarg2; 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return 0;
  } 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (arg1)->AddPatch(arg2,(chrono::ChCoordsys< > const &)*arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidTerrain_AddPatch__SWIG_4(void * jarg1, void * jarg2, void * jarg3, double jarg4, double jarg5) {
  void * jresult ;
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  std::shared_ptr< chrono::ChMaterialSurface > arg2 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChMaterialSurface > *)jarg2; 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return 0;
  } 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (arg1)->AddPatch(arg2,(chrono::ChCoordsys< > const &)*arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidTerrain_AddPatch__SWIG_5(void * jarg1, void * jarg2, void * jarg3, const char * jarg4, unsigned int jarg5, double jarg6, unsigned int jarg7) {
  void * jresult ;
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  std::shared_ptr< chrono::ChMaterialSurface > arg2 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChMaterialSurface > *)jarg2; 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return 0;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = (arg1)->AddPatch(arg2,(chrono::ChCoordsys< > const &)*arg3,(std::string const &)*arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidTerrain_AddPatch__SWIG_6(void * jarg1, void * jarg2, void * jarg3, const char * jarg4, unsigned int jarg5, double jarg6) {
  void * jresult ;
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  std::shared_ptr< chrono::ChMaterialSurface > arg2 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChMaterialSurface > *)jarg2; 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return 0;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (arg1)->AddPatch(arg2,(chrono::ChCoordsys< > const &)*arg3,(std::string const &)*arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidTerrain_AddPatch__SWIG_7(void * jarg1, void * jarg2, void * jarg3, const char * jarg4, unsigned int jarg5) {
  void * jresult ;
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  std::shared_ptr< chrono::ChMaterialSurface > arg2 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChMaterialSurface > *)jarg2; 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return 0;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (arg1)->AddPatch(arg2,(chrono::ChCoordsys< > const &)*arg3,(std::string const &)*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidTerrain_AddPatch__SWIG_8(void * jarg1, void * jarg2, void * jarg3, const char * jarg4) {
  void * jresult ;
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  std::shared_ptr< chrono::ChMaterialSurface > arg2 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChMaterialSurface > *)jarg2; 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return 0;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (arg1)->AddPatch(arg2,(chrono::ChCoordsys< > const &)*arg3,(std::string const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidTerrain_AddPatch__SWIG_9(void * jarg1, void * jarg2, void * jarg3, const char * jarg4, double jarg5, double jarg6, double jarg7, double jarg8, unsigned int jarg9, double jarg10, unsigned int jarg11) {
  void * jresult ;
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  std::shared_ptr< chrono::ChMaterialSurface > arg2 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  bool arg9 ;
  double arg10 ;
  bool arg11 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChMaterialSurface > *)jarg2; 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return 0;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (double)jarg10; 
  arg11 = jarg11 ? true : false; 
  {
    try {
      result = (arg1)->AddPatch(arg2,(chrono::ChCoordsys< > const &)*arg3,(std::string const &)*arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidTerrain_AddPatch__SWIG_10(void * jarg1, void * jarg2, void * jarg3, const char * jarg4, double jarg5, double jarg6, double jarg7, double jarg8, unsigned int jarg9, double jarg10) {
  void * jresult ;
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  std::shared_ptr< chrono::ChMaterialSurface > arg2 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  bool arg9 ;
  double arg10 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChMaterialSurface > *)jarg2; 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return 0;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (double)jarg10; 
  {
    try {
      result = (arg1)->AddPatch(arg2,(chrono::ChCoordsys< > const &)*arg3,(std::string const &)*arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidTerrain_AddPatch__SWIG_11(void * jarg1, void * jarg2, void * jarg3, const char * jarg4, double jarg5, double jarg6, double jarg7, double jarg8, unsigned int jarg9) {
  void * jresult ;
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  std::shared_ptr< chrono::ChMaterialSurface > arg2 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  bool arg9 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChMaterialSurface > *)jarg2; 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return 0;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = jarg9 ? true : false; 
  {
    try {
      result = (arg1)->AddPatch(arg2,(chrono::ChCoordsys< > const &)*arg3,(std::string const &)*arg4,arg5,arg6,arg7,arg8,arg9);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidTerrain_AddPatch__SWIG_12(void * jarg1, void * jarg2, void * jarg3, const char * jarg4, double jarg5, double jarg6, double jarg7, double jarg8) {
  void * jresult ;
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  std::shared_ptr< chrono::ChMaterialSurface > arg2 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChMaterialSurface > *)jarg2; 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return 0;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    try {
      result = (arg1)->AddPatch(arg2,(chrono::ChCoordsys< > const &)*arg3,(std::string const &)*arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidTerrain_Initialize(void * jarg1) {
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Initialize();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidTerrain_GetPatches(void * jarg1) {
  void * jresult ;
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > *) &((chrono::vehicle::RigidTerrain const *)arg1)->GetPatches();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidTerrain_UseLocationDependentFriction(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->UseLocationDependentFriction(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_RigidTerrain_GetHeight(void * jarg1, void * jarg2) {
  double jresult ;
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)((chrono::vehicle::RigidTerrain const *)arg1)->GetHeight((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidTerrain_GetNormal(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = ((chrono::vehicle::RigidTerrain const *)arg1)->GetNormal((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidTerrain_GetCoefficientFriction(void * jarg1, void * jarg2) {
  float jresult ;
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (float)((chrono::vehicle::RigidTerrain const *)arg1)->GetCoefficientFriction((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidTerrain_GetProperties(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  double *arg3 = 0 ;
  chrono::ChVector< > *arg4 = 0 ;
  float *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  arg4 = (chrono::ChVector< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > & is null", 0);
    return ;
  } 
  arg5 = (float *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return ;
  } 
  {
    try {
      ((chrono::vehicle::RigidTerrain const *)arg1)->GetProperties((chrono::ChVector< > const &)*arg2,*arg3,*arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidTerrain_ExportMeshPovray__SWIG_0(void * jarg1, const char * jarg2, unsigned int jarg3) {
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->ExportMeshPovray((std::string const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidTerrain_ExportMeshPovray__SWIG_1(void * jarg1, const char * jarg2) {
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->ExportMeshPovray((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidTerrain_ExportMeshWavefront(void * jarg1, const char * jarg2) {
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->ExportMeshWavefront((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidTerrain_FindPoint(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  chrono::ChVector< > arg2 ;
  double *arg3 = 0 ;
  chrono::ChVector< > *arg4 = 0 ;
  float *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain const > *smartarg1 = 0 ;
  chrono::ChVector< > const *argp2 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (chrono::ChVector< > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null chrono::ChVector< > const", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return 0;
  } 
  arg4 = (chrono::ChVector< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > & is null", 0);
    return 0;
  } 
  arg5 = (float *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((chrono::vehicle::RigidTerrain const *)arg1)->FindPoint(arg2,*arg3,*arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidTerrain_SetCollisionFamily(void * jarg1, int jarg2) {
  chrono::vehicle::RigidTerrain *arg1 = (chrono::vehicle::RigidTerrain *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->SetCollisionFamily(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Patch(void * jarg1) {
  chrono::vehicle::RigidTerrain::Patch *arg1 = (chrono::vehicle::RigidTerrain::Patch *) 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain::Patch > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain::Patch *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Patch_SetColor(void * jarg1, void * jarg2) {
  chrono::vehicle::RigidTerrain::Patch *arg1 = (chrono::vehicle::RigidTerrain::Patch *) 0 ;
  chrono::ChColor *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain::Patch > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain::Patch *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChColor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChColor const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetColor((chrono::ChColor const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Patch_SetTexture__SWIG_0(void * jarg1, const char * jarg2, float jarg3, float jarg4) {
  chrono::vehicle::RigidTerrain::Patch *arg1 = (chrono::vehicle::RigidTerrain::Patch *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain::Patch > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain::Patch *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      (arg1)->SetTexture((std::string const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Patch_SetTexture__SWIG_1(void * jarg1, const char * jarg2, float jarg3) {
  chrono::vehicle::RigidTerrain::Patch *arg1 = (chrono::vehicle::RigidTerrain::Patch *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain::Patch > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain::Patch *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  {
    try {
      (arg1)->SetTexture((std::string const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Patch_SetTexture__SWIG_2(void * jarg1, const char * jarg2) {
  chrono::vehicle::RigidTerrain::Patch *arg1 = (chrono::vehicle::RigidTerrain::Patch *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain::Patch > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain::Patch *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->SetTexture((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Patch_GetGroundBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::RigidTerrain::Patch *arg1 = (chrono::vehicle::RigidTerrain::Patch *) 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RigidTerrain::Patch > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain::Patch *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::RigidTerrain::Patch const *)arg1)->GetGroundBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Patch_Initialize(void * jarg1) {
  chrono::vehicle::RigidTerrain::Patch *arg1 = (chrono::vehicle::RigidTerrain::Patch *) 0 ;
  std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTerrain::Patch > *)jarg1;
  arg1 = (chrono::vehicle::RigidTerrain::Patch *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Initialize();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_intp() {
  void * jresult ;
  int *result = 0 ;
  
  {
    try {
      result = (int *)new_intp();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_copy_intp(int jarg1) {
  void * jresult ;
  int arg1 ;
  int *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      result = (int *)copy_intp(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_intp(void * jarg1) {
  int *arg1 = (int *) 0 ;
  
  arg1 = (int *)jarg1; 
  {
    try {
      delete_intp(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_intp_assign(void * jarg1, int jarg2) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  
  arg1 = (int *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      intp_assign(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_intp_value(void * jarg1) {
  int jresult ;
  int *arg1 = (int *) 0 ;
  int result;
  
  arg1 = (int *)jarg1; 
  {
    try {
      result = (int)intp_value(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_doublep() {
  void * jresult ;
  double *result = 0 ;
  
  {
    try {
      result = (double *)new_doublep();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_copy_doublep(double jarg1) {
  void * jresult ;
  double arg1 ;
  double *result = 0 ;
  
  arg1 = (double)jarg1; 
  {
    try {
      result = (double *)copy_doublep(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_doublep(void * jarg1) {
  double *arg1 = (double *) 0 ;
  
  arg1 = (double *)jarg1; 
  {
    try {
      delete_doublep(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_doublep_assign(void * jarg1, double jarg2) {
  double *arg1 = (double *) 0 ;
  double arg2 ;
  
  arg1 = (double *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      doublep_assign(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_doublep_value(void * jarg1) {
  double jresult ;
  double *arg1 = (double *) 0 ;
  double result;
  
  arg1 = (double *)jarg1; 
  {
    try {
      result = (double)doublep_value(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SCMTerrain__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::SCMTerrain *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::SCMTerrain *)new chrono::vehicle::SCMTerrain(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SCMTerrain >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SCMTerrain__SWIG_1(void * jarg1) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::SCMTerrain *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::SCMTerrain *)new chrono::vehicle::SCMTerrain(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SCMTerrain >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SCMTerrain(void * jarg1) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_SetPlane(void * jarg1, void * jarg2) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetPlane((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCMTerrain_GetPlane(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  chrono::ChCoordsys< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChCoordsys< > *) &((chrono::vehicle::SCMTerrain const *)arg1)->GetPlane();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_SetSoilParameters(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  {
    try {
      (arg1)->SetSoilParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_EnableBulldozing(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->EnableBulldozing(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_SetBulldozingParameters__SWIG_0(void * jarg1, double jarg2, double jarg3, int jarg4, int jarg5) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  int arg5 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      (arg1)->SetBulldozingParameters(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_SetBulldozingParameters__SWIG_1(void * jarg1, double jarg2, double jarg3, int jarg4) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      (arg1)->SetBulldozingParameters(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_SetBulldozingParameters__SWIG_2(void * jarg1, double jarg2, double jarg3) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->SetBulldozingParameters(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_SetBulldozingParameters__SWIG_3(void * jarg1, double jarg2) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetBulldozingParameters(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_SetTestHeight(void * jarg1, double jarg2) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetTestHeight(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_SCMTerrain_GetTestHeight(void * jarg1) {
  double jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SCMTerrain const *)arg1)->GetTestHeight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_SetPlotType(void * jarg1, int jarg2, double jarg3, double jarg4) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  chrono::vehicle::SCMTerrain::DataPlotType arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::SCMTerrain::DataPlotType)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->SetPlotType(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_SetColor(void * jarg1, void * jarg2) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  chrono::ChColor *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChColor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChColor const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetColor((chrono::ChColor const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_SetTexture__SWIG_0(void * jarg1, const char * jarg2, float jarg3, float jarg4) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::string arg2 ;
  float arg3 ;
  float arg4 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      (arg1)->SetTexture(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_SetTexture__SWIG_1(void * jarg1, const char * jarg2, float jarg3) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::string arg2 ;
  float arg3 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (float)jarg3; 
  {
    try {
      (arg1)->SetTexture(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_SetTexture__SWIG_2(void * jarg1, const char * jarg2) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::string arg2 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  {
    try {
      (arg1)->SetTexture(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_AddMovingPatch(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::ChBody > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  chrono::ChVector< > *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBody > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg4 = (chrono::ChVector< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->AddMovingPatch(arg2,(chrono::ChVector< > const &)*arg3,(chrono::ChVector< > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_RegisterSoilParametersCallback(void * jarg1, void * jarg2) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain::SoilParametersCallback > arg2 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::SCMTerrain::SoilParametersCallback > *)jarg2; 
  {
    try {
      (arg1)->RegisterSoilParametersCallback(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_SCMTerrain_GetInitHeight(void * jarg1, void * jarg2) {
  double jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)((chrono::vehicle::SCMTerrain const *)arg1)->GetInitHeight((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCMTerrain_GetInitNormal(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = ((chrono::vehicle::SCMTerrain const *)arg1)->GetInitNormal((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SCMTerrain_GetHeight(void * jarg1, void * jarg2) {
  double jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)((chrono::vehicle::SCMTerrain const *)arg1)->GetHeight((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCMTerrain_GetNormal(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = ((chrono::vehicle::SCMTerrain const *)arg1)->GetNormal((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SCMTerrain_GetCoefficientFriction(void * jarg1, void * jarg2) {
  float jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (float)((chrono::vehicle::SCMTerrain const *)arg1)->GetCoefficientFriction((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCMTerrain_GetNodeInfo(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  chrono::vehicle::SCMTerrain::NodeInfo result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = ((chrono::vehicle::SCMTerrain const *)arg1)->GetNodeInfo((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::vehicle::SCMTerrain::NodeInfo(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCMTerrain_GetMesh(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChTriangleMeshShape > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::SCMTerrain const *)arg1)->GetMesh();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChTriangleMeshShape >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_SetMeshWireframe(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetMeshWireframe(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_WriteMesh(void * jarg1, const char * jarg2) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      ((chrono::vehicle::SCMTerrain const *)arg1)->WriteMesh((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_Initialize__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_Initialize__SWIG_1(void * jarg1, const char * jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize((std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_Initialize__SWIG_2(void * jarg1, const char * jarg2, double jarg3) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->Initialize((std::string const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCMTerrain_GetModifiedNodes__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< std::pair< ChVector2< int >,double > > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = ((chrono::vehicle::SCMTerrain const *)arg1)->GetModifiedNodes(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< chrono::vehicle::SCMTerrain::NodeLevel >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCMTerrain_GetModifiedNodes__SWIG_1(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< std::pair< ChVector2< int >,double > > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::SCMTerrain const *)arg1)->GetModifiedNodes();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< chrono::vehicle::SCMTerrain::NodeLevel >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_SetModifiedNodes(void * jarg1, void * jarg2) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::vector< chrono::vehicle::SCMTerrain::NodeLevel > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< chrono::vehicle::SCMTerrain::NodeLevel > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< chrono::vehicle::SCMTerrain::NodeLevel > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetModifiedNodes((std::vector< chrono::vehicle::SCMTerrain::NodeLevel > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCMTerrain_GetContactForce(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::ChBody > arg2 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  chrono::vehicle::TerrainForce result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBody > *)jarg2; 
  {
    try {
      result = ((chrono::vehicle::SCMTerrain const *)arg1)->GetContactForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::vehicle::TerrainForce(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SCMTerrain_GetNumRayCasts(void * jarg1) {
  int jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::SCMTerrain const *)arg1)->GetNumRayCasts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SCMTerrain_GetNumRayHits(void * jarg1) {
  int jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::SCMTerrain const *)arg1)->GetNumRayHits();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SCMTerrain_GetNumContactPatches(void * jarg1) {
  int jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::SCMTerrain const *)arg1)->GetNumContactPatches();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SCMTerrain_GetNumErosionNodes(void * jarg1) {
  int jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::SCMTerrain const *)arg1)->GetNumErosionNodes();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SCMTerrain_GetTimerMovingPatches(void * jarg1) {
  double jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SCMTerrain const *)arg1)->GetTimerMovingPatches();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SCMTerrain_GetTimerRayTesting(void * jarg1) {
  double jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SCMTerrain const *)arg1)->GetTimerRayTesting();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SCMTerrain_GetTimerRayCasting(void * jarg1) {
  double jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SCMTerrain const *)arg1)->GetTimerRayCasting();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SCMTerrain_GetTimerContactPatches(void * jarg1) {
  double jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SCMTerrain const *)arg1)->GetTimerContactPatches();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SCMTerrain_GetTimerContactForces(void * jarg1) {
  double jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SCMTerrain const *)arg1)->GetTimerContactForces();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SCMTerrain_GetTimerBulldozing(void * jarg1) {
  double jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SCMTerrain const *)arg1)->GetTimerBulldozing();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SCMTerrain_GetTimerVisUpdate(void * jarg1) {
  double jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SCMTerrain const *)arg1)->GetTimerVisUpdate();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMTerrain_PrintStepStatistics(void * jarg1, void * jarg2) {
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((chrono::vehicle::SCMTerrain const *)arg1)->PrintStepStatistics(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCMTerrain_GetSCMLoader(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SCMTerrain *arg1 = (chrono::vehicle::SCMTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::SCMLoader > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SCMTerrain > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::SCMTerrain const *)arg1)->GetSCMLoader();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::SCMLoader >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodeInfo_sinkage_set(void * jarg1, double jarg2) {
  chrono::vehicle::SCMTerrain::NodeInfo *arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sinkage = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NodeInfo_sinkage_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::SCMTerrain::NodeInfo *arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *)jarg1; 
  result = (double) ((arg1)->sinkage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodeInfo_sinkage_plastic_set(void * jarg1, double jarg2) {
  chrono::vehicle::SCMTerrain::NodeInfo *arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sinkage_plastic = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NodeInfo_sinkage_plastic_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::SCMTerrain::NodeInfo *arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *)jarg1; 
  result = (double) ((arg1)->sinkage_plastic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodeInfo_sinkage_elastic_set(void * jarg1, double jarg2) {
  chrono::vehicle::SCMTerrain::NodeInfo *arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sinkage_elastic = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NodeInfo_sinkage_elastic_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::SCMTerrain::NodeInfo *arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *)jarg1; 
  result = (double) ((arg1)->sinkage_elastic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodeInfo_sigma_set(void * jarg1, double jarg2) {
  chrono::vehicle::SCMTerrain::NodeInfo *arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sigma = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NodeInfo_sigma_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::SCMTerrain::NodeInfo *arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *)jarg1; 
  result = (double) ((arg1)->sigma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodeInfo_sigma_yield_set(void * jarg1, double jarg2) {
  chrono::vehicle::SCMTerrain::NodeInfo *arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sigma_yield = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NodeInfo_sigma_yield_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::SCMTerrain::NodeInfo *arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *)jarg1; 
  result = (double) ((arg1)->sigma_yield);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodeInfo_kshear_set(void * jarg1, double jarg2) {
  chrono::vehicle::SCMTerrain::NodeInfo *arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kshear = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NodeInfo_kshear_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::SCMTerrain::NodeInfo *arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *)jarg1; 
  result = (double) ((arg1)->kshear);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodeInfo_tau_set(void * jarg1, double jarg2) {
  chrono::vehicle::SCMTerrain::NodeInfo *arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tau = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NodeInfo_tau_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::SCMTerrain::NodeInfo *arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *)jarg1; 
  result = (double) ((arg1)->tau);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NodeInfo() {
  void * jresult ;
  chrono::vehicle::SCMTerrain::NodeInfo *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::SCMTerrain::NodeInfo *)new chrono::vehicle::SCMTerrain::NodeInfo();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NodeInfo(void * jarg1) {
  chrono::vehicle::SCMTerrain::NodeInfo *arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *) 0 ;
  
  arg1 = (chrono::vehicle::SCMTerrain::NodeInfo *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SoilParametersCallback(void * jarg1) {
  chrono::vehicle::SCMTerrain::SoilParametersCallback *arg1 = (chrono::vehicle::SCMTerrain::SoilParametersCallback *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain::SoilParametersCallback > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain::SoilParametersCallback > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain::SoilParametersCallback *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoilParametersCallback_Set(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10) {
  chrono::vehicle::SCMTerrain::SoilParametersCallback *arg1 = (chrono::vehicle::SCMTerrain::SoilParametersCallback *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  double *arg8 = 0 ;
  double *arg9 = 0 ;
  double *arg10 = 0 ;
  std::shared_ptr< chrono::vehicle::SCMTerrain::SoilParametersCallback > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMTerrain::SoilParametersCallback > *)jarg1;
  arg1 = (chrono::vehicle::SCMTerrain::SoilParametersCallback *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  arg5 = (double *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  arg6 = (double *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  arg7 = (double *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  arg8 = (double *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  arg9 = (double *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  arg10 = (double *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Set((chrono::ChVector< > const &)*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SoilParametersCallback() {
  void * jresult ;
  chrono::vehicle::SCMTerrain::SoilParametersCallback *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::SCMTerrain::SoilParametersCallback *)new SwigDirector_SoilParametersCallback();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SCMTerrain::SoilParametersCallback >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoilParametersCallback_director_connect(void *objarg, SwigDirector_SoilParametersCallback::SWIG_Callback0_t callback0) {
  std::shared_ptr< chrono::vehicle::SCMTerrain::SoilParametersCallback > *obj = (std::shared_ptr< chrono::vehicle::SCMTerrain::SoilParametersCallback > *)objarg;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_SoilParametersCallback *director = static_cast<SwigDirector_SoilParametersCallback *>(obj->operator->());
  director->swig_connect_director(callback0);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SCMContactableData(double jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  chrono::vehicle::SCMContactableData *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (chrono::vehicle::SCMContactableData *)new chrono::vehicle::SCMContactableData(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SCMContactableData(void * jarg1) {
  chrono::vehicle::SCMContactableData *arg1 = (chrono::vehicle::SCMContactableData *) 0 ;
  
  arg1 = (chrono::vehicle::SCMContactableData *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SCMLoader(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::SCMLoader *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::SCMLoader *)new chrono::vehicle::SCMLoader(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SCMLoader >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SCMLoader(void * jarg1) {
  chrono::vehicle::SCMLoader *arg1 = (chrono::vehicle::SCMLoader *) 0 ;
  std::shared_ptr< chrono::vehicle::SCMLoader > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMLoader > *)jarg1;
  arg1 = (chrono::vehicle::SCMLoader *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMLoader_Initialize__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::SCMLoader *arg1 = (chrono::vehicle::SCMLoader *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::SCMLoader > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMLoader > *)jarg1;
  arg1 = (chrono::vehicle::SCMLoader *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMLoader_Initialize__SWIG_1(void * jarg1, const char * jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7) {
  chrono::vehicle::SCMLoader *arg1 = (chrono::vehicle::SCMLoader *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::SCMLoader > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMLoader > *)jarg1;
  arg1 = (chrono::vehicle::SCMLoader *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize((std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCMLoader_Initialize__SWIG_2(void * jarg1, const char * jarg2, double jarg3) {
  chrono::vehicle::SCMLoader *arg1 = (chrono::vehicle::SCMLoader *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::SCMLoader > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SCMLoader > *)jarg1;
  arg1 = (chrono::vehicle::SCMLoader *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->Initialize((std::string const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSteering(void * jarg1) {
  chrono::vehicle::ChSteering *arg1 = (chrono::vehicle::ChSteering *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSteering > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSteering > *)jarg1;
  arg1 = (chrono::vehicle::ChSteering *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSteering_GetRelTransform(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChSteering *arg1 = (chrono::vehicle::ChSteering *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSteering const > *smartarg1 = 0 ;
  chrono::ChFrame< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSteering > *)jarg1;
  arg1 = (chrono::vehicle::ChSteering *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChFrame< > *) &((chrono::vehicle::ChSteering const *)arg1)->GetRelTransform();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< const chrono::ChFrame<double> >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSteering_GetSteeringLink(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChSteering *arg1 = (chrono::vehicle::ChSteering *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSteering const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSteering > *)jarg1;
  arg1 = (chrono::vehicle::ChSteering *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSteering const *)arg1)->GetSteeringLink();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSteering_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChSteering *arg1 = (chrono::vehicle::ChSteering *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  chrono::ChQuaternion< > *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSteering > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSteering > *)jarg1;
  arg1 = (chrono::vehicle::ChSteering *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg4 = (chrono::ChQuaternion< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChQuaternion< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3,(chrono::ChQuaternion< > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSteering_Synchronize(void * jarg1, double jarg2, void * jarg3) {
  chrono::vehicle::ChSteering *arg1 = (chrono::vehicle::ChSteering *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSteering > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSteering > *)jarg1;
  arg1 = (chrono::vehicle::ChSteering *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSteering_LogConstraintViolations(void * jarg1) {
  chrono::vehicle::ChSteering *arg1 = (chrono::vehicle::ChSteering *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSteering > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSteering > *)jarg1;
  arg1 = (chrono::vehicle::ChSteering *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogConstraintViolations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChPitmanArm(void * jarg1) {
  chrono::vehicle::ChPitmanArm *arg1 = (chrono::vehicle::ChPitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPitmanArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::ChPitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChPitmanArm_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChPitmanArm *arg1 = (chrono::vehicle::ChPitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPitmanArm const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::ChPitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChPitmanArm const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPitmanArm_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChPitmanArm *arg1 = (chrono::vehicle::ChPitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  chrono::ChQuaternion< > *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::ChPitmanArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::ChPitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg4 = (chrono::ChQuaternion< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChQuaternion< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3,(chrono::ChQuaternion< > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPitmanArm_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChPitmanArm *arg1 = (chrono::vehicle::ChPitmanArm *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChPitmanArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::ChPitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPitmanArm_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChPitmanArm *arg1 = (chrono::vehicle::ChPitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPitmanArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::ChPitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPitmanArm_Synchronize(void * jarg1, double jarg2, void * jarg3) {
  chrono::vehicle::ChPitmanArm *arg1 = (chrono::vehicle::ChPitmanArm *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChPitmanArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::ChPitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPitmanArm_LogConstraintViolations(void * jarg1) {
  chrono::vehicle::ChPitmanArm *arg1 = (chrono::vehicle::ChPitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPitmanArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::ChPitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogConstraintViolations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChPitmanArmShafts(void * jarg1) {
  chrono::vehicle::ChPitmanArmShafts *arg1 = (chrono::vehicle::ChPitmanArmShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPitmanArmShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPitmanArmShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChPitmanArmShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChPitmanArmShafts_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChPitmanArmShafts *arg1 = (chrono::vehicle::ChPitmanArmShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPitmanArmShafts const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPitmanArmShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChPitmanArmShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChPitmanArmShafts const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPitmanArmShafts_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChPitmanArmShafts *arg1 = (chrono::vehicle::ChPitmanArmShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  chrono::ChQuaternion< > *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::ChPitmanArmShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPitmanArmShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChPitmanArmShafts *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg4 = (chrono::ChQuaternion< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChQuaternion< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3,(chrono::ChQuaternion< > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPitmanArmShafts_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChPitmanArmShafts *arg1 = (chrono::vehicle::ChPitmanArmShafts *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChPitmanArmShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPitmanArmShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChPitmanArmShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPitmanArmShafts_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChPitmanArmShafts *arg1 = (chrono::vehicle::ChPitmanArmShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPitmanArmShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPitmanArmShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChPitmanArmShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPitmanArmShafts_Synchronize(void * jarg1, double jarg2, void * jarg3) {
  chrono::vehicle::ChPitmanArmShafts *arg1 = (chrono::vehicle::ChPitmanArmShafts *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChPitmanArmShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPitmanArmShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChPitmanArmShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPitmanArmShafts_LogConstraintViolations(void * jarg1) {
  chrono::vehicle::ChPitmanArmShafts *arg1 = (chrono::vehicle::ChPitmanArmShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPitmanArmShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPitmanArmShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChPitmanArmShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogConstraintViolations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPitmanArmShafts_GetShaftInformation(void * jarg1, double jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  chrono::vehicle::ChPitmanArmShafts *arg1 = (chrono::vehicle::ChPitmanArmShafts *) 0 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  std::vector< double > *arg5 = 0 ;
  std::vector< double > *arg6 = 0 ;
  std::vector< double > *arg7 = 0 ;
  chrono::ChVector< > *arg8 = 0 ;
  std::shared_ptr< chrono::vehicle::ChPitmanArmShafts const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPitmanArmShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChPitmanArmShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  arg5 = (std::vector< double > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg6 = (std::vector< double > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg7 = (std::vector< double > *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg8 = (chrono::ChVector< > *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > & is null", 0);
    return ;
  } 
  {
    try {
      ((chrono::vehicle::ChPitmanArmShafts const *)arg1)->GetShaftInformation(arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChRackPinion(void * jarg1) {
  chrono::vehicle::ChRackPinion *arg1 = (chrono::vehicle::ChRackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRackPinion > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRackPinion > *)jarg1;
  arg1 = (chrono::vehicle::ChRackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChRackPinion_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChRackPinion *arg1 = (chrono::vehicle::ChRackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRackPinion const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRackPinion > *)jarg1;
  arg1 = (chrono::vehicle::ChRackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChRackPinion const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRackPinion_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChRackPinion *arg1 = (chrono::vehicle::ChRackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  chrono::ChQuaternion< > *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::ChRackPinion > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRackPinion > *)jarg1;
  arg1 = (chrono::vehicle::ChRackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg4 = (chrono::ChQuaternion< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChQuaternion< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3,(chrono::ChQuaternion< > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRackPinion_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChRackPinion *arg1 = (chrono::vehicle::ChRackPinion *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChRackPinion > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRackPinion > *)jarg1;
  arg1 = (chrono::vehicle::ChRackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRackPinion_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChRackPinion *arg1 = (chrono::vehicle::ChRackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRackPinion > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRackPinion > *)jarg1;
  arg1 = (chrono::vehicle::ChRackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRackPinion_Synchronize(void * jarg1, double jarg2, void * jarg3) {
  chrono::vehicle::ChRackPinion *arg1 = (chrono::vehicle::ChRackPinion *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChRackPinion > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRackPinion > *)jarg1;
  arg1 = (chrono::vehicle::ChRackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRackPinion_LogConstraintViolations(void * jarg1) {
  chrono::vehicle::ChRackPinion *arg1 = (chrono::vehicle::ChRackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRackPinion > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRackPinion > *)jarg1;
  arg1 = (chrono::vehicle::ChRackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogConstraintViolations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChRotaryArm(void * jarg1) {
  chrono::vehicle::ChRotaryArm *arg1 = (chrono::vehicle::ChRotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRotaryArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::ChRotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChRotaryArm_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChRotaryArm *arg1 = (chrono::vehicle::ChRotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRotaryArm const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::ChRotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChRotaryArm const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRotaryArm_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChRotaryArm *arg1 = (chrono::vehicle::ChRotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  chrono::ChQuaternion< > *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::ChRotaryArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::ChRotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg4 = (chrono::ChQuaternion< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChQuaternion< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3,(chrono::ChQuaternion< > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRotaryArm_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChRotaryArm *arg1 = (chrono::vehicle::ChRotaryArm *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChRotaryArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::ChRotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRotaryArm_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChRotaryArm *arg1 = (chrono::vehicle::ChRotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRotaryArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::ChRotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRotaryArm_Synchronize(void * jarg1, double jarg2, void * jarg3) {
  chrono::vehicle::ChRotaryArm *arg1 = (chrono::vehicle::ChRotaryArm *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChRotaryArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::ChRotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRotaryArm_LogConstraintViolations(void * jarg1) {
  chrono::vehicle::ChRotaryArm *arg1 = (chrono::vehicle::ChRotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRotaryArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::ChRotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogConstraintViolations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PitmanArm__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::PitmanArm *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::PitmanArm *)new chrono::vehicle::PitmanArm((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::PitmanArm >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PitmanArm__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::PitmanArm *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::PitmanArm *)new chrono::vehicle::PitmanArm((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::PitmanArm >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PitmanArm(void * jarg1) {
  chrono::vehicle::PitmanArm *arg1 = (chrono::vehicle::PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::PitmanArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_PitmanArm_getSteeringLinkMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::PitmanArm *arg1 = (chrono::vehicle::PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::PitmanArm const *)arg1)->getSteeringLinkMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PitmanArm_getPitmanArmMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::PitmanArm *arg1 = (chrono::vehicle::PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::PitmanArm const *)arg1)->getPitmanArmMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PitmanArm_getSteeringLinkRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::PitmanArm *arg1 = (chrono::vehicle::PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::PitmanArm const *)arg1)->getSteeringLinkRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PitmanArm_getPitmanArmRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::PitmanArm *arg1 = (chrono::vehicle::PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::PitmanArm const *)arg1)->getPitmanArmRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PitmanArm_getSteeringLinkInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::PitmanArm *arg1 = (chrono::vehicle::PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::PitmanArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::PitmanArm const *)arg1)->getSteeringLinkInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PitmanArm_getSteeringLinkInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::PitmanArm *arg1 = (chrono::vehicle::PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::PitmanArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::PitmanArm const *)arg1)->getSteeringLinkInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PitmanArm_getPitmanArmInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::PitmanArm *arg1 = (chrono::vehicle::PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::PitmanArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::PitmanArm const *)arg1)->getPitmanArmInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PitmanArm_getPitmanArmInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::PitmanArm *arg1 = (chrono::vehicle::PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::PitmanArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::PitmanArm const *)arg1)->getPitmanArmInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PitmanArm_getMaxAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::PitmanArm *arg1 = (chrono::vehicle::PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::PitmanArm const *)arg1)->getMaxAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RackPinion__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::RackPinion *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::RackPinion *)new chrono::vehicle::RackPinion((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::RackPinion >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RackPinion__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::RackPinion *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::RackPinion *)new chrono::vehicle::RackPinion((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::RackPinion >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RackPinion(void * jarg1) {
  chrono::vehicle::RackPinion *arg1 = (chrono::vehicle::RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::RackPinion > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_RackPinion_GetSteeringLinkMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::RackPinion *arg1 = (chrono::vehicle::RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::RackPinion const *)arg1)->GetSteeringLinkMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RackPinion_GetSteeringLinkInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::RackPinion *arg1 = (chrono::vehicle::RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::RackPinion const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::RackPinion const *)arg1)->GetSteeringLinkInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RackPinion_GetSteeringLinkCOM(void * jarg1) {
  double jresult ;
  chrono::vehicle::RackPinion *arg1 = (chrono::vehicle::RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::RackPinion const *)arg1)->GetSteeringLinkCOM();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RackPinion_GetSteeringLinkRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::RackPinion *arg1 = (chrono::vehicle::RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::RackPinion const *)arg1)->GetSteeringLinkRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RackPinion_GetSteeringLinkLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::RackPinion *arg1 = (chrono::vehicle::RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::RackPinion const *)arg1)->GetSteeringLinkLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RackPinion_GetPinionRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::RackPinion *arg1 = (chrono::vehicle::RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::RackPinion const *)arg1)->GetPinionRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RackPinion_GetMaxAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::RackPinion *arg1 = (chrono::vehicle::RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::RackPinion const *)arg1)->GetMaxAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RotaryArm__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::RotaryArm *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::RotaryArm *)new chrono::vehicle::RotaryArm((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::RotaryArm >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RotaryArm__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::RotaryArm *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::RotaryArm *)new chrono::vehicle::RotaryArm((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::RotaryArm >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RotaryArm(void * jarg1) {
  chrono::vehicle::RotaryArm *arg1 = (chrono::vehicle::RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::RotaryArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_RotaryArm_getPitmanArmMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::RotaryArm *arg1 = (chrono::vehicle::RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::RotaryArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::RotaryArm const *)arg1)->getPitmanArmMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RotaryArm_getPitmanArmRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::RotaryArm *arg1 = (chrono::vehicle::RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::RotaryArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::RotaryArm const *)arg1)->getPitmanArmRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RotaryArm_getPitmanArmInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::RotaryArm *arg1 = (chrono::vehicle::RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::RotaryArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::RotaryArm const *)arg1)->getPitmanArmInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RotaryArm_getPitmanArmInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::RotaryArm *arg1 = (chrono::vehicle::RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::RotaryArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::RotaryArm const *)arg1)->getPitmanArmInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RotaryArm_getMaxAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::RotaryArm *arg1 = (chrono::vehicle::RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::RotaryArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::RotaryArm const *)arg1)->getMaxAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_PitmanArm(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_PitmanArm *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *)new chrono::vehicle::hmmwv::HMMWV_PitmanArm((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_PitmanArm >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_PitmanArm(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_PitmanArm *arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_PitmanArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_PitmanArm_getSteeringLinkMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_PitmanArm *arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_PitmanArm const *)arg1)->getSteeringLinkMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_PitmanArm_getPitmanArmMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_PitmanArm *arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_PitmanArm const *)arg1)->getPitmanArmMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_PitmanArm_getSteeringLinkRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_PitmanArm *arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_PitmanArm const *)arg1)->getSteeringLinkRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_PitmanArm_getPitmanArmRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_PitmanArm *arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_PitmanArm const *)arg1)->getPitmanArmRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_PitmanArm_getSteeringLinkInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_PitmanArm *arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_PitmanArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_PitmanArm const *)arg1)->getSteeringLinkInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_PitmanArm_getSteeringLinkInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_PitmanArm *arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_PitmanArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_PitmanArm const *)arg1)->getSteeringLinkInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_PitmanArm_getPitmanArmInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_PitmanArm *arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_PitmanArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_PitmanArm const *)arg1)->getPitmanArmInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_PitmanArm_getPitmanArmInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_PitmanArm *arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_PitmanArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_PitmanArm const *)arg1)->getPitmanArmInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_PitmanArm_getMaxAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_PitmanArm *arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_PitmanArm const *)arg1)->getMaxAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_RackPinion(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_RackPinion *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_RackPinion *)new chrono::vehicle::hmmwv::HMMWV_RackPinion((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_RackPinion >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_RackPinion(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_RackPinion *arg1 = (chrono::vehicle::hmmwv::HMMWV_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_RackPinion > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_RackPinion_GetSteeringLinkMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_RackPinion *arg1 = (chrono::vehicle::hmmwv::HMMWV_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_RackPinion const *)arg1)->GetSteeringLinkMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_RackPinion_GetSteeringLinkInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_RackPinion *arg1 = (chrono::vehicle::hmmwv::HMMWV_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_RackPinion const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::hmmwv::HMMWV_RackPinion const *)arg1)->GetSteeringLinkInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_RackPinion_GetSteeringLinkCOM(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_RackPinion *arg1 = (chrono::vehicle::hmmwv::HMMWV_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_RackPinion const *)arg1)->GetSteeringLinkCOM();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_RackPinion_GetSteeringLinkRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_RackPinion *arg1 = (chrono::vehicle::hmmwv::HMMWV_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_RackPinion const *)arg1)->GetSteeringLinkRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_RackPinion_GetSteeringLinkLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_RackPinion *arg1 = (chrono::vehicle::hmmwv::HMMWV_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_RackPinion const *)arg1)->GetSteeringLinkLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_RackPinion_GetPinionRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_RackPinion *arg1 = (chrono::vehicle::hmmwv::HMMWV_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_RackPinion const *)arg1)->GetPinionRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_RackPinion_GetMaxAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_RackPinion *arg1 = (chrono::vehicle::hmmwv::HMMWV_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_RackPinion const *)arg1)->GetMaxAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_RotaryArm(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::citybus::CityBus_RotaryArm *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_RotaryArm *)new chrono::vehicle::citybus::CityBus_RotaryArm((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_RotaryArm >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CityBus_RotaryArm(void * jarg1) {
  chrono::vehicle::citybus::CityBus_RotaryArm *arg1 = (chrono::vehicle::citybus::CityBus_RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_RotaryArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_RotaryArm_getPitmanArmMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_RotaryArm *arg1 = (chrono::vehicle::citybus::CityBus_RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_RotaryArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_RotaryArm const *)arg1)->getPitmanArmMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_RotaryArm_getPitmanArmRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_RotaryArm *arg1 = (chrono::vehicle::citybus::CityBus_RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_RotaryArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_RotaryArm const *)arg1)->getPitmanArmRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_RotaryArm_getPitmanArmInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_RotaryArm *arg1 = (chrono::vehicle::citybus::CityBus_RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_RotaryArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::citybus::CityBus_RotaryArm const *)arg1)->getPitmanArmInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_RotaryArm_getPitmanArmInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_RotaryArm *arg1 = (chrono::vehicle::citybus::CityBus_RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_RotaryArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::citybus::CityBus_RotaryArm const *)arg1)->getPitmanArmInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_RotaryArm_getMaxAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_RotaryArm *arg1 = (chrono::vehicle::citybus::CityBus_RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_RotaryArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_RotaryArm const *)arg1)->getMaxAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_RackPinion(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::citybus::CityBus_RackPinion *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_RackPinion *)new chrono::vehicle::citybus::CityBus_RackPinion((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_RackPinion >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CityBus_RackPinion(void * jarg1) {
  chrono::vehicle::citybus::CityBus_RackPinion *arg1 = (chrono::vehicle::citybus::CityBus_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_RackPinion > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_RackPinion_GetSteeringLinkMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_RackPinion *arg1 = (chrono::vehicle::citybus::CityBus_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_RackPinion const *)arg1)->GetSteeringLinkMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_RackPinion_GetSteeringLinkInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_RackPinion *arg1 = (chrono::vehicle::citybus::CityBus_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_RackPinion const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::citybus::CityBus_RackPinion const *)arg1)->GetSteeringLinkInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_RackPinion_GetSteeringLinkCOM(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_RackPinion *arg1 = (chrono::vehicle::citybus::CityBus_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_RackPinion const *)arg1)->GetSteeringLinkCOM();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_RackPinion_GetSteeringLinkRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_RackPinion *arg1 = (chrono::vehicle::citybus::CityBus_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_RackPinion const *)arg1)->GetSteeringLinkRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_RackPinion_GetSteeringLinkLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_RackPinion *arg1 = (chrono::vehicle::citybus::CityBus_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_RackPinion const *)arg1)->GetSteeringLinkLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_RackPinion_GetPinionRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_RackPinion *arg1 = (chrono::vehicle::citybus::CityBus_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_RackPinion const *)arg1)->GetPinionRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_RackPinion_GetMaxAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_RackPinion *arg1 = (chrono::vehicle::citybus::CityBus_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_RackPinion const *)arg1)->GetMaxAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_RotaryArm(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_5t_RotaryArm *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_RotaryArm *)new chrono::vehicle::man::MAN_5t_RotaryArm((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_RotaryArm >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_5t_RotaryArm(void * jarg1) {
  chrono::vehicle::man::MAN_5t_RotaryArm *arg1 = (chrono::vehicle::man::MAN_5t_RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_RotaryArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_RotaryArm_getPitmanArmMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_RotaryArm *arg1 = (chrono::vehicle::man::MAN_5t_RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_RotaryArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_RotaryArm const *)arg1)->getPitmanArmMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_RotaryArm_getPitmanArmRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_RotaryArm *arg1 = (chrono::vehicle::man::MAN_5t_RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_RotaryArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_RotaryArm const *)arg1)->getPitmanArmRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_5t_RotaryArm_getPitmanArmInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_5t_RotaryArm *arg1 = (chrono::vehicle::man::MAN_5t_RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_RotaryArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::man::MAN_5t_RotaryArm const *)arg1)->getPitmanArmInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_5t_RotaryArm_getPitmanArmInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_5t_RotaryArm *arg1 = (chrono::vehicle::man::MAN_5t_RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_RotaryArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::man::MAN_5t_RotaryArm const *)arg1)->getPitmanArmInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_RotaryArm_getMaxAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_RotaryArm *arg1 = (chrono::vehicle::man::MAN_5t_RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_RotaryArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_RotaryArm const *)arg1)->getMaxAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_10t_RotaryArm2(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_10t_RotaryArm2 *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_10t_RotaryArm2 *)new chrono::vehicle::man::MAN_10t_RotaryArm2((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_10t_RotaryArm2 >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_10t_RotaryArm2(void * jarg1) {
  chrono::vehicle::man::MAN_10t_RotaryArm2 *arg1 = (chrono::vehicle::man::MAN_10t_RotaryArm2 *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_RotaryArm2 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t_RotaryArm2 > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_RotaryArm2 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_10t_RotaryArm2_getPitmanArmMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_10t_RotaryArm2 *arg1 = (chrono::vehicle::man::MAN_10t_RotaryArm2 *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_RotaryArm2 const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t_RotaryArm2 > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_RotaryArm2 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_10t_RotaryArm2 const *)arg1)->getPitmanArmMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_10t_RotaryArm2_getPitmanArmRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_10t_RotaryArm2 *arg1 = (chrono::vehicle::man::MAN_10t_RotaryArm2 *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_RotaryArm2 const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t_RotaryArm2 > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_RotaryArm2 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_10t_RotaryArm2 const *)arg1)->getPitmanArmRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_10t_RotaryArm2_getPitmanArmInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_10t_RotaryArm2 *arg1 = (chrono::vehicle::man::MAN_10t_RotaryArm2 *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_RotaryArm2 const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t_RotaryArm2 > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_RotaryArm2 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::man::MAN_10t_RotaryArm2 const *)arg1)->getPitmanArmInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_10t_RotaryArm2_getPitmanArmInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_10t_RotaryArm2 *arg1 = (chrono::vehicle::man::MAN_10t_RotaryArm2 *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_RotaryArm2 const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t_RotaryArm2 > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_RotaryArm2 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::man::MAN_10t_RotaryArm2 const *)arg1)->getPitmanArmInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_10t_RotaryArm2_getMaxAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_10t_RotaryArm2 *arg1 = (chrono::vehicle::man::MAN_10t_RotaryArm2 *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_RotaryArm2 const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t_RotaryArm2 > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_RotaryArm2 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_10t_RotaryArm2 const *)arg1)->getMaxAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_RotaryArm(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS_RotaryArm *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_RotaryArm *)new chrono::vehicle::uaz::UAZBUS_RotaryArm((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_RotaryArm >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UAZBUS_RotaryArm(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_RotaryArm *arg1 = (chrono::vehicle::uaz::UAZBUS_RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_RotaryArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_RotaryArm_getPitmanArmMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_RotaryArm *arg1 = (chrono::vehicle::uaz::UAZBUS_RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_RotaryArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_RotaryArm const *)arg1)->getPitmanArmMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_RotaryArm_getPitmanArmRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_RotaryArm *arg1 = (chrono::vehicle::uaz::UAZBUS_RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_RotaryArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_RotaryArm const *)arg1)->getPitmanArmRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UAZBUS_RotaryArm_getPitmanArmInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::uaz::UAZBUS_RotaryArm *arg1 = (chrono::vehicle::uaz::UAZBUS_RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_RotaryArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::uaz::UAZBUS_RotaryArm const *)arg1)->getPitmanArmInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UAZBUS_RotaryArm_getPitmanArmInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::uaz::UAZBUS_RotaryArm *arg1 = (chrono::vehicle::uaz::UAZBUS_RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_RotaryArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::uaz::UAZBUS_RotaryArm const *)arg1)->getPitmanArmInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_RotaryArm_getMaxAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_RotaryArm *arg1 = (chrono::vehicle::uaz::UAZBUS_RotaryArm *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_RotaryArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_RotaryArm > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_RotaryArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_RotaryArm const *)arg1)->getMaxAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_RackPinion(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::gator::Gator_RackPinion *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_RackPinion *)new chrono::vehicle::gator::Gator_RackPinion((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_RackPinion >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Gator_RackPinion(void * jarg1) {
  chrono::vehicle::gator::Gator_RackPinion *arg1 = (chrono::vehicle::gator::Gator_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RackPinion > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_RackPinion_GetSteeringLinkMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_RackPinion *arg1 = (chrono::vehicle::gator::Gator_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_RackPinion const *)arg1)->GetSteeringLinkMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gator_RackPinion_GetSteeringLinkInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::gator::Gator_RackPinion *arg1 = (chrono::vehicle::gator::Gator_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RackPinion const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::gator::Gator_RackPinion const *)arg1)->GetSteeringLinkInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_RackPinion_GetSteeringLinkCOM(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_RackPinion *arg1 = (chrono::vehicle::gator::Gator_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_RackPinion const *)arg1)->GetSteeringLinkCOM();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_RackPinion_GetSteeringLinkRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_RackPinion *arg1 = (chrono::vehicle::gator::Gator_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_RackPinion const *)arg1)->GetSteeringLinkRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_RackPinion_GetSteeringLinkLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_RackPinion *arg1 = (chrono::vehicle::gator::Gator_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_RackPinion const *)arg1)->GetSteeringLinkLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_RackPinion_GetPinionRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_RackPinion *arg1 = (chrono::vehicle::gator::Gator_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_RackPinion const *)arg1)->GetPinionRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_RackPinion_GetMaxAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_RackPinion *arg1 = (chrono::vehicle::gator::Gator_RackPinion *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RackPinion const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RackPinion > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RackPinion *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_RackPinion const *)arg1)->GetMaxAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCCar_PitmanArm(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::rccar::RCCar_PitmanArm *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::rccar::RCCar_PitmanArm *)new chrono::vehicle::rccar::RCCar_PitmanArm((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::rccar::RCCar_PitmanArm >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RCCar_PitmanArm(void * jarg1) {
  chrono::vehicle::rccar::RCCar_PitmanArm *arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_PitmanArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_PitmanArm_getSteeringLinkMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_PitmanArm *arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_PitmanArm const *)arg1)->getSteeringLinkMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_PitmanArm_getPitmanArmMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_PitmanArm *arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_PitmanArm const *)arg1)->getPitmanArmMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_PitmanArm_getSteeringLinkRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_PitmanArm *arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_PitmanArm const *)arg1)->getSteeringLinkRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_PitmanArm_getPitmanArmRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_PitmanArm *arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_PitmanArm const *)arg1)->getPitmanArmRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_PitmanArm_getSteeringLinkInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_PitmanArm *arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_PitmanArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::rccar::RCCar_PitmanArm const *)arg1)->getSteeringLinkInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_PitmanArm_getSteeringLinkInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_PitmanArm *arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_PitmanArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::rccar::RCCar_PitmanArm const *)arg1)->getSteeringLinkInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_PitmanArm_getPitmanArmInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_PitmanArm *arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_PitmanArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::rccar::RCCar_PitmanArm const *)arg1)->getPitmanArmInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_PitmanArm_getPitmanArmInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_PitmanArm *arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_PitmanArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::rccar::RCCar_PitmanArm const *)arg1)->getPitmanArmInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_PitmanArm_getMaxAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_PitmanArm *arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_PitmanArm const *)arg1)->getMaxAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_PitmanArm(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::feda::FEDA_PitmanArm *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_PitmanArm *)new chrono::vehicle::feda::FEDA_PitmanArm((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_PitmanArm >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FEDA_PitmanArm(void * jarg1) {
  chrono::vehicle::feda::FEDA_PitmanArm *arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_PitmanArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_PitmanArm_getSteeringLinkMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_PitmanArm *arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_PitmanArm const *)arg1)->getSteeringLinkMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_PitmanArm_getPitmanArmMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_PitmanArm *arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_PitmanArm const *)arg1)->getPitmanArmMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_PitmanArm_getSteeringLinkRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_PitmanArm *arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_PitmanArm const *)arg1)->getSteeringLinkRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_PitmanArm_getPitmanArmRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_PitmanArm *arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_PitmanArm const *)arg1)->getPitmanArmRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_PitmanArm_getSteeringLinkInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_PitmanArm *arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_PitmanArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::feda::FEDA_PitmanArm const *)arg1)->getSteeringLinkInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_PitmanArm_getSteeringLinkInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_PitmanArm *arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_PitmanArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::feda::FEDA_PitmanArm const *)arg1)->getSteeringLinkInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_PitmanArm_getPitmanArmInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_PitmanArm *arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_PitmanArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::feda::FEDA_PitmanArm const *)arg1)->getPitmanArmInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_PitmanArm_getPitmanArmInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_PitmanArm *arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_PitmanArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::feda::FEDA_PitmanArm const *)arg1)->getPitmanArmInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_PitmanArm_getMaxAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_PitmanArm *arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_PitmanArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_PitmanArm > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_PitmanArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_PitmanArm const *)arg1)->getMaxAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSubchassis(void * jarg1) {
  chrono::vehicle::ChSubchassis *arg1 = (chrono::vehicle::ChSubchassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSubchassis > *)jarg1;
  arg1 = (chrono::vehicle::ChSubchassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSubchassis_GetLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChSubchassis *arg1 = (chrono::vehicle::ChSubchassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSubchassis > *)jarg1;
  arg1 = (chrono::vehicle::ChSubchassis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::ChSubchassis const *)arg1)->GetLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSubchassis_GetBeam(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSubchassis *arg1 = (chrono::vehicle::ChSubchassis *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSubchassis > *)jarg1;
  arg1 = (chrono::vehicle::ChSubchassis *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSubchassis const *)arg1)->GetBeam(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSubchassis_Initialize(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::ChSubchassis *arg1 = (chrono::vehicle::ChSubchassis *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSubchassis > *)jarg1;
  arg1 = (chrono::vehicle::ChSubchassis *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChBalancer(void * jarg1) {
  chrono::vehicle::ChBalancer *arg1 = (chrono::vehicle::ChBalancer *) 0 ;
  std::shared_ptr< chrono::vehicle::ChBalancer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChBalancer > *)jarg1;
  arg1 = (chrono::vehicle::ChBalancer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChBalancer_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChBalancer *arg1 = (chrono::vehicle::ChBalancer *) 0 ;
  std::shared_ptr< chrono::vehicle::ChBalancer const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChBalancer > *)jarg1;
  arg1 = (chrono::vehicle::ChBalancer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChBalancer const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChBalancer_Initialize(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::ChBalancer *arg1 = (chrono::vehicle::ChBalancer *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChBalancer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChBalancer > *)jarg1;
  arg1 = (chrono::vehicle::ChBalancer *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChBalancer_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChBalancer *arg1 = (chrono::vehicle::ChBalancer *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChBalancer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChBalancer > *)jarg1;
  arg1 = (chrono::vehicle::ChBalancer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChBalancer_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChBalancer *arg1 = (chrono::vehicle::ChBalancer *) 0 ;
  std::shared_ptr< chrono::vehicle::ChBalancer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChBalancer > *)jarg1;
  arg1 = (chrono::vehicle::ChBalancer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Balancer__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::Balancer *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::Balancer *)new chrono::vehicle::Balancer((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::Balancer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Balancer__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::Balancer *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::Balancer *)new chrono::vehicle::Balancer((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::Balancer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Balancer(void * jarg1) {
  chrono::vehicle::Balancer *arg1 = (chrono::vehicle::Balancer *) 0 ;
  std::shared_ptr< chrono::vehicle::Balancer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::Balancer > *)jarg1;
  arg1 = (chrono::vehicle::Balancer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Balancer_GetBalancerBeamMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::Balancer *arg1 = (chrono::vehicle::Balancer *) 0 ;
  std::shared_ptr< chrono::vehicle::Balancer const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::Balancer > *)jarg1;
  arg1 = (chrono::vehicle::Balancer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::Balancer const *)arg1)->GetBalancerBeamMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Balancer_GetBalancerBeamInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::Balancer *arg1 = (chrono::vehicle::Balancer *) 0 ;
  std::shared_ptr< chrono::vehicle::Balancer const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::Balancer > *)jarg1;
  arg1 = (chrono::vehicle::Balancer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::Balancer const *)arg1)->GetBalancerBeamInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Balancer_GetBalancerMaxPitch(void * jarg1) {
  double jresult ;
  chrono::vehicle::Balancer *arg1 = (chrono::vehicle::Balancer *) 0 ;
  std::shared_ptr< chrono::vehicle::Balancer const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::Balancer > *)jarg1;
  arg1 = (chrono::vehicle::Balancer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::Balancer const *)arg1)->GetBalancerMaxPitch();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Balancer_GetBalancerBeamDimensions(void * jarg1) {
  void * jresult ;
  chrono::vehicle::Balancer *arg1 = (chrono::vehicle::Balancer *) 0 ;
  std::shared_ptr< chrono::vehicle::Balancer const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::Balancer > *)jarg1;
  arg1 = (chrono::vehicle::Balancer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::Balancer const *)arg1)->GetBalancerBeamDimensions();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Balancer_GetBushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::Balancer *arg1 = (chrono::vehicle::Balancer *) 0 ;
  std::shared_ptr< chrono::vehicle::Balancer const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::Balancer > *)jarg1;
  arg1 = (chrono::vehicle::Balancer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::Balancer const *)arg1)->GetBushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MTV_Balancer(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::fmtv::MTV_Balancer *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::fmtv::MTV_Balancer *)new chrono::vehicle::fmtv::MTV_Balancer((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::fmtv::MTV_Balancer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MTV_Balancer_GetBalancerBeamMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::fmtv::MTV_Balancer *arg1 = (chrono::vehicle::fmtv::MTV_Balancer *) 0 ;
  std::shared_ptr< chrono::vehicle::fmtv::MTV_Balancer const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::fmtv::MTV_Balancer > *)jarg1;
  arg1 = (chrono::vehicle::fmtv::MTV_Balancer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::fmtv::MTV_Balancer const *)arg1)->GetBalancerBeamMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MTV_Balancer_GetBalancerBeamInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::fmtv::MTV_Balancer *arg1 = (chrono::vehicle::fmtv::MTV_Balancer *) 0 ;
  std::shared_ptr< chrono::vehicle::fmtv::MTV_Balancer const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::fmtv::MTV_Balancer > *)jarg1;
  arg1 = (chrono::vehicle::fmtv::MTV_Balancer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::fmtv::MTV_Balancer const *)arg1)->GetBalancerBeamInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MTV_Balancer_GetBalancerMaxPitch(void * jarg1) {
  double jresult ;
  chrono::vehicle::fmtv::MTV_Balancer *arg1 = (chrono::vehicle::fmtv::MTV_Balancer *) 0 ;
  std::shared_ptr< chrono::vehicle::fmtv::MTV_Balancer const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::fmtv::MTV_Balancer > *)jarg1;
  arg1 = (chrono::vehicle::fmtv::MTV_Balancer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::fmtv::MTV_Balancer const *)arg1)->GetBalancerMaxPitch();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MTV_Balancer_GetBalancerBeamDimensions(void * jarg1) {
  void * jresult ;
  chrono::vehicle::fmtv::MTV_Balancer *arg1 = (chrono::vehicle::fmtv::MTV_Balancer *) 0 ;
  std::shared_ptr< chrono::vehicle::fmtv::MTV_Balancer const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::fmtv::MTV_Balancer > *)jarg1;
  arg1 = (chrono::vehicle::fmtv::MTV_Balancer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::fmtv::MTV_Balancer const *)arg1)->GetBalancerBeamDimensions();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MTV_Balancer(void * jarg1) {
  chrono::vehicle::fmtv::MTV_Balancer *arg1 = (chrono::vehicle::fmtv::MTV_Balancer *) 0 ;
  std::shared_ptr< chrono::vehicle::fmtv::MTV_Balancer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::fmtv::MTV_Balancer > *)jarg1;
  arg1 = (chrono::vehicle::fmtv::MTV_Balancer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSuspension(void * jarg1) {
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSuspension_IsSteerable(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspension const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChSuspension const *)arg1)->IsSteerable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSuspension_IsIndependent(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspension const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChSuspension const *)arg1)->IsIndependent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspension_GetRelPosition(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspension const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::ChSuspension const *)arg1)->GetRelPosition();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspension_GetSpindle(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspension const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSuspension const *)arg1)->GetSpindle(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspension_GetAxle(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspension const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChShaft > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSuspension const *)arg1)->GetAxle(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChShaft >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspension_GetRevolute(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspension const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkLockRevolute > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSuspension const *)arg1)->GetRevolute(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkLockRevolute >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspension_GetSpindlePos(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspension const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::ChSuspension const *)arg1)->GetSpindlePos(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspension_GetSpindleRot(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspension const > *smartarg1 = 0 ;
  chrono::ChQuaternion< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSuspension const *)arg1)->GetSpindleRot(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChQuaternion< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspension_GetSpindleLinVel(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspension const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::ChSuspension const *)arg1)->GetSpindleLinVel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspension_GetSpindleAngVel(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspension const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSuspension const *)arg1)->GetSpindleAngVel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSuspension_GetAxleSpeed(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSuspension const *)arg1)->GetAxleSpeed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspension_Synchronize(void * jarg1) {
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Synchronize();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspension_ApplyAxleTorque(void * jarg1, int jarg2, double jarg3) {
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::ChSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->ApplyAxleTorque(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspension_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspension_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6) {
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspension_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSuspension_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChSuspension const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSuspension_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChSuspension const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspension_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspension_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspension_GetAntirollBody(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspension const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSuspension const *)arg1)->GetAntirollBody(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspension_GetBrakeBody(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspension const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSuspension const *)arg1)->GetBrakeBody(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSuspension_GetTrack(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspension > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetTrack();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspension_ReportSuspensionForce(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspension const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< chrono::vehicle::ChSuspension::ForceTSDA > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSuspension const *)arg1)->ReportSuspensionForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< chrono::vehicle::ChSuspension::ForceTSDA >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspension_LogConstraintViolations(void * jarg1, int jarg2) {
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      (arg1)->LogConstraintViolations(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspension_ApplyParkingBrake(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChSuspension *arg1 = (chrono::vehicle::ChSuspension *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->ApplyParkingBrake(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ForceTSDA_name_set(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChSuspension::ForceTSDA *arg1 = (chrono::vehicle::ChSuspension::ForceTSDA *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChSuspension::ForceTSDA *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ForceTSDA_name_get(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChSuspension::ForceTSDA *arg1 = (chrono::vehicle::ChSuspension::ForceTSDA *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (chrono::vehicle::ChSuspension::ForceTSDA *)jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ForceTSDA_force_set(void * jarg1, double jarg2) {
  chrono::vehicle::ChSuspension::ForceTSDA *arg1 = (chrono::vehicle::ChSuspension::ForceTSDA *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::ChSuspension::ForceTSDA *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->force = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ForceTSDA_force_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSuspension::ForceTSDA *arg1 = (chrono::vehicle::ChSuspension::ForceTSDA *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::ChSuspension::ForceTSDA *)jarg1; 
  result = (double) ((arg1)->force);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ForceTSDA_length_set(void * jarg1, double jarg2) {
  chrono::vehicle::ChSuspension::ForceTSDA *arg1 = (chrono::vehicle::ChSuspension::ForceTSDA *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::ChSuspension::ForceTSDA *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ForceTSDA_length_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSuspension::ForceTSDA *arg1 = (chrono::vehicle::ChSuspension::ForceTSDA *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::ChSuspension::ForceTSDA *)jarg1; 
  result = (double) ((arg1)->length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ForceTSDA_velocity_set(void * jarg1, double jarg2) {
  chrono::vehicle::ChSuspension::ForceTSDA *arg1 = (chrono::vehicle::ChSuspension::ForceTSDA *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::ChSuspension::ForceTSDA *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->velocity = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ForceTSDA_velocity_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSuspension::ForceTSDA *arg1 = (chrono::vehicle::ChSuspension::ForceTSDA *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::ChSuspension::ForceTSDA *)jarg1; 
  result = (double) ((arg1)->velocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ForceTSDA__SWIG_0() {
  void * jresult ;
  chrono::vehicle::ChSuspension::ForceTSDA *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::ChSuspension::ForceTSDA *)new chrono::vehicle::ChSuspension::ForceTSDA();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ForceTSDA__SWIG_1(const char * jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  chrono::vehicle::ChSuspension::ForceTSDA *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (chrono::vehicle::ChSuspension::ForceTSDA *)new chrono::vehicle::ChSuspension::ForceTSDA((std::string const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ForceTSDA(void * jarg1) {
  chrono::vehicle::ChSuspension::ForceTSDA *arg1 = (chrono::vehicle::ChSuspension::ForceTSDA *) 0 ;
  
  arg1 = (chrono::vehicle::ChSuspension::ForceTSDA *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChDoubleWishbone(void * jarg1) {
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChDoubleWishbone_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChDoubleWishbone const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChDoubleWishbone_IsSteerable(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChDoubleWishbone const *)arg1)->IsSteerable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChDoubleWishbone_IsIndependent(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChDoubleWishbone const *)arg1)->IsIndependent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDoubleWishbone_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDoubleWishbone_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6) {
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDoubleWishbone_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDoubleWishbone_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDoubleWishbone_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChDoubleWishbone_GetTrack(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetTrack();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChDoubleWishbone_GetSpring(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChDoubleWishbone const *)arg1)->GetSpring(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChDoubleWishbone_GetShock(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChDoubleWishbone const *)arg1)->GetShock(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChDoubleWishbone_ReportSuspensionForce(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< chrono::vehicle::ChSuspension::ForceTSDA > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChDoubleWishbone const *)arg1)->ReportSuspensionForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< chrono::vehicle::ChSuspension::ForceTSDA >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChDoubleWishbone_GetSpringForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChDoubleWishbone const *)arg1)->GetSpringForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChDoubleWishbone_GetSpringLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChDoubleWishbone const *)arg1)->GetSpringLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChDoubleWishbone_GetSpringDeformation(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChDoubleWishbone const *)arg1)->GetSpringDeformation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChDoubleWishbone_GetShockForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChDoubleWishbone const *)arg1)->GetShockForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChDoubleWishbone_GetShockLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChDoubleWishbone const *)arg1)->GetShockLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChDoubleWishbone_GetShockVelocity(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChDoubleWishbone const *)arg1)->GetShockVelocity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChDoubleWishbone_Get_LCA_sph_pos(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (arg1)->Get_LCA_sph_pos(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChDoubleWishbone_Get_UCA_sph_pos(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (arg1)->Get_UCA_sph_pos(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDoubleWishbone_LogConstraintViolations(void * jarg1, int jarg2) {
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      (arg1)->LogConstraintViolations(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChDoubleWishbone_GetAntirollBody(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChDoubleWishbone const *)arg1)->GetAntirollBody(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDoubleWishbone_LogHardpointLocations__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDoubleWishbone_LogHardpointLocations__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::ChDoubleWishbone *arg1 = (chrono::vehicle::ChDoubleWishbone *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChMacPhersonStrut(void * jarg1) {
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChMacPhersonStrut_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChMacPhersonStrut const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChMacPhersonStrut_IsSteerable(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChMacPhersonStrut const *)arg1)->IsSteerable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChMacPhersonStrut_IsIndependent(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChMacPhersonStrut const *)arg1)->IsIndependent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMacPhersonStrut_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMacPhersonStrut_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6) {
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMacPhersonStrut_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMacPhersonStrut_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMacPhersonStrut_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChMacPhersonStrut_GetTrack(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetTrack();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChMacPhersonStrut_GetSpring(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChMacPhersonStrut const *)arg1)->GetSpring(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChMacPhersonStrut_GetShock(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChMacPhersonStrut const *)arg1)->GetShock(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChMacPhersonStrut_ReportSuspensionForce(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< chrono::vehicle::ChSuspension::ForceTSDA > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChMacPhersonStrut const *)arg1)->ReportSuspensionForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< chrono::vehicle::ChSuspension::ForceTSDA >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChMacPhersonStrut_GetSpringForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChMacPhersonStrut const *)arg1)->GetSpringForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChMacPhersonStrut_GetSpringLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChMacPhersonStrut const *)arg1)->GetSpringLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChMacPhersonStrut_GetSpringDeformation(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChMacPhersonStrut const *)arg1)->GetSpringDeformation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChMacPhersonStrut_GetShockForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChMacPhersonStrut const *)arg1)->GetShockForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChMacPhersonStrut_GetShockLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChMacPhersonStrut const *)arg1)->GetShockLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChMacPhersonStrut_GetShockVelocity(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChMacPhersonStrut const *)arg1)->GetShockVelocity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChMacPhersonStrut_Get_LCA_sph_pos(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (arg1)->Get_LCA_sph_pos(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMacPhersonStrut_LogConstraintViolations(void * jarg1, int jarg2) {
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      (arg1)->LogConstraintViolations(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChMacPhersonStrut_GetAntirollBody(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChMacPhersonStrut const *)arg1)->GetAntirollBody(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMacPhersonStrut_LogHardpointLocations__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMacPhersonStrut_LogHardpointLocations__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::ChMacPhersonStrut *arg1 = (chrono::vehicle::ChMacPhersonStrut *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::ChMacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChLeafspringAxle(void * jarg1) {
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChLeafspringAxle_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChLeafspringAxle const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChLeafspringAxle_IsSteerable(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChLeafspringAxle const *)arg1)->IsSteerable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChLeafspringAxle_IsIndependent(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChLeafspringAxle const *)arg1)->IsIndependent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChLeafspringAxle_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChLeafspringAxle_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6) {
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChLeafspringAxle_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChLeafspringAxle_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChLeafspringAxle_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChLeafspringAxle_GetTrack(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetTrack();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChLeafspringAxle_GetSpring(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChLeafspringAxle const *)arg1)->GetSpring(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChLeafspringAxle_GetShock(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChLeafspringAxle const *)arg1)->GetShock(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChLeafspringAxle_ReportSuspensionForce(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< chrono::vehicle::ChSuspension::ForceTSDA > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChLeafspringAxle const *)arg1)->ReportSuspensionForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< chrono::vehicle::ChSuspension::ForceTSDA >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChLeafspringAxle_GetSpringForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChLeafspringAxle const *)arg1)->GetSpringForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChLeafspringAxle_GetSpringLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChLeafspringAxle const *)arg1)->GetSpringLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChLeafspringAxle_GetSpringDeformation(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChLeafspringAxle const *)arg1)->GetSpringDeformation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChLeafspringAxle_GetShockForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChLeafspringAxle const *)arg1)->GetShockForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChLeafspringAxle_GetShockLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChLeafspringAxle const *)arg1)->GetShockLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChLeafspringAxle_GetShockVelocity(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChLeafspringAxle const *)arg1)->GetShockVelocity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChLeafspringAxle_LogConstraintViolations(void * jarg1, int jarg2) {
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      (arg1)->LogConstraintViolations(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChLeafspringAxle_LogHardpointLocations__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChLeafspringAxle_LogHardpointLocations__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::ChLeafspringAxle *arg1 = (chrono::vehicle::ChLeafspringAxle *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChHendricksonPRIMAXX(void * jarg1) {
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChHendricksonPRIMAXX const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_IsSteerable(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChHendricksonPRIMAXX const *)arg1)->IsSteerable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_IsIndependent(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChHendricksonPRIMAXX const *)arg1)->IsIndependent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6) {
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_GetTrack(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetTrack();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_ReportSuspensionForce(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< chrono::vehicle::ChSuspension::ForceTSDA > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChHendricksonPRIMAXX const *)arg1)->ReportSuspensionForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< chrono::vehicle::ChSuspension::ForceTSDA >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_GetShockLBForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChHendricksonPRIMAXX const *)arg1)->GetShockLBForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_GetShockLBLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChHendricksonPRIMAXX const *)arg1)->GetShockLBLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_GetShockLBVelocity(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChHendricksonPRIMAXX const *)arg1)->GetShockLBVelocity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_GetShockAHForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChHendricksonPRIMAXX const *)arg1)->GetShockAHForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_GetShockAHLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChHendricksonPRIMAXX const *)arg1)->GetShockAHLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_GetShockAHVelocity(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChHendricksonPRIMAXX const *)arg1)->GetShockAHVelocity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_LogConstraintViolations(void * jarg1, int jarg2) {
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      (arg1)->LogConstraintViolations(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_LogHardpointLocations__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_LogHardpointLocations__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::ChHendricksonPRIMAXX *arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChHendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::ChHendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChDoubleWishboneReduced(void * jarg1) {
  chrono::vehicle::ChDoubleWishboneReduced *arg1 = (chrono::vehicle::ChDoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChDoubleWishboneReduced_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChDoubleWishboneReduced *arg1 = (chrono::vehicle::ChDoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChDoubleWishboneReduced const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChDoubleWishboneReduced_IsSteerable(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChDoubleWishboneReduced *arg1 = (chrono::vehicle::ChDoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChDoubleWishboneReduced const *)arg1)->IsSteerable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChDoubleWishboneReduced_IsIndependent(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChDoubleWishboneReduced *arg1 = (chrono::vehicle::ChDoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChDoubleWishboneReduced const *)arg1)->IsIndependent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDoubleWishboneReduced_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChDoubleWishboneReduced *arg1 = (chrono::vehicle::ChDoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDoubleWishboneReduced_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6) {
  chrono::vehicle::ChDoubleWishboneReduced *arg1 = (chrono::vehicle::ChDoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDoubleWishboneReduced_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChDoubleWishboneReduced *arg1 = (chrono::vehicle::ChDoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDoubleWishboneReduced_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChDoubleWishboneReduced *arg1 = (chrono::vehicle::ChDoubleWishboneReduced *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDoubleWishboneReduced_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChDoubleWishboneReduced *arg1 = (chrono::vehicle::ChDoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChDoubleWishboneReduced_GetTrack(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChDoubleWishboneReduced *arg1 = (chrono::vehicle::ChDoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetTrack();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChDoubleWishboneReduced_GetShock(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChDoubleWishboneReduced *arg1 = (chrono::vehicle::ChDoubleWishboneReduced *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChDoubleWishboneReduced const *)arg1)->GetShock(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChDoubleWishboneReduced_ReportSuspensionForce(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChDoubleWishboneReduced *arg1 = (chrono::vehicle::ChDoubleWishboneReduced *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< chrono::vehicle::ChSuspension::ForceTSDA > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChDoubleWishboneReduced const *)arg1)->ReportSuspensionForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< chrono::vehicle::ChSuspension::ForceTSDA >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChDoubleWishboneReduced_GetAntirollBody(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChDoubleWishboneReduced *arg1 = (chrono::vehicle::ChDoubleWishboneReduced *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChDoubleWishboneReduced const *)arg1)->GetAntirollBody(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDoubleWishboneReduced_LogConstraintViolations(void * jarg1, int jarg2) {
  chrono::vehicle::ChDoubleWishboneReduced *arg1 = (chrono::vehicle::ChDoubleWishboneReduced *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      (arg1)->LogConstraintViolations(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChMultiLink(void * jarg1) {
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChMultiLink_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChMultiLink const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChMultiLink_IsSteerable(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChMultiLink const *)arg1)->IsSteerable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChMultiLink_IsIndependent(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChMultiLink const *)arg1)->IsIndependent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMultiLink_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMultiLink_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6) {
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMultiLink_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMultiLink_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMultiLink_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChMultiLink_GetTrack(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetTrack();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChMultiLink_GetSpring(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChMultiLink const *)arg1)->GetSpring(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChMultiLink_GetShock(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChMultiLink const *)arg1)->GetShock(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChMultiLink_ReportSuspensionForce(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< chrono::vehicle::ChSuspension::ForceTSDA > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChMultiLink const *)arg1)->ReportSuspensionForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< chrono::vehicle::ChSuspension::ForceTSDA >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChMultiLink_GetSpringForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChMultiLink const *)arg1)->GetSpringForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChMultiLink_GetSpringLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChMultiLink const *)arg1)->GetSpringLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChMultiLink_GetSpringDeformation(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChMultiLink const *)arg1)->GetSpringDeformation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChMultiLink_GetShockForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChMultiLink const *)arg1)->GetShockForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChMultiLink_GetShockLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChMultiLink const *)arg1)->GetShockLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChMultiLink_GetShockVelocity(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChMultiLink const *)arg1)->GetShockVelocity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChMultiLink_GetAntirollBody(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChMultiLink const *)arg1)->GetAntirollBody(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMultiLink_LogConstraintViolations(void * jarg1, int jarg2) {
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      (arg1)->LogConstraintViolations(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMultiLink_LogHardpointLocations__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMultiLink_LogHardpointLocations__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::ChMultiLink *arg1 = (chrono::vehicle::ChMultiLink *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChMultiLink > *)jarg1;
  arg1 = (chrono::vehicle::ChMultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChRigidPinnedAxle(void * jarg1) {
  chrono::vehicle::ChRigidPinnedAxle *arg1 = (chrono::vehicle::ChRigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidPinnedAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChRigidPinnedAxle_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChRigidPinnedAxle *arg1 = (chrono::vehicle::ChRigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidPinnedAxle const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChRigidPinnedAxle const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChRigidPinnedAxle_IsSteerable(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChRigidPinnedAxle *arg1 = (chrono::vehicle::ChRigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidPinnedAxle const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChRigidPinnedAxle const *)arg1)->IsSteerable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChRigidPinnedAxle_IsIndependent(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChRigidPinnedAxle *arg1 = (chrono::vehicle::ChRigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidPinnedAxle const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChRigidPinnedAxle const *)arg1)->IsIndependent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidPinnedAxle_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChRigidPinnedAxle *arg1 = (chrono::vehicle::ChRigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChRigidPinnedAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidPinnedAxle_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6) {
  chrono::vehicle::ChRigidPinnedAxle *arg1 = (chrono::vehicle::ChRigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChRigidPinnedAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidPinnedAxle_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChRigidPinnedAxle *arg1 = (chrono::vehicle::ChRigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidPinnedAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidPinnedAxle_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChRigidPinnedAxle *arg1 = (chrono::vehicle::ChRigidPinnedAxle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChRigidPinnedAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidPinnedAxle_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChRigidPinnedAxle *arg1 = (chrono::vehicle::ChRigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidPinnedAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChRigidPinnedAxle_GetTrack(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChRigidPinnedAxle *arg1 = (chrono::vehicle::ChRigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidPinnedAxle > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetTrack();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChRigidPinnedAxle_ReportSuspensionForce(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChRigidPinnedAxle *arg1 = (chrono::vehicle::ChRigidPinnedAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChRigidPinnedAxle const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< chrono::vehicle::ChSuspension::ForceTSDA > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChRigidPinnedAxle const *)arg1)->ReportSuspensionForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< chrono::vehicle::ChSuspension::ForceTSDA >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidPinnedAxle_LogConstraintViolations(void * jarg1, int jarg2) {
  chrono::vehicle::ChRigidPinnedAxle *arg1 = (chrono::vehicle::ChRigidPinnedAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChRigidPinnedAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      (arg1)->LogConstraintViolations(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSemiTrailingArm(void * jarg1) {
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChSemiTrailingArm_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSemiTrailingArm const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSemiTrailingArm_IsSteerable(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChSemiTrailingArm const *)arg1)->IsSteerable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSemiTrailingArm_IsIndependent(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChSemiTrailingArm const *)arg1)->IsIndependent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSemiTrailingArm_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSemiTrailingArm_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6) {
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSemiTrailingArm_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSemiTrailingArm_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSemiTrailingArm_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSemiTrailingArm_GetTrack(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetTrack();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSemiTrailingArm_GetSpring(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSemiTrailingArm const *)arg1)->GetSpring(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSemiTrailingArm_GetShock(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSemiTrailingArm const *)arg1)->GetShock(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSemiTrailingArm_ReportSuspensionForce(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< chrono::vehicle::ChSuspension::ForceTSDA > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSemiTrailingArm const *)arg1)->ReportSuspensionForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< chrono::vehicle::ChSuspension::ForceTSDA >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSemiTrailingArm_GetSpringForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSemiTrailingArm const *)arg1)->GetSpringForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSemiTrailingArm_GetSpringLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSemiTrailingArm const *)arg1)->GetSpringLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSemiTrailingArm_GetSpringDeformation(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSemiTrailingArm const *)arg1)->GetSpringDeformation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSemiTrailingArm_GetShockForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSemiTrailingArm const *)arg1)->GetShockForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSemiTrailingArm_GetShockLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSemiTrailingArm const *)arg1)->GetShockLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSemiTrailingArm_GetShockVelocity(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSemiTrailingArm const *)arg1)->GetShockVelocity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSemiTrailingArm_LogConstraintViolations(void * jarg1, int jarg2) {
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      (arg1)->LogConstraintViolations(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSemiTrailingArm_GetAntirollBody(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSemiTrailingArm const *)arg1)->GetAntirollBody(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSemiTrailingArm_LogHardpointLocations__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSemiTrailingArm_LogHardpointLocations__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::ChSemiTrailingArm *arg1 = (chrono::vehicle::ChSemiTrailingArm *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::ChSemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChRigidSuspension(void * jarg1) {
  chrono::vehicle::ChRigidSuspension *arg1 = (chrono::vehicle::ChRigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChRigidSuspension_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChRigidSuspension *arg1 = (chrono::vehicle::ChRigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidSuspension const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChRigidSuspension const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChRigidSuspension_IsSteerable(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChRigidSuspension *arg1 = (chrono::vehicle::ChRigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidSuspension const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChRigidSuspension const *)arg1)->IsSteerable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChRigidSuspension_IsIndependent(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChRigidSuspension *arg1 = (chrono::vehicle::ChRigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidSuspension const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChRigidSuspension const *)arg1)->IsIndependent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidSuspension_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChRigidSuspension *arg1 = (chrono::vehicle::ChRigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChRigidSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidSuspension_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6) {
  chrono::vehicle::ChRigidSuspension *arg1 = (chrono::vehicle::ChRigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChRigidSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidSuspension_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChRigidSuspension *arg1 = (chrono::vehicle::ChRigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChRigidSuspension_GetTrack(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChRigidSuspension *arg1 = (chrono::vehicle::ChRigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidSuspension > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetTrack();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChRigidSuspension_ReportSuspensionForce(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChRigidSuspension *arg1 = (chrono::vehicle::ChRigidSuspension *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChRigidSuspension const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< chrono::vehicle::ChSuspension::ForceTSDA > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChRigidSuspension const *)arg1)->ReportSuspensionForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< chrono::vehicle::ChSuspension::ForceTSDA >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidSuspension_LogConstraintViolations(void * jarg1, int jarg2) {
  chrono::vehicle::ChRigidSuspension *arg1 = (chrono::vehicle::ChRigidSuspension *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChRigidSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      (arg1)->LogConstraintViolations(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSolidAxle(void * jarg1) {
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChSolidAxle_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSolidAxle const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSolidAxle_IsSteerable(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChSolidAxle const *)arg1)->IsSteerable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSolidAxle_IsIndependent(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChSolidAxle const *)arg1)->IsIndependent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidAxle_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidAxle_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6) {
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidAxle_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidAxle_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidAxle_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidAxle_GetTrack(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetTrack();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSolidAxle_GetSpring(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSolidAxle const *)arg1)->GetSpring(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSolidAxle_GetShock(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSolidAxle const *)arg1)->GetShock(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSolidAxle_ReportSuspensionForce(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< chrono::vehicle::ChSuspension::ForceTSDA > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSolidAxle const *)arg1)->ReportSuspensionForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< chrono::vehicle::ChSuspension::ForceTSDA >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidAxle_GetSpringForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSolidAxle const *)arg1)->GetSpringForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidAxle_GetSpringLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSolidAxle const *)arg1)->GetSpringLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidAxle_GetSpringDeformation(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSolidAxle const *)arg1)->GetSpringDeformation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidAxle_GetShockForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSolidAxle const *)arg1)->GetShockForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidAxle_GetShockLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSolidAxle const *)arg1)->GetShockLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidAxle_GetShockVelocity(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSolidAxle const *)arg1)->GetShockVelocity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidAxle_LogConstraintViolations(void * jarg1, int jarg2) {
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      (arg1)->LogConstraintViolations(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidAxle_LogHardpointLocations__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidAxle_LogHardpointLocations__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::ChSolidAxle *arg1 = (chrono::vehicle::ChSolidAxle *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChThreeLinkIRS(void * jarg1) {
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChThreeLinkIRS_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChThreeLinkIRS const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChThreeLinkIRS_IsSteerable(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChThreeLinkIRS const *)arg1)->IsSteerable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChThreeLinkIRS_IsIndependent(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChThreeLinkIRS const *)arg1)->IsIndependent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChThreeLinkIRS_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChThreeLinkIRS_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6) {
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChThreeLinkIRS_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChThreeLinkIRS_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChThreeLinkIRS_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChThreeLinkIRS_GetTrack(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetTrack();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChThreeLinkIRS_GetSpring(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChThreeLinkIRS const *)arg1)->GetSpring(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChThreeLinkIRS_GetShock(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChThreeLinkIRS const *)arg1)->GetShock(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChThreeLinkIRS_ReportSuspensionForce(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< chrono::vehicle::ChSuspension::ForceTSDA > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChThreeLinkIRS const *)arg1)->ReportSuspensionForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< chrono::vehicle::ChSuspension::ForceTSDA >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChThreeLinkIRS_GetSpringForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChThreeLinkIRS const *)arg1)->GetSpringForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChThreeLinkIRS_GetSpringLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChThreeLinkIRS const *)arg1)->GetSpringLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChThreeLinkIRS_GetSpringDeformation(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChThreeLinkIRS const *)arg1)->GetSpringDeformation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChThreeLinkIRS_GetShockForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChThreeLinkIRS const *)arg1)->GetShockForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChThreeLinkIRS_GetShockLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChThreeLinkIRS const *)arg1)->GetShockLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChThreeLinkIRS_GetShockVelocity(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChThreeLinkIRS const *)arg1)->GetShockVelocity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChThreeLinkIRS_LogConstraintViolations(void * jarg1, int jarg2) {
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      (arg1)->LogConstraintViolations(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChThreeLinkIRS_GetAntirollBody(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChThreeLinkIRS const *)arg1)->GetAntirollBody(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChThreeLinkIRS_LogHardpointLocations__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChThreeLinkIRS_LogHardpointLocations__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::ChThreeLinkIRS *arg1 = (chrono::vehicle::ChThreeLinkIRS *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ChThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChToeBarLeafspringAxle(void * jarg1) {
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChToeBarLeafspringAxle const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_IsSteerable(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChToeBarLeafspringAxle const *)arg1)->IsSteerable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_IsIndependent(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChToeBarLeafspringAxle const *)arg1)->IsIndependent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6) {
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_GetTrack(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetTrack();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_GetSpring(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChToeBarLeafspringAxle const *)arg1)->GetSpring(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_GetShock(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChToeBarLeafspringAxle const *)arg1)->GetShock(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_ReportSuspensionForce(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< chrono::vehicle::ChSuspension::ForceTSDA > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChToeBarLeafspringAxle const *)arg1)->ReportSuspensionForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< chrono::vehicle::ChSuspension::ForceTSDA >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_GetSpringForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChToeBarLeafspringAxle const *)arg1)->GetSpringForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_GetSpringLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChToeBarLeafspringAxle const *)arg1)->GetSpringLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_GetSpringDeformation(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChToeBarLeafspringAxle const *)arg1)->GetSpringDeformation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_GetShockForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChToeBarLeafspringAxle const *)arg1)->GetShockForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_GetShockLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChToeBarLeafspringAxle const *)arg1)->GetShockLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_GetShockVelocity(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChToeBarLeafspringAxle const *)arg1)->GetShockVelocity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_GetKingpinAngleLeft(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetKingpinAngleLeft();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_GetKingpinAngleRight(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetKingpinAngleRight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_LogConstraintViolations(void * jarg1, int jarg2) {
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      (arg1)->LogConstraintViolations(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_LogHardpointLocations__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_LogHardpointLocations__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::ChToeBarLeafspringAxle *arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSolidBellcrankThreeLinkAxle(void * jarg1) {
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSolidBellcrankThreeLinkAxle const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_IsSteerable(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChSolidBellcrankThreeLinkAxle const *)arg1)->IsSteerable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_IsIndependent(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChSolidBellcrankThreeLinkAxle const *)arg1)->IsIndependent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6) {
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_GetTrack(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetTrack();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_GetSpring(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSolidBellcrankThreeLinkAxle const *)arg1)->GetSpring(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_GetShock(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSolidBellcrankThreeLinkAxle const *)arg1)->GetShock(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_ReportSuspensionForce(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< chrono::vehicle::ChSuspension::ForceTSDA > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSolidBellcrankThreeLinkAxle const *)arg1)->ReportSuspensionForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< chrono::vehicle::ChSuspension::ForceTSDA >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_GetSpringForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSolidBellcrankThreeLinkAxle const *)arg1)->GetSpringForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_GetSpringLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSolidBellcrankThreeLinkAxle const *)arg1)->GetSpringLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_GetSpringDeformation(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSolidBellcrankThreeLinkAxle const *)arg1)->GetSpringDeformation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_GetShockForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSolidBellcrankThreeLinkAxle const *)arg1)->GetShockForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_GetShockLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSolidBellcrankThreeLinkAxle const *)arg1)->GetShockLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_GetShockVelocity(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSolidBellcrankThreeLinkAxle const *)arg1)->GetShockVelocity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_LogConstraintViolations(void * jarg1, int jarg2) {
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      (arg1)->LogConstraintViolations(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_LogHardpointLocations__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_LogHardpointLocations__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::ChSolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSolidThreeLinkAxle(void * jarg1) {
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSolidThreeLinkAxle const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_IsSteerable(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChSolidThreeLinkAxle const *)arg1)->IsSteerable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_IsIndependent(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChSolidThreeLinkAxle const *)arg1)->IsIndependent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6) {
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_GetTrack(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetTrack();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_GetSpring(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSolidThreeLinkAxle const *)arg1)->GetSpring(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_GetShock(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSolidThreeLinkAxle const *)arg1)->GetShock(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_ReportSuspensionForce(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< chrono::vehicle::ChSuspension::ForceTSDA > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSolidThreeLinkAxle const *)arg1)->ReportSuspensionForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< chrono::vehicle::ChSuspension::ForceTSDA >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_GetSpringForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSolidThreeLinkAxle const *)arg1)->GetSpringForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_GetSpringLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSolidThreeLinkAxle const *)arg1)->GetSpringLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_GetSpringDeformation(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSolidThreeLinkAxle const *)arg1)->GetSpringDeformation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_GetShockForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSolidThreeLinkAxle const *)arg1)->GetShockForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_GetShockLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSolidThreeLinkAxle const *)arg1)->GetShockLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_GetShockVelocity(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSolidThreeLinkAxle const *)arg1)->GetShockVelocity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_LogConstraintViolations(void * jarg1, int jarg2) {
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      (arg1)->LogConstraintViolations(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_LogHardpointLocations__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_LogHardpointLocations__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::ChSolidThreeLinkAxle *arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChSolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSingleWishbone(void * jarg1) {
  chrono::vehicle::ChSingleWishbone *arg1 = (chrono::vehicle::ChSingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChSingleWishbone_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChSingleWishbone *arg1 = (chrono::vehicle::ChSingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSingleWishbone const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSingleWishbone_IsSteerable(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSingleWishbone *arg1 = (chrono::vehicle::ChSingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChSingleWishbone const *)arg1)->IsSteerable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSingleWishbone_IsIndependent(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSingleWishbone *arg1 = (chrono::vehicle::ChSingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChSingleWishbone const *)arg1)->IsIndependent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSingleWishbone_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChSingleWishbone *arg1 = (chrono::vehicle::ChSingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSingleWishbone_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6) {
  chrono::vehicle::ChSingleWishbone *arg1 = (chrono::vehicle::ChSingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSingleWishbone_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChSingleWishbone *arg1 = (chrono::vehicle::ChSingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSingleWishbone_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChSingleWishbone *arg1 = (chrono::vehicle::ChSingleWishbone *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSingleWishbone_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChSingleWishbone *arg1 = (chrono::vehicle::ChSingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSingleWishbone_GetTrack(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSingleWishbone *arg1 = (chrono::vehicle::ChSingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetTrack();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSingleWishbone_GetShock(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSingleWishbone *arg1 = (chrono::vehicle::ChSingleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSingleWishbone const *)arg1)->GetShock(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSingleWishbone_ReportSuspensionForce(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSingleWishbone *arg1 = (chrono::vehicle::ChSingleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< chrono::vehicle::ChSuspension::ForceTSDA > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSingleWishbone const *)arg1)->ReportSuspensionForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< chrono::vehicle::ChSuspension::ForceTSDA >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSingleWishbone_GetShockForce(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSingleWishbone *arg1 = (chrono::vehicle::ChSingleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSingleWishbone const *)arg1)->GetShockForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSingleWishbone_GetShockLength(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSingleWishbone *arg1 = (chrono::vehicle::ChSingleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSingleWishbone const *)arg1)->GetShockLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSingleWishbone_GetShockVelocity(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSingleWishbone *arg1 = (chrono::vehicle::ChSingleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSingleWishbone const *)arg1)->GetShockVelocity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSingleWishbone_LogConstraintViolations(void * jarg1, int jarg2) {
  chrono::vehicle::ChSingleWishbone *arg1 = (chrono::vehicle::ChSingleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      (arg1)->LogConstraintViolations(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSingleWishbone_GetAntirollBody(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChSingleWishbone *arg1 = (chrono::vehicle::ChSingleWishbone *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChSingleWishbone const *)arg1)->GetAntirollBody(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSingleWishbone_LogHardpointLocations__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  chrono::vehicle::ChSingleWishbone *arg1 = (chrono::vehicle::ChSingleWishbone *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSingleWishbone_LogHardpointLocations__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::ChSingleWishbone *arg1 = (chrono::vehicle::ChSingleWishbone *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->LogHardpointLocations((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DoubleWishbone__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::DoubleWishbone *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::DoubleWishbone *)new chrono::vehicle::DoubleWishbone((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::DoubleWishbone >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DoubleWishbone__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::DoubleWishbone *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::DoubleWishbone *)new chrono::vehicle::DoubleWishbone((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::DoubleWishbone >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DoubleWishbone(void * jarg1) {
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DoubleWishbone_UseTierodBodies(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::DoubleWishbone const *)arg1)->UseTierodBodies();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishbone_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishbone const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishbone_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishbone const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishbone_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishbone const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishbone_getUCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishbone const *)arg1)->getUCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishbone_getLCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishbone const *)arg1)->getLCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishbone_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishbone const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishbone_getTierodMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishbone const *)arg1)->getTierodMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishbone_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishbone const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishbone_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishbone const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishbone_getUCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishbone const *)arg1)->getUCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishbone_getLCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishbone const *)arg1)->getLCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishbone_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishbone const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishbone_getTierodRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishbone const *)arg1)->getTierodRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleWishbone_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::DoubleWishbone const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleWishbone_getUCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::DoubleWishbone const *)arg1)->getUCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleWishbone_getUCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::DoubleWishbone const *)arg1)->getUCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleWishbone_getLCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::DoubleWishbone const *)arg1)->getLCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleWishbone_getLCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::DoubleWishbone const *)arg1)->getLCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleWishbone_getUprightInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::DoubleWishbone const *)arg1)->getUprightInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleWishbone_getUprightInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::DoubleWishbone const *)arg1)->getUprightInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleWishbone_getTierodInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::DoubleWishbone const *)arg1)->getTierodInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishbone_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishbone const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishbone_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishbone const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishbone_getShockRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishbone const *)arg1)->getShockRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleWishbone_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::DoubleWishbone const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleWishbone_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::DoubleWishbone const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleWishbone_getUCABushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::DoubleWishbone const *)arg1)->getUCABushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleWishbone_getLCABushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::DoubleWishbone const *)arg1)->getLCABushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleWishbone_getTierodBushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::DoubleWishbone *arg1 = (chrono::vehicle::DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishbone const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::DoubleWishbone const *)arg1)->getTierodBushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DoubleWishboneReduced__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::DoubleWishboneReduced *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::DoubleWishboneReduced *)new chrono::vehicle::DoubleWishboneReduced((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::DoubleWishboneReduced >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DoubleWishboneReduced__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::DoubleWishboneReduced *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::DoubleWishboneReduced *)new chrono::vehicle::DoubleWishboneReduced((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::DoubleWishboneReduced >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DoubleWishboneReduced(void * jarg1) {
  chrono::vehicle::DoubleWishboneReduced *arg1 = (chrono::vehicle::DoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishboneReduced > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::DoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishboneReduced_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishboneReduced *arg1 = (chrono::vehicle::DoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishboneReduced const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishboneReduced const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishboneReduced_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishboneReduced *arg1 = (chrono::vehicle::DoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishboneReduced const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishboneReduced const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishboneReduced_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishboneReduced *arg1 = (chrono::vehicle::DoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishboneReduced const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishboneReduced const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishboneReduced_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishboneReduced *arg1 = (chrono::vehicle::DoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishboneReduced const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishboneReduced const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishboneReduced_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishboneReduced *arg1 = (chrono::vehicle::DoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishboneReduced const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishboneReduced const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishboneReduced_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishboneReduced *arg1 = (chrono::vehicle::DoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishboneReduced const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishboneReduced const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishboneReduced_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishboneReduced *arg1 = (chrono::vehicle::DoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishboneReduced const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishboneReduced const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleWishboneReduced_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::DoubleWishboneReduced *arg1 = (chrono::vehicle::DoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishboneReduced const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::DoubleWishboneReduced const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleWishboneReduced_getUprightInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::DoubleWishboneReduced *arg1 = (chrono::vehicle::DoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishboneReduced const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::DoubleWishboneReduced const *)arg1)->getUprightInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishboneReduced_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishboneReduced *arg1 = (chrono::vehicle::DoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishboneReduced const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishboneReduced const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleWishboneReduced_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleWishboneReduced *arg1 = (chrono::vehicle::DoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishboneReduced const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleWishboneReduced const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleWishboneReduced_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::DoubleWishboneReduced *arg1 = (chrono::vehicle::DoubleWishboneReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleWishboneReduced const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleWishboneReduced > *)jarg1;
  arg1 = (chrono::vehicle::DoubleWishboneReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::DoubleWishboneReduced const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HendricksonPRIMAXX__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::HendricksonPRIMAXX *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::HendricksonPRIMAXX *)new chrono::vehicle::HendricksonPRIMAXX((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::HendricksonPRIMAXX >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HendricksonPRIMAXX__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::HendricksonPRIMAXX *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::HendricksonPRIMAXX *)new chrono::vehicle::HendricksonPRIMAXX((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::HendricksonPRIMAXX >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HendricksonPRIMAXX(void * jarg1) {
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HendricksonPRIMAXX_UseTierodBodies(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->UseTierodBodies();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HendricksonPRIMAXX_getAxlehousingCOM(void * jarg1) {
  void * jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getAxlehousingCOM();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HendricksonPRIMAXX_getTransversebeamCOM(void * jarg1) {
  void * jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getTransversebeamCOM();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HendricksonPRIMAXX_getAxlehousingMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getAxlehousingMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HendricksonPRIMAXX_getKnuckleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getKnuckleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HendricksonPRIMAXX_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HendricksonPRIMAXX_getTorquerodMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getTorquerodMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HendricksonPRIMAXX_getLowerbeamMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getLowerbeamMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HendricksonPRIMAXX_getTransversebeamMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getTransversebeamMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HendricksonPRIMAXX_getTierodMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getTierodMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HendricksonPRIMAXX_getAxlehousingRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getAxlehousingRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HendricksonPRIMAXX_getKnuckleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getKnuckleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HendricksonPRIMAXX_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HendricksonPRIMAXX_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HendricksonPRIMAXX_getTorquerodRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getTorquerodRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HendricksonPRIMAXX_getLowerbeamRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getLowerbeamRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HendricksonPRIMAXX_getTransversebeamRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getTransversebeamRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HendricksonPRIMAXX_getTierodRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getTierodRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HendricksonPRIMAXX_getAxlehousingInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getAxlehousingInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HendricksonPRIMAXX_getKnuckleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getKnuckleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HendricksonPRIMAXX_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HendricksonPRIMAXX_getTorquerodInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getTorquerodInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HendricksonPRIMAXX_getLowerbeamInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getLowerbeamInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HendricksonPRIMAXX_getTransversebeamInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getTransversebeamInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HendricksonPRIMAXX_getTierodInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getTierodInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HendricksonPRIMAXX_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HendricksonPRIMAXX_getShockAHRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getShockAHRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HendricksonPRIMAXX_getShockAHForceCallback(void * jarg1) {
  void * jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getShockAHForceCallback();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HendricksonPRIMAXX_getShockLBRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getShockLBRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HendricksonPRIMAXX_getShockLBForceCallback(void * jarg1) {
  void * jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getShockLBForceCallback();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HendricksonPRIMAXX_getTierodBushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::HendricksonPRIMAXX *arg1 = (chrono::vehicle::HendricksonPRIMAXX *) 0 ;
  std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::HendricksonPRIMAXX > *)jarg1;
  arg1 = (chrono::vehicle::HendricksonPRIMAXX *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::HendricksonPRIMAXX const *)arg1)->getTierodBushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LeafspringAxle__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::LeafspringAxle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::LeafspringAxle *)new chrono::vehicle::LeafspringAxle((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::LeafspringAxle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LeafspringAxle__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::LeafspringAxle *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::LeafspringAxle *)new chrono::vehicle::LeafspringAxle((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::LeafspringAxle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LeafspringAxle(void * jarg1) {
  chrono::vehicle::LeafspringAxle *arg1 = (chrono::vehicle::LeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::LeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::LeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::LeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MacPhersonStrut__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::MacPhersonStrut *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::MacPhersonStrut *)new chrono::vehicle::MacPhersonStrut((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::MacPhersonStrut >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MacPhersonStrut__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::MacPhersonStrut *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::MacPhersonStrut *)new chrono::vehicle::MacPhersonStrut((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::MacPhersonStrut >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MacPhersonStrut(void * jarg1) {
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MacPhersonStrut_UseTierodBodies(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::MacPhersonStrut const *)arg1)->UseTierodBodies();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MacPhersonStrut_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MacPhersonStrut const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MacPhersonStrut_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MacPhersonStrut const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MacPhersonStrut_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MacPhersonStrut const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MacPhersonStrut_getStrutMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MacPhersonStrut const *)arg1)->getStrutMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MacPhersonStrut_getLCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MacPhersonStrut const *)arg1)->getLCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MacPhersonStrut_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MacPhersonStrut const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MacPhersonStrut_getTierodMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MacPhersonStrut const *)arg1)->getTierodMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MacPhersonStrut_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MacPhersonStrut const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MacPhersonStrut_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MacPhersonStrut const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MacPhersonStrut_getStrutRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MacPhersonStrut const *)arg1)->getStrutRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MacPhersonStrut_getLCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MacPhersonStrut const *)arg1)->getLCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MacPhersonStrut_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MacPhersonStrut const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MacPhersonStrut_getTierodRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MacPhersonStrut const *)arg1)->getTierodRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MacPhersonStrut_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::MacPhersonStrut const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MacPhersonStrut_getStrutInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::MacPhersonStrut const *)arg1)->getStrutInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MacPhersonStrut_getLCAInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::MacPhersonStrut const *)arg1)->getLCAInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MacPhersonStrut_getUprightInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::MacPhersonStrut const *)arg1)->getUprightInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MacPhersonStrut_getTierodInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::MacPhersonStrut const *)arg1)->getTierodInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MacPhersonStrut_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MacPhersonStrut const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MacPhersonStrut_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MacPhersonStrut const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MacPhersonStrut_getShockRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MacPhersonStrut const *)arg1)->getShockRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MacPhersonStrut_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::MacPhersonStrut const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MacPhersonStrut_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::MacPhersonStrut const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MacPhersonStrut_getLCABushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::MacPhersonStrut const *)arg1)->getLCABushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MacPhersonStrut_getTierodBushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::MacPhersonStrut *arg1 = (chrono::vehicle::MacPhersonStrut *) 0 ;
  std::shared_ptr< chrono::vehicle::MacPhersonStrut const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MacPhersonStrut > *)jarg1;
  arg1 = (chrono::vehicle::MacPhersonStrut *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::MacPhersonStrut const *)arg1)->getTierodBushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MultiLink__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::MultiLink *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::MultiLink *)new chrono::vehicle::MultiLink((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::MultiLink >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MultiLink__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::MultiLink *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::MultiLink *)new chrono::vehicle::MultiLink((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::MultiLink >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MultiLink(void * jarg1) {
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MultiLink_UseTierodBodies(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::MultiLink const *)arg1)->UseTierodBodies();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MultiLink_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MultiLink const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MultiLink_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MultiLink const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MultiLink_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MultiLink const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MultiLink_getUpperArmMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MultiLink const *)arg1)->getUpperArmMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MultiLink_getLateralMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MultiLink const *)arg1)->getLateralMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MultiLink_getTrailingLinkMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MultiLink const *)arg1)->getTrailingLinkMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MultiLink_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MultiLink const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MultiLink_getTierodMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MultiLink const *)arg1)->getTierodMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MultiLink_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MultiLink const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MultiLink_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MultiLink const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MultiLink_getUpperArmRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MultiLink const *)arg1)->getUpperArmRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MultiLink_getLateralRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MultiLink const *)arg1)->getLateralRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MultiLink_getTrailingLinkRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MultiLink const *)arg1)->getTrailingLinkRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MultiLink_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MultiLink const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MultiLink_getTierodRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MultiLink const *)arg1)->getTierodRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultiLink_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::MultiLink const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultiLink_getUpperArmInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::MultiLink const *)arg1)->getUpperArmInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultiLink_getLateralInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::MultiLink const *)arg1)->getLateralInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultiLink_getTrailingLinkInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::MultiLink const *)arg1)->getTrailingLinkInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultiLink_getUprightInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::MultiLink const *)arg1)->getUprightInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultiLink_getTierodInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::MultiLink const *)arg1)->getTierodInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MultiLink_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MultiLink const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MultiLink_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MultiLink const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MultiLink_getShockRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::MultiLink const *)arg1)->getShockRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultiLink_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::MultiLink const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultiLink_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::MultiLink const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultiLink_getTierodBushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::MultiLink *arg1 = (chrono::vehicle::MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::MultiLink const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::MultiLink const *)arg1)->getTierodBushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SemiTrailingArm__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::SemiTrailingArm *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::SemiTrailingArm *)new chrono::vehicle::SemiTrailingArm((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SemiTrailingArm >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SemiTrailingArm__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::SemiTrailingArm *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::SemiTrailingArm *)new chrono::vehicle::SemiTrailingArm((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SemiTrailingArm >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SemiTrailingArm(void * jarg1) {
  chrono::vehicle::SemiTrailingArm *arg1 = (chrono::vehicle::SemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::SemiTrailingArm > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::SemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_SemiTrailingArm_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::SemiTrailingArm *arg1 = (chrono::vehicle::SemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::SemiTrailingArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::SemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SemiTrailingArm const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SemiTrailingArm_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::SemiTrailingArm *arg1 = (chrono::vehicle::SemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::SemiTrailingArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::SemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SemiTrailingArm const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SemiTrailingArm_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::SemiTrailingArm *arg1 = (chrono::vehicle::SemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::SemiTrailingArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::SemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SemiTrailingArm const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SemiTrailingArm_getArmMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::SemiTrailingArm *arg1 = (chrono::vehicle::SemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::SemiTrailingArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::SemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SemiTrailingArm const *)arg1)->getArmMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SemiTrailingArm_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SemiTrailingArm *arg1 = (chrono::vehicle::SemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::SemiTrailingArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::SemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SemiTrailingArm const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SemiTrailingArm_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::SemiTrailingArm *arg1 = (chrono::vehicle::SemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::SemiTrailingArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::SemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SemiTrailingArm const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SemiTrailingArm_getArmRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SemiTrailingArm *arg1 = (chrono::vehicle::SemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::SemiTrailingArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::SemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SemiTrailingArm const *)arg1)->getArmRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SemiTrailingArm_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SemiTrailingArm *arg1 = (chrono::vehicle::SemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::SemiTrailingArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::SemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::SemiTrailingArm const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SemiTrailingArm_getArmInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SemiTrailingArm *arg1 = (chrono::vehicle::SemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::SemiTrailingArm const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::SemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::SemiTrailingArm const *)arg1)->getArmInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SemiTrailingArm_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::SemiTrailingArm *arg1 = (chrono::vehicle::SemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::SemiTrailingArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::SemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SemiTrailingArm const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SemiTrailingArm_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::SemiTrailingArm *arg1 = (chrono::vehicle::SemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::SemiTrailingArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::SemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SemiTrailingArm const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SemiTrailingArm_getShockRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::SemiTrailingArm *arg1 = (chrono::vehicle::SemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::SemiTrailingArm const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::SemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SemiTrailingArm const *)arg1)->getShockRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SemiTrailingArm_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SemiTrailingArm *arg1 = (chrono::vehicle::SemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::SemiTrailingArm const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::SemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::SemiTrailingArm const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SemiTrailingArm_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SemiTrailingArm *arg1 = (chrono::vehicle::SemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::SemiTrailingArm const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::SemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::SemiTrailingArm const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SemiTrailingArm_getCABushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SemiTrailingArm *arg1 = (chrono::vehicle::SemiTrailingArm *) 0 ;
  std::shared_ptr< chrono::vehicle::SemiTrailingArm const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SemiTrailingArm > *)jarg1;
  arg1 = (chrono::vehicle::SemiTrailingArm *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::SemiTrailingArm const *)arg1)->getCABushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SolidAxle__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::SolidAxle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::SolidAxle *)new chrono::vehicle::SolidAxle((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SolidAxle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SolidAxle__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::SolidAxle *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::SolidAxle *)new chrono::vehicle::SolidAxle((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SolidAxle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SolidAxle(void * jarg1) {
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getAxleTubeMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getAxleTubeMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getULMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getULMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getLLMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getLLMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getKnuckleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getKnuckleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getTierodMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getTierodMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getDraglinkMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getDraglinkMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getBellCrankMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getBellCrankMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getAxleTubeRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getAxleTubeRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getULRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getULRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getLLRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getLLRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getKnuckleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getKnuckleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getTierodRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getTierodRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getDraglinkRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getDraglinkRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getBellCrankRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getBellCrankRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SolidAxle_getAxleTubeInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::SolidAxle const *)arg1)->getAxleTubeInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SolidAxle_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::SolidAxle const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SolidAxle_getULInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::SolidAxle const *)arg1)->getULInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SolidAxle_getLLInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::SolidAxle const *)arg1)->getLLInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SolidAxle_getKnuckleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::SolidAxle const *)arg1)->getKnuckleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SolidAxle_getTierodInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::SolidAxle const *)arg1)->getTierodInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SolidAxle_getDraglinkInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::SolidAxle const *)arg1)->getDraglinkInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SolidAxle_getBellCrankInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::SolidAxle const *)arg1)->getBellCrankInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SolidAxle_getShockRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SolidAxle const *)arg1)->getShockRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SolidAxle_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::SolidAxle const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SolidAxle_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::SolidAxle const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SolidAxle_getAxleTubeCOM(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SolidAxle *arg1 = (chrono::vehicle::SolidAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidAxle const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SolidAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::SolidAxle const *)arg1)->getAxleTubeCOM();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ThreeLinkIRS__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::ThreeLinkIRS *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::ThreeLinkIRS *)new chrono::vehicle::ThreeLinkIRS((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ThreeLinkIRS >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ThreeLinkIRS__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::ThreeLinkIRS *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::ThreeLinkIRS *)new chrono::vehicle::ThreeLinkIRS((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ThreeLinkIRS >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ThreeLinkIRS(void * jarg1) {
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ThreeLinkIRS_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ThreeLinkIRS const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ThreeLinkIRS_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ThreeLinkIRS const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ThreeLinkIRS_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ThreeLinkIRS const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ThreeLinkIRS_getArmMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ThreeLinkIRS const *)arg1)->getArmMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ThreeLinkIRS_getUpperLinkMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ThreeLinkIRS const *)arg1)->getUpperLinkMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ThreeLinkIRS_getLowerLinkMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ThreeLinkIRS const *)arg1)->getLowerLinkMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ThreeLinkIRS_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ThreeLinkIRS const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ThreeLinkIRS_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ThreeLinkIRS const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ThreeLinkIRS_getArmRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ThreeLinkIRS const *)arg1)->getArmRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ThreeLinkIRS_getUpperLinkRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ThreeLinkIRS const *)arg1)->getUpperLinkRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ThreeLinkIRS_getLowerLinkRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ThreeLinkIRS const *)arg1)->getLowerLinkRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ThreeLinkIRS_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::ThreeLinkIRS const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ThreeLinkIRS_getArmInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::ThreeLinkIRS const *)arg1)->getArmInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ThreeLinkIRS_getUpperLinkInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::ThreeLinkIRS const *)arg1)->getUpperLinkInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ThreeLinkIRS_getLowerLinkInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::ThreeLinkIRS const *)arg1)->getLowerLinkInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ThreeLinkIRS_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ThreeLinkIRS const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ThreeLinkIRS_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ThreeLinkIRS const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ThreeLinkIRS_getShockRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ThreeLinkIRS const *)arg1)->getShockRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ThreeLinkIRS_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ThreeLinkIRS const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ThreeLinkIRS_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ThreeLinkIRS const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ThreeLinkIRS_getArmChassisBushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ThreeLinkIRS const *)arg1)->getArmChassisBushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ThreeLinkIRS_getArmUpperBushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ThreeLinkIRS const *)arg1)->getArmUpperBushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ThreeLinkIRS_getArmLowerBushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ThreeLinkIRS const *)arg1)->getArmLowerBushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ThreeLinkIRS_getChassisUpperBushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ThreeLinkIRS const *)arg1)->getChassisUpperBushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ThreeLinkIRS_getChassisLowerBushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ThreeLinkIRS *arg1 = (chrono::vehicle::ThreeLinkIRS *) 0 ;
  std::shared_ptr< chrono::vehicle::ThreeLinkIRS const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ThreeLinkIRS > *)jarg1;
  arg1 = (chrono::vehicle::ThreeLinkIRS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ThreeLinkIRS const *)arg1)->getChassisLowerBushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToeBarLeafspringAxle__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::ToeBarLeafspringAxle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::ToeBarLeafspringAxle *)new chrono::vehicle::ToeBarLeafspringAxle((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ToeBarLeafspringAxle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToeBarLeafspringAxle__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::ToeBarLeafspringAxle *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::ToeBarLeafspringAxle *)new chrono::vehicle::ToeBarLeafspringAxle((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ToeBarLeafspringAxle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ToeBarLeafspringAxle(void * jarg1) {
  chrono::vehicle::ToeBarLeafspringAxle *arg1 = (chrono::vehicle::ToeBarLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ToeBarLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::ToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SolidBellcrankThreeLinkAxle__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::SolidBellcrankThreeLinkAxle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::SolidBellcrankThreeLinkAxle *)new chrono::vehicle::SolidBellcrankThreeLinkAxle((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SolidBellcrankThreeLinkAxle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SolidBellcrankThreeLinkAxle__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::SolidBellcrankThreeLinkAxle *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::SolidBellcrankThreeLinkAxle *)new chrono::vehicle::SolidBellcrankThreeLinkAxle((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SolidBellcrankThreeLinkAxle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SolidBellcrankThreeLinkAxle(void * jarg1) {
  chrono::vehicle::SolidBellcrankThreeLinkAxle *arg1 = (chrono::vehicle::SolidBellcrankThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidBellcrankThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SolidBellcrankThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidBellcrankThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SolidThreeLinkAxle__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::SolidThreeLinkAxle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::SolidThreeLinkAxle *)new chrono::vehicle::SolidThreeLinkAxle((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SolidThreeLinkAxle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SolidThreeLinkAxle__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::SolidThreeLinkAxle *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::SolidThreeLinkAxle *)new chrono::vehicle::SolidThreeLinkAxle((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SolidThreeLinkAxle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SolidThreeLinkAxle(void * jarg1) {
  chrono::vehicle::SolidThreeLinkAxle *arg1 = (chrono::vehicle::SolidThreeLinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::SolidThreeLinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SolidThreeLinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::SolidThreeLinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SingleWishbone__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::SingleWishbone *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::SingleWishbone *)new chrono::vehicle::SingleWishbone((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SingleWishbone >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SingleWishbone__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::SingleWishbone *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::SingleWishbone *)new chrono::vehicle::SingleWishbone((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SingleWishbone >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SingleWishbone(void * jarg1) {
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SingleWishbone_UseTierodBodies(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::SingleWishbone const *)arg1)->UseTierodBodies();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SingleWishbone_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SingleWishbone const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SingleWishbone_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SingleWishbone const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SingleWishbone_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SingleWishbone const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SingleWishbone_getCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SingleWishbone const *)arg1)->getCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SingleWishbone_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SingleWishbone const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SingleWishbone_getTierodMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SingleWishbone const *)arg1)->getTierodMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SingleWishbone_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SingleWishbone const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SingleWishbone_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SingleWishbone const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SingleWishbone_getCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SingleWishbone const *)arg1)->getCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SingleWishbone_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SingleWishbone const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SingleWishbone_getTierodRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SingleWishbone const *)arg1)->getTierodRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SingleWishbone_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::SingleWishbone const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SingleWishbone_getCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::SingleWishbone const *)arg1)->getCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SingleWishbone_getCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::SingleWishbone const *)arg1)->getCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SingleWishbone_getUprightInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::SingleWishbone const *)arg1)->getUprightInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SingleWishbone_getUprightInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::SingleWishbone const *)arg1)->getUprightInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SingleWishbone_getTierodInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::SingleWishbone const *)arg1)->getTierodInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SingleWishbone_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SingleWishbone const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SingleWishbone_getShockRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SingleWishbone const *)arg1)->getShockRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SingleWishbone_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::SingleWishbone const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SingleWishbone_getCABushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::SingleWishbone const *)arg1)->getCABushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SingleWishbone_getTierodBushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SingleWishbone *arg1 = (chrono::vehicle::SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleWishbone const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::SingleWishbone const *)arg1)->getTierodBushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_RigidSuspension(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::generic::Generic_RigidSuspension *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_RigidSuspension *)new chrono::vehicle::generic::Generic_RigidSuspension((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_RigidSuspension >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Generic_RigidSuspension(void * jarg1) {
  chrono::vehicle::generic::Generic_RigidSuspension *arg1 = (chrono::vehicle::generic::Generic_RigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_RigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_RigidSuspension_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_RigidSuspension *arg1 = (chrono::vehicle::generic::Generic_RigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_RigidSuspension const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_RigidSuspension_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_RigidSuspension *arg1 = (chrono::vehicle::generic::Generic_RigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_RigidSuspension const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_RigidSuspension_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_RigidSuspension *arg1 = (chrono::vehicle::generic::Generic_RigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_RigidSuspension const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_RigidSuspension_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_RigidSuspension *arg1 = (chrono::vehicle::generic::Generic_RigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidSuspension const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_RigidSuspension const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_RigidSuspension_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_RigidSuspension *arg1 = (chrono::vehicle::generic::Generic_RigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_RigidSuspension const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_RigidPinnedAxle(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::generic::Generic_RigidPinnedAxle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_RigidPinnedAxle *)new chrono::vehicle::generic::Generic_RigidPinnedAxle((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_RigidPinnedAxle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Generic_RigidPinnedAxle(void * jarg1) {
  chrono::vehicle::generic::Generic_RigidPinnedAxle *arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidPinnedAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_RigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_RigidPinnedAxle_getAxleTubeCOM(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_RigidPinnedAxle *arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidPinnedAxle const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::generic::Generic_RigidPinnedAxle const *)arg1)->getAxleTubeCOM();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_RigidPinnedAxle_getAxlePinLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_RigidPinnedAxle *arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidPinnedAxle const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::generic::Generic_RigidPinnedAxle const *)arg1)->getAxlePinLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_RigidPinnedAxle_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_RigidPinnedAxle *arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidPinnedAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_RigidPinnedAxle const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_RigidPinnedAxle_getAxleTubeMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_RigidPinnedAxle *arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidPinnedAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_RigidPinnedAxle const *)arg1)->getAxleTubeMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_RigidPinnedAxle_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_RigidPinnedAxle *arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidPinnedAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_RigidPinnedAxle const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_RigidPinnedAxle_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_RigidPinnedAxle *arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidPinnedAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_RigidPinnedAxle const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_RigidPinnedAxle_getAxleTubeRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_RigidPinnedAxle *arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidPinnedAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_RigidPinnedAxle const *)arg1)->getAxleTubeRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_RigidPinnedAxle_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_RigidPinnedAxle *arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidPinnedAxle const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_RigidPinnedAxle const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_RigidPinnedAxle_getAxleTubeInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_RigidPinnedAxle *arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidPinnedAxle const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_RigidPinnedAxle const *)arg1)->getAxleTubeInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_RigidPinnedAxle_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_RigidPinnedAxle *arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidPinnedAxle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidPinnedAxle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidPinnedAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_RigidPinnedAxle const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_MultiLink(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::generic::Generic_MultiLink *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_MultiLink *)new chrono::vehicle::generic::Generic_MultiLink((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_MultiLink >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Generic_MultiLink(void * jarg1) {
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_MultiLink_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_MultiLink_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_MultiLink_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_MultiLink_getUpperArmMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getUpperArmMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_MultiLink_getLateralMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getLateralMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_MultiLink_getTrailingLinkMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getTrailingLinkMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_MultiLink_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_MultiLink_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_MultiLink_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_MultiLink_getUpperArmRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getUpperArmRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_MultiLink_getLateralRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getLateralRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_MultiLink_getTrailingLinkRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getTrailingLinkRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_MultiLink_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_MultiLink_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_MultiLink_getUpperArmInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getUpperArmInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_MultiLink_getLateralInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getLateralInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_MultiLink_getTrailingLinkInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getTrailingLinkInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_MultiLink_getUprightInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getUprightInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_MultiLink_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_MultiLink_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_MultiLink_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_MultiLink_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_MultiLink *arg1 = (chrono::vehicle::generic::Generic_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::generic::Generic_MultiLink const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_DoubleWishbone(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::generic::Generic_DoubleWishbone *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_DoubleWishbone *)new chrono::vehicle::generic::Generic_DoubleWishbone((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_DoubleWishbone >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Generic_DoubleWishbone(void * jarg1) {
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishbone_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishbone_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishbone_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishbone_getUCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getUCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishbone_getLCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getLCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishbone_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishbone_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishbone_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishbone_getUCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getUCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishbone_getLCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getLCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishbone_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishbone_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishbone_getUCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getUCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishbone_getUCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getUCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishbone_getLCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getLCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishbone_getLCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getLCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishbone_getUprightInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getUprightInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishbone_getUprightInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getUprightInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishbone_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishbone_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishbone_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishbone_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishbone *arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::generic::Generic_DoubleWishbone const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_DoubleWishboneFront(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)new chrono::vehicle::generic::Generic_DoubleWishboneFront((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_DoubleWishboneFront >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Generic_DoubleWishboneFront(void * jarg1) {
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getUCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getUCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getLCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getLCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getUCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getUCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getLCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getLCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getUCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getUCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getUCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getUCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getLCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getLCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getLCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getLCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getUprightInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getUprightInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getUprightInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getUprightInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneFront *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::generic::Generic_DoubleWishboneFront const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_DoubleWishboneRear(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)new chrono::vehicle::generic::Generic_DoubleWishboneRear((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_DoubleWishboneRear >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Generic_DoubleWishboneRear(void * jarg1) {
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getUCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getUCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getLCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getLCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getUCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getUCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getLCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getLCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getUCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getUCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getUCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getUCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getLCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getLCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getLCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getLCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getUprightInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getUprightInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getUprightInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getUprightInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_DoubleWishboneRear *arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::generic::Generic_DoubleWishboneRear const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_DoubleWishboneFront(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)new chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_DoubleWishboneFront(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_UseTierodBodies(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->UseTierodBodies();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getUCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getUCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getLCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getLCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getTierodMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getTierodMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getUCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getUCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getLCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getLCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getTierodRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getTierodRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getUCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getUCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getUCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getUCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getLCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getLCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getLCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getLCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getUprightInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getUprightInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getUprightInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getUprightInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getTierodInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getTierodInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_DoubleWishboneRear(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)new chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_DoubleWishboneRear(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_UseTierodBodies(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->UseTierodBodies();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getUCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getUCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getLCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getLCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getTierodMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getTierodMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getUCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getUCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getLCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getLCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getTierodRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getTierodRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getUCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getUCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getUCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getUCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getLCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getLCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getLCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getLCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getUprightInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getUprightInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getUprightInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getUprightInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getTierodInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getTierodInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_DoubleWishboneReducedFront(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *)new chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_DoubleWishboneReducedFront(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedFront_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedFront_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedFront_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedFront_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedFront_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedFront_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedFront_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedFront_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedFront_getUprightInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const *)arg1)->getUprightInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedFront_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedFront_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedFront_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_DoubleWishboneReducedRear(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *)new chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_DoubleWishboneReducedRear(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedRear_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedRear_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedRear_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedRear_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedRear_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedRear_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedRear_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedRear_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedRear_getUprightInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const *)arg1)->getUprightInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedRear_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedRear_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedRear_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan_DoubleWishbone(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)new chrono::vehicle::sedan::Sedan_DoubleWishbone((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan_DoubleWishbone >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sedan_DoubleWishbone(void * jarg1) {
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getUCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getUCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getLCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getLCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getUCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getUCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getLCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getLCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getUCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getUCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getUCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getUCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getLCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getLCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getLCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getLCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getUprightInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getUprightInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getUprightInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getUprightInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_DoubleWishbone_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_DoubleWishbone *arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_DoubleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_DoubleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::sedan::Sedan_DoubleWishbone const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan_MultiLink(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::sedan::Sedan_MultiLink *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan_MultiLink *)new chrono::vehicle::sedan::Sedan_MultiLink((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan_MultiLink >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sedan_MultiLink(void * jarg1) {
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_MultiLink_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_MultiLink_getUpperArmMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getUpperArmMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_MultiLink_getLateralMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getLateralMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_MultiLink_getTrailingLinkMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getTrailingLinkMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_MultiLink_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_MultiLink_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_MultiLink_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_MultiLink_getUpperArmRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getUpperArmRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_MultiLink_getLateralRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getLateralRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_MultiLink_getTrailingLinkRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getTrailingLinkRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_MultiLink_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_MultiLink_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_MultiLink_getUpperArmInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getUpperArmInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_MultiLink_getLateralInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getLateralInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_MultiLink_getTrailingLinkInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getTrailingLinkInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_MultiLink_getUprightInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getUprightInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_MultiLink_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_MultiLink_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_MultiLink_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_MultiLink_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_MultiLink *arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_MultiLink > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_MultiLink *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::sedan::Sedan_MultiLink const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_ToeBarLeafspringAxle(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::citybus::CityBus_ToeBarLeafspringAxle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_ToeBarLeafspringAxle *)new chrono::vehicle::citybus::CityBus_ToeBarLeafspringAxle((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_ToeBarLeafspringAxle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CityBus_ToeBarLeafspringAxle(void * jarg1) {
  chrono::vehicle::citybus::CityBus_ToeBarLeafspringAxle *arg1 = (chrono::vehicle::citybus::CityBus_ToeBarLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_ToeBarLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_ToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_ToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_SolidAxleFront(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)new chrono::vehicle::citybus::CityBus_SolidAxleFront((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_SolidAxleFront >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CityBus_SolidAxleFront(void * jarg1) {
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getAxleTubeMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getAxleTubeMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getULMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getULMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getLLMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getLLMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getKnuckleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getKnuckleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getTierodMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getTierodMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getDraglinkMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getDraglinkMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getBellCrankMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getBellCrankMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getAxleTubeRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getAxleTubeRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getULRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getULRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getLLRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getLLRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getKnuckleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getKnuckleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getTierodRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getTierodRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getDraglinkRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getDraglinkRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getBellCrankRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getBellCrankRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getAxleTubeInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getAxleTubeInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getULInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getULInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getLLInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getLLInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getKnuckleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getKnuckleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getTierodInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getTierodInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getDraglinkInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getDraglinkInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getBellCrankInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getBellCrankInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleFront_getAxleTubeCOM(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleFront *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleFront > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::citybus::CityBus_SolidAxleFront const *)arg1)->getAxleTubeCOM();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_SolidAxleRear(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)new chrono::vehicle::citybus::CityBus_SolidAxleRear((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_SolidAxleRear >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CityBus_SolidAxleRear(void * jarg1) {
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getAxleTubeMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getAxleTubeMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getULMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getULMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getLLMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getLLMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getKnuckleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getKnuckleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getTierodMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getTierodMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getDraglinkMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getDraglinkMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getBellCrankMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getBellCrankMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getAxleTubeRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getAxleTubeRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getULRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getULRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getLLRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getLLRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getKnuckleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getKnuckleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getTierodRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getTierodRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getDraglinkRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getDraglinkRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getBellCrankRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getBellCrankRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getAxleTubeInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getAxleTubeInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getULInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getULInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getLLInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getLLInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getKnuckleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getKnuckleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getTierodInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getTierodInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getDraglinkInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getDraglinkInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getBellCrankInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getBellCrankInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_SolidAxleRear_getAxleTubeCOM(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_SolidAxleRear *arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_SolidAxleRear > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_SolidAxleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::citybus::CityBus_SolidAxleRear const *)arg1)->getAxleTubeCOM();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_LeafspringAxle(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::citybus::CityBus_LeafspringAxle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_LeafspringAxle *)new chrono::vehicle::citybus::CityBus_LeafspringAxle((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_LeafspringAxle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CityBus_LeafspringAxle(void * jarg1) {
  chrono::vehicle::citybus::CityBus_LeafspringAxle *arg1 = (chrono::vehicle::citybus::CityBus_LeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_LeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_LeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_LeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_BellcrankSolid3LinkAxle(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_5t_BellcrankSolid3LinkAxle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_BellcrankSolid3LinkAxle *)new chrono::vehicle::man::MAN_5t_BellcrankSolid3LinkAxle((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_BellcrankSolid3LinkAxle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_5t_BellcrankSolid3LinkAxle(void * jarg1) {
  chrono::vehicle::man::MAN_5t_BellcrankSolid3LinkAxle *arg1 = (chrono::vehicle::man::MAN_5t_BellcrankSolid3LinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_BellcrankSolid3LinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_BellcrankSolid3LinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_BellcrankSolid3LinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_Solid3LinkAxle(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_5t_Solid3LinkAxle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_Solid3LinkAxle *)new chrono::vehicle::man::MAN_5t_Solid3LinkAxle((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_Solid3LinkAxle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_5t_Solid3LinkAxle(void * jarg1) {
  chrono::vehicle::man::MAN_5t_Solid3LinkAxle *arg1 = (chrono::vehicle::man::MAN_5t_Solid3LinkAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Solid3LinkAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_Solid3LinkAxle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Solid3LinkAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_10t_Front1Axle(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_10t_Front1Axle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_10t_Front1Axle *)new chrono::vehicle::man::MAN_10t_Front1Axle((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_10t_Front1Axle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_10t_Front1Axle(void * jarg1) {
  chrono::vehicle::man::MAN_10t_Front1Axle *arg1 = (chrono::vehicle::man::MAN_10t_Front1Axle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Front1Axle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t_Front1Axle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Front1Axle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_10t_Front2Axle(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_10t_Front2Axle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_10t_Front2Axle *)new chrono::vehicle::man::MAN_10t_Front2Axle((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_10t_Front2Axle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_10t_Front2Axle(void * jarg1) {
  chrono::vehicle::man::MAN_10t_Front2Axle *arg1 = (chrono::vehicle::man::MAN_10t_Front2Axle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Front2Axle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t_Front2Axle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Front2Axle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_ToeBarLeafspringAxle(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS_ToeBarLeafspringAxle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_ToeBarLeafspringAxle *)new chrono::vehicle::uaz::UAZBUS_ToeBarLeafspringAxle((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_ToeBarLeafspringAxle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UAZBUS_ToeBarLeafspringAxle(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_ToeBarLeafspringAxle *arg1 = (chrono::vehicle::uaz::UAZBUS_ToeBarLeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_ToeBarLeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_ToeBarLeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_ToeBarLeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_LeafspringAxle(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS_LeafspringAxle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_LeafspringAxle *)new chrono::vehicle::uaz::UAZBUS_LeafspringAxle((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_LeafspringAxle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UAZBUS_LeafspringAxle(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_LeafspringAxle *arg1 = (chrono::vehicle::uaz::UAZBUS_LeafspringAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_LeafspringAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_LeafspringAxle > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_LeafspringAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_SingleWishbone(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::gator::Gator_SingleWishbone *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_SingleWishbone *)new chrono::vehicle::gator::Gator_SingleWishbone((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_SingleWishbone >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Gator_SingleWishbone(void * jarg1) {
  chrono::vehicle::gator::Gator_SingleWishbone *arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SingleWishbone > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_SingleWishbone_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_SingleWishbone *arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_SingleWishbone const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_SingleWishbone_getCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_SingleWishbone *arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_SingleWishbone const *)arg1)->getCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_SingleWishbone_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_SingleWishbone *arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_SingleWishbone const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_SingleWishbone_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_SingleWishbone *arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_SingleWishbone const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_SingleWishbone_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_SingleWishbone *arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_SingleWishbone const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_SingleWishbone_getCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_SingleWishbone *arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_SingleWishbone const *)arg1)->getCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_SingleWishbone_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_SingleWishbone *arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_SingleWishbone const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gator_SingleWishbone_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::gator::Gator_SingleWishbone *arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SingleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::gator::Gator_SingleWishbone const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gator_SingleWishbone_getCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::gator::Gator_SingleWishbone *arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SingleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::gator::Gator_SingleWishbone const *)arg1)->getCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gator_SingleWishbone_getCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::gator::Gator_SingleWishbone *arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SingleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::gator::Gator_SingleWishbone const *)arg1)->getCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gator_SingleWishbone_getUprightInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::gator::Gator_SingleWishbone *arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SingleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::gator::Gator_SingleWishbone const *)arg1)->getUprightInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gator_SingleWishbone_getUprightInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::gator::Gator_SingleWishbone *arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SingleWishbone const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::gator::Gator_SingleWishbone const *)arg1)->getUprightInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_SingleWishbone_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_SingleWishbone *arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_SingleWishbone const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_SingleWishbone_getShockRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_SingleWishbone *arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SingleWishbone const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_SingleWishbone const *)arg1)->getShockRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gator_SingleWishbone_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::gator::Gator_SingleWishbone *arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SingleWishbone const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_SingleWishbone > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SingleWishbone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::gator::Gator_SingleWishbone const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_RigidSuspension(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::gator::Gator_RigidSuspension *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_RigidSuspension *)new chrono::vehicle::gator::Gator_RigidSuspension((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_RigidSuspension >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Gator_RigidSuspension(void * jarg1) {
  chrono::vehicle::gator::Gator_RigidSuspension *arg1 = (chrono::vehicle::gator::Gator_RigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RigidSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_RigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_RigidSuspension_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_RigidSuspension *arg1 = (chrono::vehicle::gator::Gator_RigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RigidSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_RigidSuspension const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_RigidSuspension_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_RigidSuspension *arg1 = (chrono::vehicle::gator::Gator_RigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RigidSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_RigidSuspension const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_RigidSuspension_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_RigidSuspension *arg1 = (chrono::vehicle::gator::Gator_RigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RigidSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_RigidSuspension const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gator_RigidSuspension_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::gator::Gator_RigidSuspension *arg1 = (chrono::vehicle::gator::Gator_RigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RigidSuspension const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::gator::Gator_RigidSuspension const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_RigidSuspension_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_RigidSuspension *arg1 = (chrono::vehicle::gator::Gator_RigidSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RigidSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RigidSuspension > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RigidSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_RigidSuspension const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCCar_DoubleWishboneFront(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)new chrono::vehicle::rccar::RCCar_DoubleWishboneFront((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::rccar::RCCar_DoubleWishboneFront >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RCCar_DoubleWishboneFront(void * jarg1) {
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getUCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getUCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getLCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getLCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getUCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getUCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getLCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getLCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getUCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getUCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getUCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getUCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getLCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getLCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getLCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getLCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getUprightInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getUprightInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getUprightInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getUprightInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneFront *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::rccar::RCCar_DoubleWishboneFront const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCCar_DoubleWishboneRear(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)new chrono::vehicle::rccar::RCCar_DoubleWishboneRear((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::rccar::RCCar_DoubleWishboneRear >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RCCar_DoubleWishboneRear(void * jarg1) {
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getUCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getUCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getLCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getLCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getUCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getUCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getLCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getLCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getUCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getUCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getUCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getUCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getLCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getLCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getLCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getLCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getUprightInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getUprightInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getUprightInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getUprightInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_DoubleWishboneRear *arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::rccar::RCCar_DoubleWishboneRear const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_DoubleWishboneFront__SWIG_0(const char * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)new chrono::vehicle::feda::FEDA_DoubleWishboneFront((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_DoubleWishboneFront >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_DoubleWishboneFront__SWIG_1(const char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)new chrono::vehicle::feda::FEDA_DoubleWishboneFront((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_DoubleWishboneFront >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_DoubleWishboneFront__SWIG_2(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)new chrono::vehicle::feda::FEDA_DoubleWishboneFront((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_DoubleWishboneFront >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FEDA_DoubleWishboneFront(void * jarg1) {
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getUCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getUCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getLCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getLCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getUCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getUCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getLCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getLCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getUCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getUCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getUCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getUCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getLCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getLCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getLCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getLCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getUprightInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getUprightInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getUprightInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getUprightInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::feda::FEDA_DoubleWishboneFront const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6, double jarg7) {
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6) {
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::feda::FEDA_DoubleWishboneFront *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_DoubleWishboneFront > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneFront *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_DoubleWishboneRear__SWIG_0(const char * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)new chrono::vehicle::feda::FEDA_DoubleWishboneRear((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_DoubleWishboneRear >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_DoubleWishboneRear__SWIG_1(const char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)new chrono::vehicle::feda::FEDA_DoubleWishboneRear((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_DoubleWishboneRear >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_DoubleWishboneRear__SWIG_2(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)new chrono::vehicle::feda::FEDA_DoubleWishboneRear((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_DoubleWishboneRear >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FEDA_DoubleWishboneRear(void * jarg1) {
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getToeAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getToeAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getSpindleMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getSpindleMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getUCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getUCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getLCAMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getLCAMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getUprightMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getUprightMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getSpindleRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getSpindleRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getSpindleWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getSpindleWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getUCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getUCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getLCARadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getLCARadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getUprightRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getUprightRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getSpindleInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getSpindleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getUCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getUCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getUCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getUCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getLCAInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getLCAInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getLCAInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getLCAInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getUprightInertiaMoments(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getUprightInertiaMoments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getUprightInertiaProducts(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getUprightInertiaProducts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getSpringRestLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getSpringRestLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getSpringForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getSpringForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_getShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::feda::FEDA_DoubleWishboneRear const *)arg1)->getShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6, double jarg7) {
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6) {
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::feda::FEDA_DoubleWishboneRear *arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_DoubleWishboneRear > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_DoubleWishboneRear *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChDriveline(void * jarg1) {
  chrono::vehicle::ChDriveline *arg1 = (chrono::vehicle::ChDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDriveline_Initialize(void * jarg1, void * jarg2) {
  chrono::vehicle::ChDriveline *arg1 = (chrono::vehicle::ChDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  {
    try {
      (arg1)->Initialize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDriveline_Synchronize(void * jarg1, double jarg2, void * jarg3, double jarg4) {
  chrono::vehicle::ChDriveline *arg1 = (chrono::vehicle::ChDriveline *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::ChDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDriveline_Disconnect(void * jarg1) {
  chrono::vehicle::ChDriveline *arg1 = (chrono::vehicle::ChDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Disconnect();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChDriveline_GetOutputDriveshaftSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChDriveline *arg1 = (chrono::vehicle::ChDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChDriveline const *)arg1)->GetOutputDriveshaftSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChDrivelineWV(void * jarg1) {
  chrono::vehicle::ChDrivelineWV *arg1 = (chrono::vehicle::ChDrivelineWV *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDrivelineWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDrivelineWV > *)jarg1;
  arg1 = (chrono::vehicle::ChDrivelineWV *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChDrivelineWV_GetNumDrivenAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::ChDrivelineWV *arg1 = (chrono::vehicle::ChDrivelineWV *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDrivelineWV const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDrivelineWV > *)jarg1;
  arg1 = (chrono::vehicle::ChDrivelineWV *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::ChDrivelineWV const *)arg1)->GetNumDrivenAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDrivelineWV_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChDrivelineWV *arg1 = (chrono::vehicle::ChDrivelineWV *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  ChAxleList *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::ChDrivelineWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDrivelineWV > *)jarg1;
  arg1 = (chrono::vehicle::ChDrivelineWV *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (ChAxleList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChAxleList const & is null", 0);
    return ;
  } 
  arg4 = (std::vector< int > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(ChAxleList const &)*arg3,(std::vector< int > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDrivelineWV_LockAxleDifferential(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::ChDrivelineWV *arg1 = (chrono::vehicle::ChDrivelineWV *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChDrivelineWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDrivelineWV > *)jarg1;
  arg1 = (chrono::vehicle::ChDrivelineWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LockAxleDifferential(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDrivelineWV_LockCentralDifferential(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::ChDrivelineWV *arg1 = (chrono::vehicle::ChDrivelineWV *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChDrivelineWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDrivelineWV > *)jarg1;
  arg1 = (chrono::vehicle::ChDrivelineWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LockCentralDifferential(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChDrivelineWV_GetDrivenAxleIndexes(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChDrivelineWV *arg1 = (chrono::vehicle::ChDrivelineWV *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDrivelineWV const > *smartarg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDrivelineWV > *)jarg1;
  arg1 = (chrono::vehicle::ChDrivelineWV *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::vector< int > *) &((chrono::vehicle::ChDrivelineWV const *)arg1)->GetDrivenAxleIndexes();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChDrivelineWV_GetSpindleTorque(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::ChDrivelineWV *arg1 = (chrono::vehicle::ChDrivelineWV *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChDrivelineWV const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDrivelineWV > *)jarg1;
  arg1 = (chrono::vehicle::ChDrivelineWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::ChDrivelineWV const *)arg1)->GetSpindleTorque(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChShaftsDriveline2WD(void * jarg1) {
  chrono::vehicle::ChShaftsDriveline2WD *arg1 = (chrono::vehicle::ChShaftsDriveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChShaftsDriveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChShaftsDriveline2WD_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChShaftsDriveline2WD *arg1 = (chrono::vehicle::ChShaftsDriveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChShaftsDriveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChShaftsDriveline2WD const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChShaftsDriveline2WD_SetMotorBlockDirection(void * jarg1, void * jarg2) {
  chrono::vehicle::ChShaftsDriveline2WD *arg1 = (chrono::vehicle::ChShaftsDriveline2WD *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChShaftsDriveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetMotorBlockDirection((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChShaftsDriveline2WD_SetAxleDirection(void * jarg1, void * jarg2) {
  chrono::vehicle::ChShaftsDriveline2WD *arg1 = (chrono::vehicle::ChShaftsDriveline2WD *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChShaftsDriveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetAxleDirection((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChShaftsDriveline2WD_LockAxleDifferential(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::ChShaftsDriveline2WD *arg1 = (chrono::vehicle::ChShaftsDriveline2WD *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChShaftsDriveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LockAxleDifferential(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChShaftsDriveline2WD_LockCentralDifferential(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::ChShaftsDriveline2WD *arg1 = (chrono::vehicle::ChShaftsDriveline2WD *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChShaftsDriveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LockCentralDifferential(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChShaftsDriveline2WD_GetNumDrivenAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::ChShaftsDriveline2WD *arg1 = (chrono::vehicle::ChShaftsDriveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChShaftsDriveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::ChShaftsDriveline2WD const *)arg1)->GetNumDrivenAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChShaftsDriveline2WD_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChShaftsDriveline2WD *arg1 = (chrono::vehicle::ChShaftsDriveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  ChAxleList *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChShaftsDriveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (ChAxleList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChAxleList const & is null", 0);
    return ;
  } 
  arg4 = (std::vector< int > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(ChAxleList const &)*arg3,(std::vector< int > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChShaftsDriveline2WD_Synchronize(void * jarg1, double jarg2, void * jarg3, double jarg4) {
  chrono::vehicle::ChShaftsDriveline2WD *arg1 = (chrono::vehicle::ChShaftsDriveline2WD *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChShaftsDriveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChShaftsDriveline2WD_GetSpindleTorque(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::ChShaftsDriveline2WD *arg1 = (chrono::vehicle::ChShaftsDriveline2WD *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChShaftsDriveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::ChShaftsDriveline2WD const *)arg1)->GetSpindleTorque(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChShaftsDriveline2WD_Disconnect(void * jarg1) {
  chrono::vehicle::ChShaftsDriveline2WD *arg1 = (chrono::vehicle::ChShaftsDriveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChShaftsDriveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Disconnect();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChShaftsDriveline2WD_GetOutputDriveshaftSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChShaftsDriveline2WD *arg1 = (chrono::vehicle::ChShaftsDriveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChShaftsDriveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChShaftsDriveline2WD const *)arg1)->GetOutputDriveshaftSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChShaftsDriveline4WD(void * jarg1) {
  chrono::vehicle::ChShaftsDriveline4WD *arg1 = (chrono::vehicle::ChShaftsDriveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChShaftsDriveline4WD_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChShaftsDriveline4WD *arg1 = (chrono::vehicle::ChShaftsDriveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChShaftsDriveline4WD const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChShaftsDriveline4WD_SetMotorBlockDirection(void * jarg1, void * jarg2) {
  chrono::vehicle::ChShaftsDriveline4WD *arg1 = (chrono::vehicle::ChShaftsDriveline4WD *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetMotorBlockDirection((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChShaftsDriveline4WD_SetAxleDirection(void * jarg1, void * jarg2) {
  chrono::vehicle::ChShaftsDriveline4WD *arg1 = (chrono::vehicle::ChShaftsDriveline4WD *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetAxleDirection((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChShaftsDriveline4WD_LockAxleDifferential(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::ChShaftsDriveline4WD *arg1 = (chrono::vehicle::ChShaftsDriveline4WD *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LockAxleDifferential(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChShaftsDriveline4WD_LockCentralDifferential(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::ChShaftsDriveline4WD *arg1 = (chrono::vehicle::ChShaftsDriveline4WD *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LockCentralDifferential(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChShaftsDriveline4WD_GetNumDrivenAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::ChShaftsDriveline4WD *arg1 = (chrono::vehicle::ChShaftsDriveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::ChShaftsDriveline4WD const *)arg1)->GetNumDrivenAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChShaftsDriveline4WD_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChShaftsDriveline4WD *arg1 = (chrono::vehicle::ChShaftsDriveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  ChAxleList *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (ChAxleList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChAxleList const & is null", 0);
    return ;
  } 
  arg4 = (std::vector< int > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(ChAxleList const &)*arg3,(std::vector< int > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChShaftsDriveline4WD_Synchronize(void * jarg1, double jarg2, void * jarg3, double jarg4) {
  chrono::vehicle::ChShaftsDriveline4WD *arg1 = (chrono::vehicle::ChShaftsDriveline4WD *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChShaftsDriveline4WD_GetSpindleTorque(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::ChShaftsDriveline4WD *arg1 = (chrono::vehicle::ChShaftsDriveline4WD *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::ChShaftsDriveline4WD const *)arg1)->GetSpindleTorque(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChShaftsDriveline4WD_Disconnect(void * jarg1) {
  chrono::vehicle::ChShaftsDriveline4WD *arg1 = (chrono::vehicle::ChShaftsDriveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Disconnect();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChShaftsDriveline4WD_GetOutputDriveshaftSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChShaftsDriveline4WD *arg1 = (chrono::vehicle::ChShaftsDriveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ChShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChShaftsDriveline4WD const *)arg1)->GetOutputDriveshaftSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSimpleDriveline(void * jarg1) {
  chrono::vehicle::ChSimpleDriveline *arg1 = (chrono::vehicle::ChSimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSimpleDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChSimpleDriveline_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChSimpleDriveline *arg1 = (chrono::vehicle::ChSimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSimpleDriveline const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSimpleDriveline const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChSimpleDriveline_GetNumDrivenAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::ChSimpleDriveline *arg1 = (chrono::vehicle::ChSimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSimpleDriveline const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::ChSimpleDriveline const *)arg1)->GetNumDrivenAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSimpleDriveline_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChSimpleDriveline *arg1 = (chrono::vehicle::ChSimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  ChAxleList *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSimpleDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (ChAxleList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChAxleList const & is null", 0);
    return ;
  } 
  arg4 = (std::vector< int > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(ChAxleList const &)*arg3,(std::vector< int > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSimpleDriveline_Synchronize(void * jarg1, double jarg2, void * jarg3, double jarg4) {
  chrono::vehicle::ChSimpleDriveline *arg1 = (chrono::vehicle::ChSimpleDriveline *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::ChSimpleDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSimpleDriveline_GetSpindleTorque(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::ChSimpleDriveline *arg1 = (chrono::vehicle::ChSimpleDriveline *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChSimpleDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::ChSimpleDriveline const *)arg1)->GetSpindleTorque(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSimpleDriveline_Disconnect(void * jarg1) {
  chrono::vehicle::ChSimpleDriveline *arg1 = (chrono::vehicle::ChSimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSimpleDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Disconnect();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSimpleDriveline_GetOutputDriveshaftSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSimpleDriveline *arg1 = (chrono::vehicle::ChSimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSimpleDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChSimpleDriveline const *)arg1)->GetOutputDriveshaftSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSimpleDrivelineXWD(void * jarg1) {
  chrono::vehicle::ChSimpleDrivelineXWD *arg1 = (chrono::vehicle::ChSimpleDrivelineXWD *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSimpleDrivelineXWD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSimpleDrivelineXWD > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleDrivelineXWD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChSimpleDrivelineXWD_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChSimpleDrivelineXWD *arg1 = (chrono::vehicle::ChSimpleDrivelineXWD *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSimpleDrivelineXWD const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSimpleDrivelineXWD > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleDrivelineXWD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSimpleDrivelineXWD const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChSimpleDrivelineXWD_GetNumDrivenAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::ChSimpleDrivelineXWD *arg1 = (chrono::vehicle::ChSimpleDrivelineXWD *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSimpleDrivelineXWD const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSimpleDrivelineXWD > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleDrivelineXWD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::ChSimpleDrivelineXWD const *)arg1)->GetNumDrivenAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSimpleDrivelineXWD_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChSimpleDrivelineXWD *arg1 = (chrono::vehicle::ChSimpleDrivelineXWD *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  ChAxleList *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSimpleDrivelineXWD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSimpleDrivelineXWD > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleDrivelineXWD *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (ChAxleList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChAxleList const & is null", 0);
    return ;
  } 
  arg4 = (std::vector< int > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(ChAxleList const &)*arg3,(std::vector< int > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSimpleDrivelineXWD_Synchronize(void * jarg1, double jarg2, void * jarg3, double jarg4) {
  chrono::vehicle::ChSimpleDrivelineXWD *arg1 = (chrono::vehicle::ChSimpleDrivelineXWD *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::ChSimpleDrivelineXWD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSimpleDrivelineXWD > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleDrivelineXWD *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSimpleDrivelineXWD_GetSpindleTorque(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::ChSimpleDrivelineXWD *arg1 = (chrono::vehicle::ChSimpleDrivelineXWD *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChSimpleDrivelineXWD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSimpleDrivelineXWD > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleDrivelineXWD *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::ChSimpleDrivelineXWD const *)arg1)->GetSpindleTorque(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSimpleDrivelineXWD_Disconnect(void * jarg1) {
  chrono::vehicle::ChSimpleDrivelineXWD *arg1 = (chrono::vehicle::ChSimpleDrivelineXWD *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSimpleDrivelineXWD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSimpleDrivelineXWD > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleDrivelineXWD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Disconnect();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSimpleDrivelineXWD_GetOutputDriveshaftSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSimpleDrivelineXWD *arg1 = (chrono::vehicle::ChSimpleDrivelineXWD *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSimpleDrivelineXWD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSimpleDrivelineXWD > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleDrivelineXWD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChSimpleDrivelineXWD const *)arg1)->GetOutputDriveshaftSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ShaftsDriveline2WD__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::ShaftsDriveline2WD *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::ShaftsDriveline2WD *)new chrono::vehicle::ShaftsDriveline2WD((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ShaftsDriveline2WD >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ShaftsDriveline2WD__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::ShaftsDriveline2WD *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::ShaftsDriveline2WD *)new chrono::vehicle::ShaftsDriveline2WD((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ShaftsDriveline2WD >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ShaftsDriveline2WD(void * jarg1) {
  chrono::vehicle::ShaftsDriveline2WD *arg1 = (chrono::vehicle::ShaftsDriveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ShaftsDriveline2WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ShaftsDriveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::ShaftsDriveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ShaftsDriveline2WD_GetDriveshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::ShaftsDriveline2WD *arg1 = (chrono::vehicle::ShaftsDriveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ShaftsDriveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ShaftsDriveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::ShaftsDriveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ShaftsDriveline2WD const *)arg1)->GetDriveshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ShaftsDriveline2WD_GetDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::ShaftsDriveline2WD *arg1 = (chrono::vehicle::ShaftsDriveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ShaftsDriveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ShaftsDriveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::ShaftsDriveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ShaftsDriveline2WD const *)arg1)->GetDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ShaftsDriveline2WD_GetConicalGearRatio(void * jarg1) {
  double jresult ;
  chrono::vehicle::ShaftsDriveline2WD *arg1 = (chrono::vehicle::ShaftsDriveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ShaftsDriveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ShaftsDriveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::ShaftsDriveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ShaftsDriveline2WD const *)arg1)->GetConicalGearRatio();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ShaftsDriveline2WD_GetAxleDifferentialLockingLimit(void * jarg1) {
  double jresult ;
  chrono::vehicle::ShaftsDriveline2WD *arg1 = (chrono::vehicle::ShaftsDriveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ShaftsDriveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ShaftsDriveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::ShaftsDriveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ShaftsDriveline2WD const *)arg1)->GetAxleDifferentialLockingLimit();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SimpleDriveline__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::SimpleDriveline *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::SimpleDriveline *)new chrono::vehicle::SimpleDriveline((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SimpleDriveline >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SimpleDriveline__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::SimpleDriveline *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::SimpleDriveline *)new chrono::vehicle::SimpleDriveline((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SimpleDriveline >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SimpleDriveline(void * jarg1) {
  chrono::vehicle::SimpleDriveline *arg1 = (chrono::vehicle::SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::SimpleDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_SimpleDriveline_GetFrontTorqueFraction(void * jarg1) {
  double jresult ;
  chrono::vehicle::SimpleDriveline *arg1 = (chrono::vehicle::SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::SimpleDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SimpleDriveline const *)arg1)->GetFrontTorqueFraction();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SimpleDriveline_GetFrontDifferentialMaxBias(void * jarg1) {
  double jresult ;
  chrono::vehicle::SimpleDriveline *arg1 = (chrono::vehicle::SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::SimpleDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SimpleDriveline const *)arg1)->GetFrontDifferentialMaxBias();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SimpleDriveline_GetRearDifferentialMaxBias(void * jarg1) {
  double jresult ;
  chrono::vehicle::SimpleDriveline *arg1 = (chrono::vehicle::SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::SimpleDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SimpleDriveline const *)arg1)->GetRearDifferentialMaxBias();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ShaftsDriveline4WD__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::ShaftsDriveline4WD *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::ShaftsDriveline4WD *)new chrono::vehicle::ShaftsDriveline4WD((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ShaftsDriveline4WD >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ShaftsDriveline4WD__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::ShaftsDriveline4WD *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::ShaftsDriveline4WD *)new chrono::vehicle::ShaftsDriveline4WD((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ShaftsDriveline4WD >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ShaftsDriveline4WD(void * jarg1) {
  chrono::vehicle::ShaftsDriveline4WD *arg1 = (chrono::vehicle::ShaftsDriveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ShaftsDriveline4WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ShaftsDriveline4WD_GetCentralDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::ShaftsDriveline4WD *arg1 = (chrono::vehicle::ShaftsDriveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ShaftsDriveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ShaftsDriveline4WD const *)arg1)->GetCentralDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ShaftsDriveline4WD_GetFrontDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::ShaftsDriveline4WD *arg1 = (chrono::vehicle::ShaftsDriveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ShaftsDriveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ShaftsDriveline4WD const *)arg1)->GetFrontDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ShaftsDriveline4WD_GetRearDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::ShaftsDriveline4WD *arg1 = (chrono::vehicle::ShaftsDriveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ShaftsDriveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ShaftsDriveline4WD const *)arg1)->GetRearDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ShaftsDriveline4WD_GetDriveshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::ShaftsDriveline4WD *arg1 = (chrono::vehicle::ShaftsDriveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ShaftsDriveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ShaftsDriveline4WD const *)arg1)->GetDriveshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ShaftsDriveline4WD_GetToFrontDiffShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::ShaftsDriveline4WD *arg1 = (chrono::vehicle::ShaftsDriveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ShaftsDriveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ShaftsDriveline4WD const *)arg1)->GetToFrontDiffShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ShaftsDriveline4WD_GetToRearDiffShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::ShaftsDriveline4WD *arg1 = (chrono::vehicle::ShaftsDriveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ShaftsDriveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ShaftsDriveline4WD const *)arg1)->GetToRearDiffShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ShaftsDriveline4WD_GetFrontConicalGearRatio(void * jarg1) {
  double jresult ;
  chrono::vehicle::ShaftsDriveline4WD *arg1 = (chrono::vehicle::ShaftsDriveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ShaftsDriveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ShaftsDriveline4WD const *)arg1)->GetFrontConicalGearRatio();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ShaftsDriveline4WD_GetRearConicalGearRatio(void * jarg1) {
  double jresult ;
  chrono::vehicle::ShaftsDriveline4WD *arg1 = (chrono::vehicle::ShaftsDriveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ShaftsDriveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ShaftsDriveline4WD const *)arg1)->GetRearConicalGearRatio();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ShaftsDriveline4WD_GetAxleDifferentialLockingLimit(void * jarg1) {
  double jresult ;
  chrono::vehicle::ShaftsDriveline4WD *arg1 = (chrono::vehicle::ShaftsDriveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ShaftsDriveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ShaftsDriveline4WD const *)arg1)->GetAxleDifferentialLockingLimit();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ShaftsDriveline4WD_GetCentralDifferentialLockingLimit(void * jarg1) {
  double jresult ;
  chrono::vehicle::ShaftsDriveline4WD *arg1 = (chrono::vehicle::ShaftsDriveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::ShaftsDriveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ShaftsDriveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::ShaftsDriveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ShaftsDriveline4WD const *)arg1)->GetCentralDifferentialLockingLimit();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SimpleDrivelineXWD__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::SimpleDrivelineXWD *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::SimpleDrivelineXWD *)new chrono::vehicle::SimpleDrivelineXWD((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SimpleDrivelineXWD >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SimpleDrivelineXWD__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::SimpleDrivelineXWD *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::SimpleDrivelineXWD *)new chrono::vehicle::SimpleDrivelineXWD((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SimpleDrivelineXWD >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SimpleDrivelineXWD(void * jarg1) {
  chrono::vehicle::SimpleDrivelineXWD *arg1 = (chrono::vehicle::SimpleDrivelineXWD *) 0 ;
  std::shared_ptr< chrono::vehicle::SimpleDrivelineXWD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SimpleDrivelineXWD > *)jarg1;
  arg1 = (chrono::vehicle::SimpleDrivelineXWD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_SimpleDrivelineXWD_GetDifferentialMaxBias(void * jarg1) {
  double jresult ;
  chrono::vehicle::SimpleDrivelineXWD *arg1 = (chrono::vehicle::SimpleDrivelineXWD *) 0 ;
  std::shared_ptr< chrono::vehicle::SimpleDrivelineXWD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SimpleDrivelineXWD > *)jarg1;
  arg1 = (chrono::vehicle::SimpleDrivelineXWD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SimpleDrivelineXWD const *)arg1)->GetDifferentialMaxBias();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChDrivelineTV(void * jarg1) {
  chrono::vehicle::ChDrivelineTV *arg1 = (chrono::vehicle::ChDrivelineTV *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDrivelineTV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDrivelineTV > *)jarg1;
  arg1 = (chrono::vehicle::ChDrivelineTV *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChDrivelineTV_GetSprocketTorque(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChDrivelineTV *arg1 = (chrono::vehicle::ChDrivelineTV *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChDrivelineTV const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDrivelineTV > *)jarg1;
  arg1 = (chrono::vehicle::ChDrivelineTV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChDrivelineTV const *)arg1)->GetSprocketTorque(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChDrivelineTV_GetSprocketSpeed(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChDrivelineTV *arg1 = (chrono::vehicle::ChDrivelineTV *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChDrivelineTV const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDrivelineTV > *)jarg1;
  arg1 = (chrono::vehicle::ChDrivelineTV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChDrivelineTV const *)arg1)->GetSprocketSpeed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDrivelineTV_SetGyrationMode(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChDrivelineTV *arg1 = (chrono::vehicle::ChDrivelineTV *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChDrivelineTV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDrivelineTV > *)jarg1;
  arg1 = (chrono::vehicle::ChDrivelineTV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetGyrationMode(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDrivelineTV_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChDrivelineTV *arg1 = (chrono::vehicle::ChDrivelineTV *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > arg3 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > arg4 ;
  std::shared_ptr< chrono::vehicle::ChDrivelineTV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDrivelineTV > *)jarg1;
  arg1 = (chrono::vehicle::ChDrivelineTV *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChTrackAssembly > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChTrackAssembly > *)jarg4; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDrivelineTV_LockDifferential(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChDrivelineTV *arg1 = (chrono::vehicle::ChDrivelineTV *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChDrivelineTV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDrivelineTV > *)jarg1;
  arg1 = (chrono::vehicle::ChDrivelineTV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->LockDifferential(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSimpleTrackDriveline(void * jarg1) {
  chrono::vehicle::ChSimpleTrackDriveline *arg1 = (chrono::vehicle::ChSimpleTrackDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSimpleTrackDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSimpleTrackDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleTrackDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChSimpleTrackDriveline_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChSimpleTrackDriveline *arg1 = (chrono::vehicle::ChSimpleTrackDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSimpleTrackDriveline const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSimpleTrackDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleTrackDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSimpleTrackDriveline const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSimpleTrackDriveline_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChSimpleTrackDriveline *arg1 = (chrono::vehicle::ChSimpleTrackDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > arg3 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > arg4 ;
  std::shared_ptr< chrono::vehicle::ChSimpleTrackDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSimpleTrackDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleTrackDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChTrackAssembly > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChTrackAssembly > *)jarg4; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSimpleTrackDriveline_Synchronize(void * jarg1, double jarg2, void * jarg3, double jarg4) {
  chrono::vehicle::ChSimpleTrackDriveline *arg1 = (chrono::vehicle::ChSimpleTrackDriveline *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::ChSimpleTrackDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSimpleTrackDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleTrackDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSimpleTrackDriveline_GetSprocketTorque(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSimpleTrackDriveline *arg1 = (chrono::vehicle::ChSimpleTrackDriveline *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSimpleTrackDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSimpleTrackDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleTrackDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSimpleTrackDriveline const *)arg1)->GetSprocketTorque(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSimpleTrackDriveline_GetSprocketSpeed(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSimpleTrackDriveline *arg1 = (chrono::vehicle::ChSimpleTrackDriveline *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChSimpleTrackDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSimpleTrackDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleTrackDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSimpleTrackDriveline const *)arg1)->GetSprocketSpeed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSimpleTrackDriveline_Disconnect(void * jarg1) {
  chrono::vehicle::ChSimpleTrackDriveline *arg1 = (chrono::vehicle::ChSimpleTrackDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSimpleTrackDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSimpleTrackDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleTrackDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Disconnect();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSimpleTrackDriveline_GetOutputDriveshaftSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSimpleTrackDriveline *arg1 = (chrono::vehicle::ChSimpleTrackDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSimpleTrackDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSimpleTrackDriveline > *)jarg1;
  arg1 = (chrono::vehicle::ChSimpleTrackDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChSimpleTrackDriveline const *)arg1)->GetOutputDriveshaftSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackDrivelineBDS(void * jarg1) {
  chrono::vehicle::ChTrackDrivelineBDS *arg1 = (chrono::vehicle::ChTrackDrivelineBDS *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackDrivelineBDS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackDrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackDrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChTrackDrivelineBDS_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChTrackDrivelineBDS *arg1 = (chrono::vehicle::ChTrackDrivelineBDS *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackDrivelineBDS const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackDrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackDrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackDrivelineBDS const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackDrivelineBDS_SetMotorBlockDirection(void * jarg1, void * jarg2) {
  chrono::vehicle::ChTrackDrivelineBDS *arg1 = (chrono::vehicle::ChTrackDrivelineBDS *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackDrivelineBDS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackDrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackDrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetMotorBlockDirection((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackDrivelineBDS_SetAxleDirection(void * jarg1, void * jarg2) {
  chrono::vehicle::ChTrackDrivelineBDS *arg1 = (chrono::vehicle::ChTrackDrivelineBDS *) 0 ;
  chrono::ChVector< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackDrivelineBDS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackDrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackDrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChVector< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetAxleDirection((chrono::ChVector< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackDrivelineBDS_LockDifferential(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChTrackDrivelineBDS *arg1 = (chrono::vehicle::ChTrackDrivelineBDS *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackDrivelineBDS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackDrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackDrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->LockDifferential(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackDrivelineBDS_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChTrackDrivelineBDS *arg1 = (chrono::vehicle::ChTrackDrivelineBDS *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > arg3 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > arg4 ;
  std::shared_ptr< chrono::vehicle::ChTrackDrivelineBDS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackDrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackDrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChTrackAssembly > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChTrackAssembly > *)jarg4; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackDrivelineBDS_Synchronize(void * jarg1, double jarg2, void * jarg3, double jarg4) {
  chrono::vehicle::ChTrackDrivelineBDS *arg1 = (chrono::vehicle::ChTrackDrivelineBDS *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::ChTrackDrivelineBDS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackDrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackDrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTrackDrivelineBDS_GetSprocketTorque(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChTrackDrivelineBDS *arg1 = (chrono::vehicle::ChTrackDrivelineBDS *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackDrivelineBDS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackDrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackDrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChTrackDrivelineBDS const *)arg1)->GetSprocketTorque(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTrackDrivelineBDS_GetSprocketSpeed(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChTrackDrivelineBDS *arg1 = (chrono::vehicle::ChTrackDrivelineBDS *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackDrivelineBDS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackDrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackDrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChTrackDrivelineBDS const *)arg1)->GetSprocketSpeed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackDrivelineBDS_Disconnect(void * jarg1) {
  chrono::vehicle::ChTrackDrivelineBDS *arg1 = (chrono::vehicle::ChTrackDrivelineBDS *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackDrivelineBDS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackDrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackDrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Disconnect();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTrackDrivelineBDS_GetOutputDriveshaftSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackDrivelineBDS *arg1 = (chrono::vehicle::ChTrackDrivelineBDS *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackDrivelineBDS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackDrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackDrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTrackDrivelineBDS const *)arg1)->GetOutputDriveshaftSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SimpleTrackDriveline__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::SimpleTrackDriveline *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::SimpleTrackDriveline *)new chrono::vehicle::SimpleTrackDriveline((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SimpleTrackDriveline >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SimpleTrackDriveline__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::SimpleTrackDriveline *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::SimpleTrackDriveline *)new chrono::vehicle::SimpleTrackDriveline((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SimpleTrackDriveline >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SimpleTrackDriveline(void * jarg1) {
  chrono::vehicle::SimpleTrackDriveline *arg1 = (chrono::vehicle::SimpleTrackDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::SimpleTrackDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SimpleTrackDriveline > *)jarg1;
  arg1 = (chrono::vehicle::SimpleTrackDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_SimpleTrackDriveline_GetDifferentialMaxBias(void * jarg1) {
  double jresult ;
  chrono::vehicle::SimpleTrackDriveline *arg1 = (chrono::vehicle::SimpleTrackDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::SimpleTrackDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SimpleTrackDriveline > *)jarg1;
  arg1 = (chrono::vehicle::SimpleTrackDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SimpleTrackDriveline const *)arg1)->GetDifferentialMaxBias();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackDrivelineBDS__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::TrackDrivelineBDS *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::TrackDrivelineBDS *)new chrono::vehicle::TrackDrivelineBDS((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackDrivelineBDS >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackDrivelineBDS__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::TrackDrivelineBDS *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::TrackDrivelineBDS *)new chrono::vehicle::TrackDrivelineBDS((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackDrivelineBDS >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TrackDrivelineBDS(void * jarg1) {
  chrono::vehicle::TrackDrivelineBDS *arg1 = (chrono::vehicle::TrackDrivelineBDS *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackDrivelineBDS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TrackDrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::TrackDrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackDrivelineBDS_GetDriveshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackDrivelineBDS *arg1 = (chrono::vehicle::TrackDrivelineBDS *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackDrivelineBDS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackDrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::TrackDrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackDrivelineBDS const *)arg1)->GetDriveshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackDrivelineBDS_GetDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackDrivelineBDS *arg1 = (chrono::vehicle::TrackDrivelineBDS *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackDrivelineBDS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackDrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::TrackDrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackDrivelineBDS const *)arg1)->GetDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackDrivelineBDS_GetConicalGearRatio(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackDrivelineBDS *arg1 = (chrono::vehicle::TrackDrivelineBDS *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackDrivelineBDS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackDrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::TrackDrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackDrivelineBDS const *)arg1)->GetConicalGearRatio();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackDrivelineBDS_GetDifferentialLockingLimit(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackDrivelineBDS *arg1 = (chrono::vehicle::TrackDrivelineBDS *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackDrivelineBDS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackDrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::TrackDrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackDrivelineBDS const *)arg1)->GetDifferentialLockingLimit();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_Driveline2WD(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::generic::Generic_Driveline2WD *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_Driveline2WD *)new chrono::vehicle::generic::Generic_Driveline2WD((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_Driveline2WD >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Generic_Driveline2WD(void * jarg1) {
  chrono::vehicle::generic::Generic_Driveline2WD *arg1 = (chrono::vehicle::generic::Generic_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Driveline2WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_Driveline2WD_GetDriveshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_Driveline2WD *arg1 = (chrono::vehicle::generic::Generic_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_Driveline2WD const *)arg1)->GetDriveshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_Driveline2WD_GetDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_Driveline2WD *arg1 = (chrono::vehicle::generic::Generic_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_Driveline2WD const *)arg1)->GetDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_Driveline2WD_GetConicalGearRatio(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_Driveline2WD *arg1 = (chrono::vehicle::generic::Generic_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_Driveline2WD const *)arg1)->GetConicalGearRatio();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_Driveline2WD_GetAxleDifferentialLockingLimit(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_Driveline2WD *arg1 = (chrono::vehicle::generic::Generic_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_Driveline2WD const *)arg1)->GetAxleDifferentialLockingLimit();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_SimpleDriveline(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::generic::Generic_SimpleDriveline *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_SimpleDriveline *)new chrono::vehicle::generic::Generic_SimpleDriveline((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_SimpleDriveline >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Generic_SimpleDriveline(void * jarg1) {
  chrono::vehicle::generic::Generic_SimpleDriveline *arg1 = (chrono::vehicle::generic::Generic_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_SimpleDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Generic_SimpleDriveline_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::generic::Generic_SimpleDriveline *arg1 = (chrono::vehicle::generic::Generic_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_SimpleDriveline const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::generic::Generic_SimpleDriveline const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Generic_SimpleDriveline_GetNumDrivenAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::generic::Generic_SimpleDriveline *arg1 = (chrono::vehicle::generic::Generic_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_SimpleDriveline const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::generic::Generic_SimpleDriveline const *)arg1)->GetNumDrivenAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic_SimpleDriveline_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::generic::Generic_SimpleDriveline *arg1 = (chrono::vehicle::generic::Generic_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  ChAxleList *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_SimpleDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (ChAxleList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChAxleList const & is null", 0);
    return ;
  } 
  arg4 = (std::vector< int > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(ChAxleList const &)*arg3,(std::vector< int > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic_SimpleDriveline_Synchronize(void * jarg1, double jarg2, void * jarg3, double jarg4) {
  chrono::vehicle::generic::Generic_SimpleDriveline *arg1 = (chrono::vehicle::generic::Generic_SimpleDriveline *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_SimpleDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_SimpleDriveline_GetSpindleTorque(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::generic::Generic_SimpleDriveline *arg1 = (chrono::vehicle::generic::Generic_SimpleDriveline *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_SimpleDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_SimpleDriveline const *)arg1)->GetSpindleTorque(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic_SimpleDriveline_Disconnect(void * jarg1) {
  chrono::vehicle::generic::Generic_SimpleDriveline *arg1 = (chrono::vehicle::generic::Generic_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_SimpleDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Disconnect();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_SimpleDriveline_GetOutputDriveshaftSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_SimpleDriveline *arg1 = (chrono::vehicle::generic::Generic_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_SimpleDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_SimpleDriveline const *)arg1)->GetOutputDriveshaftSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_Driveline2WD(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_Driveline2WD *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_Driveline2WD *)new chrono::vehicle::hmmwv::HMMWV_Driveline2WD((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Driveline2WD >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_Driveline2WD(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_Driveline2WD *arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Driveline2WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Driveline2WD_GetDriveshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Driveline2WD *arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Driveline2WD const *)arg1)->GetDriveshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Driveline2WD_GetDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Driveline2WD *arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Driveline2WD const *)arg1)->GetDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Driveline2WD_GetConicalGearRatio(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Driveline2WD *arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Driveline2WD const *)arg1)->GetConicalGearRatio();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Driveline2WD_GetAxleDifferentialLockingLimit(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Driveline2WD *arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Driveline2WD const *)arg1)->GetAxleDifferentialLockingLimit();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_Driveline4WD(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_Driveline4WD *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *)new chrono::vehicle::hmmwv::HMMWV_Driveline4WD((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Driveline4WD >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_Driveline4WD(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_Driveline4WD *arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Driveline4WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Driveline4WD_GetCentralDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Driveline4WD *arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Driveline4WD const *)arg1)->GetCentralDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Driveline4WD_GetFrontDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Driveline4WD *arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Driveline4WD const *)arg1)->GetFrontDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Driveline4WD_GetRearDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Driveline4WD *arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Driveline4WD const *)arg1)->GetRearDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Driveline4WD_GetDriveshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Driveline4WD *arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Driveline4WD const *)arg1)->GetDriveshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Driveline4WD_GetToFrontDiffShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Driveline4WD *arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Driveline4WD const *)arg1)->GetToFrontDiffShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Driveline4WD_GetToRearDiffShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Driveline4WD *arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Driveline4WD const *)arg1)->GetToRearDiffShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Driveline4WD_GetFrontConicalGearRatio(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Driveline4WD *arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Driveline4WD const *)arg1)->GetFrontConicalGearRatio();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Driveline4WD_GetRearConicalGearRatio(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Driveline4WD *arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Driveline4WD const *)arg1)->GetRearConicalGearRatio();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Driveline4WD_GetAxleDifferentialLockingLimit(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Driveline4WD *arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Driveline4WD const *)arg1)->GetAxleDifferentialLockingLimit();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Driveline4WD_GetCentralDifferentialLockingLimit(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Driveline4WD *arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Driveline4WD const *)arg1)->GetCentralDifferentialLockingLimit();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_SimpleDriveline(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_SimpleDriveline *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_SimpleDriveline *)new chrono::vehicle::hmmwv::HMMWV_SimpleDriveline((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_SimpleDriveline >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_SimpleDriveline(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_SimpleDriveline *arg1 = (chrono::vehicle::hmmwv::HMMWV_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_SimpleDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_SimpleDriveline_GetFrontTorqueFraction(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_SimpleDriveline *arg1 = (chrono::vehicle::hmmwv::HMMWV_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_SimpleDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_SimpleDriveline const *)arg1)->GetFrontTorqueFraction();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_SimpleDriveline_GetFrontDifferentialMaxBias(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_SimpleDriveline *arg1 = (chrono::vehicle::hmmwv::HMMWV_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_SimpleDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_SimpleDriveline const *)arg1)->GetFrontDifferentialMaxBias();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_SimpleDriveline_GetRearDifferentialMaxBias(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_SimpleDriveline *arg1 = (chrono::vehicle::hmmwv::HMMWV_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_SimpleDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_SimpleDriveline const *)arg1)->GetRearDifferentialMaxBias();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan_Driveline2WD(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::sedan::Sedan_Driveline2WD *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan_Driveline2WD *)new chrono::vehicle::sedan::Sedan_Driveline2WD((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan_Driveline2WD >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sedan_Driveline2WD(void * jarg1) {
  chrono::vehicle::sedan::Sedan_Driveline2WD *arg1 = (chrono::vehicle::sedan::Sedan_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Driveline2WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_Driveline2WD_GetDriveshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_Driveline2WD *arg1 = (chrono::vehicle::sedan::Sedan_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_Driveline2WD const *)arg1)->GetDriveshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_Driveline2WD_GetDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_Driveline2WD *arg1 = (chrono::vehicle::sedan::Sedan_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_Driveline2WD const *)arg1)->GetDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_Driveline2WD_GetConicalGearRatio(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_Driveline2WD *arg1 = (chrono::vehicle::sedan::Sedan_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_Driveline2WD const *)arg1)->GetConicalGearRatio();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_Driveline2WD_GetAxleDifferentialLockingLimit(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_Driveline2WD *arg1 = (chrono::vehicle::sedan::Sedan_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_Driveline2WD const *)arg1)->GetAxleDifferentialLockingLimit();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_Driveline2WD(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::citybus::CityBus_Driveline2WD *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_Driveline2WD *)new chrono::vehicle::citybus::CityBus_Driveline2WD((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_Driveline2WD >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CityBus_Driveline2WD(void * jarg1) {
  chrono::vehicle::citybus::CityBus_Driveline2WD *arg1 = (chrono::vehicle::citybus::CityBus_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Driveline2WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_Driveline2WD_GetDriveshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_Driveline2WD *arg1 = (chrono::vehicle::citybus::CityBus_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_Driveline2WD const *)arg1)->GetDriveshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_Driveline2WD_GetDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_Driveline2WD *arg1 = (chrono::vehicle::citybus::CityBus_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_Driveline2WD const *)arg1)->GetDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_Driveline2WD_GetConicalGearRatio(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_Driveline2WD *arg1 = (chrono::vehicle::citybus::CityBus_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_Driveline2WD const *)arg1)->GetConicalGearRatio();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_Driveline2WD_GetAxleDifferentialLockingLimit(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_Driveline2WD *arg1 = (chrono::vehicle::citybus::CityBus_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_Driveline2WD const *)arg1)->GetAxleDifferentialLockingLimit();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_SimpleDriveline(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_5t_SimpleDriveline *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_SimpleDriveline *)new chrono::vehicle::man::MAN_5t_SimpleDriveline((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_SimpleDriveline >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_5t_SimpleDriveline(void * jarg1) {
  chrono::vehicle::man::MAN_5t_SimpleDriveline *arg1 = (chrono::vehicle::man::MAN_5t_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_SimpleDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_SimpleDriveline_GetFrontTorqueFraction(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_SimpleDriveline *arg1 = (chrono::vehicle::man::MAN_5t_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_SimpleDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_SimpleDriveline const *)arg1)->GetFrontTorqueFraction();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_SimpleDriveline_GetFrontDifferentialMaxBias(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_SimpleDriveline *arg1 = (chrono::vehicle::man::MAN_5t_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_SimpleDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_SimpleDriveline const *)arg1)->GetFrontDifferentialMaxBias();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_SimpleDriveline_GetRearDifferentialMaxBias(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_SimpleDriveline *arg1 = (chrono::vehicle::man::MAN_5t_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_SimpleDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_SimpleDriveline const *)arg1)->GetRearDifferentialMaxBias();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_SimpleDrivelineXWD(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_5t_SimpleDrivelineXWD *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_SimpleDrivelineXWD *)new chrono::vehicle::man::MAN_5t_SimpleDrivelineXWD((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_SimpleDrivelineXWD >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_5t_SimpleDrivelineXWD(void * jarg1) {
  chrono::vehicle::man::MAN_5t_SimpleDrivelineXWD *arg1 = (chrono::vehicle::man::MAN_5t_SimpleDrivelineXWD *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_SimpleDrivelineXWD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_SimpleDrivelineXWD > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_SimpleDrivelineXWD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_SimpleDrivelineXWD_GetDifferentialMaxBias(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_SimpleDrivelineXWD *arg1 = (chrono::vehicle::man::MAN_5t_SimpleDrivelineXWD *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_SimpleDrivelineXWD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_SimpleDrivelineXWD > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_SimpleDrivelineXWD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_SimpleDrivelineXWD const *)arg1)->GetDifferentialMaxBias();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_Driveline2WD(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS_Driveline2WD *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_Driveline2WD *)new chrono::vehicle::uaz::UAZBUS_Driveline2WD((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Driveline2WD >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UAZBUS_Driveline2WD(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_Driveline2WD *arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Driveline2WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Driveline2WD_GetDriveshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Driveline2WD *arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Driveline2WD const *)arg1)->GetDriveshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Driveline2WD_GetDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Driveline2WD *arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Driveline2WD const *)arg1)->GetDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Driveline2WD_GetConicalGearRatio(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Driveline2WD *arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Driveline2WD const *)arg1)->GetConicalGearRatio();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Driveline2WD_GetAxleDifferentialLockingLimit(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Driveline2WD *arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Driveline2WD const *)arg1)->GetAxleDifferentialLockingLimit();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_Driveline4WD(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS_Driveline4WD *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *)new chrono::vehicle::uaz::UAZBUS_Driveline4WD((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Driveline4WD >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UAZBUS_Driveline4WD(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_Driveline4WD *arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Driveline4WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Driveline4WD_GetCentralDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Driveline4WD *arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Driveline4WD const *)arg1)->GetCentralDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Driveline4WD_GetFrontDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Driveline4WD *arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Driveline4WD const *)arg1)->GetFrontDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Driveline4WD_GetRearDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Driveline4WD *arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Driveline4WD const *)arg1)->GetRearDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Driveline4WD_GetDriveshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Driveline4WD *arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Driveline4WD const *)arg1)->GetDriveshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Driveline4WD_GetToFrontDiffShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Driveline4WD *arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Driveline4WD const *)arg1)->GetToFrontDiffShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Driveline4WD_GetToRearDiffShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Driveline4WD *arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Driveline4WD const *)arg1)->GetToRearDiffShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Driveline4WD_GetFrontConicalGearRatio(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Driveline4WD *arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Driveline4WD const *)arg1)->GetFrontConicalGearRatio();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Driveline4WD_GetRearConicalGearRatio(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Driveline4WD *arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Driveline4WD const *)arg1)->GetRearConicalGearRatio();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Driveline4WD_GetAxleDifferentialLockingLimit(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Driveline4WD *arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Driveline4WD const *)arg1)->GetAxleDifferentialLockingLimit();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Driveline4WD_GetCentralDifferentialLockingLimit(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Driveline4WD *arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Driveline4WD const *)arg1)->GetCentralDifferentialLockingLimit();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_SimpleDriveline(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::gator::Gator_SimpleDriveline *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_SimpleDriveline *)new chrono::vehicle::gator::Gator_SimpleDriveline((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_SimpleDriveline >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Gator_SimpleDriveline(void * jarg1) {
  chrono::vehicle::gator::Gator_SimpleDriveline *arg1 = (chrono::vehicle::gator::Gator_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SimpleDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Gator_SimpleDriveline_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::gator::Gator_SimpleDriveline *arg1 = (chrono::vehicle::gator::Gator_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SimpleDriveline const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::gator::Gator_SimpleDriveline const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Gator_SimpleDriveline_GetNumDrivenAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::gator::Gator_SimpleDriveline *arg1 = (chrono::vehicle::gator::Gator_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SimpleDriveline const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::gator::Gator_SimpleDriveline const *)arg1)->GetNumDrivenAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SimpleDriveline_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::gator::Gator_SimpleDriveline *arg1 = (chrono::vehicle::gator::Gator_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  ChAxleList *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SimpleDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (ChAxleList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChAxleList const & is null", 0);
    return ;
  } 
  arg4 = (std::vector< int > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(ChAxleList const &)*arg3,(std::vector< int > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SimpleDriveline_Synchronize(void * jarg1, double jarg2, void * jarg3, double jarg4) {
  chrono::vehicle::gator::Gator_SimpleDriveline *arg1 = (chrono::vehicle::gator::Gator_SimpleDriveline *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SimpleDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_SimpleDriveline_GetSpindleTorque(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::gator::Gator_SimpleDriveline *arg1 = (chrono::vehicle::gator::Gator_SimpleDriveline *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SimpleDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_SimpleDriveline const *)arg1)->GetSpindleTorque(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SimpleDriveline_Disconnect(void * jarg1) {
  chrono::vehicle::gator::Gator_SimpleDriveline *arg1 = (chrono::vehicle::gator::Gator_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SimpleDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Disconnect();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_SimpleDriveline_GetOutputDriveshaftSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_SimpleDriveline *arg1 = (chrono::vehicle::gator::Gator_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_SimpleDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_SimpleDriveline const *)arg1)->GetOutputDriveshaftSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_Driveline2WD(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::gator::Gator_Driveline2WD *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_Driveline2WD *)new chrono::vehicle::gator::Gator_Driveline2WD((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_Driveline2WD >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Gator_Driveline2WD(void * jarg1) {
  chrono::vehicle::gator::Gator_Driveline2WD *arg1 = (chrono::vehicle::gator::Gator_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Driveline2WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_Driveline2WD_GetDriveshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_Driveline2WD *arg1 = (chrono::vehicle::gator::Gator_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_Driveline2WD const *)arg1)->GetDriveshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_Driveline2WD_GetDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_Driveline2WD *arg1 = (chrono::vehicle::gator::Gator_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_Driveline2WD const *)arg1)->GetDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_Driveline2WD_GetConicalGearRatio(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_Driveline2WD *arg1 = (chrono::vehicle::gator::Gator_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_Driveline2WD const *)arg1)->GetConicalGearRatio();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_Driveline2WD_GetAxleDifferentialLockingLimit(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_Driveline2WD *arg1 = (chrono::vehicle::gator::Gator_Driveline2WD *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Driveline2WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_Driveline2WD > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Driveline2WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_Driveline2WD const *)arg1)->GetAxleDifferentialLockingLimit();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCCar_Driveline4WD(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::rccar::RCCar_Driveline4WD *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::rccar::RCCar_Driveline4WD *)new chrono::vehicle::rccar::RCCar_Driveline4WD((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::rccar::RCCar_Driveline4WD >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RCCar_Driveline4WD(void * jarg1) {
  chrono::vehicle::rccar::RCCar_Driveline4WD *arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Driveline4WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Driveline4WD_GetCentralDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Driveline4WD *arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Driveline4WD const *)arg1)->GetCentralDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Driveline4WD_GetFrontDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Driveline4WD *arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Driveline4WD const *)arg1)->GetFrontDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Driveline4WD_GetRearDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Driveline4WD *arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Driveline4WD const *)arg1)->GetRearDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Driveline4WD_GetDriveshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Driveline4WD *arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Driveline4WD const *)arg1)->GetDriveshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Driveline4WD_GetToFrontDiffShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Driveline4WD *arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Driveline4WD const *)arg1)->GetToFrontDiffShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Driveline4WD_GetToRearDiffShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Driveline4WD *arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Driveline4WD const *)arg1)->GetToRearDiffShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Driveline4WD_GetFrontConicalGearRatio(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Driveline4WD *arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Driveline4WD const *)arg1)->GetFrontConicalGearRatio();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Driveline4WD_GetRearConicalGearRatio(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Driveline4WD *arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Driveline4WD const *)arg1)->GetRearConicalGearRatio();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Driveline4WD_GetAxleDifferentialLockingLimit(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Driveline4WD *arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Driveline4WD const *)arg1)->GetAxleDifferentialLockingLimit();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Driveline4WD_GetCentralDifferentialLockingLimit(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Driveline4WD *arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Driveline4WD const *)arg1)->GetCentralDifferentialLockingLimit();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Driveline4WD(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::feda::FEDA_Driveline4WD *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Driveline4WD *)new chrono::vehicle::feda::FEDA_Driveline4WD((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Driveline4WD >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FEDA_Driveline4WD(void * jarg1) {
  chrono::vehicle::feda::FEDA_Driveline4WD *arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Driveline4WD > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Driveline4WD_GetCentralDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Driveline4WD *arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Driveline4WD const *)arg1)->GetCentralDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Driveline4WD_GetFrontDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Driveline4WD *arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Driveline4WD const *)arg1)->GetFrontDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Driveline4WD_GetRearDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Driveline4WD *arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Driveline4WD const *)arg1)->GetRearDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Driveline4WD_GetDriveshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Driveline4WD *arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Driveline4WD const *)arg1)->GetDriveshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Driveline4WD_GetToFrontDiffShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Driveline4WD *arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Driveline4WD const *)arg1)->GetToFrontDiffShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Driveline4WD_GetToRearDiffShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Driveline4WD *arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Driveline4WD const *)arg1)->GetToRearDiffShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Driveline4WD_GetFrontConicalGearRatio(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Driveline4WD *arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Driveline4WD const *)arg1)->GetFrontConicalGearRatio();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Driveline4WD_GetRearConicalGearRatio(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Driveline4WD *arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Driveline4WD const *)arg1)->GetRearConicalGearRatio();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Driveline4WD_GetAxleDifferentialLockingLimit(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Driveline4WD *arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Driveline4WD const *)arg1)->GetAxleDifferentialLockingLimit();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Driveline4WD_GetCentralDifferentialLockingLimit(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Driveline4WD *arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Driveline4WD const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Driveline4WD > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Driveline4WD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Driveline4WD const *)arg1)->GetCentralDifferentialLockingLimit();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_SimpleDriveline() {
  void * jresult ;
  chrono::vehicle::m113::M113_SimpleDriveline *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::m113::M113_SimpleDriveline *)new chrono::vehicle::m113::M113_SimpleDriveline();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_SimpleDriveline >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_SimpleDriveline(void * jarg1) {
  chrono::vehicle::m113::M113_SimpleDriveline *arg1 = (chrono::vehicle::m113::M113_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SimpleDriveline > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SimpleDriveline_GetDifferentialMaxBias(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SimpleDriveline *arg1 = (chrono::vehicle::m113::M113_SimpleDriveline *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SimpleDriveline const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SimpleDriveline > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SimpleDriveline *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SimpleDriveline const *)arg1)->GetDifferentialMaxBias();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_DrivelineBDS() {
  void * jresult ;
  chrono::vehicle::m113::M113_DrivelineBDS *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::m113::M113_DrivelineBDS *)new chrono::vehicle::m113::M113_DrivelineBDS();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_DrivelineBDS >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_DrivelineBDS(void * jarg1) {
  chrono::vehicle::m113::M113_DrivelineBDS *arg1 = (chrono::vehicle::m113::M113_DrivelineBDS *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_DrivelineBDS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_DrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_DrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_DrivelineBDS_GetDriveshaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_DrivelineBDS *arg1 = (chrono::vehicle::m113::M113_DrivelineBDS *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_DrivelineBDS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_DrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_DrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_DrivelineBDS const *)arg1)->GetDriveshaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_DrivelineBDS_GetDifferentialBoxInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_DrivelineBDS *arg1 = (chrono::vehicle::m113::M113_DrivelineBDS *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_DrivelineBDS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_DrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_DrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_DrivelineBDS const *)arg1)->GetDifferentialBoxInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_DrivelineBDS_GetConicalGearRatio(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_DrivelineBDS *arg1 = (chrono::vehicle::m113::M113_DrivelineBDS *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_DrivelineBDS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_DrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_DrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_DrivelineBDS const *)arg1)->GetConicalGearRatio();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_DrivelineBDS_GetDifferentialLockingLimit(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_DrivelineBDS *arg1 = (chrono::vehicle::m113::M113_DrivelineBDS *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_DrivelineBDS const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_DrivelineBDS > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_DrivelineBDS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_DrivelineBDS const *)arg1)->GetDifferentialLockingLimit();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChWheel(void * jarg1) {
  chrono::vehicle::ChWheel *arg1 = (chrono::vehicle::ChWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChWheel_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChWheel *arg1 = (chrono::vehicle::ChWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheel const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChWheel const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChWheel_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChWheel *arg1 = (chrono::vehicle::ChWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChWheel const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChWheel_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChWheel *arg1 = (chrono::vehicle::ChWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChWheel const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheel_Initialize__SWIG_0(void * jarg1, void * jarg2, int jarg3, double jarg4) {
  chrono::vehicle::ChWheel *arg1 = (chrono::vehicle::ChWheel *) 0 ;
  std::shared_ptr< chrono::ChBody > arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::ChWheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChWheel *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBody > *)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheel_Initialize__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  chrono::vehicle::ChWheel *arg1 = (chrono::vehicle::ChWheel *) 0 ;
  std::shared_ptr< chrono::ChBody > arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChWheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChWheel *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBody > *)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      (arg1)->Initialize(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheel_SetCollide(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChWheel *arg1 = (chrono::vehicle::ChWheel *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChWheel *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetCollide(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheel_Synchronize(void * jarg1) {
  chrono::vehicle::ChWheel *arg1 = (chrono::vehicle::ChWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Synchronize();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheel_GetTire(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChWheel *arg1 = (chrono::vehicle::ChWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheel const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTire > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChWheel const *)arg1)->GetTire();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< chrono::vehicle::ChTire >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheel_SetTire(void * jarg1, void * jarg2) {
  chrono::vehicle::ChWheel *arg1 = (chrono::vehicle::ChWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire > arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheel > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTire > *argp2 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChWheel *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (std::shared_ptr< chrono::vehicle::ChTire > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< chrono::vehicle::ChTire >", 0);
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->SetTire(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheel_GetSpindle(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChWheel *arg1 = (chrono::vehicle::ChWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheel const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChWheel const *)arg1)->GetSpindle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChWheel_GetSide(void * jarg1) {
  int jresult ;
  chrono::vehicle::ChWheel *arg1 = (chrono::vehicle::ChWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheel const > *smartarg1 = 0 ;
  chrono::vehicle::VehicleSide result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::VehicleSide)((chrono::vehicle::ChWheel const *)arg1)->GetSide();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheel_GetPos(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChWheel *arg1 = (chrono::vehicle::ChWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheel const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChWheel const *)arg1)->GetPos();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheel_GetState(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChWheel *arg1 = (chrono::vehicle::ChWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheel const > *smartarg1 = 0 ;
  chrono::vehicle::WheelState result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChWheel const *)arg1)->GetState();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::vehicle::WheelState(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheel_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChWheel *arg1 = (chrono::vehicle::ChWheel *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChWheel *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheel_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChWheel *arg1 = (chrono::vehicle::ChWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChWheel_GetMeshFilename(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChWheel *arg1 = (chrono::vehicle::ChWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheel const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::string *) &((chrono::vehicle::ChWheel const *)arg1)->GetMeshFilename();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Wheel__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::Wheel *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::Wheel *)new chrono::vehicle::Wheel((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::Wheel >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Wheel__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::Wheel *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::Wheel *)new chrono::vehicle::Wheel((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::Wheel >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Wheel(void * jarg1) {
  chrono::vehicle::Wheel *arg1 = (chrono::vehicle::Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::Wheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::Wheel > *)jarg1;
  arg1 = (chrono::vehicle::Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Wheel_GetWheelMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::Wheel *arg1 = (chrono::vehicle::Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::Wheel > *)jarg1;
  arg1 = (chrono::vehicle::Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::Wheel const *)arg1)->GetWheelMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Wheel_GetWheelInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::Wheel *arg1 = (chrono::vehicle::Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::Wheel const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::Wheel > *)jarg1;
  arg1 = (chrono::vehicle::Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::Wheel const *)arg1)->GetWheelInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Wheel_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::Wheel *arg1 = (chrono::vehicle::Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::Wheel > *)jarg1;
  arg1 = (chrono::vehicle::Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::Wheel const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Wheel_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::Wheel *arg1 = (chrono::vehicle::Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::Wheel > *)jarg1;
  arg1 = (chrono::vehicle::Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::Wheel const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Wheel_SetRadius(void * jarg1, double jarg2) {
  chrono::vehicle::Wheel *arg1 = (chrono::vehicle::Wheel *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::Wheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::Wheel > *)jarg1;
  arg1 = (chrono::vehicle::Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetRadius(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Wheel_SetWidth(void * jarg1, double jarg2) {
  chrono::vehicle::Wheel *arg1 = (chrono::vehicle::Wheel *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::Wheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::Wheel > *)jarg1;
  arg1 = (chrono::vehicle::Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetWidth(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChBrake(void * jarg1) {
  chrono::vehicle::ChBrake *arg1 = (chrono::vehicle::ChBrake *) 0 ;
  std::shared_ptr< chrono::vehicle::ChBrake > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChBrake > *)jarg1;
  arg1 = (chrono::vehicle::ChBrake *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChBrake_Initialize(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  chrono::vehicle::ChBrake *arg1 = (chrono::vehicle::ChBrake *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspension > arg3 ;
  chrono::vehicle::VehicleSide arg4 ;
  std::shared_ptr< chrono::vehicle::ChBrake > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChBrake > *)jarg1;
  arg1 = (chrono::vehicle::ChBrake *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSuspension > *)jarg3; 
  arg4 = (chrono::vehicle::VehicleSide)jarg4; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChBrake_Synchronize(void * jarg1, double jarg2) {
  chrono::vehicle::ChBrake *arg1 = (chrono::vehicle::ChBrake *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChBrake > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChBrake > *)jarg1;
  arg1 = (chrono::vehicle::ChBrake *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Synchronize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChBrake_EnableLocking(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChBrake *arg1 = (chrono::vehicle::ChBrake *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChBrake > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChBrake > *)jarg1;
  arg1 = (chrono::vehicle::ChBrake *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->EnableLocking(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChBrake_GetBrakeTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChBrake *arg1 = (chrono::vehicle::ChBrake *) 0 ;
  std::shared_ptr< chrono::vehicle::ChBrake > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChBrake > *)jarg1;
  arg1 = (chrono::vehicle::ChBrake *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetBrakeTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChBrakeSimple(void * jarg1) {
  chrono::vehicle::ChBrakeSimple *arg1 = (chrono::vehicle::ChBrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::ChBrakeSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChBrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::ChBrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChBrakeSimple_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChBrakeSimple *arg1 = (chrono::vehicle::ChBrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::ChBrakeSimple const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChBrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::ChBrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChBrakeSimple const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChBrakeSimple_Initialize(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  chrono::vehicle::ChBrakeSimple *arg1 = (chrono::vehicle::ChBrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspension > arg3 ;
  chrono::vehicle::VehicleSide arg4 ;
  std::shared_ptr< chrono::vehicle::ChBrakeSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChBrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::ChBrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSuspension > *)jarg3; 
  arg4 = (chrono::vehicle::VehicleSide)jarg4; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChBrakeSimple_Synchronize(void * jarg1, double jarg2) {
  chrono::vehicle::ChBrakeSimple *arg1 = (chrono::vehicle::ChBrakeSimple *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChBrakeSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChBrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::ChBrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Synchronize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChBrakeSimple_GetBrakeTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChBrakeSimple *arg1 = (chrono::vehicle::ChBrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::ChBrakeSimple > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChBrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::ChBrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetBrakeTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChBrakeSimple_GetBrakeSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChBrakeSimple *arg1 = (chrono::vehicle::ChBrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::ChBrakeSimple > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChBrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::ChBrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetBrakeSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChBrakeShafts(void * jarg1) {
  chrono::vehicle::ChBrakeShafts *arg1 = (chrono::vehicle::ChBrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChBrakeShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChBrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChBrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChBrakeShafts_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChBrakeShafts *arg1 = (chrono::vehicle::ChBrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChBrakeShafts const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChBrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChBrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChBrakeShafts const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChBrakeShafts_Initialize(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  chrono::vehicle::ChBrakeShafts *arg1 = (chrono::vehicle::ChBrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspension > arg3 ;
  chrono::vehicle::VehicleSide arg4 ;
  std::shared_ptr< chrono::vehicle::ChBrakeShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChBrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChBrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSuspension > *)jarg3; 
  arg4 = (chrono::vehicle::VehicleSide)jarg4; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChBrakeShafts_Synchronize(void * jarg1, double jarg2) {
  chrono::vehicle::ChBrakeShafts *arg1 = (chrono::vehicle::ChBrakeShafts *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChBrakeShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChBrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChBrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Synchronize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChBrakeShafts_GetBrakeTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChBrakeShafts *arg1 = (chrono::vehicle::ChBrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChBrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChBrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChBrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetBrakeTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BrakeSimple__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::BrakeSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::BrakeSimple *)new chrono::vehicle::BrakeSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::BrakeSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BrakeSimple__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::BrakeSimple *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::BrakeSimple *)new chrono::vehicle::BrakeSimple((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::BrakeSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BrakeSimple(void * jarg1) {
  chrono::vehicle::BrakeSimple *arg1 = (chrono::vehicle::BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::BrakeSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_BrakeSimple_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::BrakeSimple *arg1 = (chrono::vehicle::BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::BrakeSimple > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BrakeShafts__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::BrakeShafts *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::BrakeShafts *)new chrono::vehicle::BrakeShafts((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::BrakeShafts >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BrakeShafts__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::BrakeShafts *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::BrakeShafts *)new chrono::vehicle::BrakeShafts((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::BrakeShafts >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BrakeShafts(void * jarg1) {
  chrono::vehicle::BrakeShafts *arg1 = (chrono::vehicle::BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::BrakeShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_BrakeShafts_GetShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::BrakeShafts *arg1 = (chrono::vehicle::BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::BrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BrakeShafts_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::BrakeShafts *arg1 = (chrono::vehicle::BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::BrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTire(void * jarg1) {
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTire_SetStepsize(void * jarg1, double jarg2) {
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetStepsize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTire_GetStepsize(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTire const *)arg1)->GetStepsize();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTire_SetCollisionType(void * jarg1, int jarg2) {
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  chrono::vehicle::ChTire::CollisionType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::ChTire::CollisionType)jarg2; 
  {
    try {
      (arg1)->SetCollisionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTire_SetPressure(void * jarg1, double jarg2) {
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetPressure(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTire_GetPressure(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTire const *)arg1)->GetPressure();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTire_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTire const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTire_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTire const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTire_ReportTireForce__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  chrono::vehicle::ChTerrain *arg2 = (chrono::vehicle::ChTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTerrain > *smartarg2 = 0 ;
  chrono::vehicle::TerrainForce result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  
  smartarg2 = (std::shared_ptr<  chrono::vehicle::ChTerrain > *)jarg2;
  arg2 = (chrono::vehicle::ChTerrain *)(smartarg2 ? smartarg2->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTire const *)arg1)->ReportTireForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::vehicle::TerrainForce(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTire_ReportTireForce__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  chrono::vehicle::ChTerrain *arg2 = (chrono::vehicle::ChTerrain *) 0 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTire const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTerrain > *smartarg2 = 0 ;
  chrono::vehicle::TerrainForce result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  
  smartarg2 = (std::shared_ptr<  chrono::vehicle::ChTerrain > *)jarg2;
  arg2 = (chrono::vehicle::ChTerrain *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > & is null", 0);
    return 0;
  } 
  {
    try {
      result = ((chrono::vehicle::ChTire const *)arg1)->ReportTireForce(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::vehicle::TerrainForce(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTire_GetSlipAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTire const *)arg1)->GetSlipAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTire_GetLongitudinalSlip(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTire const *)arg1)->GetLongitudinalSlip();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTire_GetCamberAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTire const *)arg1)->GetCamberAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTire_EstimateInertia__SWIG_0(double jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  chrono::ChVector< > result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = chrono::vehicle::ChTire::EstimateInertia(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTire_EstimateInertia__SWIG_1(double jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  chrono::ChVector< > result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = chrono::vehicle::ChTire::EstimateInertia(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTire_GetDeflection(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTire const *)arg1)->GetDeflection();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChTire_GetMeshFilename(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::string *) &((chrono::vehicle::ChTire const *)arg1)->GetMeshFilename();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTire_Initialize(void * jarg1, void * jarg2) {
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheel > arg2 ;
  std::shared_ptr< chrono::vehicle::ChTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChWheel > *)jarg2; 
  {
    try {
      (arg1)->Initialize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTire_Synchronize(void * jarg1, double jarg2, void * jarg3) {
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  double arg2 ;
  chrono::vehicle::ChTerrain *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  
  arg3 = (chrono::vehicle::ChTerrain *)(((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg3) ? ((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg3)->get() : 0);
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChTerrain const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::ChTerrain const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTire_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::ChTire *arg1 = (chrono::vehicle::ChTire *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTMeasyTire(void * jarg1) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChTMeasyTire_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTMeasyTire const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTMeasyTire_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTMeasyTire const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_SetGammaLimit(void * jarg1, double jarg2) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetGammaLimit(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTMeasyTire_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTMeasyTire const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTMeasyTire_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTMeasyTire const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTMeasyTire_GetSlipAngle_internal(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTMeasyTire const *)arg1)->GetSlipAngle_internal();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTMeasyTire_GetLongitudinalSlip_internal(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTMeasyTire const *)arg1)->GetLongitudinalSlip_internal();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTMeasyTire_GetTireOmega(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetTireOmega();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTMeasyTire_GetTireMaxLoad(unsigned int jarg1) {
  double jresult ;
  unsigned int arg1 ;
  double result;
  
  arg1 = (unsigned int)jarg1; 
  {
    try {
      result = (double)chrono::vehicle::ChTMeasyTire::GetTireMaxLoad(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_GuessTruck80Par__SWIG_0(void * jarg1, unsigned int jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    try {
      (arg1)->GuessTruck80Par(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_GuessTruck80Par__SWIG_1(void * jarg1, unsigned int jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->GuessTruck80Par(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_GuessTruck80Par__SWIG_2(void * jarg1, unsigned int jarg2, double jarg3, double jarg4, double jarg5, double jarg6) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->GuessTruck80Par(arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_GuessTruck80Par__SWIG_3(void * jarg1, unsigned int jarg2, double jarg3, double jarg4, double jarg5) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->GuessTruck80Par(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_GuessTruck80Par__SWIG_4(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    try {
      (arg1)->GuessTruck80Par(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_GuessTruck80Par__SWIG_5(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->GuessTruck80Par(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_GuessTruck80Par__SWIG_6(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->GuessTruck80Par(arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_GuessTruck80Par__SWIG_7(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->GuessTruck80Par(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_GuessPassCar70Par__SWIG_0(void * jarg1, unsigned int jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    try {
      (arg1)->GuessPassCar70Par(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_GuessPassCar70Par__SWIG_1(void * jarg1, unsigned int jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->GuessPassCar70Par(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_GuessPassCar70Par__SWIG_2(void * jarg1, unsigned int jarg2, double jarg3, double jarg4, double jarg5, double jarg6) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->GuessPassCar70Par(arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_GuessPassCar70Par__SWIG_3(void * jarg1, unsigned int jarg2, double jarg3, double jarg4, double jarg5) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->GuessPassCar70Par(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_GuessPassCar70Par__SWIG_4(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    try {
      (arg1)->GuessPassCar70Par(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_GuessPassCar70Par__SWIG_5(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->GuessPassCar70Par(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_GuessPassCar70Par__SWIG_6(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->GuessPassCar70Par(arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_GuessPassCar70Par__SWIG_7(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->GuessPassCar70Par(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_SetVerticalStiffness__SWIG_0(void * jarg1, double jarg2) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetVerticalStiffness(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_SetVerticalStiffness__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetVerticalStiffness(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_SetFrictionCoefficient(void * jarg1, double jarg2) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetFrictionCoefficient(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_SetRollingResistanceCoefficient(void * jarg1, double jarg2) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetRollingResistanceCoefficient(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTMeasyTire_WritePlots(void * jarg1, const char * jarg2, const char * jarg3) {
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->WritePlots((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTMeasyTire_GetDeflection(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTMeasyTire const *)arg1)->GetDeflection();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChTMeasyTire_CheckParameters(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChTMeasyTire *arg1 = (chrono::vehicle::ChTMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::ChTMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)(arg1)->CheckParameters();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChRigidTire(void * jarg1) {
  chrono::vehicle::ChRigidTire *arg1 = (chrono::vehicle::ChRigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidTire > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChRigidTire_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChRigidTire *arg1 = (chrono::vehicle::ChRigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidTire const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidTire > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChRigidTire const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidTire_SetMeshFilename__SWIG_0(void * jarg1, const char * jarg2, double jarg3) {
  chrono::vehicle::ChRigidTire *arg1 = (chrono::vehicle::ChRigidTire *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::ChRigidTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidTire > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->SetMeshFilename((std::string const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidTire_SetMeshFilename__SWIG_1(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChRigidTire *arg1 = (chrono::vehicle::ChRigidTire *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidTire > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->SetMeshFilename((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChRigidTire_UseContactMesh(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChRigidTire *arg1 = (chrono::vehicle::ChRigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidTire const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidTire > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChRigidTire const *)arg1)->UseContactMesh();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChRigidTire_ReportTireForce__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::ChRigidTire *arg1 = (chrono::vehicle::ChRigidTire *) 0 ;
  chrono::vehicle::ChTerrain *arg2 = (chrono::vehicle::ChTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidTire const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTerrain > *smartarg2 = 0 ;
  chrono::vehicle::TerrainForce result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidTire > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  
  smartarg2 = (std::shared_ptr<  chrono::vehicle::ChTerrain > *)jarg2;
  arg2 = (chrono::vehicle::ChTerrain *)(smartarg2 ? smartarg2->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChRigidTire const *)arg1)->ReportTireForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::vehicle::TerrainForce(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChRigidTire_ReportTireForce__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  chrono::vehicle::ChRigidTire *arg1 = (chrono::vehicle::ChRigidTire *) 0 ;
  chrono::vehicle::ChTerrain *arg2 = (chrono::vehicle::ChTerrain *) 0 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidTire const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTerrain > *smartarg2 = 0 ;
  chrono::vehicle::TerrainForce result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidTire > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  
  smartarg2 = (std::shared_ptr<  chrono::vehicle::ChTerrain > *)jarg2;
  arg2 = (chrono::vehicle::ChTerrain *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > & is null", 0);
    return 0;
  } 
  {
    try {
      result = ((chrono::vehicle::ChRigidTire const *)arg1)->ReportTireForce(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::vehicle::TerrainForce(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChRigidTire_GetContactMaterial(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChRigidTire *arg1 = (chrono::vehicle::ChRigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidTire const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChMaterialSurface > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidTire > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChRigidTire const *)arg1)->GetContactMaterial();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChMaterialSurface >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidTire_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChRigidTire *arg1 = (chrono::vehicle::ChRigidTire *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChRigidTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidTire > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidTire_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChRigidTire *arg1 = (chrono::vehicle::ChRigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRigidTire > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChRigidTire_GetContactMesh(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChRigidTire *arg1 = (chrono::vehicle::ChRigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidTire const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< geometry::ChTriangleMeshConnected > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidTire > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChRigidTire const *)arg1)->GetContactMesh();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< geometry::ChTriangleMeshConnected >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRigidTire_GetMeshVertexStates(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::ChRigidTire *arg1 = (chrono::vehicle::ChRigidTire *) 0 ;
  std::vector< chrono::ChVector< double > > *arg2 = 0 ;
  std::vector< chrono::ChVector< double > > *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChRigidTire const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRigidTire > *)jarg1;
  arg1 = (chrono::vehicle::ChRigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< chrono::ChVector< double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< chrono::ChVector< double > > & is null", 0);
    return ;
  } 
  arg3 = (std::vector< chrono::ChVector< double > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< chrono::ChVector< double > > & is null", 0);
    return ;
  } 
  {
    try {
      ((chrono::vehicle::ChRigidTire const *)arg1)->GetMeshVertexStates(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChForceElementTire(void * jarg1) {
  chrono::vehicle::ChForceElementTire *arg1 = (chrono::vehicle::ChForceElementTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChForceElementTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChForceElementTire > *)jarg1;
  arg1 = (chrono::vehicle::ChForceElementTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChForceElementTire_ReportTireForce__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::ChForceElementTire *arg1 = (chrono::vehicle::ChForceElementTire *) 0 ;
  chrono::vehicle::ChTerrain *arg2 = (chrono::vehicle::ChTerrain *) 0 ;
  std::shared_ptr< chrono::vehicle::ChForceElementTire const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTerrain > *smartarg2 = 0 ;
  chrono::vehicle::TerrainForce result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChForceElementTire > *)jarg1;
  arg1 = (chrono::vehicle::ChForceElementTire *)(smartarg1 ? smartarg1->get() : 0); 
  
  smartarg2 = (std::shared_ptr<  chrono::vehicle::ChTerrain > *)jarg2;
  arg2 = (chrono::vehicle::ChTerrain *)(smartarg2 ? smartarg2->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChForceElementTire const *)arg1)->ReportTireForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::vehicle::TerrainForce(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChForceElementTire_ReportTireForce__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  chrono::vehicle::ChForceElementTire *arg1 = (chrono::vehicle::ChForceElementTire *) 0 ;
  chrono::vehicle::ChTerrain *arg2 = (chrono::vehicle::ChTerrain *) 0 ;
  chrono::ChCoordsys< > *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChForceElementTire const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTerrain > *smartarg2 = 0 ;
  chrono::vehicle::TerrainForce result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChForceElementTire > *)jarg1;
  arg1 = (chrono::vehicle::ChForceElementTire *)(smartarg1 ? smartarg1->get() : 0); 
  
  smartarg2 = (std::shared_ptr<  chrono::vehicle::ChTerrain > *)jarg2;
  arg2 = (chrono::vehicle::ChTerrain *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = (chrono::ChCoordsys< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > & is null", 0);
    return 0;
  } 
  {
    try {
      result = ((chrono::vehicle::ChForceElementTire const *)arg1)->ReportTireForce(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::vehicle::TerrainForce(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChPac89Tire(void * jarg1) {
  chrono::vehicle::ChPac89Tire *arg1 = (chrono::vehicle::ChPac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac89Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChPac89Tire_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChPac89Tire *arg1 = (chrono::vehicle::ChPac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac89Tire const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChPac89Tire const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPac89Tire_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChPac89Tire *arg1 = (chrono::vehicle::ChPac89Tire *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChPac89Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPac89Tire_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChPac89Tire *arg1 = (chrono::vehicle::ChPac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac89Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPac89Tire_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChPac89Tire *arg1 = (chrono::vehicle::ChPac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac89Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChPac89Tire const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPac89Tire_SetGammaLimit(void * jarg1, double jarg2) {
  chrono::vehicle::ChPac89Tire *arg1 = (chrono::vehicle::ChPac89Tire *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChPac89Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetGammaLimit(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPac89Tire_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChPac89Tire *arg1 = (chrono::vehicle::ChPac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac89Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChPac89Tire const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPac89Tire_GetDeflection(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChPac89Tire *arg1 = (chrono::vehicle::ChPac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac89Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChPac89Tire const *)arg1)->GetDeflection();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPac89Tire_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChPac89Tire *arg1 = (chrono::vehicle::ChPac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac89Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChPac89Tire const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPac89Tire_GetSlipAngle_internal(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChPac89Tire *arg1 = (chrono::vehicle::ChPac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac89Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChPac89Tire const *)arg1)->GetSlipAngle_internal();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPac89Tire_GetLongitudinalSlip_internal(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChPac89Tire *arg1 = (chrono::vehicle::ChPac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac89Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChPac89Tire const *)arg1)->GetLongitudinalSlip_internal();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPac89Tire_GetCamberAngle_internal(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChPac89Tire *arg1 = (chrono::vehicle::ChPac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac89Tire > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetCamberAngle_internal();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChPac02Tire(void * jarg1) {
  chrono::vehicle::ChPac02Tire *arg1 = (chrono::vehicle::ChPac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChPac02Tire_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChPac02Tire *arg1 = (chrono::vehicle::ChPac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac02Tire const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChPac02Tire const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPac02Tire_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChPac02Tire *arg1 = (chrono::vehicle::ChPac02Tire *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChPac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPac02Tire_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChPac02Tire *arg1 = (chrono::vehicle::ChPac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPac02Tire_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChPac02Tire *arg1 = (chrono::vehicle::ChPac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac02Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChPac02Tire const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChPac02Tire_SetGammaLimit(void * jarg1, double jarg2) {
  chrono::vehicle::ChPac02Tire *arg1 = (chrono::vehicle::ChPac02Tire *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChPac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetGammaLimit(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPac02Tire_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChPac02Tire *arg1 = (chrono::vehicle::ChPac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac02Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChPac02Tire const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPac02Tire_GetDeflection(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChPac02Tire *arg1 = (chrono::vehicle::ChPac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac02Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChPac02Tire const *)arg1)->GetDeflection();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPac02Tire_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChPac02Tire *arg1 = (chrono::vehicle::ChPac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac02Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChPac02Tire const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPac02Tire_GetSlipAngle_internal(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChPac02Tire *arg1 = (chrono::vehicle::ChPac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac02Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChPac02Tire const *)arg1)->GetSlipAngle_internal();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPac02Tire_GetLongitudinalSlip_internal(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChPac02Tire *arg1 = (chrono::vehicle::ChPac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac02Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChPac02Tire const *)arg1)->GetLongitudinalSlip_internal();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPac02Tire_GetNormalStiffnessForce(void * jarg1, double jarg2) {
  double jresult ;
  chrono::vehicle::ChPac02Tire *arg1 = (chrono::vehicle::ChPac02Tire *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChPac02Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChPac02Tire const *)arg1)->GetNormalStiffnessForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPac02Tire_GetNormalDampingForce(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  chrono::vehicle::ChPac02Tire *arg1 = (chrono::vehicle::ChPac02Tire *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::ChPac02Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChPac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::ChPac02Tire const *)arg1)->GetNormalDampingForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPac02Tire_GetMuRoad(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChPac02Tire *arg1 = (chrono::vehicle::ChPac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac02Tire > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMuRoad();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPac02Tire_GetLongitudinalGripSaturation(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChPac02Tire *arg1 = (chrono::vehicle::ChPac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac02Tire > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetLongitudinalGripSaturation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChPac02Tire_GetLateralGripSaturation(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChPac02Tire *arg1 = (chrono::vehicle::ChPac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChPac02Tire > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChPac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::ChPac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetLateralGripSaturation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChFialaTire(void * jarg1) {
  chrono::vehicle::ChFialaTire *arg1 = (chrono::vehicle::ChFialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChFialaTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChFialaTire > *)jarg1;
  arg1 = (chrono::vehicle::ChFialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChFialaTire_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChFialaTire *arg1 = (chrono::vehicle::ChFialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChFialaTire const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChFialaTire > *)jarg1;
  arg1 = (chrono::vehicle::ChFialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChFialaTire const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChFialaTire_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChFialaTire *arg1 = (chrono::vehicle::ChFialaTire *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChFialaTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChFialaTire > *)jarg1;
  arg1 = (chrono::vehicle::ChFialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChFialaTire_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChFialaTire *arg1 = (chrono::vehicle::ChFialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChFialaTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChFialaTire > *)jarg1;
  arg1 = (chrono::vehicle::ChFialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChFialaTire_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChFialaTire *arg1 = (chrono::vehicle::ChFialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChFialaTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChFialaTire > *)jarg1;
  arg1 = (chrono::vehicle::ChFialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChFialaTire const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChFialaTire_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChFialaTire *arg1 = (chrono::vehicle::ChFialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChFialaTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChFialaTire > *)jarg1;
  arg1 = (chrono::vehicle::ChFialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChFialaTire const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChFialaTire_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChFialaTire *arg1 = (chrono::vehicle::ChFialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChFialaTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChFialaTire > *)jarg1;
  arg1 = (chrono::vehicle::ChFialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChFialaTire const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChFialaTire_GetSlipAngle_internal(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChFialaTire *arg1 = (chrono::vehicle::ChFialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChFialaTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChFialaTire > *)jarg1;
  arg1 = (chrono::vehicle::ChFialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChFialaTire const *)arg1)->GetSlipAngle_internal();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChFialaTire_GetLongitudinalSlip_internal(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChFialaTire *arg1 = (chrono::vehicle::ChFialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChFialaTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChFialaTire > *)jarg1;
  arg1 = (chrono::vehicle::ChFialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChFialaTire const *)arg1)->GetLongitudinalSlip_internal();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChFialaTire_GetCamberAngle_internal(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChFialaTire *arg1 = (chrono::vehicle::ChFialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChFialaTire > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChFialaTire > *)jarg1;
  arg1 = (chrono::vehicle::ChFialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetCamberAngle_internal();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChFialaTire_GetDeflection(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChFialaTire *arg1 = (chrono::vehicle::ChFialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChFialaTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChFialaTire > *)jarg1;
  arg1 = (chrono::vehicle::ChFialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChFialaTire const *)arg1)->GetDeflection();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChFialaTire_GetTireOmega(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChFialaTire *arg1 = (chrono::vehicle::ChFialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::ChFialaTire > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChFialaTire > *)jarg1;
  arg1 = (chrono::vehicle::ChFialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetTireOmega();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChFialaTire_WritePlots(void * jarg1, const char * jarg2, const char * jarg3) {
  chrono::vehicle::ChFialaTire *arg1 = (chrono::vehicle::ChFialaTire *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChFialaTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChFialaTire > *)jarg1;
  arg1 = (chrono::vehicle::ChFialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->WritePlots((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TMeasyTire__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::TMeasyTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::TMeasyTire *)new chrono::vehicle::TMeasyTire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TMeasyTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TMeasyTire__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::TMeasyTire *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::TMeasyTire *)new chrono::vehicle::TMeasyTire((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TMeasyTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TMeasyTire(void * jarg1) {
  chrono::vehicle::TMeasyTire *arg1 = (chrono::vehicle::TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TMeasyTire_SetTMeasyParams(void * jarg1) {
  chrono::vehicle::TMeasyTire *arg1 = (chrono::vehicle::TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetTMeasyParams();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_TMeasyTire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::TMeasyTire *arg1 = (chrono::vehicle::TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::TMeasyTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TMeasyTire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TMeasyTire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TMeasyTire *arg1 = (chrono::vehicle::TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::TMeasyTire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::TMeasyTire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TMeasyTire_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::TMeasyTire *arg1 = (chrono::vehicle::TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::TMeasyTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TMeasyTire const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TMeasyTire_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::TMeasyTire *arg1 = (chrono::vehicle::TMeasyTire *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TMeasyTire_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::TMeasyTire *arg1 = (chrono::vehicle::TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RigidTire__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::RigidTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::RigidTire *)new chrono::vehicle::RigidTire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::RigidTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RigidTire__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::RigidTire *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::RigidTire *)new chrono::vehicle::RigidTire((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::RigidTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RigidTire(void * jarg1) {
  chrono::vehicle::RigidTire *arg1 = (chrono::vehicle::RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::RigidTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_RigidTire_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::RigidTire *arg1 = (chrono::vehicle::RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::RigidTire const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RigidTire_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::RigidTire *arg1 = (chrono::vehicle::RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::RigidTire const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RigidTire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::RigidTire *arg1 = (chrono::vehicle::RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::RigidTire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidTire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::RigidTire *arg1 = (chrono::vehicle::RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::RigidTire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::RigidTire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FialaTire__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::FialaTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::FialaTire *)new chrono::vehicle::FialaTire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::FialaTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FialaTire__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::FialaTire *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::FialaTire *)new chrono::vehicle::FialaTire((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::FialaTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FialaTire(void * jarg1) {
  chrono::vehicle::FialaTire *arg1 = (chrono::vehicle::FialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::FialaTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_FialaTire_GetNormalStiffnessForce(void * jarg1, double jarg2) {
  double jresult ;
  chrono::vehicle::FialaTire *arg1 = (chrono::vehicle::FialaTire *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::FialaTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::FialaTire const *)arg1)->GetNormalStiffnessForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FialaTire_GetNormalDampingForce(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  chrono::vehicle::FialaTire *arg1 = (chrono::vehicle::FialaTire *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::FialaTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::FialaTire const *)arg1)->GetNormalDampingForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FialaTire_SetFialaParams(void * jarg1) {
  chrono::vehicle::FialaTire *arg1 = (chrono::vehicle::FialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::FialaTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetFialaParams();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_FialaTire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::FialaTire *arg1 = (chrono::vehicle::FialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::FialaTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::FialaTire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FialaTire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::FialaTire *arg1 = (chrono::vehicle::FialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::FialaTire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::FialaTire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FialaTire_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::FialaTire *arg1 = (chrono::vehicle::FialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::FialaTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::FialaTire const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FialaTire_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::FialaTire *arg1 = (chrono::vehicle::FialaTire *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::FialaTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FialaTire_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::FialaTire *arg1 = (chrono::vehicle::FialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::FialaTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Pac89Tire__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::Pac89Tire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::Pac89Tire *)new chrono::vehicle::Pac89Tire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::Pac89Tire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Pac89Tire__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::Pac89Tire *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::Pac89Tire *)new chrono::vehicle::Pac89Tire((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::Pac89Tire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Pac89Tire(void * jarg1) {
  chrono::vehicle::Pac89Tire *arg1 = (chrono::vehicle::Pac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::Pac89Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::Pac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::Pac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pac89Tire_GetNormalStiffnessForce(void * jarg1, double jarg2) {
  double jresult ;
  chrono::vehicle::Pac89Tire *arg1 = (chrono::vehicle::Pac89Tire *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::Pac89Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::Pac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::Pac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::Pac89Tire const *)arg1)->GetNormalStiffnessForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pac89Tire_GetNormalDampingForce(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  chrono::vehicle::Pac89Tire *arg1 = (chrono::vehicle::Pac89Tire *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::Pac89Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::Pac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::Pac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::Pac89Tire const *)arg1)->GetNormalDampingForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pac89Tire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::Pac89Tire *arg1 = (chrono::vehicle::Pac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::Pac89Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::Pac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::Pac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::Pac89Tire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Pac89Tire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::Pac89Tire *arg1 = (chrono::vehicle::Pac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::Pac89Tire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::Pac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::Pac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::Pac89Tire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pac89Tire_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::Pac89Tire *arg1 = (chrono::vehicle::Pac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::Pac89Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::Pac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::Pac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::Pac89Tire const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pac89Tire_SetPac89Params(void * jarg1) {
  chrono::vehicle::Pac89Tire *arg1 = (chrono::vehicle::Pac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::Pac89Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::Pac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::Pac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetPac89Params();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pac89Tire_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::Pac89Tire *arg1 = (chrono::vehicle::Pac89Tire *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::Pac89Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::Pac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::Pac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pac89Tire_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::Pac89Tire *arg1 = (chrono::vehicle::Pac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::Pac89Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::Pac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::Pac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Pac02Tire__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::Pac02Tire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::Pac02Tire *)new chrono::vehicle::Pac02Tire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::Pac02Tire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Pac02Tire__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::Pac02Tire *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::Pac02Tire *)new chrono::vehicle::Pac02Tire((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::Pac02Tire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Pac02Tire(void * jarg1) {
  chrono::vehicle::Pac02Tire *arg1 = (chrono::vehicle::Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::Pac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pac02Tire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::Pac02Tire *arg1 = (chrono::vehicle::Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::Pac02Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::Pac02Tire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Pac02Tire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::Pac02Tire *arg1 = (chrono::vehicle::Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::Pac02Tire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::Pac02Tire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pac02Tire_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::Pac02Tire *arg1 = (chrono::vehicle::Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::Pac02Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::Pac02Tire const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pac02Tire_SetMFParams(void * jarg1) {
  chrono::vehicle::Pac02Tire *arg1 = (chrono::vehicle::Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::Pac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetMFParams();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pac02Tire_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::Pac02Tire *arg1 = (chrono::vehicle::Pac02Tire *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::Pac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pac02Tire_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::Pac02Tire *arg1 = (chrono::vehicle::Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::Pac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_RigidTire(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::generic::Generic_RigidTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_RigidTire *)new chrono::vehicle::generic::Generic_RigidTire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_RigidTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Generic_RigidTire(void * jarg1) {
  chrono::vehicle::generic::Generic_RigidTire *arg1 = (chrono::vehicle::generic::Generic_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_RigidTire_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_RigidTire *arg1 = (chrono::vehicle::generic::Generic_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_RigidTire const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_RigidTire_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_RigidTire *arg1 = (chrono::vehicle::generic::Generic_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_RigidTire const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_RigidTire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_RigidTire *arg1 = (chrono::vehicle::generic::Generic_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_RigidTire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_RigidTire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_RigidTire *arg1 = (chrono::vehicle::generic::Generic_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidTire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::generic::Generic_RigidTire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_RigidMeshTire(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::generic::Generic_RigidMeshTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_RigidMeshTire *)new chrono::vehicle::generic::Generic_RigidMeshTire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_RigidMeshTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Generic_RigidMeshTire(void * jarg1) {
  chrono::vehicle::generic::Generic_RigidMeshTire *arg1 = (chrono::vehicle::generic::Generic_RigidMeshTire *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidMeshTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_RigidMeshTire > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidMeshTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_RigidMeshTire_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_RigidMeshTire *arg1 = (chrono::vehicle::generic::Generic_RigidMeshTire *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidMeshTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidMeshTire > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidMeshTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_RigidMeshTire const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_RigidMeshTire_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_RigidMeshTire *arg1 = (chrono::vehicle::generic::Generic_RigidMeshTire *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidMeshTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidMeshTire > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidMeshTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_RigidMeshTire const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_RigidMeshTire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_RigidMeshTire *arg1 = (chrono::vehicle::generic::Generic_RigidMeshTire *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidMeshTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidMeshTire > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidMeshTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_RigidMeshTire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_RigidMeshTire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_RigidMeshTire *arg1 = (chrono::vehicle::generic::Generic_RigidMeshTire *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_RigidMeshTire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_RigidMeshTire > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_RigidMeshTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::generic::Generic_RigidMeshTire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_FialaTire(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::generic::Generic_FialaTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_FialaTire *)new chrono::vehicle::generic::Generic_FialaTire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_FialaTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Generic_FialaTire(void * jarg1) {
  chrono::vehicle::generic::Generic_FialaTire *arg1 = (chrono::vehicle::generic::Generic_FialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_FialaTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_FialaTire_GetNormalStiffnessForce(void * jarg1, double jarg2) {
  double jresult ;
  chrono::vehicle::generic::Generic_FialaTire *arg1 = (chrono::vehicle::generic::Generic_FialaTire *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_FialaTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_FialaTire const *)arg1)->GetNormalStiffnessForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_FialaTire_GetNormalDampingForce(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  chrono::vehicle::generic::Generic_FialaTire *arg1 = (chrono::vehicle::generic::Generic_FialaTire *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_FialaTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_FialaTire const *)arg1)->GetNormalDampingForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_FialaTire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_FialaTire *arg1 = (chrono::vehicle::generic::Generic_FialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_FialaTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_FialaTire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_FialaTire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_FialaTire *arg1 = (chrono::vehicle::generic::Generic_FialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_FialaTire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::generic::Generic_FialaTire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic_FialaTire_SetFialaParams(void * jarg1) {
  chrono::vehicle::generic::Generic_FialaTire *arg1 = (chrono::vehicle::generic::Generic_FialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_FialaTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetFialaParams();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_RigidTire__SWIG_0(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::hmmwv::HMMWV_RigidTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_RigidTire *)new chrono::vehicle::hmmwv::HMMWV_RigidTire((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_RigidTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_RigidTire__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_RigidTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_RigidTire *)new chrono::vehicle::hmmwv::HMMWV_RigidTire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_RigidTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_RigidTire(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_RigidTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_RigidTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_RigidTire_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_RigidTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_RigidTire const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_RigidTire_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_RigidTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_RigidTire const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_RigidTire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_RigidTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_RigidTire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_RigidTire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_RigidTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_RigidTire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::hmmwv::HMMWV_RigidTire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_Pac89Tire(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_Pac89Tire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_Pac89Tire *)new chrono::vehicle::hmmwv::HMMWV_Pac89Tire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Pac89Tire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_Pac89Tire(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_Pac89Tire *arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Pac89Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Pac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Pac89Tire_GetNormalStiffnessForce(void * jarg1, double jarg2) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Pac89Tire *arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac89Tire *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Pac89Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Pac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Pac89Tire const *)arg1)->GetNormalStiffnessForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Pac89Tire_GetNormalDampingForce(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Pac89Tire *arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac89Tire *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Pac89Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Pac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Pac89Tire const *)arg1)->GetNormalDampingForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Pac89Tire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Pac89Tire *arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Pac89Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Pac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Pac89Tire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_Pac89Tire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_Pac89Tire *arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Pac89Tire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Pac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::hmmwv::HMMWV_Pac89Tire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Pac89Tire_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Pac89Tire *arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Pac89Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Pac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Pac89Tire const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_Pac89Tire_SetPac89Params(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_Pac89Tire *arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Pac89Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Pac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetPac89Params();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_Pac89Tire_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV_Pac89Tire *arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac89Tire *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Pac89Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Pac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_Pac89Tire_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_Pac89Tire *arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac89Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Pac89Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Pac89Tire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac89Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_Pac02Tire__SWIG_0(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  chrono::vehicle::hmmwv::HMMWV_Pac02Tire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_Pac02Tire *)new chrono::vehicle::hmmwv::HMMWV_Pac02Tire((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Pac02Tire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_Pac02Tire__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_Pac02Tire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_Pac02Tire *)new chrono::vehicle::hmmwv::HMMWV_Pac02Tire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Pac02Tire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_Pac02Tire(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_Pac02Tire *arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Pac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Pac02Tire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Pac02Tire *arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Pac02Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Pac02Tire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_Pac02Tire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_Pac02Tire *arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Pac02Tire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::hmmwv::HMMWV_Pac02Tire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Pac02Tire_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Pac02Tire *arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Pac02Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Pac02Tire const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_Pac02Tire_SetMFParams(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_Pac02Tire *arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Pac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetMFParams();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_Pac02Tire_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV_Pac02Tire *arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac02Tire *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Pac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_Pac02Tire_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_Pac02Tire *arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Pac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_FialaTire(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_FialaTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_FialaTire *)new chrono::vehicle::hmmwv::HMMWV_FialaTire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_FialaTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_FialaTire(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_FialaTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_FialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_FialaTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_FialaTire_GetNormalStiffnessForce(void * jarg1, double jarg2) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_FialaTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_FialaTire *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_FialaTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_FialaTire const *)arg1)->GetNormalStiffnessForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_FialaTire_GetNormalDampingForce(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_FialaTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_FialaTire *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_FialaTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_FialaTire const *)arg1)->GetNormalDampingForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_FialaTire_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_FialaTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_FialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_FialaTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_FialaTire const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_FialaTire_SetFialaParams(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_FialaTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_FialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_FialaTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetFialaParams();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_FialaTire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_FialaTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_FialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_FialaTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_FialaTire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_FialaTire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_FialaTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_FialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_FialaTire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::hmmwv::HMMWV_FialaTire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_FialaTire_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV_FialaTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_FialaTire *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_FialaTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_FialaTire_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_FialaTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_FialaTire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_FialaTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_FialaTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_FialaTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_TMeasyTire(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_TMeasyTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_TMeasyTire *)new chrono::vehicle::hmmwv::HMMWV_TMeasyTire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_TMeasyTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_TMeasyTire(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_TMeasyTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_TMeasyTire_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_TMeasyTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_TMeasyTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_TMeasyTire const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_TMeasyTire_SetTMeasyParams(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_TMeasyTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetTMeasyParams();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_TMeasyTire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_TMeasyTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_TMeasyTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_TMeasyTire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_TMeasyTire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_TMeasyTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_TMeasyTire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::hmmwv::HMMWV_TMeasyTire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_TMeasyTire_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV_TMeasyTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_TMeasyTire *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_TMeasyTire_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_TMeasyTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_TMeasyTire_GenerateCharacteristicPlots(void * jarg1, const char * jarg2) {
  chrono::vehicle::hmmwv::HMMWV_TMeasyTire *arg1 = (chrono::vehicle::hmmwv::HMMWV_TMeasyTire *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->GenerateCharacteristicPlots((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan_TMeasyTire(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::sedan::Sedan_TMeasyTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan_TMeasyTire *)new chrono::vehicle::sedan::Sedan_TMeasyTire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan_TMeasyTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sedan_TMeasyTire(void * jarg1) {
  chrono::vehicle::sedan::Sedan_TMeasyTire *arg1 = (chrono::vehicle::sedan::Sedan_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_TMeasyTire_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_TMeasyTire *arg1 = (chrono::vehicle::sedan::Sedan_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_TMeasyTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_TMeasyTire const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_TMeasyTire_SetTMeasyParams(void * jarg1) {
  chrono::vehicle::sedan::Sedan_TMeasyTire *arg1 = (chrono::vehicle::sedan::Sedan_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetTMeasyParams();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_TMeasyTire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_TMeasyTire *arg1 = (chrono::vehicle::sedan::Sedan_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_TMeasyTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_TMeasyTire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_TMeasyTire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_TMeasyTire *arg1 = (chrono::vehicle::sedan::Sedan_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_TMeasyTire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::sedan::Sedan_TMeasyTire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_TMeasyTire_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::sedan::Sedan_TMeasyTire *arg1 = (chrono::vehicle::sedan::Sedan_TMeasyTire *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_TMeasyTire_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::sedan::Sedan_TMeasyTire *arg1 = (chrono::vehicle::sedan::Sedan_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_TMeasyTire_GenerateCharacteristicPlots(void * jarg1, const char * jarg2) {
  chrono::vehicle::sedan::Sedan_TMeasyTire *arg1 = (chrono::vehicle::sedan::Sedan_TMeasyTire *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->GenerateCharacteristicPlots((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan_RigidTire__SWIG_0(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::sedan::Sedan_RigidTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan_RigidTire *)new chrono::vehicle::sedan::Sedan_RigidTire((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan_RigidTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan_RigidTire__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::sedan::Sedan_RigidTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan_RigidTire *)new chrono::vehicle::sedan::Sedan_RigidTire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan_RigidTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sedan_RigidTire(void * jarg1) {
  chrono::vehicle::sedan::Sedan_RigidTire *arg1 = (chrono::vehicle::sedan::Sedan_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_RigidTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_RigidTire_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_RigidTire *arg1 = (chrono::vehicle::sedan::Sedan_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_RigidTire const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_RigidTire_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_RigidTire *arg1 = (chrono::vehicle::sedan::Sedan_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_RigidTire const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_RigidTire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_RigidTire *arg1 = (chrono::vehicle::sedan::Sedan_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_RigidTire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_RigidTire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_RigidTire *arg1 = (chrono::vehicle::sedan::Sedan_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_RigidTire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::sedan::Sedan_RigidTire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_RigidTire__SWIG_0(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::citybus::CityBus_RigidTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_RigidTire *)new chrono::vehicle::citybus::CityBus_RigidTire((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_RigidTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_RigidTire__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::citybus::CityBus_RigidTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_RigidTire *)new chrono::vehicle::citybus::CityBus_RigidTire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_RigidTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CityBus_RigidTire(void * jarg1) {
  chrono::vehicle::citybus::CityBus_RigidTire *arg1 = (chrono::vehicle::citybus::CityBus_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_RigidTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_RigidTire_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_RigidTire *arg1 = (chrono::vehicle::citybus::CityBus_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_RigidTire const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_RigidTire_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_RigidTire *arg1 = (chrono::vehicle::citybus::CityBus_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_RigidTire const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_RigidTire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_RigidTire *arg1 = (chrono::vehicle::citybus::CityBus_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_RigidTire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_RigidTire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_RigidTire *arg1 = (chrono::vehicle::citybus::CityBus_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_RigidTire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::citybus::CityBus_RigidTire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_TMeasyTire(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::citybus::CityBus_TMeasyTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_TMeasyTire *)new chrono::vehicle::citybus::CityBus_TMeasyTire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_TMeasyTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CityBus_TMeasyTire(void * jarg1) {
  chrono::vehicle::citybus::CityBus_TMeasyTire *arg1 = (chrono::vehicle::citybus::CityBus_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_TMeasyTire_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_TMeasyTire *arg1 = (chrono::vehicle::citybus::CityBus_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_TMeasyTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_TMeasyTire const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_TMeasyTire_SetTMeasyParams(void * jarg1) {
  chrono::vehicle::citybus::CityBus_TMeasyTire *arg1 = (chrono::vehicle::citybus::CityBus_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetTMeasyParams();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_TMeasyTire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_TMeasyTire *arg1 = (chrono::vehicle::citybus::CityBus_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_TMeasyTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_TMeasyTire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_TMeasyTire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_TMeasyTire *arg1 = (chrono::vehicle::citybus::CityBus_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_TMeasyTire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::citybus::CityBus_TMeasyTire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_TMeasyTire_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::citybus::CityBus_TMeasyTire *arg1 = (chrono::vehicle::citybus::CityBus_TMeasyTire *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_TMeasyTire_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::citybus::CityBus_TMeasyTire *arg1 = (chrono::vehicle::citybus::CityBus_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_TMeasyTire_GenerateCharacteristicPlots(void * jarg1, const char * jarg2) {
  chrono::vehicle::citybus::CityBus_TMeasyTire *arg1 = (chrono::vehicle::citybus::CityBus_TMeasyTire *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->GenerateCharacteristicPlots((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_TMeasyTire(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_5t_TMeasyTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_TMeasyTire *)new chrono::vehicle::man::MAN_5t_TMeasyTire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_TMeasyTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_5t_TMeasyTire(void * jarg1) {
  chrono::vehicle::man::MAN_5t_TMeasyTire *arg1 = (chrono::vehicle::man::MAN_5t_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_TMeasyTire_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_TMeasyTire *arg1 = (chrono::vehicle::man::MAN_5t_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_TMeasyTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_TMeasyTire const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_TMeasyTire_SetTMeasyParams(void * jarg1) {
  chrono::vehicle::man::MAN_5t_TMeasyTire *arg1 = (chrono::vehicle::man::MAN_5t_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetTMeasyParams();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_TMeasyTire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_TMeasyTire *arg1 = (chrono::vehicle::man::MAN_5t_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_TMeasyTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_TMeasyTire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_5t_TMeasyTire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_5t_TMeasyTire *arg1 = (chrono::vehicle::man::MAN_5t_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_TMeasyTire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::man::MAN_5t_TMeasyTire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_TMeasyTire_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_5t_TMeasyTire *arg1 = (chrono::vehicle::man::MAN_5t_TMeasyTire *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_TMeasyTire_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::man::MAN_5t_TMeasyTire *arg1 = (chrono::vehicle::man::MAN_5t_TMeasyTire *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_TMeasyTire_GenerateCharacteristicPlots(void * jarg1, const char * jarg2) {
  chrono::vehicle::man::MAN_5t_TMeasyTire *arg1 = (chrono::vehicle::man::MAN_5t_TMeasyTire *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_TMeasyTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_TMeasyTire > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_TMeasyTire *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->GenerateCharacteristicPlots((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_TMeasyTireFront(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *)new chrono::vehicle::uaz::UAZBUS_TMeasyTireFront((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_TMeasyTireFront >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UAZBUS_TMeasyTireFront(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_TMeasyTireFront > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_TMeasyTireFront > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_TMeasyTireFront_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_TMeasyTireFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_TMeasyTireFront > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_TMeasyTireFront const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_TMeasyTireFront_SetTMeasyParams(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_TMeasyTireFront > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_TMeasyTireFront > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetTMeasyParams();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_TMeasyTireFront_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_TMeasyTireFront const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_TMeasyTireFront > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_TMeasyTireFront const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UAZBUS_TMeasyTireFront_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_TMeasyTireFront const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_TMeasyTireFront > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::uaz::UAZBUS_TMeasyTireFront const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_TMeasyTireFront_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_TMeasyTireFront > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_TMeasyTireFront > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_TMeasyTireFront_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_TMeasyTireFront > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_TMeasyTireFront > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_TMeasyTireFront_GenerateCharacteristicPlots(void * jarg1, const char * jarg2) {
  chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_TMeasyTireFront > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_TMeasyTireFront > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireFront *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->GenerateCharacteristicPlots((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_TMeasyTireRear(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *)new chrono::vehicle::uaz::UAZBUS_TMeasyTireRear((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_TMeasyTireRear >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UAZBUS_TMeasyTireRear(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_TMeasyTireRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_TMeasyTireRear > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_TMeasyTireRear_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_TMeasyTireRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_TMeasyTireRear > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_TMeasyTireRear const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_TMeasyTireRear_SetTMeasyParams(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_TMeasyTireRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_TMeasyTireRear > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetTMeasyParams();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_TMeasyTireRear_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_TMeasyTireRear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_TMeasyTireRear > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_TMeasyTireRear const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UAZBUS_TMeasyTireRear_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_TMeasyTireRear const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_TMeasyTireRear > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::uaz::UAZBUS_TMeasyTireRear const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_TMeasyTireRear_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_TMeasyTireRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_TMeasyTireRear > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_TMeasyTireRear_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_TMeasyTireRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_TMeasyTireRear > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_TMeasyTireRear_GenerateCharacteristicPlots(void * jarg1, const char * jarg2) {
  chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_TMeasyTireRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_TMeasyTireRear > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_TMeasyTireRear *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->GenerateCharacteristicPlots((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_RigidTire__SWIG_0(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::uaz::UAZBUS_RigidTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_RigidTire *)new chrono::vehicle::uaz::UAZBUS_RigidTire((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_RigidTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_RigidTire__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS_RigidTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_RigidTire *)new chrono::vehicle::uaz::UAZBUS_RigidTire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_RigidTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UAZBUS_RigidTire(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_RigidTire *arg1 = (chrono::vehicle::uaz::UAZBUS_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_RigidTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_RigidTire_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_RigidTire *arg1 = (chrono::vehicle::uaz::UAZBUS_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_RigidTire const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_RigidTire_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_RigidTire *arg1 = (chrono::vehicle::uaz::UAZBUS_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_RigidTire const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_RigidTire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_RigidTire *arg1 = (chrono::vehicle::uaz::UAZBUS_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_RigidTire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UAZBUS_RigidTire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::uaz::UAZBUS_RigidTire *arg1 = (chrono::vehicle::uaz::UAZBUS_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_RigidTire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::uaz::UAZBUS_RigidTire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_Pac02Tire__SWIG_0(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  chrono::vehicle::uaz::UAZBUS_Pac02Tire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_Pac02Tire *)new chrono::vehicle::uaz::UAZBUS_Pac02Tire((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Pac02Tire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_Pac02Tire__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS_Pac02Tire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_Pac02Tire *)new chrono::vehicle::uaz::UAZBUS_Pac02Tire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Pac02Tire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UAZBUS_Pac02Tire(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_Pac02Tire *arg1 = (chrono::vehicle::uaz::UAZBUS_Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Pac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Pac02Tire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Pac02Tire *arg1 = (chrono::vehicle::uaz::UAZBUS_Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Pac02Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Pac02Tire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UAZBUS_Pac02Tire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::uaz::UAZBUS_Pac02Tire *arg1 = (chrono::vehicle::uaz::UAZBUS_Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Pac02Tire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::uaz::UAZBUS_Pac02Tire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Pac02Tire_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Pac02Tire *arg1 = (chrono::vehicle::uaz::UAZBUS_Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Pac02Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Pac02Tire const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_Pac02Tire_SetMFParams(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_Pac02Tire *arg1 = (chrono::vehicle::uaz::UAZBUS_Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Pac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetMFParams();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_Pac02Tire_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::uaz::UAZBUS_Pac02Tire *arg1 = (chrono::vehicle::uaz::UAZBUS_Pac02Tire *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Pac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_Pac02Tire_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_Pac02Tire *arg1 = (chrono::vehicle::uaz::UAZBUS_Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Pac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_RigidTire_Front__SWIG_0(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::gator::Gator_RigidTire_Front *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_RigidTire_Front *)new chrono::vehicle::gator::Gator_RigidTire_Front((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_RigidTire_Front >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_RigidTire_Front__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::gator::Gator_RigidTire_Front *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_RigidTire_Front *)new chrono::vehicle::gator::Gator_RigidTire_Front((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_RigidTire_Front >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Gator_RigidTire_Front(void * jarg1) {
  chrono::vehicle::gator::Gator_RigidTire_Front *arg1 = (chrono::vehicle::gator::Gator_RigidTire_Front *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RigidTire_Front > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_RigidTire_Front > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RigidTire_Front *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_RigidTire_Front_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_RigidTire_Front *arg1 = (chrono::vehicle::gator::Gator_RigidTire_Front *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RigidTire_Front const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RigidTire_Front > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RigidTire_Front *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_RigidTire_Front const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_RigidTire_Front_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_RigidTire_Front *arg1 = (chrono::vehicle::gator::Gator_RigidTire_Front *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RigidTire_Front const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RigidTire_Front > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RigidTire_Front *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_RigidTire_Front const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_RigidTire_Front_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_RigidTire_Front *arg1 = (chrono::vehicle::gator::Gator_RigidTire_Front *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RigidTire_Front const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RigidTire_Front > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RigidTire_Front *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_RigidTire_Front const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gator_RigidTire_Front_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::gator::Gator_RigidTire_Front *arg1 = (chrono::vehicle::gator::Gator_RigidTire_Front *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RigidTire_Front const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RigidTire_Front > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RigidTire_Front *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::gator::Gator_RigidTire_Front const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_RigidTire_Rear__SWIG_0(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::gator::Gator_RigidTire_Rear *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_RigidTire_Rear *)new chrono::vehicle::gator::Gator_RigidTire_Rear((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_RigidTire_Rear >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_RigidTire_Rear__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::gator::Gator_RigidTire_Rear *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_RigidTire_Rear *)new chrono::vehicle::gator::Gator_RigidTire_Rear((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_RigidTire_Rear >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Gator_RigidTire_Rear(void * jarg1) {
  chrono::vehicle::gator::Gator_RigidTire_Rear *arg1 = (chrono::vehicle::gator::Gator_RigidTire_Rear *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RigidTire_Rear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_RigidTire_Rear > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RigidTire_Rear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_RigidTire_Rear_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_RigidTire_Rear *arg1 = (chrono::vehicle::gator::Gator_RigidTire_Rear *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RigidTire_Rear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RigidTire_Rear > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RigidTire_Rear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_RigidTire_Rear const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_RigidTire_Rear_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_RigidTire_Rear *arg1 = (chrono::vehicle::gator::Gator_RigidTire_Rear *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RigidTire_Rear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RigidTire_Rear > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RigidTire_Rear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_RigidTire_Rear const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_RigidTire_Rear_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_RigidTire_Rear *arg1 = (chrono::vehicle::gator::Gator_RigidTire_Rear *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RigidTire_Rear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RigidTire_Rear > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RigidTire_Rear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_RigidTire_Rear const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gator_RigidTire_Rear_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::gator::Gator_RigidTire_Rear *arg1 = (chrono::vehicle::gator::Gator_RigidTire_Rear *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_RigidTire_Rear const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_RigidTire_Rear > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_RigidTire_Rear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::gator::Gator_RigidTire_Rear const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_TMeasyTire_Front(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::gator::Gator_TMeasyTire_Front *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_TMeasyTire_Front *)new chrono::vehicle::gator::Gator_TMeasyTire_Front((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_TMeasyTire_Front >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Gator_TMeasyTire_Front(void * jarg1) {
  chrono::vehicle::gator::Gator_TMeasyTire_Front *arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Front *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_TMeasyTire_Front > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_TMeasyTire_Front > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Front *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_TMeasyTire_Front_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_TMeasyTire_Front *arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Front *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_TMeasyTire_Front const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_TMeasyTire_Front > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Front *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_TMeasyTire_Front const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_TMeasyTire_Front_SetTMeasyParams(void * jarg1) {
  chrono::vehicle::gator::Gator_TMeasyTire_Front *arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Front *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_TMeasyTire_Front > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_TMeasyTire_Front > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Front *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetTMeasyParams();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_TMeasyTire_Front_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_TMeasyTire_Front *arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Front *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_TMeasyTire_Front const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_TMeasyTire_Front > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Front *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_TMeasyTire_Front const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gator_TMeasyTire_Front_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::gator::Gator_TMeasyTire_Front *arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Front *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_TMeasyTire_Front const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_TMeasyTire_Front > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Front *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::gator::Gator_TMeasyTire_Front const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_TMeasyTire_Front_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::gator::Gator_TMeasyTire_Front *arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Front *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_TMeasyTire_Front > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_TMeasyTire_Front > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Front *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_TMeasyTire_Front_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::gator::Gator_TMeasyTire_Front *arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Front *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_TMeasyTire_Front > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_TMeasyTire_Front > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Front *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_TMeasyTire_Front_GenerateCharacteristicPlots(void * jarg1, const char * jarg2) {
  chrono::vehicle::gator::Gator_TMeasyTire_Front *arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Front *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_TMeasyTire_Front > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_TMeasyTire_Front > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Front *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->GenerateCharacteristicPlots((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_TMeasyTire_Rear(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::gator::Gator_TMeasyTire_Rear *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_TMeasyTire_Rear *)new chrono::vehicle::gator::Gator_TMeasyTire_Rear((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_TMeasyTire_Rear >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Gator_TMeasyTire_Rear(void * jarg1) {
  chrono::vehicle::gator::Gator_TMeasyTire_Rear *arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Rear *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_TMeasyTire_Rear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_TMeasyTire_Rear > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Rear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_TMeasyTire_Rear_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_TMeasyTire_Rear *arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Rear *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_TMeasyTire_Rear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_TMeasyTire_Rear > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Rear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_TMeasyTire_Rear const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_TMeasyTire_Rear_SetTMeasyParams(void * jarg1) {
  chrono::vehicle::gator::Gator_TMeasyTire_Rear *arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Rear *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_TMeasyTire_Rear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_TMeasyTire_Rear > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Rear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetTMeasyParams();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_TMeasyTire_Rear_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_TMeasyTire_Rear *arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Rear *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_TMeasyTire_Rear const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_TMeasyTire_Rear > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Rear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_TMeasyTire_Rear const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gator_TMeasyTire_Rear_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::gator::Gator_TMeasyTire_Rear *arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Rear *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_TMeasyTire_Rear const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_TMeasyTire_Rear > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Rear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::gator::Gator_TMeasyTire_Rear const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_TMeasyTire_Rear_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::gator::Gator_TMeasyTire_Rear *arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Rear *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_TMeasyTire_Rear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_TMeasyTire_Rear > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Rear *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_TMeasyTire_Rear_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::gator::Gator_TMeasyTire_Rear *arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Rear *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_TMeasyTire_Rear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_TMeasyTire_Rear > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Rear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_TMeasyTire_Rear_GenerateCharacteristicPlots(void * jarg1, const char * jarg2) {
  chrono::vehicle::gator::Gator_TMeasyTire_Rear *arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Rear *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_TMeasyTire_Rear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_TMeasyTire_Rear > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_TMeasyTire_Rear *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->GenerateCharacteristicPlots((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCCar_RigidTire__SWIG_0(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::rccar::RCCar_RigidTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::rccar::RCCar_RigidTire *)new chrono::vehicle::rccar::RCCar_RigidTire((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::rccar::RCCar_RigidTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCCar_RigidTire__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::rccar::RCCar_RigidTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::rccar::RCCar_RigidTire *)new chrono::vehicle::rccar::RCCar_RigidTire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::rccar::RCCar_RigidTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RCCar_RigidTire(void * jarg1) {
  chrono::vehicle::rccar::RCCar_RigidTire *arg1 = (chrono::vehicle::rccar::RCCar_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_RigidTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_RigidTire_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_RigidTire *arg1 = (chrono::vehicle::rccar::RCCar_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_RigidTire const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_RigidTire_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_RigidTire *arg1 = (chrono::vehicle::rccar::RCCar_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_RigidTire const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_RigidTire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_RigidTire *arg1 = (chrono::vehicle::rccar::RCCar_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_RigidTire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_RigidTire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_RigidTire *arg1 = (chrono::vehicle::rccar::RCCar_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_RigidTire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::rccar::RCCar_RigidTire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_RigidTire_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::rccar::RCCar_RigidTire *arg1 = (chrono::vehicle::rccar::RCCar_RigidTire *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_RigidTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_RigidTire_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::rccar::RCCar_RigidTire *arg1 = (chrono::vehicle::rccar::RCCar_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_RigidTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Pac02Tire__SWIG_0(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  chrono::vehicle::feda::FEDA_Pac02Tire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Pac02Tire *)new chrono::vehicle::feda::FEDA_Pac02Tire((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Pac02Tire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Pac02Tire__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::feda::FEDA_Pac02Tire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Pac02Tire *)new chrono::vehicle::feda::FEDA_Pac02Tire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Pac02Tire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FEDA_Pac02Tire(void * jarg1) {
  chrono::vehicle::feda::FEDA_Pac02Tire *arg1 = (chrono::vehicle::feda::FEDA_Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Pac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Pac02Tire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Pac02Tire *arg1 = (chrono::vehicle::feda::FEDA_Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Pac02Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Pac02Tire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_Pac02Tire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_Pac02Tire *arg1 = (chrono::vehicle::feda::FEDA_Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Pac02Tire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::feda::FEDA_Pac02Tire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Pac02Tire_GetVisualizationWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Pac02Tire *arg1 = (chrono::vehicle::feda::FEDA_Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Pac02Tire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Pac02Tire const *)arg1)->GetVisualizationWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_Pac02Tire_SetMFParams(void * jarg1) {
  chrono::vehicle::feda::FEDA_Pac02Tire *arg1 = (chrono::vehicle::feda::FEDA_Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Pac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetMFParams();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_Pac02Tire_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::feda::FEDA_Pac02Tire *arg1 = (chrono::vehicle::feda::FEDA_Pac02Tire *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Pac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_Pac02Tire_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::feda::FEDA_Pac02Tire *arg1 = (chrono::vehicle::feda::FEDA_Pac02Tire *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Pac02Tire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_Pac02Tire > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Pac02Tire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_RigidTire__SWIG_0(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  chrono::vehicle::feda::FEDA_RigidTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_RigidTire *)new chrono::vehicle::feda::FEDA_RigidTire((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_RigidTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_RigidTire__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::feda::FEDA_RigidTire *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_RigidTire *)new chrono::vehicle::feda::FEDA_RigidTire((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_RigidTire >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FEDA_RigidTire(void * jarg1) {
  chrono::vehicle::feda::FEDA_RigidTire *arg1 = (chrono::vehicle::feda::FEDA_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_RigidTire > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_RigidTire_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_RigidTire *arg1 = (chrono::vehicle::feda::FEDA_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_RigidTire const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_RigidTire_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_RigidTire *arg1 = (chrono::vehicle::feda::FEDA_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_RigidTire const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_RigidTire_GetTireMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_RigidTire *arg1 = (chrono::vehicle::feda::FEDA_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_RigidTire const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_RigidTire const *)arg1)->GetTireMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_RigidTire_GetTireInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_RigidTire *arg1 = (chrono::vehicle::feda::FEDA_RigidTire *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_RigidTire const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_RigidTire > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_RigidTire *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::feda::FEDA_RigidTire const *)arg1)->GetTireInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChAxle() {
  void * jresult ;
  chrono::vehicle::ChAxle *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::ChAxle *)new chrono::vehicle::ChAxle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChAxle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChAxle(void * jarg1) {
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxle_SetOutput(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetOutput(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxle_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, double jarg7, double jarg8, double jarg9) {
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  chrono::ChVector< > *arg6 = 0 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (chrono::ChVector< > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,(chrono::ChVector< > const &)*arg6,arg7,arg8,arg9);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxle_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, double jarg7, double jarg8) {
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  chrono::ChVector< > *arg6 = 0 ;
  double arg7 ;
  double arg8 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (chrono::ChVector< > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,(chrono::ChVector< > const &)*arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxle_Initialize__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, double jarg7) {
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  chrono::ChVector< > *arg6 = 0 ;
  double arg7 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (chrono::ChVector< > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,(chrono::ChVector< > const &)*arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxle_Initialize__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg3 ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  chrono::ChVector< > *arg6 = 0 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg6 = (chrono::ChVector< > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4,(chrono::ChVector< > const &)*arg5,(chrono::ChVector< > const &)*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxle_Synchronize(void * jarg1, double jarg2, void * jarg3) {
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChAxle_GetWheels(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAxle const > *smartarg1 = 0 ;
  chrono::vehicle::ChWheelList *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChWheelList *) &((chrono::vehicle::ChAxle const *)arg1)->GetWheels();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChAxle_GetWheel__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  chrono::vehicle::WheelLocation arg3 ;
  std::shared_ptr< chrono::vehicle::ChAxle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChWheel > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  arg3 = (chrono::vehicle::WheelLocation)jarg3; 
  {
    try {
      result = ((chrono::vehicle::ChAxle const *)arg1)->GetWheel(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChWheel >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChAxle_GetWheel__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChAxle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChWheel > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChAxle const *)arg1)->GetWheel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChWheel >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChAxle_GetBrake(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChAxle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChBrake > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChAxle const *)arg1)->GetBrake(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChBrake >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxle_m_suspension_set(void * jarg1, void * jarg2) {
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspension > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspension > tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (std::shared_ptr< chrono::vehicle::ChSuspension > *)jarg2 : &tempnull2; 
  if (arg1) (arg1)->m_suspension = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChAxle_m_suspension_get(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspension > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::shared_ptr< chrono::vehicle::ChSuspension > *) & ((arg1)->m_suspension);
  jresult = *result ? new std::shared_ptr< chrono::vehicle::ChSuspension >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxle_m_brake_left_set(void * jarg1, void * jarg2) {
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChBrake > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChBrake > tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (std::shared_ptr< chrono::vehicle::ChBrake > *)jarg2 : &tempnull2; 
  if (arg1) (arg1)->m_brake_left = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChAxle_m_brake_left_get(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChBrake > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::shared_ptr< chrono::vehicle::ChBrake > *) & ((arg1)->m_brake_left);
  jresult = *result ? new std::shared_ptr< chrono::vehicle::ChBrake >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxle_m_brake_right_set(void * jarg1, void * jarg2) {
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChBrake > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChBrake > tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (std::shared_ptr< chrono::vehicle::ChBrake > *)jarg2 : &tempnull2; 
  if (arg1) (arg1)->m_brake_right = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChAxle_m_brake_right_get(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChBrake > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::shared_ptr< chrono::vehicle::ChBrake > *) & ((arg1)->m_brake_right);
  jresult = *result ? new std::shared_ptr< chrono::vehicle::ChBrake >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxle_m_antirollbar_set(void * jarg1, void * jarg2) {
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  std::shared_ptr< ChAntirollBar > *arg2 = (std::shared_ptr< ChAntirollBar > *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::shared_ptr< ChAntirollBar > *)jarg2; 
  if (arg1) (arg1)->m_antirollbar = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChAxle_m_antirollbar_get(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *smartarg1 = 0 ;
  std::shared_ptr< ChAntirollBar > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::shared_ptr< ChAntirollBar > *)& ((arg1)->m_antirollbar);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChAxle_m_wheels_set(void * jarg1, void * jarg2) {
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  chrono::vehicle::ChWheelList *arg2 = (chrono::vehicle::ChWheelList *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::ChWheelList *)jarg2; 
  if (arg1) (arg1)->m_wheels = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChAxle_m_wheels_get(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChAxle *arg1 = (chrono::vehicle::ChAxle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChAxle > *smartarg1 = 0 ;
  chrono::vehicle::ChWheelList *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChAxle > *)jarg1;
  arg1 = (chrono::vehicle::ChAxle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (chrono::vehicle::ChWheelList *)& ((arg1)->m_wheels);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChWheeledVehicle(void * jarg1) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChWheeledVehicle_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheeledVehicle_GetAxles(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  chrono::vehicle::ChAxleList *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChAxleList *) &((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheeledVehicle_GetAxle(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChAxle > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetAxle(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChAxle >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheeledVehicle_GetSuspension(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspension > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetSuspension(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChSuspension >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheeledVehicle_GetSteerings(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  chrono::vehicle::ChSteeringList *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChSteeringList *) &((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetSteerings();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheeledVehicle_GetSteering(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSteering > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetSteering(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChSteering >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheeledVehicle_GetWheel__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  chrono::vehicle::WheelLocation arg4 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChWheel > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  arg4 = (chrono::vehicle::WheelLocation)jarg4; 
  {
    try {
      result = ((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetWheel(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChWheel >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheeledVehicle_GetWheel__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChWheel > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = ((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetWheel(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChWheel >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheeledVehicle_GetTire__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  chrono::vehicle::WheelLocation arg4 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTire > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  arg4 = (chrono::vehicle::WheelLocation)jarg4; 
  {
    try {
      result = ((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetTire(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTire >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheeledVehicle_GetTire__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTire > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = ((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetTire(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTire >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheeledVehicle_GetBrake(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChBrake > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = ((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetBrake(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChBrake >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheeledVehicle_GetDriveline(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChDrivelineWV > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetDriveline();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChDrivelineWV >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheeledVehicle_GetSubchassis(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetSubchassis(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChSubchassis >(result) : 0; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChWheeledVehicle_GetNumberAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetNumberAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheeledVehicle_GetSpindlePos(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetSpindlePos(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheeledVehicle_GetSpindleRot(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  chrono::ChQuaternion< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = ((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetSpindleRot(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChQuaternion< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheeledVehicle_GetSpindleLinVel(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetSpindleLinVel(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheeledVehicle_GetSpindleAngVel(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = ((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetSpindleAngVel(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChWheeledVehicle_GetSpindleOmega(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetSpindleOmega(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChWheeledVehicle_GetWheelbase(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetWheelbase();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChWheeledVehicle_GetWheeltrack(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetWheeltrack(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChWheeledVehicle_GetMinTurningRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetMinTurningRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChWheeledVehicle_GetMaxSteeringAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChWheeledVehicle const *)arg1)->GetMaxSteeringAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_SetSubchassisVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSubchassisVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_SetSuspensionVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSuspensionVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_SetSteeringVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSteeringVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_SetWheelVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetWheelVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_SetTireVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetTireVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_SetWheelCollide(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetWheelCollide(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_SetChassisVehicleCollide(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetChassisVehicleCollide(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_SetSuspensionOutput(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->SetSuspensionOutput(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_SetSteeringOutput(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->SetSteeringOutput(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_SetSubchassisOutput(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->SetSubchassisOutput(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_SetAntirollbarOutput(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->SetAntirollbarOutput(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_SetDrivelineOutput(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetDrivelineOutput(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_InitializeTire__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire > arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheel > arg3 ;
  chrono::vehicle::VisualizationType arg4 ;
  chrono::vehicle::ChTire::CollisionType arg5 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChTire > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChWheel > *)jarg3; 
  arg4 = (chrono::vehicle::VisualizationType)jarg4; 
  arg5 = (chrono::vehicle::ChTire::CollisionType)jarg5; 
  {
    try {
      (arg1)->InitializeTire(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_InitializeTire__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire > arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheel > arg3 ;
  chrono::vehicle::VisualizationType arg4 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChTire > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChWheel > *)jarg3; 
  arg4 = (chrono::vehicle::VisualizationType)jarg4; 
  {
    try {
      (arg1)->InitializeTire(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_InitializeTire__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire > arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheel > arg3 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChTire > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChWheel > *)jarg3; 
  {
    try {
      (arg1)->InitializeTire(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_InitializeInertiaProperties(void * jarg1) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->InitializeInertiaProperties();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_Synchronize(void * jarg1, double jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  chrono::vehicle::ChTerrain *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  
  arg4 = (chrono::vehicle::ChTerrain *)(((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4) ? ((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4)->get() : 0);
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChTerrain const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,(chrono::vehicle::ChTerrain const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_LockAxleDifferential(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LockAxleDifferential(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_LockCentralDifferential(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LockCentralDifferential(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_EnableBrakeLocking(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->EnableBrakeLocking(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_ApplyParkingBrake(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->ApplyParkingBrake(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChWheeledVehicle_ParkingBrake(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChWheeledVehicle const *)arg1)->ParkingBrake();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_DisconnectDriveline(void * jarg1) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->DisconnectDriveline();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_LogConstraintViolations(void * jarg1) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogConstraintViolations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_LogSubsystemTypes(void * jarg1) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogSubsystemTypes();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChWheeledVehicle_ExportComponentList__SWIG_0(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChWheeledVehicle const *)arg1)->ExportComponentList();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledVehicle_ExportComponentList__SWIG_1(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChWheeledVehicle *arg1 = (chrono::vehicle::ChWheeledVehicle *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      ((chrono::vehicle::ChWheeledVehicle const *)arg1)->ExportComponentList((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChWheeledTrailer(void * jarg1) {
  chrono::vehicle::ChWheeledTrailer *arg1 = (chrono::vehicle::ChWheeledTrailer *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledTrailer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChWheeledTrailer_GetName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChWheeledTrailer *arg1 = (chrono::vehicle::ChWheeledTrailer *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledTrailer const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::string *) &((chrono::vehicle::ChWheeledTrailer const *)arg1)->GetName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledTrailer_SetName(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChWheeledTrailer *arg1 = (chrono::vehicle::ChWheeledTrailer *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledTrailer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->SetName((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChWheeledTrailer_GetNumberAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::ChWheeledTrailer *arg1 = (chrono::vehicle::ChWheeledTrailer *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledTrailer const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::ChWheeledTrailer const *)arg1)->GetNumberAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChWheeledTrailer_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChWheeledTrailer *arg1 = (chrono::vehicle::ChWheeledTrailer *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledTrailer const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChWheeledTrailer const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheeledTrailer_GetChassis(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChWheeledTrailer *arg1 = (chrono::vehicle::ChWheeledTrailer *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledTrailer const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassisRear > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChWheeledTrailer const *)arg1)->GetChassis();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassisRear >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheeledTrailer_GetAxles(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChWheeledTrailer *arg1 = (chrono::vehicle::ChWheeledTrailer *) 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledTrailer const > *smartarg1 = 0 ;
  chrono::vehicle::ChAxleList *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChAxleList *) &((chrono::vehicle::ChWheeledTrailer const *)arg1)->GetAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChWheeledTrailer_GetAxle(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChWheeledTrailer *arg1 = (chrono::vehicle::ChWheeledTrailer *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledTrailer const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChAxle > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChWheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChWheeledTrailer const *)arg1)->GetAxle(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChAxle >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledTrailer_SetChassisVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChWheeledTrailer *arg1 = (chrono::vehicle::ChWheeledTrailer *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledTrailer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetChassisVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledTrailer_SetSuspensionVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChWheeledTrailer *arg1 = (chrono::vehicle::ChWheeledTrailer *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledTrailer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSuspensionVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledTrailer_SetWheelVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChWheeledTrailer *arg1 = (chrono::vehicle::ChWheeledTrailer *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledTrailer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetWheelVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledTrailer_SetTireVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChWheeledTrailer *arg1 = (chrono::vehicle::ChWheeledTrailer *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledTrailer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetTireVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledTrailer_Initialize(void * jarg1, void * jarg2) {
  chrono::vehicle::ChWheeledTrailer *arg1 = (chrono::vehicle::ChWheeledTrailer *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledTrailer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  {
    try {
      (arg1)->Initialize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledTrailer_InitializeTire__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  chrono::vehicle::ChWheeledTrailer *arg1 = (chrono::vehicle::ChWheeledTrailer *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire > arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheel > arg3 ;
  chrono::vehicle::VisualizationType arg4 ;
  chrono::vehicle::ChTire::CollisionType arg5 ;
  std::shared_ptr< chrono::vehicle::ChWheeledTrailer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChTire > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChWheel > *)jarg3; 
  arg4 = (chrono::vehicle::VisualizationType)jarg4; 
  arg5 = (chrono::vehicle::ChTire::CollisionType)jarg5; 
  {
    try {
      (arg1)->InitializeTire(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledTrailer_InitializeTire__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  chrono::vehicle::ChWheeledTrailer *arg1 = (chrono::vehicle::ChWheeledTrailer *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire > arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheel > arg3 ;
  chrono::vehicle::VisualizationType arg4 ;
  std::shared_ptr< chrono::vehicle::ChWheeledTrailer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChTire > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChWheel > *)jarg3; 
  arg4 = (chrono::vehicle::VisualizationType)jarg4; 
  {
    try {
      (arg1)->InitializeTire(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledTrailer_InitializeTire__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::ChWheeledTrailer *arg1 = (chrono::vehicle::ChWheeledTrailer *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTire > arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheel > arg3 ;
  std::shared_ptr< chrono::vehicle::ChWheeledTrailer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChTire > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChWheel > *)jarg3; 
  {
    try {
      (arg1)->InitializeTire(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledTrailer_Synchronize(void * jarg1, double jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChWheeledTrailer *arg1 = (chrono::vehicle::ChWheeledTrailer *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  chrono::vehicle::ChTerrain *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::ChWheeledTrailer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  
  arg4 = (chrono::vehicle::ChTerrain *)(((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4) ? ((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4)->get() : 0);
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChTerrain const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,(chrono::vehicle::ChTerrain const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChWheeledTrailer_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::ChWheeledTrailer *arg1 = (chrono::vehicle::ChWheeledTrailer *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChWheeledTrailer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChWheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::ChWheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WheeledVehicle__SWIG_0(const char * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::ChContactMethod arg2 ;
  bool arg3 ;
  bool arg4 ;
  chrono::vehicle::WheeledVehicle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (chrono::ChContactMethod)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (chrono::vehicle::WheeledVehicle *)new chrono::vehicle::WheeledVehicle((std::string const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::WheeledVehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WheeledVehicle__SWIG_1(const char * jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::ChContactMethod arg2 ;
  bool arg3 ;
  chrono::vehicle::WheeledVehicle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (chrono::ChContactMethod)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (chrono::vehicle::WheeledVehicle *)new chrono::vehicle::WheeledVehicle((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::WheeledVehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WheeledVehicle__SWIG_2(const char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::ChContactMethod arg2 ;
  chrono::vehicle::WheeledVehicle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (chrono::ChContactMethod)jarg2; 
  {
    try {
      result = (chrono::vehicle::WheeledVehicle *)new chrono::vehicle::WheeledVehicle((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::WheeledVehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WheeledVehicle__SWIG_3(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::WheeledVehicle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::WheeledVehicle *)new chrono::vehicle::WheeledVehicle((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::WheeledVehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WheeledVehicle__SWIG_4(void * jarg1, const char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::WheeledVehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (chrono::vehicle::WheeledVehicle *)new chrono::vehicle::WheeledVehicle(arg1,(std::string const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::WheeledVehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WheeledVehicle__SWIG_5(void * jarg1, const char * jarg2, unsigned int jarg3) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::WheeledVehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (chrono::vehicle::WheeledVehicle *)new chrono::vehicle::WheeledVehicle(arg1,(std::string const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::WheeledVehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WheeledVehicle__SWIG_6(void * jarg1, const char * jarg2) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::WheeledVehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (chrono::vehicle::WheeledVehicle *)new chrono::vehicle::WheeledVehicle(arg1,(std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::WheeledVehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WheeledVehicle(void * jarg1) {
  chrono::vehicle::WheeledVehicle *arg1 = (chrono::vehicle::WheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::WheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::WheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::WheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_WheeledVehicle_GetNumberAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::WheeledVehicle *arg1 = (chrono::vehicle::WheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::WheeledVehicle const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::WheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::WheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::WheeledVehicle const *)arg1)->GetNumberAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WheeledVehicle_GetWheelbase(void * jarg1) {
  double jresult ;
  chrono::vehicle::WheeledVehicle *arg1 = (chrono::vehicle::WheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::WheeledVehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::WheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::WheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::WheeledVehicle const *)arg1)->GetWheelbase();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WheeledVehicle_GetMinTurningRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::WheeledVehicle *arg1 = (chrono::vehicle::WheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::WheeledVehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::WheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::WheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::WheeledVehicle const *)arg1)->GetMinTurningRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WheeledVehicle_GetMaxSteeringAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::WheeledVehicle *arg1 = (chrono::vehicle::WheeledVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::WheeledVehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::WheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::WheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::WheeledVehicle const *)arg1)->GetMaxSteeringAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheeledVehicle_Initialize__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  chrono::vehicle::WheeledVehicle *arg1 = (chrono::vehicle::WheeledVehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::WheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::WheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::WheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheeledVehicle_Initialize__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::WheeledVehicle *arg1 = (chrono::vehicle::WheeledVehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::WheeledVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::WheeledVehicle > *)jarg1;
  arg1 = (chrono::vehicle::WheeledVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WheeledTrailer__SWIG_0(void * jarg1, const char * jarg2, unsigned int jarg3) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::WheeledTrailer *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (chrono::vehicle::WheeledTrailer *)new chrono::vehicle::WheeledTrailer(arg1,(std::string const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::WheeledTrailer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WheeledTrailer__SWIG_1(void * jarg1, const char * jarg2) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::WheeledTrailer *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (chrono::vehicle::WheeledTrailer *)new chrono::vehicle::WheeledTrailer(arg1,(std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::WheeledTrailer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WheeledTrailer(void * jarg1) {
  chrono::vehicle::WheeledTrailer *arg1 = (chrono::vehicle::WheeledTrailer *) 0 ;
  std::shared_ptr< chrono::vehicle::WheeledTrailer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::WheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::WheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_WheeledTrailer_GetNumberAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::WheeledTrailer *arg1 = (chrono::vehicle::WheeledTrailer *) 0 ;
  std::shared_ptr< chrono::vehicle::WheeledTrailer const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::WheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::WheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::WheeledTrailer const *)arg1)->GetNumberAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WheeledTrailer_Initialize(void * jarg1, void * jarg2) {
  chrono::vehicle::WheeledTrailer *arg1 = (chrono::vehicle::WheeledTrailer *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::WheeledTrailer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::WheeledTrailer > *)jarg1;
  arg1 = (chrono::vehicle::WheeledTrailer *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  {
    try {
      (arg1)->Initialize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSuspensionTestRig(void * jarg1) {
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspensionTestRig_SetDriver(void * jarg1, void * jarg2) {
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigDriver > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChSuspensionTestRigDriver > *)jarg2; 
  {
    try {
      (arg1)->SetDriver(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspensionTestRig_SetInitialRideHeight(void * jarg1, double jarg2) {
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetInitialRideHeight(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspensionTestRig_SetDisplacementLimit(void * jarg1, double jarg2) {
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetDisplacementLimit(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspensionTestRig_IncludeSteeringMechanism(void * jarg1, int jarg2) {
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->IncludeSteeringMechanism(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspensionTestRig_IncludeSubchassis(void * jarg1, int jarg2) {
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->IncludeSubchassis(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspensionTestRig_SetSuspensionVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSuspensionVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspensionTestRig_SetSteeringVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSteeringVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspensionTestRig_SetSubchassisVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSubchassisVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspensionTestRig_SetWheelVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetWheelVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspensionTestRig_SetTireVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetTireVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspensionTestRig_Initialize(void * jarg1) {
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Initialize();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspensionTestRig_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspensionTestRig_GetVehicle(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig const > *smartarg1 = 0 ;
  chrono::vehicle::ChWheeledVehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChWheeledVehicle *) &((chrono::vehicle::ChSuspensionTestRig const *)arg1)->GetVehicle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChWheeledVehicle >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspensionTestRig_GetSpindlePos(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::ChSuspensionTestRig const *)arg1)->GetSpindlePos(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspensionTestRig_GetSpindleRot(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig const > *smartarg1 = 0 ;
  chrono::ChQuaternion< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = ((chrono::vehicle::ChSuspensionTestRig const *)arg1)->GetSpindleRot(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChQuaternion< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspensionTestRig_GetSpindleLinVel(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::ChSuspensionTestRig const *)arg1)->GetSpindleLinVel(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSuspensionTestRig_GetSpindleAngVel(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = ((chrono::vehicle::ChSuspensionTestRig const *)arg1)->GetSpindleAngVel(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSuspensionTestRig_GetSteeringInput(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChSuspensionTestRig const *)arg1)->GetSteeringInput();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSuspensionTestRig_GetActuatorDisp(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)(arg1)->GetActuatorDisp(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSuspensionTestRig_GetActuatorForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)(arg1)->GetActuatorForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSuspensionTestRig_GetWheelTravel(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::ChSuspensionTestRig const *)arg1)->GetWheelTravel(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSuspensionTestRig_GetRideHeight(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSuspensionTestRig const *)arg1)->GetRideHeight(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChSuspensionTestRig_GetDriverMessage(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSuspensionTestRig const *)arg1)->GetDriverMessage();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChSuspensionTestRig_DriverEnded(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChSuspensionTestRig const *)arg1)->DriverEnded();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspensionTestRig_LogConstraintViolations(void * jarg1) {
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogConstraintViolations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspensionTestRig_SetOutput(void * jarg1, int jarg2, const char * jarg3, const char * jarg4, double jarg5) {
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  chrono::vehicle::ChVehicleOutput::Type arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::ChVehicleOutput::Type)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->SetOutput(arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspensionTestRig_SetPlotOutput(void * jarg1, double jarg2) {
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetPlotOutput(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSuspensionTestRig_PlotOutput(void * jarg1, const char * jarg2, const char * jarg3) {
  chrono::vehicle::ChSuspensionTestRig *arg1 = (chrono::vehicle::ChSuspensionTestRig *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRig > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRig *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->PlotOutput((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChSuspensionTestRigPlatform__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > arg1 ;
  std::vector< int > arg2 ;
  double arg3 ;
  std::vector< int > *argp2 ;
  chrono::vehicle::ChSuspensionTestRigPlatform *result = 0 ;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *)jarg1; 
  argp2 = (std::vector< int > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< int >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (chrono::vehicle::ChSuspensionTestRigPlatform *)new chrono::vehicle::ChSuspensionTestRigPlatform(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChSuspensionTestRigPlatform >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChSuspensionTestRigPlatform__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::ChSuspensionTestRigPlatform *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::ChSuspensionTestRigPlatform *)new chrono::vehicle::ChSuspensionTestRigPlatform((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChSuspensionTestRigPlatform >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSuspensionTestRigPlatform(void * jarg1) {
  chrono::vehicle::ChSuspensionTestRigPlatform *arg1 = (chrono::vehicle::ChSuspensionTestRigPlatform *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigPlatform > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRigPlatform > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigPlatform *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSuspensionTestRigPlatform_GetActuatorDisp(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::ChSuspensionTestRigPlatform *arg1 = (chrono::vehicle::ChSuspensionTestRigPlatform *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigPlatform > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRigPlatform > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigPlatform *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)(arg1)->GetActuatorDisp(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSuspensionTestRigPlatform_GetActuatorForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::ChSuspensionTestRigPlatform *arg1 = (chrono::vehicle::ChSuspensionTestRigPlatform *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigPlatform > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRigPlatform > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigPlatform *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)(arg1)->GetActuatorForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSuspensionTestRigPlatform_GetRideHeight(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSuspensionTestRigPlatform *arg1 = (chrono::vehicle::ChSuspensionTestRigPlatform *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigPlatform const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRigPlatform > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigPlatform *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSuspensionTestRigPlatform const *)arg1)->GetRideHeight(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChSuspensionTestRigPushrod__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChWheeledVehicle > arg1 ;
  std::vector< int > arg2 ;
  double arg3 ;
  std::vector< int > *argp2 ;
  chrono::vehicle::ChSuspensionTestRigPushrod *result = 0 ;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *)jarg1; 
  argp2 = (std::vector< int > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< int >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (chrono::vehicle::ChSuspensionTestRigPushrod *)new chrono::vehicle::ChSuspensionTestRigPushrod(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChSuspensionTestRigPushrod >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChSuspensionTestRigPushrod__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::ChSuspensionTestRigPushrod *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::ChSuspensionTestRigPushrod *)new chrono::vehicle::ChSuspensionTestRigPushrod((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChSuspensionTestRigPushrod >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSuspensionTestRigPushrod(void * jarg1) {
  chrono::vehicle::ChSuspensionTestRigPushrod *arg1 = (chrono::vehicle::ChSuspensionTestRigPushrod *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigPushrod > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRigPushrod > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigPushrod *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSuspensionTestRigPushrod_GetActuatorDisp(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::ChSuspensionTestRigPushrod *arg1 = (chrono::vehicle::ChSuspensionTestRigPushrod *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigPushrod > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRigPushrod > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigPushrod *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)(arg1)->GetActuatorDisp(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSuspensionTestRigPushrod_GetActuatorForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::ChSuspensionTestRigPushrod *arg1 = (chrono::vehicle::ChSuspensionTestRigPushrod *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigPushrod > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSuspensionTestRigPushrod > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigPushrod *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)(arg1)->GetActuatorForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSuspensionTestRigPushrod_GetRideHeight(void * jarg1, int jarg2) {
  double jresult ;
  chrono::vehicle::ChSuspensionTestRigPushrod *arg1 = (chrono::vehicle::ChSuspensionTestRigPushrod *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChSuspensionTestRigPushrod const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSuspensionTestRigPushrod > *)jarg1;
  arg1 = (chrono::vehicle::ChSuspensionTestRigPushrod *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (double)((chrono::vehicle::ChSuspensionTestRigPushrod const *)arg1)->GetRideHeight(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSprocket(void * jarg1) {
  chrono::vehicle::ChSprocket *arg1 = (chrono::vehicle::ChSprocket *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocket > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSprocket > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocket *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChSprocket_GetNumTeeth(void * jarg1) {
  int jresult ;
  chrono::vehicle::ChSprocket *arg1 = (chrono::vehicle::ChSprocket *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocket const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSprocket > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocket *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::ChSprocket const *)arg1)->GetNumTeeth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSprocket_GetAssemblyRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSprocket *arg1 = (chrono::vehicle::ChSprocket *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocket const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSprocket > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocket *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChSprocket const *)arg1)->GetAssemblyRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSprocket_GetAddendumRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSprocket *arg1 = (chrono::vehicle::ChSprocket *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocket const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSprocket > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocket *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChSprocket const *)arg1)->GetAddendumRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSprocket_GetGearBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChSprocket *arg1 = (chrono::vehicle::ChSprocket *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocket const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSprocket > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocket *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSprocket const *)arg1)->GetGearBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSprocket_GetAxle(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChSprocket *arg1 = (chrono::vehicle::ChSprocket *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocket const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChShaft > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSprocket > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocket *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSprocket const *)arg1)->GetAxle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChShaft >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSprocket_GetRevolute(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChSprocket *arg1 = (chrono::vehicle::ChSprocket *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocket const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkLockRevolute > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSprocket > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocket *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSprocket const *)arg1)->GetRevolute();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkLockRevolute >(result) : 0; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChSprocket_GetAxleSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChSprocket *arg1 = (chrono::vehicle::ChSprocket *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocket const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSprocket > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocket *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChSprocket const *)arg1)->GetAxleSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSprocket_SetCollide(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChSprocket *arg1 = (chrono::vehicle::ChSprocket *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChSprocket > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSprocket > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocket *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetCollide(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSprocket_GetContactMaterial(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChSprocket *arg1 = (chrono::vehicle::ChSprocket *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocket const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChMaterialSurface > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSprocket > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocket *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSprocket const *)arg1)->GetContactMaterial();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChMaterialSurface >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSprocket_DisableLateralContact(void * jarg1) {
  chrono::vehicle::ChSprocket *arg1 = (chrono::vehicle::ChSprocket *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocket > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSprocket > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocket *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->DisableLateralContact();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSprocket_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChSprocket *arg1 = (chrono::vehicle::ChSprocket *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  chrono::vehicle::ChTrackAssembly *arg4 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocket > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg4 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSprocket > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocket *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  
  smartarg4 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg4;
  arg4 = (chrono::vehicle::ChTrackAssembly *)(smartarg4 ? smartarg4->get() : 0); 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSprocket_ApplyAxleTorque(void * jarg1, double jarg2) {
  chrono::vehicle::ChSprocket *arg1 = (chrono::vehicle::ChSprocket *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChSprocket > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSprocket > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocket *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->ApplyAxleTorque(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSprocket_CreateVisualizationMesh__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, void * jarg5) {
  void * jresult ;
  chrono::vehicle::ChSprocket *arg1 = (chrono::vehicle::ChSprocket *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  chrono::ChColor arg5 ;
  std::shared_ptr< chrono::vehicle::ChSprocket const > *smartarg1 = 0 ;
  chrono::ChColor *argp5 ;
  SwigValueWrapper< std::shared_ptr< geometry::ChTriangleMeshConnected > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSprocket > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocket *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  argp5 = (chrono::ChColor *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null chrono::ChColor", 0);
    return 0;
  }
  arg5 = *argp5; 
  {
    try {
      result = ((chrono::vehicle::ChSprocket const *)arg1)->CreateVisualizationMesh(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< geometry::ChTriangleMeshConnected >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSprocket_CreateVisualizationMesh__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  chrono::vehicle::ChSprocket *arg1 = (chrono::vehicle::ChSprocket *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::ChSprocket const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< geometry::ChTriangleMeshConnected > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSprocket > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocket *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = ((chrono::vehicle::ChSprocket const *)arg1)->CreateVisualizationMesh(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< geometry::ChTriangleMeshConnected >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSprocket_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChSprocket *arg1 = (chrono::vehicle::ChSprocket *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChSprocket > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSprocket > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocket *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSprocket_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChSprocket *arg1 = (chrono::vehicle::ChSprocket *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocket > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSprocket > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocket *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSprocket_LogConstraintViolations(void * jarg1) {
  chrono::vehicle::ChSprocket *arg1 = (chrono::vehicle::ChSprocket *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocket > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSprocket > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocket *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogConstraintViolations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSprocketSinglePin(void * jarg1) {
  chrono::vehicle::ChSprocketSinglePin *arg1 = (chrono::vehicle::ChSprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocketSinglePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChSprocketSinglePin_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChSprocketSinglePin *arg1 = (chrono::vehicle::ChSprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocketSinglePin const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSprocketSinglePin const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSprocketSinglePin_GetProfile(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChSprocketSinglePin *arg1 = (chrono::vehicle::ChSprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocketSinglePin const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< geometry::ChLinePath > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSprocketSinglePin const *)arg1)->GetProfile();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< geometry::ChLinePath >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSprocketSinglePin_GetCollisionCallback(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::ChSprocketSinglePin *arg1 = (chrono::vehicle::ChSprocketSinglePin *) 0 ;
  chrono::vehicle::ChTrackAssembly *arg2 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocketSinglePin > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg2 = 0 ;
  std::shared_ptr< chrono::ChSystem::CustomCollisionCallback > result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  
  smartarg2 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg2;
  arg2 = (chrono::vehicle::ChTrackAssembly *)(smartarg2 ? smartarg2->get() : 0); 
  {
    try {
      result = (arg1)->GetCollisionCallback(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChSystem::CustomCollisionCallback >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSprocketDoublePin(void * jarg1) {
  chrono::vehicle::ChSprocketDoublePin *arg1 = (chrono::vehicle::ChSprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocketDoublePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChSprocketDoublePin_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChSprocketDoublePin *arg1 = (chrono::vehicle::ChSprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocketDoublePin const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSprocketDoublePin const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSprocketDoublePin_GetProfile(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChSprocketDoublePin *arg1 = (chrono::vehicle::ChSprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocketDoublePin const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< geometry::ChLinePath > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSprocketDoublePin const *)arg1)->GetProfile();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< geometry::ChLinePath >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSprocketDoublePin_GetCollisionCallback(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::ChSprocketDoublePin *arg1 = (chrono::vehicle::ChSprocketDoublePin *) 0 ;
  chrono::vehicle::ChTrackAssembly *arg2 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocketDoublePin > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg2 = 0 ;
  std::shared_ptr< chrono::ChSystem::CustomCollisionCallback > result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  
  smartarg2 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg2;
  arg2 = (chrono::vehicle::ChTrackAssembly *)(smartarg2 ? smartarg2->get() : 0); 
  {
    try {
      result = (arg1)->GetCollisionCallback(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChSystem::CustomCollisionCallback >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSprocketBand(void * jarg1) {
  chrono::vehicle::ChSprocketBand *arg1 = (chrono::vehicle::ChSprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocketBand > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChSprocketBand_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChSprocketBand *arg1 = (chrono::vehicle::ChSprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocketBand const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSprocketBand const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSprocketBand_GetProfile(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChSprocketBand *arg1 = (chrono::vehicle::ChSprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocketBand const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< geometry::ChLinePath > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSprocketBand const *)arg1)->GetProfile();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< geometry::ChLinePath >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChSprocketBand_GetCollisionCallback(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::vehicle::ChSprocketBand *arg1 = (chrono::vehicle::ChSprocketBand *) 0 ;
  chrono::vehicle::ChTrackAssembly *arg2 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocketBand > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg2 = 0 ;
  std::shared_ptr< chrono::ChSystem::CustomCollisionCallback > result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::ChSprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  
  smartarg2 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg2;
  arg2 = (chrono::vehicle::ChTrackAssembly *)(smartarg2 ? smartarg2->get() : 0); 
  {
    try {
      result = (arg1)->GetCollisionCallback(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChSystem::CustomCollisionCallback >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SprocketSinglePin__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::SprocketSinglePin *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::SprocketSinglePin *)new chrono::vehicle::SprocketSinglePin((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SprocketSinglePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SprocketSinglePin__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::SprocketSinglePin *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::SprocketSinglePin *)new chrono::vehicle::SprocketSinglePin((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SprocketSinglePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SprocketSinglePin(void * jarg1) {
  chrono::vehicle::SprocketSinglePin *arg1 = (chrono::vehicle::SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketSinglePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_SprocketSinglePin_GetNumTeeth(void * jarg1) {
  int jresult ;
  chrono::vehicle::SprocketSinglePin *arg1 = (chrono::vehicle::SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketSinglePin const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::SprocketSinglePin const *)arg1)->GetNumTeeth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketSinglePin_GetAssemblyRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketSinglePin *arg1 = (chrono::vehicle::SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketSinglePin const *)arg1)->GetAssemblyRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketSinglePin_GetAddendumRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketSinglePin *arg1 = (chrono::vehicle::SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketSinglePin const *)arg1)->GetAddendumRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketSinglePin_GetGearMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketSinglePin *arg1 = (chrono::vehicle::SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketSinglePin const *)arg1)->GetGearMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SprocketSinglePin_GetGearInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SprocketSinglePin *arg1 = (chrono::vehicle::SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketSinglePin > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &(arg1)->GetGearInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketSinglePin_GetAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketSinglePin *arg1 = (chrono::vehicle::SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketSinglePin const *)arg1)->GetAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketSinglePin_GetSeparation(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketSinglePin *arg1 = (chrono::vehicle::SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketSinglePin const *)arg1)->GetSeparation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketSinglePin_GetOuterRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketSinglePin *arg1 = (chrono::vehicle::SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketSinglePin const *)arg1)->GetOuterRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketSinglePin_GetArcRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketSinglePin *arg1 = (chrono::vehicle::SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketSinglePin const *)arg1)->GetArcRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketSinglePin_GetArcCentersRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketSinglePin *arg1 = (chrono::vehicle::SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketSinglePin const *)arg1)->GetArcCentersRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketSinglePin_GetLateralBacklash(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketSinglePin *arg1 = (chrono::vehicle::SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketSinglePin const *)arg1)->GetLateralBacklash();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SprocketDoublePin__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::SprocketDoublePin *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::SprocketDoublePin *)new chrono::vehicle::SprocketDoublePin((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SprocketDoublePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SprocketDoublePin__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::SprocketDoublePin *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::SprocketDoublePin *)new chrono::vehicle::SprocketDoublePin((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SprocketDoublePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SprocketDoublePin(void * jarg1) {
  chrono::vehicle::SprocketDoublePin *arg1 = (chrono::vehicle::SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketDoublePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_SprocketDoublePin_GetNumTeeth(void * jarg1) {
  int jresult ;
  chrono::vehicle::SprocketDoublePin *arg1 = (chrono::vehicle::SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketDoublePin const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::SprocketDoublePin const *)arg1)->GetNumTeeth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketDoublePin_GetAssemblyRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketDoublePin *arg1 = (chrono::vehicle::SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketDoublePin const *)arg1)->GetAssemblyRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketDoublePin_GetAddendumRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketDoublePin *arg1 = (chrono::vehicle::SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketDoublePin const *)arg1)->GetAddendumRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketDoublePin_GetGearMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketDoublePin *arg1 = (chrono::vehicle::SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketDoublePin const *)arg1)->GetGearMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SprocketDoublePin_GetGearInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SprocketDoublePin *arg1 = (chrono::vehicle::SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketDoublePin > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &(arg1)->GetGearInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketDoublePin_GetAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketDoublePin *arg1 = (chrono::vehicle::SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketDoublePin const *)arg1)->GetAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketDoublePin_GetSeparation(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketDoublePin *arg1 = (chrono::vehicle::SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketDoublePin const *)arg1)->GetSeparation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketDoublePin_GetOuterRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketDoublePin *arg1 = (chrono::vehicle::SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketDoublePin const *)arg1)->GetOuterRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketDoublePin_GetArcRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketDoublePin *arg1 = (chrono::vehicle::SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketDoublePin const *)arg1)->GetArcRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketDoublePin_GetArcCenterHeight(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketDoublePin *arg1 = (chrono::vehicle::SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketDoublePin const *)arg1)->GetArcCenterHeight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketDoublePin_GetArcCenterOffset(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketDoublePin *arg1 = (chrono::vehicle::SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketDoublePin const *)arg1)->GetArcCenterOffset();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketDoublePin_GetLateralBacklash(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketDoublePin *arg1 = (chrono::vehicle::SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketDoublePin const *)arg1)->GetLateralBacklash();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SprocketBand__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::SprocketBand *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::SprocketBand *)new chrono::vehicle::SprocketBand((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SprocketBand >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SprocketBand__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::SprocketBand *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::SprocketBand *)new chrono::vehicle::SprocketBand((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SprocketBand >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SprocketBand(void * jarg1) {
  chrono::vehicle::SprocketBand *arg1 = (chrono::vehicle::SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketBand > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_SprocketBand_GetNumTeeth(void * jarg1) {
  int jresult ;
  chrono::vehicle::SprocketBand *arg1 = (chrono::vehicle::SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketBand const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::SprocketBand const *)arg1)->GetNumTeeth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketBand_GetAssemblyRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketBand *arg1 = (chrono::vehicle::SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketBand const *)arg1)->GetAssemblyRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketBand_GetAddendumRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketBand *arg1 = (chrono::vehicle::SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketBand const *)arg1)->GetAddendumRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketBand_GetGearMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketBand *arg1 = (chrono::vehicle::SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketBand const *)arg1)->GetGearMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SprocketBand_GetGearInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SprocketBand *arg1 = (chrono::vehicle::SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketBand > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &(arg1)->GetGearInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketBand_GetAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketBand *arg1 = (chrono::vehicle::SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketBand const *)arg1)->GetAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketBand_GetSeparation(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketBand *arg1 = (chrono::vehicle::SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketBand const *)arg1)->GetSeparation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketBand_GetOuterRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketBand *arg1 = (chrono::vehicle::SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketBand const *)arg1)->GetOuterRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketBand_GetBaseWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketBand *arg1 = (chrono::vehicle::SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketBand const *)arg1)->GetBaseWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketBand_GetTipWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketBand *arg1 = (chrono::vehicle::SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketBand const *)arg1)->GetTipWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketBand_GetToothDepth(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketBand *arg1 = (chrono::vehicle::SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketBand const *)arg1)->GetToothDepth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketBand_GetArcRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketBand *arg1 = (chrono::vehicle::SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketBand const *)arg1)->GetArcRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SprocketBand_GetLateralBacklash(void * jarg1) {
  double jresult ;
  chrono::vehicle::SprocketBand *arg1 = (chrono::vehicle::SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SprocketBand const *)arg1)->GetLateralBacklash();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChIdler(void * jarg1) {
  chrono::vehicle::ChIdler *arg1 = (chrono::vehicle::ChIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::ChIdler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChIdler > *)jarg1;
  arg1 = (chrono::vehicle::ChIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChIdler_GetType(void * jarg1) {
  int jresult ;
  chrono::vehicle::ChIdler *arg1 = (chrono::vehicle::ChIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::ChIdler const > *smartarg1 = 0 ;
  chrono::vehicle::GuidePinType result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChIdler > *)jarg1;
  arg1 = (chrono::vehicle::ChIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::GuidePinType)((chrono::vehicle::ChIdler const *)arg1)->GetType();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChIdler_GetIdlerWheel(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChIdler *arg1 = (chrono::vehicle::ChIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::ChIdler const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackWheel > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChIdler > *)jarg1;
  arg1 = (chrono::vehicle::ChIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChIdler const *)arg1)->GetIdlerWheel();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTrackWheel >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChIdler_GetWheelBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChIdler *arg1 = (chrono::vehicle::ChIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::ChIdler const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChIdler > *)jarg1;
  arg1 = (chrono::vehicle::ChIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChIdler const *)arg1)->GetWheelBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChIdler_GetCarrierBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChIdler *arg1 = (chrono::vehicle::ChIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::ChIdler const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChIdler > *)jarg1;
  arg1 = (chrono::vehicle::ChIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChIdler const *)arg1)->GetCarrierBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChIdler_GetWheelRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChIdler *arg1 = (chrono::vehicle::ChIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::ChIdler const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChIdler > *)jarg1;
  arg1 = (chrono::vehicle::ChIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChIdler const *)arg1)->GetWheelRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChIdler_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChIdler *arg1 = (chrono::vehicle::ChIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  chrono::vehicle::ChTrackAssembly *arg4 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChIdler > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg4 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChIdler > *)jarg1;
  arg1 = (chrono::vehicle::ChIdler *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  
  smartarg4 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg4;
  arg4 = (chrono::vehicle::ChTrackAssembly *)(smartarg4 ? smartarg4->get() : 0); 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChIdler_SetOutput(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChIdler *arg1 = (chrono::vehicle::ChIdler *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChIdler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChIdler > *)jarg1;
  arg1 = (chrono::vehicle::ChIdler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetOutput(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChIdler_LogConstraintViolations(void * jarg1) {
  chrono::vehicle::ChIdler *arg1 = (chrono::vehicle::ChIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::ChIdler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChIdler > *)jarg1;
  arg1 = (chrono::vehicle::ChIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogConstraintViolations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTranslationalIdler(void * jarg1) {
  chrono::vehicle::ChTranslationalIdler *arg1 = (chrono::vehicle::ChTranslationalIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTranslationalIdler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTranslationalIdler > *)jarg1;
  arg1 = (chrono::vehicle::ChTranslationalIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChTranslationalIdler_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChTranslationalIdler *arg1 = (chrono::vehicle::ChTranslationalIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTranslationalIdler const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTranslationalIdler > *)jarg1;
  arg1 = (chrono::vehicle::ChTranslationalIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTranslationalIdler const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTranslationalIdler_GetCarrierBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTranslationalIdler *arg1 = (chrono::vehicle::ChTranslationalIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTranslationalIdler const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTranslationalIdler > *)jarg1;
  arg1 = (chrono::vehicle::ChTranslationalIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTranslationalIdler const *)arg1)->GetCarrierBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTranslationalIdler_GetTensioner(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTranslationalIdler *arg1 = (chrono::vehicle::ChTranslationalIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTranslationalIdler const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTranslationalIdler > *)jarg1;
  arg1 = (chrono::vehicle::ChTranslationalIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTranslationalIdler const *)arg1)->GetTensioner();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTranslationalIdler_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChTranslationalIdler *arg1 = (chrono::vehicle::ChTranslationalIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  chrono::vehicle::ChTrackAssembly *arg4 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTranslationalIdler > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg4 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTranslationalIdler > *)jarg1;
  arg1 = (chrono::vehicle::ChTranslationalIdler *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  
  smartarg4 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg4;
  arg4 = (chrono::vehicle::ChTrackAssembly *)(smartarg4 ? smartarg4->get() : 0); 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTranslationalIdler_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChTranslationalIdler *arg1 = (chrono::vehicle::ChTranslationalIdler *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTranslationalIdler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTranslationalIdler > *)jarg1;
  arg1 = (chrono::vehicle::ChTranslationalIdler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTranslationalIdler_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChTranslationalIdler *arg1 = (chrono::vehicle::ChTranslationalIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTranslationalIdler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTranslationalIdler > *)jarg1;
  arg1 = (chrono::vehicle::ChTranslationalIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTranslationalIdler_LogConstraintViolations(void * jarg1) {
  chrono::vehicle::ChTranslationalIdler *arg1 = (chrono::vehicle::ChTranslationalIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTranslationalIdler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTranslationalIdler > *)jarg1;
  arg1 = (chrono::vehicle::ChTranslationalIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogConstraintViolations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TranslationalIdler__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::TranslationalIdler *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::TranslationalIdler *)new chrono::vehicle::TranslationalIdler((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TranslationalIdler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TranslationalIdler__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::TranslationalIdler *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::TranslationalIdler *)new chrono::vehicle::TranslationalIdler((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TranslationalIdler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TranslationalIdler(void * jarg1) {
  chrono::vehicle::TranslationalIdler *arg1 = (chrono::vehicle::TranslationalIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::TranslationalIdler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TranslationalIdler > *)jarg1;
  arg1 = (chrono::vehicle::TranslationalIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_TranslationalIdler_GetCarrierMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::TranslationalIdler *arg1 = (chrono::vehicle::TranslationalIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::TranslationalIdler const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TranslationalIdler > *)jarg1;
  arg1 = (chrono::vehicle::TranslationalIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TranslationalIdler const *)arg1)->GetCarrierMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TranslationalIdler_GetCarrierInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TranslationalIdler *arg1 = (chrono::vehicle::TranslationalIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::TranslationalIdler > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TranslationalIdler > *)jarg1;
  arg1 = (chrono::vehicle::TranslationalIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &(arg1)->GetCarrierInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TranslationalIdler_GetCarrierVisRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::TranslationalIdler *arg1 = (chrono::vehicle::TranslationalIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::TranslationalIdler const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TranslationalIdler > *)jarg1;
  arg1 = (chrono::vehicle::TranslationalIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TranslationalIdler const *)arg1)->GetCarrierVisRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TranslationalIdler_GetPrismaticPitchAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::TranslationalIdler *arg1 = (chrono::vehicle::TranslationalIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::TranslationalIdler const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TranslationalIdler > *)jarg1;
  arg1 = (chrono::vehicle::TranslationalIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TranslationalIdler const *)arg1)->GetPrismaticPitchAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TranslationalIdler_GetTensionerForceCallback(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TranslationalIdler *arg1 = (chrono::vehicle::TranslationalIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::TranslationalIdler const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TranslationalIdler > *)jarg1;
  arg1 = (chrono::vehicle::TranslationalIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::TranslationalIdler const *)arg1)->GetTensionerForceCallback();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TranslationalIdler_GetTensionerFreeLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::TranslationalIdler *arg1 = (chrono::vehicle::TranslationalIdler *) 0 ;
  std::shared_ptr< chrono::vehicle::TranslationalIdler const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TranslationalIdler > *)jarg1;
  arg1 = (chrono::vehicle::TranslationalIdler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TranslationalIdler const *)arg1)->GetTensionerFreeLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackWheel(void * jarg1) {
  chrono::vehicle::ChTrackWheel *arg1 = (chrono::vehicle::ChTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackWheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChTrackWheel_GetType(void * jarg1) {
  int jresult ;
  chrono::vehicle::ChTrackWheel *arg1 = (chrono::vehicle::ChTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackWheel const > *smartarg1 = 0 ;
  chrono::vehicle::GuidePinType result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::GuidePinType)((chrono::vehicle::ChTrackWheel const *)arg1)->GetType();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackWheel_GetBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackWheel *arg1 = (chrono::vehicle::ChTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackWheel const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackWheel const *)arg1)->GetBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackWheel_GetRevolute(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackWheel *arg1 = (chrono::vehicle::ChTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackWheel const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkLockRevolute > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackWheel const *)arg1)->GetRevolute();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkLockRevolute >(result) : 0; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTrackWheel_GetMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackWheel *arg1 = (chrono::vehicle::ChTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackWheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTrackWheel const *)arg1)->GetMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackWheel_GetInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackWheel *arg1 = (chrono::vehicle::ChTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackWheel > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &(arg1)->GetInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTrackWheel_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackWheel *arg1 = (chrono::vehicle::ChTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackWheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTrackWheel const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTrackWheel_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackWheel *arg1 = (chrono::vehicle::ChTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackWheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTrackWheel const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackWheel_SetCollide(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChTrackWheel *arg1 = (chrono::vehicle::ChTrackWheel *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackWheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetCollide(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackWheel_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChTrackWheel *arg1 = (chrono::vehicle::ChTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::ChBody > arg3 ;
  chrono::ChVector< > *arg4 = 0 ;
  chrono::vehicle::ChTrackAssembly *arg5 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackWheel > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg5 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::ChBody > *)jarg3; 
  arg4 = (chrono::ChVector< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  
  smartarg5 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg5;
  arg5 = (chrono::vehicle::ChTrackAssembly *)(smartarg5 ? smartarg5->get() : 0); 
  {
    try {
      (arg1)->Initialize(arg2,arg3,(chrono::ChVector< > const &)*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackWheel_LogConstraintViolations(void * jarg1) {
  chrono::vehicle::ChTrackWheel *arg1 = (chrono::vehicle::ChTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackWheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogConstraintViolations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackWheel_ExportComponentList(void * jarg1, void * jarg2) {
  chrono::vehicle::ChTrackWheel *arg1 = (chrono::vehicle::ChTrackWheel *) 0 ;
  rapidjson::Document *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackWheel const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (rapidjson::Document *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document & is null", 0);
    return ;
  } 
  {
    try {
      ((chrono::vehicle::ChTrackWheel const *)arg1)->ExportComponentList(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChSingleTrackWheel(void * jarg1) {
  chrono::vehicle::ChSingleTrackWheel *arg1 = (chrono::vehicle::ChSingleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSingleTrackWheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSingleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChSingleTrackWheel_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChSingleTrackWheel *arg1 = (chrono::vehicle::ChSingleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSingleTrackWheel const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSingleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChSingleTrackWheel const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChSingleTrackWheel_GetType(void * jarg1) {
  int jresult ;
  chrono::vehicle::ChSingleTrackWheel *arg1 = (chrono::vehicle::ChSingleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSingleTrackWheel const > *smartarg1 = 0 ;
  chrono::vehicle::GuidePinType result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChSingleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::GuidePinType)((chrono::vehicle::ChSingleTrackWheel const *)arg1)->GetType();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSingleTrackWheel_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChSingleTrackWheel *arg1 = (chrono::vehicle::ChSingleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::ChBody > arg3 ;
  chrono::ChVector< > *arg4 = 0 ;
  chrono::vehicle::ChTrackAssembly *arg5 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSingleTrackWheel > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg5 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSingleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::ChBody > *)jarg3; 
  arg4 = (chrono::ChVector< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  
  smartarg5 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg5;
  arg5 = (chrono::vehicle::ChTrackAssembly *)(smartarg5 ? smartarg5->get() : 0); 
  {
    try {
      (arg1)->Initialize(arg2,arg3,(chrono::ChVector< > const &)*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSingleTrackWheel_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChSingleTrackWheel *arg1 = (chrono::vehicle::ChSingleTrackWheel *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChSingleTrackWheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSingleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChSingleTrackWheel_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChSingleTrackWheel *arg1 = (chrono::vehicle::ChSingleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChSingleTrackWheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChSingleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChSingleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChDoubleTrackWheel(void * jarg1) {
  chrono::vehicle::ChDoubleTrackWheel *arg1 = (chrono::vehicle::ChDoubleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleTrackWheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChDoubleTrackWheel_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChDoubleTrackWheel *arg1 = (chrono::vehicle::ChDoubleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleTrackWheel const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChDoubleTrackWheel const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChDoubleTrackWheel_GetType(void * jarg1) {
  int jresult ;
  chrono::vehicle::ChDoubleTrackWheel *arg1 = (chrono::vehicle::ChDoubleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleTrackWheel const > *smartarg1 = 0 ;
  chrono::vehicle::GuidePinType result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChDoubleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::GuidePinType)((chrono::vehicle::ChDoubleTrackWheel const *)arg1)->GetType();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDoubleTrackWheel_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChDoubleTrackWheel *arg1 = (chrono::vehicle::ChDoubleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::ChBody > arg3 ;
  chrono::ChVector< > *arg4 = 0 ;
  chrono::vehicle::ChTrackAssembly *arg5 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleTrackWheel > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg5 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::ChBody > *)jarg3; 
  arg4 = (chrono::ChVector< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  
  smartarg5 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg5;
  arg5 = (chrono::vehicle::ChTrackAssembly *)(smartarg5 ? smartarg5->get() : 0); 
  {
    try {
      (arg1)->Initialize(arg2,arg3,(chrono::ChVector< > const &)*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDoubleTrackWheel_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChDoubleTrackWheel *arg1 = (chrono::vehicle::ChDoubleTrackWheel *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChDoubleTrackWheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChDoubleTrackWheel_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChDoubleTrackWheel *arg1 = (chrono::vehicle::ChDoubleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::ChDoubleTrackWheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChDoubleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::ChDoubleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SingleTrackWheel__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::SingleTrackWheel *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::SingleTrackWheel *)new chrono::vehicle::SingleTrackWheel((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SingleTrackWheel >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SingleTrackWheel__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::SingleTrackWheel *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::SingleTrackWheel *)new chrono::vehicle::SingleTrackWheel((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::SingleTrackWheel >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SingleTrackWheel(void * jarg1) {
  chrono::vehicle::SingleTrackWheel *arg1 = (chrono::vehicle::SingleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleTrackWheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SingleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::SingleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_SingleTrackWheel_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::SingleTrackWheel *arg1 = (chrono::vehicle::SingleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleTrackWheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::SingleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SingleTrackWheel const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SingleTrackWheel_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::SingleTrackWheel *arg1 = (chrono::vehicle::SingleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleTrackWheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::SingleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SingleTrackWheel const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SingleTrackWheel_GetMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::SingleTrackWheel *arg1 = (chrono::vehicle::SingleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleTrackWheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::SingleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::SingleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::SingleTrackWheel const *)arg1)->GetMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SingleTrackWheel_GetInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::SingleTrackWheel *arg1 = (chrono::vehicle::SingleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::SingleTrackWheel > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::SingleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::SingleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &(arg1)->GetInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DoubleTrackWheel__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::DoubleTrackWheel *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::DoubleTrackWheel *)new chrono::vehicle::DoubleTrackWheel((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::DoubleTrackWheel >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DoubleTrackWheel__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::DoubleTrackWheel *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::DoubleTrackWheel *)new chrono::vehicle::DoubleTrackWheel((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::DoubleTrackWheel >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DoubleTrackWheel(void * jarg1) {
  chrono::vehicle::DoubleTrackWheel *arg1 = (chrono::vehicle::DoubleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleTrackWheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::DoubleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::DoubleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleTrackWheel_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleTrackWheel *arg1 = (chrono::vehicle::DoubleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleTrackWheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::DoubleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleTrackWheel const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleTrackWheel_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleTrackWheel *arg1 = (chrono::vehicle::DoubleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleTrackWheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::DoubleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleTrackWheel const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleTrackWheel_GetGap(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleTrackWheel *arg1 = (chrono::vehicle::DoubleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleTrackWheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::DoubleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleTrackWheel const *)arg1)->GetGap();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleTrackWheel_GetMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::DoubleTrackWheel *arg1 = (chrono::vehicle::DoubleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleTrackWheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::DoubleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::DoubleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::DoubleTrackWheel const *)arg1)->GetMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleTrackWheel_GetInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::DoubleTrackWheel *arg1 = (chrono::vehicle::DoubleTrackWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::DoubleTrackWheel > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::DoubleTrackWheel > *)jarg1;
  arg1 = (chrono::vehicle::DoubleTrackWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &(arg1)->GetInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackSuspension(void * jarg1) {
  chrono::vehicle::ChTrackSuspension *arg1 = (chrono::vehicle::ChTrackSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChTrackSuspension_GetType(void * jarg1) {
  int jresult ;
  chrono::vehicle::ChTrackSuspension *arg1 = (chrono::vehicle::ChTrackSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackSuspension const > *smartarg1 = 0 ;
  chrono::vehicle::GuidePinType result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::GuidePinType)((chrono::vehicle::ChTrackSuspension const *)arg1)->GetType();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackSuspension_GetRoadWheel(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackSuspension *arg1 = (chrono::vehicle::ChTrackSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackSuspension const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackWheel > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackSuspension const *)arg1)->GetRoadWheel();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTrackWheel >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackSuspension_GetWheelBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackSuspension *arg1 = (chrono::vehicle::ChTrackSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackSuspension const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackSuspension const *)arg1)->GetWheelBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackSuspension_GetCarrierBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackSuspension *arg1 = (chrono::vehicle::ChTrackSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackSuspension const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackSuspension const *)arg1)->GetCarrierBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTrackSuspension_GetCarrierAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackSuspension *arg1 = (chrono::vehicle::ChTrackSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTrackSuspension const *)arg1)->GetCarrierAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackSuspension_GetWheelRevolute(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackSuspension *arg1 = (chrono::vehicle::ChTrackSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackSuspension const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkLockRevolute > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackSuspension const *)arg1)->GetWheelRevolute();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkLockRevolute >(result) : 0; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTrackSuspension_GetWheelRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackSuspension *arg1 = (chrono::vehicle::ChTrackSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTrackSuspension const *)arg1)->GetWheelRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackSuspension_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChTrackSuspension *arg1 = (chrono::vehicle::ChTrackSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  chrono::vehicle::ChTrackAssembly *arg4 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackSuspension > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg4 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  
  smartarg4 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg4;
  arg4 = (chrono::vehicle::ChTrackAssembly *)(smartarg4 ? smartarg4->get() : 0); 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackSuspension_ReportSuspensionForce(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackSuspension *arg1 = (chrono::vehicle::ChTrackSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackSuspension const > *smartarg1 = 0 ;
  chrono::vehicle::ChTrackSuspension::ForceTorque result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackSuspension const *)arg1)->ReportSuspensionForce();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::vehicle::ChTrackSuspension::ForceTorque(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackSuspension_SetOutput(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChTrackSuspension *arg1 = (chrono::vehicle::ChTrackSuspension *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetOutput(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackSuspension_LogConstraintViolations(void * jarg1) {
  chrono::vehicle::ChTrackSuspension *arg1 = (chrono::vehicle::ChTrackSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogConstraintViolations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ForceTorque_spring_ft_set(void * jarg1, double jarg2) {
  chrono::vehicle::ChTrackSuspension::ForceTorque *arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->spring_ft = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ForceTorque_spring_ft_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackSuspension::ForceTorque *arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *)jarg1; 
  result = (double) ((arg1)->spring_ft);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ForceTorque_shock_ft_set(void * jarg1, double jarg2) {
  chrono::vehicle::ChTrackSuspension::ForceTorque *arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->shock_ft = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ForceTorque_shock_ft_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackSuspension::ForceTorque *arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *)jarg1; 
  result = (double) ((arg1)->shock_ft);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ForceTorque_spring_displ_set(void * jarg1, double jarg2) {
  chrono::vehicle::ChTrackSuspension::ForceTorque *arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->spring_displ = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ForceTorque_spring_displ_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackSuspension::ForceTorque *arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *)jarg1; 
  result = (double) ((arg1)->spring_displ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ForceTorque_spring_velocity_set(void * jarg1, double jarg2) {
  chrono::vehicle::ChTrackSuspension::ForceTorque *arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->spring_velocity = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ForceTorque_spring_velocity_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackSuspension::ForceTorque *arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *)jarg1; 
  result = (double) ((arg1)->spring_velocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ForceTorque_shock_displ_set(void * jarg1, double jarg2) {
  chrono::vehicle::ChTrackSuspension::ForceTorque *arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->shock_displ = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ForceTorque_shock_displ_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackSuspension::ForceTorque *arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *)jarg1; 
  result = (double) ((arg1)->shock_displ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ForceTorque_shock_velocity_set(void * jarg1, double jarg2) {
  chrono::vehicle::ChTrackSuspension::ForceTorque *arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *) 0 ;
  double arg2 ;
  
  arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->shock_velocity = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ForceTorque_shock_velocity_get(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackSuspension::ForceTorque *arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *) 0 ;
  double result;
  
  arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *)jarg1; 
  result = (double) ((arg1)->shock_velocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ForceTorque() {
  void * jresult ;
  chrono::vehicle::ChTrackSuspension::ForceTorque *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::ChTrackSuspension::ForceTorque *)new chrono::vehicle::ChTrackSuspension::ForceTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ForceTorque(void * jarg1) {
  chrono::vehicle::ChTrackSuspension::ForceTorque *arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *) 0 ;
  
  arg1 = (chrono::vehicle::ChTrackSuspension::ForceTorque *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTranslationalDamperSuspension(void * jarg1) {
  chrono::vehicle::ChTranslationalDamperSuspension *arg1 = (chrono::vehicle::ChTranslationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTranslationalDamperSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTranslationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTranslationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChTranslationalDamperSuspension_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChTranslationalDamperSuspension *arg1 = (chrono::vehicle::ChTranslationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTranslationalDamperSuspension const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTranslationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTranslationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTranslationalDamperSuspension const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTranslationalDamperSuspension_GetCarrierBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTranslationalDamperSuspension *arg1 = (chrono::vehicle::ChTranslationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTranslationalDamperSuspension const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTranslationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTranslationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTranslationalDamperSuspension const *)arg1)->GetCarrierBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTranslationalDamperSuspension_GetCarrierAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTranslationalDamperSuspension *arg1 = (chrono::vehicle::ChTranslationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTranslationalDamperSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTranslationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTranslationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTranslationalDamperSuspension const *)arg1)->GetCarrierAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTranslationalDamperSuspension_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChTranslationalDamperSuspension *arg1 = (chrono::vehicle::ChTranslationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  chrono::vehicle::ChTrackAssembly *arg4 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTranslationalDamperSuspension > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg4 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTranslationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTranslationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  
  smartarg4 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg4;
  arg4 = (chrono::vehicle::ChTrackAssembly *)(smartarg4 ? smartarg4->get() : 0); 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTranslationalDamperSuspension_ReportSuspensionForce(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTranslationalDamperSuspension *arg1 = (chrono::vehicle::ChTranslationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTranslationalDamperSuspension const > *smartarg1 = 0 ;
  chrono::vehicle::ChTrackSuspension::ForceTorque result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTranslationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTranslationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTranslationalDamperSuspension const *)arg1)->ReportSuspensionForce();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::vehicle::ChTrackSuspension::ForceTorque(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTranslationalDamperSuspension_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChTranslationalDamperSuspension *arg1 = (chrono::vehicle::ChTranslationalDamperSuspension *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTranslationalDamperSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTranslationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTranslationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTranslationalDamperSuspension_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChTranslationalDamperSuspension *arg1 = (chrono::vehicle::ChTranslationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTranslationalDamperSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTranslationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTranslationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTranslationalDamperSuspension_LogConstraintViolations(void * jarg1) {
  chrono::vehicle::ChTranslationalDamperSuspension *arg1 = (chrono::vehicle::ChTranslationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTranslationalDamperSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTranslationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChTranslationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogConstraintViolations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChRotationalDamperSuspension(void * jarg1) {
  chrono::vehicle::ChRotationalDamperSuspension *arg1 = (chrono::vehicle::ChRotationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRotationalDamperSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRotationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChRotationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChRotationalDamperSuspension_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChRotationalDamperSuspension *arg1 = (chrono::vehicle::ChRotationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRotationalDamperSuspension const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRotationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChRotationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChRotationalDamperSuspension const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChRotationalDamperSuspension_GetCarrierBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChRotationalDamperSuspension *arg1 = (chrono::vehicle::ChRotationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRotationalDamperSuspension const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRotationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChRotationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChRotationalDamperSuspension const *)arg1)->GetCarrierBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChRotationalDamperSuspension_GetCarrierAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChRotationalDamperSuspension *arg1 = (chrono::vehicle::ChRotationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRotationalDamperSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRotationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChRotationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChRotationalDamperSuspension const *)arg1)->GetCarrierAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRotationalDamperSuspension_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChRotationalDamperSuspension *arg1 = (chrono::vehicle::ChRotationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  chrono::vehicle::ChTrackAssembly *arg4 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRotationalDamperSuspension > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg4 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRotationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChRotationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  
  smartarg4 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg4;
  arg4 = (chrono::vehicle::ChTrackAssembly *)(smartarg4 ? smartarg4->get() : 0); 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChRotationalDamperSuspension_ReportSuspensionForce(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChRotationalDamperSuspension *arg1 = (chrono::vehicle::ChRotationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRotationalDamperSuspension const > *smartarg1 = 0 ;
  chrono::vehicle::ChTrackSuspension::ForceTorque result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChRotationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChRotationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChRotationalDamperSuspension const *)arg1)->ReportSuspensionForce();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::vehicle::ChTrackSuspension::ForceTorque(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRotationalDamperSuspension_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChRotationalDamperSuspension *arg1 = (chrono::vehicle::ChRotationalDamperSuspension *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChRotationalDamperSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRotationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChRotationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRotationalDamperSuspension_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChRotationalDamperSuspension *arg1 = (chrono::vehicle::ChRotationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRotationalDamperSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRotationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChRotationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChRotationalDamperSuspension_LogConstraintViolations(void * jarg1) {
  chrono::vehicle::ChRotationalDamperSuspension *arg1 = (chrono::vehicle::ChRotationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::ChRotationalDamperSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChRotationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::ChRotationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogConstraintViolations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TranslationalDamperSuspension__SWIG_0(const char * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  chrono::vehicle::TranslationalDamperSuspension *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (chrono::vehicle::TranslationalDamperSuspension *)new chrono::vehicle::TranslationalDamperSuspension((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TranslationalDamperSuspension >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TranslationalDamperSuspension__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  chrono::vehicle::TranslationalDamperSuspension *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (chrono::vehicle::TranslationalDamperSuspension *)new chrono::vehicle::TranslationalDamperSuspension((rapidjson::Document const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TranslationalDamperSuspension >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TranslationalDamperSuspension(void * jarg1) {
  chrono::vehicle::TranslationalDamperSuspension *arg1 = (chrono::vehicle::TranslationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::TranslationalDamperSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TranslationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::TranslationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_TranslationalDamperSuspension_GetArmMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::TranslationalDamperSuspension *arg1 = (chrono::vehicle::TranslationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::TranslationalDamperSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TranslationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::TranslationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TranslationalDamperSuspension const *)arg1)->GetArmMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TranslationalDamperSuspension_GetArmInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TranslationalDamperSuspension *arg1 = (chrono::vehicle::TranslationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::TranslationalDamperSuspension const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TranslationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::TranslationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::TranslationalDamperSuspension const *)arg1)->GetArmInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TranslationalDamperSuspension_GetArmVisRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::TranslationalDamperSuspension *arg1 = (chrono::vehicle::TranslationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::TranslationalDamperSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TranslationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::TranslationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TranslationalDamperSuspension const *)arg1)->GetArmVisRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TranslationalDamperSuspension_GetSpringRestAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::TranslationalDamperSuspension *arg1 = (chrono::vehicle::TranslationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::TranslationalDamperSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TranslationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::TranslationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TranslationalDamperSuspension const *)arg1)->GetSpringRestAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TranslationalDamperSuspension_GetSpringTorqueFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TranslationalDamperSuspension *arg1 = (chrono::vehicle::TranslationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::TranslationalDamperSuspension const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TranslationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::TranslationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::TranslationalDamperSuspension const *)arg1)->GetSpringTorqueFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TranslationalDamperSuspension_GetDamperTorqueFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TranslationalDamperSuspension *arg1 = (chrono::vehicle::TranslationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::TranslationalDamperSuspension const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TranslationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::TranslationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::TranslationalDamperSuspension const *)arg1)->GetDamperTorqueFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TranslationalDamperSuspension_GetShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TranslationalDamperSuspension *arg1 = (chrono::vehicle::TranslationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::TranslationalDamperSuspension const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TranslationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::TranslationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::TranslationalDamperSuspension const *)arg1)->GetShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RotationalDamperSuspension__SWIG_0(const char * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  chrono::vehicle::RotationalDamperSuspension *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (chrono::vehicle::RotationalDamperSuspension *)new chrono::vehicle::RotationalDamperSuspension((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::RotationalDamperSuspension >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RotationalDamperSuspension__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  chrono::vehicle::RotationalDamperSuspension *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (chrono::vehicle::RotationalDamperSuspension *)new chrono::vehicle::RotationalDamperSuspension((rapidjson::Document const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::RotationalDamperSuspension >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RotationalDamperSuspension(void * jarg1) {
  chrono::vehicle::RotationalDamperSuspension *arg1 = (chrono::vehicle::RotationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::RotationalDamperSuspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::RotationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::RotationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_RotationalDamperSuspension_GetArmMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::RotationalDamperSuspension *arg1 = (chrono::vehicle::RotationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::RotationalDamperSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RotationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::RotationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::RotationalDamperSuspension const *)arg1)->GetArmMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RotationalDamperSuspension_GetArmInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::RotationalDamperSuspension *arg1 = (chrono::vehicle::RotationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::RotationalDamperSuspension const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RotationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::RotationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::RotationalDamperSuspension const *)arg1)->GetArmInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RotationalDamperSuspension_GetArmVisRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::RotationalDamperSuspension *arg1 = (chrono::vehicle::RotationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::RotationalDamperSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RotationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::RotationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::RotationalDamperSuspension const *)arg1)->GetArmVisRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RotationalDamperSuspension_GetSpringRestAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::RotationalDamperSuspension *arg1 = (chrono::vehicle::RotationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::RotationalDamperSuspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RotationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::RotationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::RotationalDamperSuspension const *)arg1)->GetSpringRestAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RotationalDamperSuspension_GetSpringTorqueFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::RotationalDamperSuspension *arg1 = (chrono::vehicle::RotationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::RotationalDamperSuspension const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RotationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::RotationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::RotationalDamperSuspension const *)arg1)->GetSpringTorqueFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RotationalDamperSuspension_GetShockTorqueCallback(void * jarg1) {
  void * jresult ;
  chrono::vehicle::RotationalDamperSuspension *arg1 = (chrono::vehicle::RotationalDamperSuspension *) 0 ;
  std::shared_ptr< chrono::vehicle::RotationalDamperSuspension const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::RotationalDamperSuspension > *)jarg1;
  arg1 = (chrono::vehicle::RotationalDamperSuspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::RotationalDamperSuspension const *)arg1)->GetShockTorqueCallback();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackShoe(void * jarg1) {
  chrono::vehicle::ChTrackShoe *arg1 = (chrono::vehicle::ChTrackShoe *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoe > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoe *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChTrackShoe_GetType(void * jarg1) {
  int jresult ;
  chrono::vehicle::ChTrackShoe *arg1 = (chrono::vehicle::ChTrackShoe *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe const > *smartarg1 = 0 ;
  chrono::vehicle::GuidePinType result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackShoe > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoe *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::GuidePinType)((chrono::vehicle::ChTrackShoe const *)arg1)->GetType();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChTrackShoe_GetIndex(void * jarg1) {
  unsigned long jresult ;
  chrono::vehicle::ChTrackShoe *arg1 = (chrono::vehicle::ChTrackShoe *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe const > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackShoe > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoe *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackShoe const *)arg1)->GetIndex();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackShoe_GetShoeBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackShoe *arg1 = (chrono::vehicle::ChTrackShoe *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBody > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackShoe > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoe *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackShoe const *)arg1)->GetShoeBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBody >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackShoe_GetTension(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackShoe *arg1 = (chrono::vehicle::ChTrackShoe *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackShoe > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoe *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackShoe const *)arg1)->GetTension();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTrackShoe_GetHeight(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackShoe *arg1 = (chrono::vehicle::ChTrackShoe *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackShoe > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoe *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTrackShoe const *)arg1)->GetHeight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTrackShoe_GetPitch(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackShoe *arg1 = (chrono::vehicle::ChTrackShoe *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackShoe > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoe *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTrackShoe const *)arg1)->GetPitch();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackShoe_GetLateralContactPoint(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackShoe *arg1 = (chrono::vehicle::ChTrackShoe *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackShoe > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoe *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackShoe const *)arg1)->GetLateralContactPoint();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackShoe_GetGroundContactGeometry(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackShoe *arg1 = (chrono::vehicle::ChTrackShoe *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe const > *smartarg1 = 0 ;
  ChVehicleGeometry result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackShoe > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoe *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackShoe const *)arg1)->GetGroundContactGeometry();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ChVehicleGeometry(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackShoe_SetCollide(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChTrackShoe *arg1 = (chrono::vehicle::ChTrackShoe *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoe > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoe *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetCollide(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackShoe_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChTrackShoe *arg1 = (chrono::vehicle::ChTrackShoe *) 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  chrono::ChQuaternion< > *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoe > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoe *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBodyAuxRef > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg4 = (chrono::ChQuaternion< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChQuaternion< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3,(chrono::ChQuaternion< > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackShoe_SetIndex(void * jarg1, unsigned long jarg2) {
  chrono::vehicle::ChTrackShoe *arg1 = (chrono::vehicle::ChTrackShoe *) 0 ;
  size_t arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoe > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoe *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->SetIndex(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackShoe_Connect(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  chrono::vehicle::ChTrackShoe *arg1 = (chrono::vehicle::ChTrackShoe *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe > arg2 ;
  chrono::vehicle::ChTrackAssembly *arg3 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  chrono::vehicle::ChChassis *arg4 = (chrono::vehicle::ChChassis *) 0 ;
  bool arg5 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > *smartarg4 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoe > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoe *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChTrackShoe > *)jarg2; 
  
  smartarg3 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg3;
  arg3 = (chrono::vehicle::ChTrackAssembly *)(smartarg3 ? smartarg3->get() : 0); 
  
  smartarg4 = (std::shared_ptr<  chrono::vehicle::ChChassis > *)jarg4;
  arg4 = (chrono::vehicle::ChChassis *)(smartarg4 ? smartarg4->get() : 0); 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->Connect(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackShoeBand(void * jarg1) {
  chrono::vehicle::ChTrackShoeBand *arg1 = (chrono::vehicle::ChTrackShoeBand *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeBand > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoeBand > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTrackShoeBand_GetPitch(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackShoeBand *arg1 = (chrono::vehicle::ChTrackShoeBand *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackShoeBand > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTrackShoeBand const *)arg1)->GetPitch();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackShoeBand_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChTrackShoeBand *arg1 = (chrono::vehicle::ChTrackShoeBand *) 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  chrono::ChQuaternion< > *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeBand > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoeBand > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeBand *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBodyAuxRef > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg4 = (chrono::ChQuaternion< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChQuaternion< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3,(chrono::ChQuaternion< > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackShoeBand_WriteTreadVisualizationMesh(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChTrackShoeBand *arg1 = (chrono::vehicle::ChTrackShoeBand *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeBand > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoeBand > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeBand *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->WriteTreadVisualizationMesh((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackShoeBand_ExportTreadVisualizationMeshPovray(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChTrackShoeBand *arg1 = (chrono::vehicle::ChTrackShoeBand *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeBand > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoeBand > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeBand *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->ExportTreadVisualizationMeshPovray((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackShoeBandANCF(void * jarg1) {
  chrono::vehicle::ChTrackShoeBandANCF *arg1 = (chrono::vehicle::ChTrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeBandANCF > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChTrackShoeBandANCF_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChTrackShoeBandANCF *arg1 = (chrono::vehicle::ChTrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeBandANCF const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackShoeBandANCF const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackShoeBandANCF_GetTension(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackShoeBandANCF *arg1 = (chrono::vehicle::ChTrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeBandANCF const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackShoeBandANCF const *)arg1)->GetTension();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackShoeBandANCF_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChTrackShoeBandANCF *arg1 = (chrono::vehicle::ChTrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  chrono::ChQuaternion< > *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeBandANCF > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBodyAuxRef > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg4 = (chrono::ChQuaternion< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChQuaternion< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3,(chrono::ChQuaternion< > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackShoeBandANCF_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackShoeBandANCF *arg1 = (chrono::vehicle::ChTrackShoeBandANCF *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeBandANCF > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackShoeBandANCF_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChTrackShoeBandANCF *arg1 = (chrono::vehicle::ChTrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeBandANCF > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackShoeBandBushing(void * jarg1) {
  chrono::vehicle::ChTrackShoeBandBushing *arg1 = (chrono::vehicle::ChTrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeBandBushing > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChTrackShoeBandBushing_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChTrackShoeBandBushing *arg1 = (chrono::vehicle::ChTrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeBandBushing const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackShoeBandBushing const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackShoeBandBushing_GetTension(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackShoeBandBushing *arg1 = (chrono::vehicle::ChTrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeBandBushing const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackShoeBandBushing const *)arg1)->GetTension();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackShoeBandBushing_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChTrackShoeBandBushing *arg1 = (chrono::vehicle::ChTrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  chrono::ChQuaternion< > *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeBandBushing > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBodyAuxRef > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg4 = (chrono::ChQuaternion< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChQuaternion< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3,(chrono::ChQuaternion< > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackShoeBandBushing_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackShoeBandBushing *arg1 = (chrono::vehicle::ChTrackShoeBandBushing *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeBandBushing > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackShoeBandBushing_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChTrackShoeBandBushing *arg1 = (chrono::vehicle::ChTrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeBandBushing > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackShoeSegmented(void * jarg1) {
  chrono::vehicle::ChTrackShoeSegmented *arg1 = (chrono::vehicle::ChTrackShoeSegmented *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeSegmented > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoeSegmented > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeSegmented *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackShoeSegmented_GetSprocketContactMaterial(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackShoeSegmented *arg1 = (chrono::vehicle::ChTrackShoeSegmented *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeSegmented const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChMaterialSurface > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackShoeSegmented > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeSegmented *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackShoeSegmented const *)arg1)->GetSprocketContactMaterial();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChMaterialSurface >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackShoeSinglePin(void * jarg1) {
  chrono::vehicle::ChTrackShoeSinglePin *arg1 = (chrono::vehicle::ChTrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeSinglePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChTrackShoeSinglePin_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChTrackShoeSinglePin *arg1 = (chrono::vehicle::ChTrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeSinglePin const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackShoeSinglePin const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackShoeSinglePin_GetTension(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackShoeSinglePin *arg1 = (chrono::vehicle::ChTrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeSinglePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackShoeSinglePin const *)arg1)->GetTension();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackShoeSinglePin_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChTrackShoeSinglePin *arg1 = (chrono::vehicle::ChTrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  chrono::ChQuaternion< > *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeSinglePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBodyAuxRef > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg4 = (chrono::ChQuaternion< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChQuaternion< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3,(chrono::ChQuaternion< > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackShoeDoublePin(void * jarg1) {
  chrono::vehicle::ChTrackShoeDoublePin *arg1 = (chrono::vehicle::ChTrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeDoublePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChTrackShoeDoublePin_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChTrackShoeDoublePin *arg1 = (chrono::vehicle::ChTrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeDoublePin const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackShoeDoublePin const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTrackShoeDoublePin_GetPitch(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackShoeDoublePin *arg1 = (chrono::vehicle::ChTrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTrackShoeDoublePin const *)arg1)->GetPitch();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackShoeDoublePin_GetTension(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackShoeDoublePin *arg1 = (chrono::vehicle::ChTrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeDoublePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackShoeDoublePin const *)arg1)->GetTension();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackShoeDoublePin_Initialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::ChTrackShoeDoublePin *arg1 = (chrono::vehicle::ChTrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  chrono::ChQuaternion< > *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeDoublePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBodyAuxRef > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg4 = (chrono::ChQuaternion< > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChQuaternion< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3,(chrono::ChQuaternion< > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackShoeDoublePin_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackShoeDoublePin *arg1 = (chrono::vehicle::ChTrackShoeDoublePin *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeDoublePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackShoeDoublePin_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::ChTrackShoeDoublePin *arg1 = (chrono::vehicle::ChTrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoeDoublePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackShoeBandANCF__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::TrackShoeBandANCF *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::TrackShoeBandANCF *)new chrono::vehicle::TrackShoeBandANCF((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackShoeBandANCF >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackShoeBandANCF__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::TrackShoeBandANCF *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::TrackShoeBandANCF *)new chrono::vehicle::TrackShoeBandANCF((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackShoeBandANCF >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TrackShoeBandANCF(void * jarg1) {
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrackShoeBandANCF_GetType(void * jarg1) {
  int jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  chrono::vehicle::GuidePinType result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::GuidePinType)((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetType();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandANCF_GetHeight(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetHeight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandANCF_GetTreadMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetTreadMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandANCF_GetWebMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetWebMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackShoeBandANCF_GetTreadInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetTreadInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackShoeBandANCF_GetWebInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetWebInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackShoeBandANCF_GetGuideBoxDimensions(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetGuideBoxDimensions();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandANCF_GetGuideBoxOffsetX(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetGuideBoxOffsetX();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandANCF_GetBeltWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetBeltWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandANCF_GetToothTipLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetToothTipLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandANCF_GetToothBaseLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetToothBaseLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandANCF_GetToothWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetToothWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandANCF_GetToothHeight(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetToothHeight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandANCF_GetToothArcRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetToothArcRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandANCF_GetWebLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetWebLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandANCF_GetWebThickness(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetWebThickness();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrackShoeBandANCF_GetNumElementsLength(void * jarg1) {
  int jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetNumElementsLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrackShoeBandANCF_GetNumElementsWidth(void * jarg1) {
  int jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetNumElementsWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandANCF_GetSteelLayerThickness(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetSteelLayerThickness();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandANCF_GetTreadLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetTreadLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandANCF_GetTreadThickness(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetTreadThickness();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_TrackShoeBandANCF_GetTreadVisualizationMeshName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::TrackShoeBandANCF *arg1 = (chrono::vehicle::TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandANCF const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::string *) &((chrono::vehicle::TrackShoeBandANCF const *)arg1)->GetTreadVisualizationMeshName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackShoeBandBushing__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::TrackShoeBandBushing *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::TrackShoeBandBushing *)new chrono::vehicle::TrackShoeBandBushing((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackShoeBandBushing >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackShoeBandBushing__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::TrackShoeBandBushing *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::TrackShoeBandBushing *)new chrono::vehicle::TrackShoeBandBushing((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackShoeBandBushing >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TrackShoeBandBushing(void * jarg1) {
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrackShoeBandBushing_GetType(void * jarg1) {
  int jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  chrono::vehicle::GuidePinType result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::GuidePinType)((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetType();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandBushing_GetHeight(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetHeight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandBushing_GetTreadMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetTreadMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandBushing_GetWebMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetWebMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackShoeBandBushing_GetTreadInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetTreadInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackShoeBandBushing_GetWebInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetWebInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackShoeBandBushing_GetGuideBoxDimensions(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetGuideBoxDimensions();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandBushing_GetGuideBoxOffsetX(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetGuideBoxOffsetX();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandBushing_GetBeltWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetBeltWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandBushing_GetToothTipLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetToothTipLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandBushing_GetToothBaseLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetToothBaseLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandBushing_GetToothWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetToothWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandBushing_GetToothHeight(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetToothHeight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandBushing_GetToothArcRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetToothArcRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrackShoeBandBushing_GetNumWebSegments(void * jarg1) {
  int jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetNumWebSegments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandBushing_GetWebLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetWebLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandBushing_GetWebThickness(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetWebThickness();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandBushing_GetTreadLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetTreadLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeBandBushing_GetTreadThickness(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetTreadThickness();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackShoeBandBushing_GetBushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetBushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_TrackShoeBandBushing_GetTreadVisualizationMeshName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::TrackShoeBandBushing *arg1 = (chrono::vehicle::TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeBandBushing const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::string *) &((chrono::vehicle::TrackShoeBandBushing const *)arg1)->GetTreadVisualizationMeshName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackShoeSinglePin__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::TrackShoeSinglePin *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::TrackShoeSinglePin *)new chrono::vehicle::TrackShoeSinglePin((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackShoeSinglePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackShoeSinglePin__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::TrackShoeSinglePin *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::TrackShoeSinglePin *)new chrono::vehicle::TrackShoeSinglePin((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackShoeSinglePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TrackShoeSinglePin(void * jarg1) {
  chrono::vehicle::TrackShoeSinglePin *arg1 = (chrono::vehicle::TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeSinglePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrackShoeSinglePin_GetType(void * jarg1) {
  int jresult ;
  chrono::vehicle::TrackShoeSinglePin *arg1 = (chrono::vehicle::TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeSinglePin const > *smartarg1 = 0 ;
  chrono::vehicle::GuidePinType result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::GuidePinType)((chrono::vehicle::TrackShoeSinglePin const *)arg1)->GetType();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeSinglePin_GetHeight(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeSinglePin *arg1 = (chrono::vehicle::TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeSinglePin const *)arg1)->GetHeight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeSinglePin_GetPitch(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeSinglePin *arg1 = (chrono::vehicle::TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeSinglePin const *)arg1)->GetPitch();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeSinglePin_GetShoeMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeSinglePin *arg1 = (chrono::vehicle::TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeSinglePin const *)arg1)->GetShoeMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackShoeSinglePin_GetShoeInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackShoeSinglePin *arg1 = (chrono::vehicle::TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeSinglePin const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::TrackShoeSinglePin const *)arg1)->GetShoeInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeSinglePin_GetFrontCylinderLoc(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeSinglePin *arg1 = (chrono::vehicle::TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeSinglePin const *)arg1)->GetFrontCylinderLoc();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeSinglePin_GetRearCylinderLoc(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeSinglePin *arg1 = (chrono::vehicle::TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeSinglePin const *)arg1)->GetRearCylinderLoc();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeSinglePin_GetCylinderRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeSinglePin *arg1 = (chrono::vehicle::TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeSinglePin const *)arg1)->GetCylinderRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackShoeSinglePin_GetLateralContactPoint(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackShoeSinglePin *arg1 = (chrono::vehicle::TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeSinglePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::TrackShoeSinglePin const *)arg1)->GetLateralContactPoint();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackShoeSinglePin_GetGroundContactGeometry(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackShoeSinglePin *arg1 = (chrono::vehicle::TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeSinglePin const > *smartarg1 = 0 ;
  ChVehicleGeometry result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::TrackShoeSinglePin const *)arg1)->GetGroundContactGeometry();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ChVehicleGeometry(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackShoeDoublePin__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::TrackShoeDoublePin *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::TrackShoeDoublePin *)new chrono::vehicle::TrackShoeDoublePin((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackShoeDoublePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackShoeDoublePin__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::TrackShoeDoublePin *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::TrackShoeDoublePin *)new chrono::vehicle::TrackShoeDoublePin((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackShoeDoublePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TrackShoeDoublePin(void * jarg1) {
  chrono::vehicle::TrackShoeDoublePin *arg1 = (chrono::vehicle::TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeDoublePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrackShoeDoublePin_GetType(void * jarg1) {
  int jresult ;
  chrono::vehicle::TrackShoeDoublePin *arg1 = (chrono::vehicle::TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeDoublePin const > *smartarg1 = 0 ;
  chrono::vehicle::GuidePinType result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::GuidePinType)((chrono::vehicle::TrackShoeDoublePin const *)arg1)->GetType();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeDoublePin_GetHeight(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeDoublePin *arg1 = (chrono::vehicle::TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeDoublePin const *)arg1)->GetHeight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeDoublePin_GetShoeMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeDoublePin *arg1 = (chrono::vehicle::TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeDoublePin const *)arg1)->GetShoeMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackShoeDoublePin_GetShoeInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackShoeDoublePin *arg1 = (chrono::vehicle::TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeDoublePin const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::TrackShoeDoublePin const *)arg1)->GetShoeInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeDoublePin_GetShoeLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeDoublePin *arg1 = (chrono::vehicle::TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeDoublePin const *)arg1)->GetShoeLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeDoublePin_GetShoeWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeDoublePin *arg1 = (chrono::vehicle::TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeDoublePin const *)arg1)->GetShoeWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeDoublePin_GetConnectorMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeDoublePin *arg1 = (chrono::vehicle::TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeDoublePin const *)arg1)->GetConnectorMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackShoeDoublePin_GetConnectorInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackShoeDoublePin *arg1 = (chrono::vehicle::TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeDoublePin const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::TrackShoeDoublePin const *)arg1)->GetConnectorInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeDoublePin_GetConnectorLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeDoublePin *arg1 = (chrono::vehicle::TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeDoublePin const *)arg1)->GetConnectorLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeDoublePin_GetConnectorRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeDoublePin *arg1 = (chrono::vehicle::TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeDoublePin const *)arg1)->GetConnectorRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackShoeDoublePin_GetConnectorWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackShoeDoublePin *arg1 = (chrono::vehicle::TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::TrackShoeDoublePin const *)arg1)->GetConnectorWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackShoeDoublePin_GetLateralContactPoint(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackShoeDoublePin *arg1 = (chrono::vehicle::TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeDoublePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::TrackShoeDoublePin const *)arg1)->GetLateralContactPoint();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackShoeDoublePin_GetGroundContactGeometry(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackShoeDoublePin *arg1 = (chrono::vehicle::TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackShoeDoublePin const > *smartarg1 = 0 ;
  ChVehicleGeometry result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::TrackShoeDoublePin const *)arg1)->GetGroundContactGeometry();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ChVehicleGeometry(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackAssembly(void * jarg1) {
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChTrackAssembly_GetVehicleSide(void * jarg1) {
  int jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  chrono::vehicle::VehicleSide result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::VehicleSide)((chrono::vehicle::ChTrackAssembly const *)arg1)->GetVehicleSide();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChTrackAssembly_GetNumTrackSuspensions(void * jarg1) {
  unsigned long jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssembly const *)arg1)->GetNumTrackSuspensions();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChTrackAssembly_GetNumRollers(void * jarg1) {
  unsigned long jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssembly const *)arg1)->GetNumRollers();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChTrackAssembly_GetNumTrackShoes(void * jarg1) {
  unsigned long jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssembly const *)arg1)->GetNumTrackShoes();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_GetSprocket(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocket > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssembly const *)arg1)->GetSprocket();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChSprocket >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_GetIdler(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChIdler > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssembly const *)arg1)->GetIdler();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChIdler >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_GetIdlerWheel(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackWheel > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssembly const *)arg1)->GetIdlerWheel();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTrackWheel >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_GetBrake(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackBrake > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssembly const *)arg1)->GetBrake();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTrackBrake >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_GetTrackSuspensions(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  chrono::vehicle::ChTrackSuspensionList *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChTrackSuspensionList *) &((chrono::vehicle::ChTrackAssembly const *)arg1)->GetTrackSuspensions();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_GetTrackSuspension(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  size_t arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackSuspension > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssembly const *)arg1)->GetTrackSuspension(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTrackSuspension >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_GetRoller(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  size_t arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackWheel > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssembly const *)arg1)->GetRoller(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTrackWheel >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_GetRoadWheel(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  size_t arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackWheel > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssembly const *)arg1)->GetRoadWheel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTrackWheel >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_GetTrackShoe(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  size_t arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssembly const *)arg1)->GetTrackShoe(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTrackShoe >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_GetTrackShoePos(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  size_t arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::ChTrackAssembly const *)arg1)->GetTrackShoePos(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_GetTrackShoeRot(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  size_t arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  chrono::ChQuaternion< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (chrono::ChQuaternion< > *) &((chrono::vehicle::ChTrackAssembly const *)arg1)->GetTrackShoeRot(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_GetTrackShoeLinVel(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  size_t arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::ChTrackAssembly const *)arg1)->GetTrackShoeLinVel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_GetTrackShoeAngVel(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  size_t arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssembly const *)arg1)->GetTrackShoeAngVel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_GetTrackShoeTension(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  size_t arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssembly const *)arg1)->GetTrackShoeTension(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_GetTrackShoeState(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  size_t arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  chrono::vehicle::BodyState result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssembly const *)arg1)->GetTrackShoeState(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::vehicle::BodyState(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackAssembly_GetTrackShoeStates(void * jarg1, void * jarg2) {
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  chrono::vehicle::BodyStates *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::BodyStates *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::BodyStates & is null", 0);
    return ;
  } 
  {
    try {
      ((chrono::vehicle::ChTrackAssembly const *)arg1)->GetTrackShoeStates(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_GetSprocketLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssembly const *)arg1)->GetSprocketLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_GetIdlerLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssembly const *)arg1)->GetIdlerLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_GetRoadWhelAssemblyLocation(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssembly const *)arg1)->GetRoadWhelAssemblyLocation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_GetRollerLocation(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssembly const *)arg1)->GetRollerLocation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackAssembly_Initialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  bool arg4 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackAssembly_Initialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  chrono::ChVector< > *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  arg3 = (chrono::ChVector< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize(arg2,(chrono::ChVector< > const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTrackAssembly_ReportTrackLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::ChTrackAssembly const *)arg1)->ReportTrackLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssembly_ReportSuspensionForce(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  size_t arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  chrono::vehicle::ChTrackSuspension::ForceTorque result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssembly const *)arg1)->ReportSuspensionForce(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::vehicle::ChTrackSuspension::ForceTorque(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackAssembly_SetSprocketVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSprocketVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackAssembly_SetIdlerVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetIdlerVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackAssembly_SetSuspensionVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSuspensionVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackAssembly_SetIdlerWheelVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetIdlerWheelVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackAssembly_SetRoadWheelVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetRoadWheelVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackAssembly_SetRollerVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetRollerVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackAssembly_SetTrackShoeVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetTrackShoeVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackAssembly_SetWheelCollisionType(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->SetWheelCollisionType(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackAssembly_Synchronize(void * jarg1, double jarg2, double jarg3, void * jarg4) {
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  double arg2 ;
  double arg3 ;
  chrono::vehicle::TerrainForces *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (chrono::vehicle::TerrainForces *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::TerrainForces const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,arg3,(chrono::vehicle::TerrainForces const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackAssembly_SetOutput(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetOutput(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackAssembly_LogConstraintViolations(void * jarg1) {
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogConstraintViolations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChTrackAssembly_IsRoadwheelCylinder(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChTrackAssembly const *)arg1)->IsRoadwheelCylinder();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChTrackAssembly_IsIdlerCylinder(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChTrackAssembly const *)arg1)->IsIdlerCylinder();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChTrackAssembly_IsRolerCylinder(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChTrackAssembly *arg1 = (chrono::vehicle::ChTrackAssembly *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssembly > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssembly *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChTrackAssembly const *)arg1)->IsRolerCylinder();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackAssemblyBand(void * jarg1) {
  chrono::vehicle::ChTrackAssemblyBand *arg1 = (chrono::vehicle::ChTrackAssemblyBand *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblyBand > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssemblyBand > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblyBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssemblyBand_GetSprocket(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackAssemblyBand *arg1 = (chrono::vehicle::ChTrackAssemblyBand *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblyBand const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocket > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssemblyBand > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblyBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssemblyBand const *)arg1)->GetSprocket();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChSprocket >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackAssemblyBandANCF(void * jarg1) {
  chrono::vehicle::ChTrackAssemblyBandANCF *arg1 = (chrono::vehicle::ChTrackAssemblyBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandANCF > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssemblyBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblyBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChTrackAssemblyBandANCF_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChTrackAssemblyBandANCF *arg1 = (chrono::vehicle::ChTrackAssemblyBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandANCF const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssemblyBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblyBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssemblyBandANCF const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackAssemblyBandANCF_SetContactSurfaceType(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackAssemblyBandANCF *arg1 = (chrono::vehicle::ChTrackAssemblyBandANCF *) 0 ;
  chrono::vehicle::ChTrackAssemblyBandANCF::ContactSurfaceType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandANCF > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssemblyBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblyBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::ChTrackAssemblyBandANCF::ContactSurfaceType)jarg2; 
  {
    try {
      (arg1)->SetContactSurfaceType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChTrackAssemblyBandANCF_GetNumTrackShoes(void * jarg1) {
  unsigned long jresult ;
  chrono::vehicle::ChTrackAssemblyBandANCF *arg1 = (chrono::vehicle::ChTrackAssemblyBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandANCF const > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssemblyBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblyBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssemblyBandANCF const *)arg1)->GetNumTrackShoes();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssemblyBandANCF_GetTrackShoe(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackAssemblyBandANCF *arg1 = (chrono::vehicle::ChTrackAssemblyBandANCF *) 0 ;
  size_t arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandANCF const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssemblyBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblyBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssemblyBandANCF const *)arg1)->GetTrackShoe(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTrackShoe >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssemblyBandANCF_GetMesh(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackAssemblyBandANCF *arg1 = (chrono::vehicle::ChTrackAssemblyBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandANCF const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< chrono::fea::ChMesh > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssemblyBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblyBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssemblyBandANCF const *)arg1)->GetMesh();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< chrono::fea::ChMesh >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackAssemblyBandBushing(void * jarg1) {
  chrono::vehicle::ChTrackAssemblyBandBushing *arg1 = (chrono::vehicle::ChTrackAssemblyBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandBushing > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssemblyBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblyBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChTrackAssemblyBandBushing_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChTrackAssemblyBandBushing *arg1 = (chrono::vehicle::ChTrackAssemblyBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandBushing const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssemblyBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblyBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssemblyBandBushing const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChTrackAssemblyBandBushing_GetNumTrackShoes(void * jarg1) {
  unsigned long jresult ;
  chrono::vehicle::ChTrackAssemblyBandBushing *arg1 = (chrono::vehicle::ChTrackAssemblyBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandBushing const > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssemblyBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblyBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssemblyBandBushing const *)arg1)->GetNumTrackShoes();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssemblyBandBushing_GetTrackShoe(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackAssemblyBandBushing *arg1 = (chrono::vehicle::ChTrackAssemblyBandBushing *) 0 ;
  size_t arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandBushing const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssemblyBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblyBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssemblyBandBushing const *)arg1)->GetTrackShoe(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTrackShoe >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackAssemblySegmented(void * jarg1) {
  chrono::vehicle::ChTrackAssemblySegmented *arg1 = (chrono::vehicle::ChTrackAssemblySegmented *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblySegmented > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssemblySegmented > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblySegmented *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackAssemblySegmented_EnableTrackBendingStiffness(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChTrackAssemblySegmented *arg1 = (chrono::vehicle::ChTrackAssemblySegmented *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblySegmented > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssemblySegmented > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblySegmented *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->EnableTrackBendingStiffness(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssemblySegmented_GetTorqueFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackAssemblySegmented *arg1 = (chrono::vehicle::ChTrackAssemblySegmented *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblySegmented const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssemblySegmented > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblySegmented *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssemblySegmented const *)arg1)->GetTorqueFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssemblySegmented_GetBushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackAssemblySegmented *arg1 = (chrono::vehicle::ChTrackAssemblySegmented *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblySegmented const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssemblySegmented > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblySegmented *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssemblySegmented const *)arg1)->GetBushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackAssemblySinglePin(void * jarg1) {
  chrono::vehicle::ChTrackAssemblySinglePin *arg1 = (chrono::vehicle::ChTrackAssemblySinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblySinglePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssemblySinglePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblySinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChTrackAssemblySinglePin_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChTrackAssemblySinglePin *arg1 = (chrono::vehicle::ChTrackAssemblySinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblySinglePin const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssemblySinglePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblySinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssemblySinglePin const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChTrackAssemblySinglePin_GetNumTrackShoes(void * jarg1) {
  unsigned long jresult ;
  chrono::vehicle::ChTrackAssemblySinglePin *arg1 = (chrono::vehicle::ChTrackAssemblySinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblySinglePin const > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssemblySinglePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblySinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssemblySinglePin const *)arg1)->GetNumTrackShoes();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssemblySinglePin_GetSprocket(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackAssemblySinglePin *arg1 = (chrono::vehicle::ChTrackAssemblySinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblySinglePin const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocket > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssemblySinglePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblySinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssemblySinglePin const *)arg1)->GetSprocket();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChSprocket >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssemblySinglePin_GetTrackShoe(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackAssemblySinglePin *arg1 = (chrono::vehicle::ChTrackAssemblySinglePin *) 0 ;
  size_t arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblySinglePin const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssemblySinglePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblySinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssemblySinglePin const *)arg1)->GetTrackShoe(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTrackShoe >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackAssemblyDoublePin(void * jarg1) {
  chrono::vehicle::ChTrackAssemblyDoublePin *arg1 = (chrono::vehicle::ChTrackAssemblyDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblyDoublePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackAssemblyDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblyDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChTrackAssemblyDoublePin_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChTrackAssemblyDoublePin *arg1 = (chrono::vehicle::ChTrackAssemblyDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblyDoublePin const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssemblyDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblyDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssemblyDoublePin const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChTrackAssemblyDoublePin_GetNumTrackShoes(void * jarg1) {
  unsigned long jresult ;
  chrono::vehicle::ChTrackAssemblyDoublePin *arg1 = (chrono::vehicle::ChTrackAssemblyDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblyDoublePin const > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssemblyDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblyDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssemblyDoublePin const *)arg1)->GetNumTrackShoes();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssemblyDoublePin_GetSprocket(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackAssemblyDoublePin *arg1 = (chrono::vehicle::ChTrackAssemblyDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblyDoublePin const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSprocket > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssemblyDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblyDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssemblyDoublePin const *)arg1)->GetSprocket();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChSprocket >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackAssemblyDoublePin_GetTrackShoe(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackAssemblyDoublePin *arg1 = (chrono::vehicle::ChTrackAssemblyDoublePin *) 0 ;
  size_t arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssemblyDoublePin const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackAssemblyDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackAssemblyDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChTrackAssemblyDoublePin const *)arg1)->GetTrackShoe(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTrackShoe >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackAssemblyBandANCF__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::TrackAssemblyBandANCF *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::TrackAssemblyBandANCF *)new chrono::vehicle::TrackAssemblyBandANCF((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackAssemblyBandANCF >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackAssemblyBandANCF__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::TrackAssemblyBandANCF *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::TrackAssemblyBandANCF *)new chrono::vehicle::TrackAssemblyBandANCF((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackAssemblyBandANCF >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TrackAssemblyBandANCF(void * jarg1) {
  chrono::vehicle::TrackAssemblyBandANCF *arg1 = (chrono::vehicle::TrackAssemblyBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblyBandANCF > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TrackAssemblyBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblyBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackAssemblyBandANCF_GetSprocketLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackAssemblyBandANCF *arg1 = (chrono::vehicle::TrackAssemblyBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblyBandANCF const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackAssemblyBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblyBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::TrackAssemblyBandANCF const *)arg1)->GetSprocketLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackAssemblyBandANCF_GetIdlerLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackAssemblyBandANCF *arg1 = (chrono::vehicle::TrackAssemblyBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblyBandANCF const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackAssemblyBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblyBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::TrackAssemblyBandANCF const *)arg1)->GetIdlerLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackAssemblyBandANCF_GetRoadWhelAssemblyLocation(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::TrackAssemblyBandANCF *arg1 = (chrono::vehicle::TrackAssemblyBandANCF *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblyBandANCF const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackAssemblyBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblyBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::TrackAssemblyBandANCF const *)arg1)->GetRoadWhelAssemblyLocation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackAssemblyBandANCF_GetRollerLocation(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::TrackAssemblyBandANCF *arg1 = (chrono::vehicle::TrackAssemblyBandANCF *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblyBandANCF const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackAssemblyBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblyBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::TrackAssemblyBandANCF const *)arg1)->GetRollerLocation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackAssemblyBandBushing__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::TrackAssemblyBandBushing *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::TrackAssemblyBandBushing *)new chrono::vehicle::TrackAssemblyBandBushing((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackAssemblyBandBushing >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackAssemblyBandBushing__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::TrackAssemblyBandBushing *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::TrackAssemblyBandBushing *)new chrono::vehicle::TrackAssemblyBandBushing((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackAssemblyBandBushing >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TrackAssemblyBandBushing(void * jarg1) {
  chrono::vehicle::TrackAssemblyBandBushing *arg1 = (chrono::vehicle::TrackAssemblyBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblyBandBushing > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TrackAssemblyBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblyBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackAssemblyBandBushing_GetSprocketLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackAssemblyBandBushing *arg1 = (chrono::vehicle::TrackAssemblyBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblyBandBushing const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackAssemblyBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblyBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::TrackAssemblyBandBushing const *)arg1)->GetSprocketLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackAssemblyBandBushing_GetIdlerLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackAssemblyBandBushing *arg1 = (chrono::vehicle::TrackAssemblyBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblyBandBushing const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackAssemblyBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblyBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::TrackAssemblyBandBushing const *)arg1)->GetIdlerLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackAssemblyBandBushing_GetRoadWhelAssemblyLocation(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::TrackAssemblyBandBushing *arg1 = (chrono::vehicle::TrackAssemblyBandBushing *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblyBandBushing const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackAssemblyBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblyBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::TrackAssemblyBandBushing const *)arg1)->GetRoadWhelAssemblyLocation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackAssemblyBandBushing_GetRollerLocation(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::TrackAssemblyBandBushing *arg1 = (chrono::vehicle::TrackAssemblyBandBushing *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblyBandBushing const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackAssemblyBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblyBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::TrackAssemblyBandBushing const *)arg1)->GetRollerLocation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackAssemblySinglePin__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::TrackAssemblySinglePin *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::TrackAssemblySinglePin *)new chrono::vehicle::TrackAssemblySinglePin((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackAssemblySinglePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackAssemblySinglePin__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::TrackAssemblySinglePin *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::TrackAssemblySinglePin *)new chrono::vehicle::TrackAssemblySinglePin((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackAssemblySinglePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TrackAssemblySinglePin(void * jarg1) {
  chrono::vehicle::TrackAssemblySinglePin *arg1 = (chrono::vehicle::TrackAssemblySinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblySinglePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TrackAssemblySinglePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblySinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackAssemblySinglePin_GetSprocketLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackAssemblySinglePin *arg1 = (chrono::vehicle::TrackAssemblySinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblySinglePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackAssemblySinglePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblySinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::TrackAssemblySinglePin const *)arg1)->GetSprocketLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackAssemblySinglePin_GetIdlerLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackAssemblySinglePin *arg1 = (chrono::vehicle::TrackAssemblySinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblySinglePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackAssemblySinglePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblySinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::TrackAssemblySinglePin const *)arg1)->GetIdlerLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackAssemblySinglePin_GetRoadWhelAssemblyLocation(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::TrackAssemblySinglePin *arg1 = (chrono::vehicle::TrackAssemblySinglePin *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblySinglePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackAssemblySinglePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblySinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::TrackAssemblySinglePin const *)arg1)->GetRoadWhelAssemblyLocation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackAssemblySinglePin_GetRollerLocation(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::TrackAssemblySinglePin *arg1 = (chrono::vehicle::TrackAssemblySinglePin *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblySinglePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackAssemblySinglePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblySinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::TrackAssemblySinglePin const *)arg1)->GetRollerLocation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackAssemblyDoublePin__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::TrackAssemblyDoublePin *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::TrackAssemblyDoublePin *)new chrono::vehicle::TrackAssemblyDoublePin((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackAssemblyDoublePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackAssemblyDoublePin__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::TrackAssemblyDoublePin *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::TrackAssemblyDoublePin *)new chrono::vehicle::TrackAssemblyDoublePin((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackAssemblyDoublePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TrackAssemblyDoublePin(void * jarg1) {
  chrono::vehicle::TrackAssemblyDoublePin *arg1 = (chrono::vehicle::TrackAssemblyDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblyDoublePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TrackAssemblyDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblyDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackAssemblyDoublePin_GetSprocketLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackAssemblyDoublePin *arg1 = (chrono::vehicle::TrackAssemblyDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblyDoublePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackAssemblyDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblyDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::TrackAssemblyDoublePin const *)arg1)->GetSprocketLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackAssemblyDoublePin_GetIdlerLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::TrackAssemblyDoublePin *arg1 = (chrono::vehicle::TrackAssemblyDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblyDoublePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackAssemblyDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblyDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::TrackAssemblyDoublePin const *)arg1)->GetIdlerLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackAssemblyDoublePin_GetRoadWhelAssemblyLocation(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::TrackAssemblyDoublePin *arg1 = (chrono::vehicle::TrackAssemblyDoublePin *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblyDoublePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackAssemblyDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblyDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::TrackAssemblyDoublePin const *)arg1)->GetRoadWhelAssemblyLocation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrackAssemblyDoublePin_GetRollerLocation(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::TrackAssemblyDoublePin *arg1 = (chrono::vehicle::TrackAssemblyDoublePin *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::TrackAssemblyDoublePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::TrackAssemblyDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::TrackAssemblyDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::TrackAssemblyDoublePin const *)arg1)->GetRollerLocation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_SprocketBand(void * jarg1) {
  chrono::vehicle::m113::M113_SprocketBand *arg1 = (chrono::vehicle::m113::M113_SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketBand > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_M113_SprocketBand_GetNumTeeth(void * jarg1) {
  int jresult ;
  chrono::vehicle::m113::M113_SprocketBand *arg1 = (chrono::vehicle::m113::M113_SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketBand const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::m113::M113_SprocketBand const *)arg1)->GetNumTeeth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketBand_GetAssemblyRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketBand *arg1 = (chrono::vehicle::m113::M113_SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketBand const *)arg1)->GetAssemblyRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketBand_GetAddendumRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketBand *arg1 = (chrono::vehicle::m113::M113_SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketBand const *)arg1)->GetAddendumRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketBand_GetGearMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketBand *arg1 = (chrono::vehicle::m113::M113_SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketBand const *)arg1)->GetGearMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_SprocketBand_GetGearInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_SprocketBand *arg1 = (chrono::vehicle::m113::M113_SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketBand > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &(arg1)->GetGearInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketBand_GetAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketBand *arg1 = (chrono::vehicle::m113::M113_SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketBand const *)arg1)->GetAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketBand_GetSeparation(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketBand *arg1 = (chrono::vehicle::m113::M113_SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketBand const *)arg1)->GetSeparation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketBand_GetOuterRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketBand *arg1 = (chrono::vehicle::m113::M113_SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketBand const *)arg1)->GetOuterRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketBand_GetBaseWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketBand *arg1 = (chrono::vehicle::m113::M113_SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketBand const *)arg1)->GetBaseWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketBand_GetTipWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketBand *arg1 = (chrono::vehicle::m113::M113_SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketBand const *)arg1)->GetTipWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketBand_GetToothDepth(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketBand *arg1 = (chrono::vehicle::m113::M113_SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketBand const *)arg1)->GetToothDepth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketBand_GetArcRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketBand *arg1 = (chrono::vehicle::m113::M113_SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketBand const *)arg1)->GetArcRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketBand_GetLateralBacklash(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketBand *arg1 = (chrono::vehicle::m113::M113_SprocketBand *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketBand const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketBand > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketBand *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketBand const *)arg1)->GetLateralBacklash();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_SprocketBandLeft() {
  void * jresult ;
  chrono::vehicle::m113::M113_SprocketBandLeft *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::m113::M113_SprocketBandLeft *)new chrono::vehicle::m113::M113_SprocketBandLeft();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_SprocketBandLeft >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_SprocketBandLeft(void * jarg1) {
  chrono::vehicle::m113::M113_SprocketBandLeft *arg1 = (chrono::vehicle::m113::M113_SprocketBandLeft *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketBandLeft > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_SprocketBandLeft > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketBandLeft *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_M113_SprocketBandLeft_GetMeshFile(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::m113::M113_SprocketBandLeft *arg1 = (chrono::vehicle::m113::M113_SprocketBandLeft *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketBandLeft const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketBandLeft > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketBandLeft *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_SprocketBandLeft const *)arg1)->GetMeshFile();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_SprocketBandRight() {
  void * jresult ;
  chrono::vehicle::m113::M113_SprocketBandRight *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::m113::M113_SprocketBandRight *)new chrono::vehicle::m113::M113_SprocketBandRight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_SprocketBandRight >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_SprocketBandRight(void * jarg1) {
  chrono::vehicle::m113::M113_SprocketBandRight *arg1 = (chrono::vehicle::m113::M113_SprocketBandRight *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketBandRight > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_SprocketBandRight > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketBandRight *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_M113_SprocketBandRight_GetMeshFile(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::m113::M113_SprocketBandRight *arg1 = (chrono::vehicle::m113::M113_SprocketBandRight *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketBandRight const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketBandRight > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketBandRight *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_SprocketBandRight const *)arg1)->GetMeshFile();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_SprocketSinglePin(void * jarg1) {
  chrono::vehicle::m113::M113_SprocketSinglePin *arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_M113_SprocketSinglePin_GetNumTeeth(void * jarg1) {
  int jresult ;
  chrono::vehicle::m113::M113_SprocketSinglePin *arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePin const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::m113::M113_SprocketSinglePin const *)arg1)->GetNumTeeth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketSinglePin_GetAssemblyRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketSinglePin *arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketSinglePin const *)arg1)->GetAssemblyRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketSinglePin_GetAddendumRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketSinglePin *arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketSinglePin const *)arg1)->GetAddendumRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketSinglePin_GetGearMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketSinglePin *arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketSinglePin const *)arg1)->GetGearMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_SprocketSinglePin_GetGearInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_SprocketSinglePin *arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePin > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &(arg1)->GetGearInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketSinglePin_GetAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketSinglePin *arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketSinglePin const *)arg1)->GetAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketSinglePin_GetSeparation(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketSinglePin *arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketSinglePin const *)arg1)->GetSeparation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketSinglePin_GetOuterRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketSinglePin *arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketSinglePin const *)arg1)->GetOuterRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketSinglePin_GetArcRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketSinglePin *arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketSinglePin const *)arg1)->GetArcRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketSinglePin_GetArcCentersRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketSinglePin *arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketSinglePin const *)arg1)->GetArcCentersRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketSinglePin_GetLateralBacklash(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketSinglePin *arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketSinglePin const *)arg1)->GetLateralBacklash();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_SprocketSinglePinLeft() {
  void * jresult ;
  chrono::vehicle::m113::M113_SprocketSinglePinLeft *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::m113::M113_SprocketSinglePinLeft *)new chrono::vehicle::m113::M113_SprocketSinglePinLeft();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_SprocketSinglePinLeft >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_SprocketSinglePinLeft(void * jarg1) {
  chrono::vehicle::m113::M113_SprocketSinglePinLeft *arg1 = (chrono::vehicle::m113::M113_SprocketSinglePinLeft *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePinLeft > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_SprocketSinglePinLeft > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketSinglePinLeft *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_M113_SprocketSinglePinLeft_GetMeshFile(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::m113::M113_SprocketSinglePinLeft *arg1 = (chrono::vehicle::m113::M113_SprocketSinglePinLeft *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePinLeft const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketSinglePinLeft > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketSinglePinLeft *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_SprocketSinglePinLeft const *)arg1)->GetMeshFile();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_SprocketSinglePinRight() {
  void * jresult ;
  chrono::vehicle::m113::M113_SprocketSinglePinRight *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::m113::M113_SprocketSinglePinRight *)new chrono::vehicle::m113::M113_SprocketSinglePinRight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_SprocketSinglePinRight >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_SprocketSinglePinRight(void * jarg1) {
  chrono::vehicle::m113::M113_SprocketSinglePinRight *arg1 = (chrono::vehicle::m113::M113_SprocketSinglePinRight *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePinRight > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_SprocketSinglePinRight > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketSinglePinRight *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_M113_SprocketSinglePinRight_GetMeshFile(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::m113::M113_SprocketSinglePinRight *arg1 = (chrono::vehicle::m113::M113_SprocketSinglePinRight *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePinRight const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketSinglePinRight > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketSinglePinRight *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_SprocketSinglePinRight const *)arg1)->GetMeshFile();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_SprocketDoublePin(void * jarg1) {
  chrono::vehicle::m113::M113_SprocketDoublePin *arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_M113_SprocketDoublePin_GetNumTeeth(void * jarg1) {
  int jresult ;
  chrono::vehicle::m113::M113_SprocketDoublePin *arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePin const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::m113::M113_SprocketDoublePin const *)arg1)->GetNumTeeth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketDoublePin_GetAssemblyRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketDoublePin *arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketDoublePin const *)arg1)->GetAssemblyRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketDoublePin_GetAddendumRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketDoublePin *arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketDoublePin const *)arg1)->GetAddendumRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketDoublePin_GetGearMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketDoublePin *arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketDoublePin const *)arg1)->GetGearMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_SprocketDoublePin_GetGearInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_SprocketDoublePin *arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePin > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &(arg1)->GetGearInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketDoublePin_GetAxleInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketDoublePin *arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketDoublePin const *)arg1)->GetAxleInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketDoublePin_GetSeparation(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketDoublePin *arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketDoublePin const *)arg1)->GetSeparation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketDoublePin_GetOuterRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketDoublePin *arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketDoublePin const *)arg1)->GetOuterRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketDoublePin_GetArcRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketDoublePin *arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketDoublePin const *)arg1)->GetArcRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketDoublePin_GetArcCenterHeight(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketDoublePin *arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketDoublePin const *)arg1)->GetArcCenterHeight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketDoublePin_GetArcCenterOffset(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketDoublePin *arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketDoublePin const *)arg1)->GetArcCenterOffset();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_SprocketDoublePin_GetLateralBacklash(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_SprocketDoublePin *arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_SprocketDoublePin const *)arg1)->GetLateralBacklash();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_SprocketDoublePinLeft() {
  void * jresult ;
  chrono::vehicle::m113::M113_SprocketDoublePinLeft *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::m113::M113_SprocketDoublePinLeft *)new chrono::vehicle::m113::M113_SprocketDoublePinLeft();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_SprocketDoublePinLeft >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_SprocketDoublePinLeft(void * jarg1) {
  chrono::vehicle::m113::M113_SprocketDoublePinLeft *arg1 = (chrono::vehicle::m113::M113_SprocketDoublePinLeft *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePinLeft > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_SprocketDoublePinLeft > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketDoublePinLeft *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_M113_SprocketDoublePinLeft_GetMeshFile(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::m113::M113_SprocketDoublePinLeft *arg1 = (chrono::vehicle::m113::M113_SprocketDoublePinLeft *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePinLeft const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketDoublePinLeft > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketDoublePinLeft *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_SprocketDoublePinLeft const *)arg1)->GetMeshFile();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_SprocketDoublePinRight() {
  void * jresult ;
  chrono::vehicle::m113::M113_SprocketDoublePinRight *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::m113::M113_SprocketDoublePinRight *)new chrono::vehicle::m113::M113_SprocketDoublePinRight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_SprocketDoublePinRight >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_SprocketDoublePinRight(void * jarg1) {
  chrono::vehicle::m113::M113_SprocketDoublePinRight *arg1 = (chrono::vehicle::m113::M113_SprocketDoublePinRight *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePinRight > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_SprocketDoublePinRight > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketDoublePinRight *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_M113_SprocketDoublePinRight_GetMeshFile(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::m113::M113_SprocketDoublePinRight *arg1 = (chrono::vehicle::m113::M113_SprocketDoublePinRight *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePinRight const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_SprocketDoublePinRight > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_SprocketDoublePinRight *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_SprocketDoublePinRight const *)arg1)->GetMeshFile();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Idler(const char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  chrono::vehicle::m113::M113_Idler *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Idler *)new chrono::vehicle::m113::M113_Idler((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Idler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_Idler(void * jarg1) {
  chrono::vehicle::m113::M113_Idler *arg1 = (chrono::vehicle::m113::M113_Idler *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Idler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_Idler > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Idler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_Idler_GetCarrierMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_Idler *arg1 = (chrono::vehicle::m113::M113_Idler *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Idler const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_Idler > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Idler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_Idler const *)arg1)->GetCarrierMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_Idler_GetCarrierInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_Idler *arg1 = (chrono::vehicle::m113::M113_Idler *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Idler > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_Idler > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Idler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &(arg1)->GetCarrierInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_Idler_GetCarrierVisRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_Idler *arg1 = (chrono::vehicle::m113::M113_Idler *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Idler const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_Idler > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Idler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_Idler const *)arg1)->GetCarrierVisRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_Idler_GetPrismaticPitchAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_Idler *arg1 = (chrono::vehicle::m113::M113_Idler *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Idler const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_Idler > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Idler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_Idler const *)arg1)->GetPrismaticPitchAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_Idler_GetTensionerForceCallback(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_Idler *arg1 = (chrono::vehicle::m113::M113_Idler *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Idler const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_Idler > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Idler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_Idler const *)arg1)->GetTensionerForceCallback();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_Idler_GetTensionerFreeLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_Idler *arg1 = (chrono::vehicle::m113::M113_Idler *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Idler const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_Idler > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Idler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_Idler const *)arg1)->GetTensionerFreeLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_RoadWheel(void * jarg1) {
  chrono::vehicle::m113::M113_RoadWheel *arg1 = (chrono::vehicle::m113::M113_RoadWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_RoadWheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_RoadWheel > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_RoadWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_RoadWheel_GetMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_RoadWheel *arg1 = (chrono::vehicle::m113::M113_RoadWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_RoadWheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_RoadWheel > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_RoadWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_RoadWheel const *)arg1)->GetMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_RoadWheel_GetInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_RoadWheel *arg1 = (chrono::vehicle::m113::M113_RoadWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_RoadWheel > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_RoadWheel > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_RoadWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &(arg1)->GetInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_RoadWheel_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_RoadWheel *arg1 = (chrono::vehicle::m113::M113_RoadWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_RoadWheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_RoadWheel > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_RoadWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_RoadWheel const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_RoadWheel_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_RoadWheel *arg1 = (chrono::vehicle::m113::M113_RoadWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_RoadWheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_RoadWheel > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_RoadWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_RoadWheel const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_RoadWheel_GetGap(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_RoadWheel *arg1 = (chrono::vehicle::m113::M113_RoadWheel *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_RoadWheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_RoadWheel > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_RoadWheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_RoadWheel const *)arg1)->GetGap();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_RoadWheelLeft(int jarg1) {
  void * jresult ;
  int arg1 ;
  chrono::vehicle::m113::M113_RoadWheelLeft *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      result = (chrono::vehicle::m113::M113_RoadWheelLeft *)new chrono::vehicle::m113::M113_RoadWheelLeft(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_RoadWheelLeft >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_RoadWheelLeft(void * jarg1) {
  chrono::vehicle::m113::M113_RoadWheelLeft *arg1 = (chrono::vehicle::m113::M113_RoadWheelLeft *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_RoadWheelLeft > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_RoadWheelLeft > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_RoadWheelLeft *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_M113_RoadWheelLeft_GetVehicleSide(void * jarg1) {
  int jresult ;
  chrono::vehicle::m113::M113_RoadWheelLeft *arg1 = (chrono::vehicle::m113::M113_RoadWheelLeft *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_RoadWheelLeft const > *smartarg1 = 0 ;
  chrono::vehicle::VehicleSide result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_RoadWheelLeft > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_RoadWheelLeft *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::VehicleSide)((chrono::vehicle::m113::M113_RoadWheelLeft const *)arg1)->GetVehicleSide();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_M113_RoadWheelLeft_GetMeshFile(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::m113::M113_RoadWheelLeft *arg1 = (chrono::vehicle::m113::M113_RoadWheelLeft *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_RoadWheelLeft const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_RoadWheelLeft > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_RoadWheelLeft *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_RoadWheelLeft const *)arg1)->GetMeshFile();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_RoadWheelRight(int jarg1) {
  void * jresult ;
  int arg1 ;
  chrono::vehicle::m113::M113_RoadWheelRight *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      result = (chrono::vehicle::m113::M113_RoadWheelRight *)new chrono::vehicle::m113::M113_RoadWheelRight(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_RoadWheelRight >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_RoadWheelRight(void * jarg1) {
  chrono::vehicle::m113::M113_RoadWheelRight *arg1 = (chrono::vehicle::m113::M113_RoadWheelRight *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_RoadWheelRight > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_RoadWheelRight > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_RoadWheelRight *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_M113_RoadWheelRight_GetVehicleSide(void * jarg1) {
  int jresult ;
  chrono::vehicle::m113::M113_RoadWheelRight *arg1 = (chrono::vehicle::m113::M113_RoadWheelRight *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_RoadWheelRight const > *smartarg1 = 0 ;
  chrono::vehicle::VehicleSide result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_RoadWheelRight > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_RoadWheelRight *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::VehicleSide)((chrono::vehicle::m113::M113_RoadWheelRight const *)arg1)->GetVehicleSide();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_M113_RoadWheelRight_GetMeshFile(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::m113::M113_RoadWheelRight *arg1 = (chrono::vehicle::m113::M113_RoadWheelRight *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_RoadWheelRight const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_RoadWheelRight > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_RoadWheelRight *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_RoadWheelRight const *)arg1)->GetMeshFile();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Suspension(const char * jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  chrono::vehicle::m113::M113_Suspension *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Suspension *)new chrono::vehicle::m113::M113_Suspension((std::string const &)*arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Suspension >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_Suspension(void * jarg1) {
  chrono::vehicle::m113::M113_Suspension *arg1 = (chrono::vehicle::m113::M113_Suspension *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Suspension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_Suspension > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Suspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_Suspension_GetArmMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_Suspension *arg1 = (chrono::vehicle::m113::M113_Suspension *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Suspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_Suspension > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Suspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_Suspension const *)arg1)->GetArmMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_Suspension_GetArmInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_Suspension *arg1 = (chrono::vehicle::m113::M113_Suspension *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Suspension const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_Suspension > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Suspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::m113::M113_Suspension const *)arg1)->GetArmInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_Suspension_GetArmVisRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_Suspension *arg1 = (chrono::vehicle::m113::M113_Suspension *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Suspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_Suspension > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Suspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_Suspension const *)arg1)->GetArmVisRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_Suspension_getArmBushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_Suspension *arg1 = (chrono::vehicle::m113::M113_Suspension *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Suspension const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_Suspension > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Suspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_Suspension const *)arg1)->getArmBushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_Suspension_GetSpringRestAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_Suspension *arg1 = (chrono::vehicle::m113::M113_Suspension *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Suspension const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_Suspension > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Suspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_Suspension const *)arg1)->GetSpringRestAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_Suspension_GetSpringTorqueFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_Suspension *arg1 = (chrono::vehicle::m113::M113_Suspension *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Suspension const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_Suspension > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Suspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_Suspension const *)arg1)->GetSpringTorqueFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_Suspension_GetShockForceFunctor(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_Suspension *arg1 = (chrono::vehicle::m113::M113_Suspension *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Suspension const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_Suspension > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Suspension *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_Suspension const *)arg1)->GetShockForceFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_TrackShoeBandANCF__SWIG_0(const char * jarg1, int jarg2, unsigned int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::ChTrackShoeBandANCF::ElementType arg2 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (chrono::vehicle::ChTrackShoeBandANCF::ElementType)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)new chrono::vehicle::m113::M113_TrackShoeBandANCF((std::string const &)*arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_TrackShoeBandANCF >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_TrackShoeBandANCF__SWIG_1(const char * jarg1, int jarg2, unsigned int jarg3, int jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::ChTrackShoeBandANCF::ElementType arg2 ;
  bool arg3 ;
  int arg4 ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (chrono::vehicle::ChTrackShoeBandANCF::ElementType)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)new chrono::vehicle::m113::M113_TrackShoeBandANCF((std::string const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_TrackShoeBandANCF >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_TrackShoeBandANCF__SWIG_2(const char * jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::ChTrackShoeBandANCF::ElementType arg2 ;
  bool arg3 ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (chrono::vehicle::ChTrackShoeBandANCF::ElementType)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)new chrono::vehicle::m113::M113_TrackShoeBandANCF((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_TrackShoeBandANCF >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_TrackShoeBandANCF(void * jarg1) {
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetType(void * jarg1) {
  int jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  chrono::vehicle::GuidePinType result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::GuidePinType)((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetType();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetHeight(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetHeight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetTreadMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetTreadMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetWebMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetWebMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetTreadInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetTreadInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetWebInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetWebInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetGuideBoxDimensions(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetGuideBoxDimensions();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetGuideBoxOffsetX(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetGuideBoxOffsetX();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetBeltWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetBeltWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetToothTipLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetToothTipLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetToothBaseLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetToothBaseLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetToothWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetToothWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetToothHeight(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetToothHeight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetToothArcRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetToothArcRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetWebLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetWebLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetWebThickness(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetWebThickness();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetNumElementsLength(void * jarg1) {
  int jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetNumElementsLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetNumElementsWidth(void * jarg1) {
  int jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetNumElementsWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetSteelLayerThickness(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetSteelLayerThickness();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetTreadLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetTreadLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetTreadThickness(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetTreadThickness();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_GetTreadVisualizationMeshName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::string *) &((chrono::vehicle::m113::M113_TrackShoeBandANCF const *)arg1)->GetTreadVisualizationMeshName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_TrackShoeBandBushing(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)new chrono::vehicle::m113::M113_TrackShoeBandBushing((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_TrackShoeBandBushing >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_TrackShoeBandBushing(void * jarg1) {
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetType(void * jarg1) {
  int jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  chrono::vehicle::GuidePinType result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::GuidePinType)((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetType();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetHeight(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetHeight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetTreadMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetTreadMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetWebMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetWebMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetTreadInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetTreadInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetWebInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetWebInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetGuideBoxDimensions(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetGuideBoxDimensions();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetGuideBoxOffsetX(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetGuideBoxOffsetX();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetBeltWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetBeltWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetToothTipLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetToothTipLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetToothBaseLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetToothBaseLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetToothWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetToothWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetToothHeight(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetToothHeight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetToothArcRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetToothArcRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetNumWebSegments(void * jarg1) {
  int jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetNumWebSegments();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetWebLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetWebLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetWebThickness(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetWebThickness();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetTreadLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetTreadLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetTreadThickness(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetTreadThickness();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetBushingData(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetBushingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_GetTreadVisualizationMeshName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::m113::M113_TrackShoeBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::string *) &((chrono::vehicle::m113::M113_TrackShoeBandBushing const *)arg1)->GetTreadVisualizationMeshName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_TrackShoeSinglePin(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::m113::M113_TrackShoeSinglePin *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::m113::M113_TrackShoeSinglePin *)new chrono::vehicle::m113::M113_TrackShoeSinglePin((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_TrackShoeSinglePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_TrackShoeSinglePin(void * jarg1) {
  chrono::vehicle::m113::M113_TrackShoeSinglePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeSinglePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_M113_TrackShoeSinglePin_GetType(void * jarg1) {
  int jresult ;
  chrono::vehicle::m113::M113_TrackShoeSinglePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeSinglePin const > *smartarg1 = 0 ;
  chrono::vehicle::GuidePinType result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::GuidePinType)((chrono::vehicle::m113::M113_TrackShoeSinglePin const *)arg1)->GetType();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeSinglePin_GetHeight(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeSinglePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeSinglePin const *)arg1)->GetHeight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeSinglePin_GetPitch(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeSinglePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeSinglePin const *)arg1)->GetPitch();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeSinglePin_GetShoeMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeSinglePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeSinglePin const *)arg1)->GetShoeMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackShoeSinglePin_GetShoeInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackShoeSinglePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeSinglePin const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::m113::M113_TrackShoeSinglePin const *)arg1)->GetShoeInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeSinglePin_GetFrontCylinderLoc(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeSinglePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeSinglePin const *)arg1)->GetFrontCylinderLoc();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeSinglePin_GetRearCylinderLoc(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeSinglePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeSinglePin const *)arg1)->GetRearCylinderLoc();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeSinglePin_GetCylinderRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeSinglePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeSinglePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeSinglePin const *)arg1)->GetCylinderRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackShoeSinglePin_GetLateralContactPoint(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackShoeSinglePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeSinglePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_TrackShoeSinglePin const *)arg1)->GetLateralContactPoint();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackShoeSinglePin_GetGroundContactGeometry(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackShoeSinglePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeSinglePin const > *smartarg1 = 0 ;
  ChVehicleGeometry result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeSinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeSinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_TrackShoeSinglePin const *)arg1)->GetGroundContactGeometry();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ChVehicleGeometry(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_TrackShoeDoublePin(const char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::DoublePinTrackShoeType arg2 ;
  chrono::vehicle::m113::M113_TrackShoeDoublePin *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (chrono::vehicle::DoublePinTrackShoeType)jarg2; 
  {
    try {
      result = (chrono::vehicle::m113::M113_TrackShoeDoublePin *)new chrono::vehicle::m113::M113_TrackShoeDoublePin((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_TrackShoeDoublePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_TrackShoeDoublePin(void * jarg1) {
  chrono::vehicle::m113::M113_TrackShoeDoublePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeDoublePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_M113_TrackShoeDoublePin_GetType(void * jarg1) {
  int jresult ;
  chrono::vehicle::m113::M113_TrackShoeDoublePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeDoublePin const > *smartarg1 = 0 ;
  chrono::vehicle::GuidePinType result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::GuidePinType)((chrono::vehicle::m113::M113_TrackShoeDoublePin const *)arg1)->GetType();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeDoublePin_GetHeight(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeDoublePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeDoublePin const *)arg1)->GetHeight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeDoublePin_GetShoeMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeDoublePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeDoublePin const *)arg1)->GetShoeMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackShoeDoublePin_GetShoeInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackShoeDoublePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeDoublePin const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::m113::M113_TrackShoeDoublePin const *)arg1)->GetShoeInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeDoublePin_GetShoeLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeDoublePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeDoublePin const *)arg1)->GetShoeLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeDoublePin_GetShoeWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeDoublePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeDoublePin const *)arg1)->GetShoeWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackShoeDoublePin_GetLateralContactPoint(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackShoeDoublePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeDoublePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_TrackShoeDoublePin const *)arg1)->GetLateralContactPoint();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeDoublePin_GetConnectorMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeDoublePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeDoublePin const *)arg1)->GetConnectorMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackShoeDoublePin_GetConnectorInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackShoeDoublePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeDoublePin const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::m113::M113_TrackShoeDoublePin const *)arg1)->GetConnectorInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeDoublePin_GetConnectorLength(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeDoublePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeDoublePin const *)arg1)->GetConnectorLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeDoublePin_GetConnectorRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeDoublePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeDoublePin const *)arg1)->GetConnectorRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_TrackShoeDoublePin_GetConnectorWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_TrackShoeDoublePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeDoublePin const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::m113::M113_TrackShoeDoublePin const *)arg1)->GetConnectorWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackShoeDoublePin_GetGroundContactGeometry(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackShoeDoublePin *arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeDoublePin const > *smartarg1 = 0 ;
  ChVehicleGeometry result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackShoeDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackShoeDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_TrackShoeDoublePin const *)arg1)->GetGroundContactGeometry();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ChVehicleGeometry(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_TrackAssemblyBandANCF(int jarg1, int jarg2, int jarg3, unsigned int jarg4, int jarg5, int jarg6, unsigned int jarg7) {
  void * jresult ;
  chrono::vehicle::VehicleSide arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::vehicle::ChTrackShoeBandANCF::ElementType arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  bool arg7 ;
  chrono::vehicle::m113::M113_TrackAssemblyBandANCF *result = 0 ;
  
  arg1 = (chrono::vehicle::VehicleSide)jarg1; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::vehicle::ChTrackShoeBandANCF::ElementType)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = (chrono::vehicle::m113::M113_TrackAssemblyBandANCF *)new chrono::vehicle::m113::M113_TrackAssemblyBandANCF(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_TrackAssemblyBandANCF >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackAssemblyBandANCF_GetSprocketLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackAssemblyBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackAssemblyBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblyBandANCF const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackAssemblyBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackAssemblyBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_TrackAssemblyBandANCF const *)arg1)->GetSprocketLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackAssemblyBandANCF_GetIdlerLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackAssemblyBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackAssemblyBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblyBandANCF const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackAssemblyBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackAssemblyBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_TrackAssemblyBandANCF const *)arg1)->GetIdlerLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackAssemblyBandANCF_GetRoadWhelAssemblyLocation(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackAssemblyBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackAssemblyBandANCF *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblyBandANCF const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackAssemblyBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackAssemblyBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::m113::M113_TrackAssemblyBandANCF const *)arg1)->GetRoadWhelAssemblyLocation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_TrackAssemblyBandANCF(void * jarg1) {
  chrono::vehicle::m113::M113_TrackAssemblyBandANCF *arg1 = (chrono::vehicle::m113::M113_TrackAssemblyBandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblyBandANCF > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_TrackAssemblyBandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackAssemblyBandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_TrackAssemblyBandBushing(int jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  chrono::vehicle::VehicleSide arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  bool arg3 ;
  chrono::vehicle::m113::M113_TrackAssemblyBandBushing *result = 0 ;
  
  arg1 = (chrono::vehicle::VehicleSide)jarg1; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (chrono::vehicle::m113::M113_TrackAssemblyBandBushing *)new chrono::vehicle::m113::M113_TrackAssemblyBandBushing(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_TrackAssemblyBandBushing >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackAssemblyBandBushing_GetSprocketLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackAssemblyBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackAssemblyBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblyBandBushing const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackAssemblyBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackAssemblyBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_TrackAssemblyBandBushing const *)arg1)->GetSprocketLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackAssemblyBandBushing_GetIdlerLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackAssemblyBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackAssemblyBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblyBandBushing const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackAssemblyBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackAssemblyBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_TrackAssemblyBandBushing const *)arg1)->GetIdlerLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackAssemblyBandBushing_GetRoadWhelAssemblyLocation(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackAssemblyBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackAssemblyBandBushing *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblyBandBushing const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackAssemblyBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackAssemblyBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::m113::M113_TrackAssemblyBandBushing const *)arg1)->GetRoadWhelAssemblyLocation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_TrackAssemblyBandBushing(void * jarg1) {
  chrono::vehicle::m113::M113_TrackAssemblyBandBushing *arg1 = (chrono::vehicle::m113::M113_TrackAssemblyBandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblyBandBushing > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_TrackAssemblyBandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackAssemblyBandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_TrackAssemblySinglePin(int jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  chrono::vehicle::VehicleSide arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  chrono::vehicle::m113::M113_TrackAssemblySinglePin *result = 0 ;
  
  arg1 = (chrono::vehicle::VehicleSide)jarg1; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (chrono::vehicle::m113::M113_TrackAssemblySinglePin *)new chrono::vehicle::m113::M113_TrackAssemblySinglePin(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_TrackAssemblySinglePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackAssemblySinglePin_GetSprocketLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackAssemblySinglePin *arg1 = (chrono::vehicle::m113::M113_TrackAssemblySinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblySinglePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackAssemblySinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackAssemblySinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_TrackAssemblySinglePin const *)arg1)->GetSprocketLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackAssemblySinglePin_GetIdlerLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackAssemblySinglePin *arg1 = (chrono::vehicle::m113::M113_TrackAssemblySinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblySinglePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackAssemblySinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackAssemblySinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_TrackAssemblySinglePin const *)arg1)->GetIdlerLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackAssemblySinglePin_GetRoadWhelAssemblyLocation(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackAssemblySinglePin *arg1 = (chrono::vehicle::m113::M113_TrackAssemblySinglePin *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblySinglePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackAssemblySinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackAssemblySinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::m113::M113_TrackAssemblySinglePin const *)arg1)->GetRoadWhelAssemblyLocation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_TrackAssemblySinglePin(void * jarg1) {
  chrono::vehicle::m113::M113_TrackAssemblySinglePin *arg1 = (chrono::vehicle::m113::M113_TrackAssemblySinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblySinglePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_TrackAssemblySinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackAssemblySinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_TrackAssemblyDoublePin(int jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  void * jresult ;
  chrono::vehicle::VehicleSide arg1 ;
  chrono::vehicle::DoublePinTrackShoeType arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  chrono::vehicle::m113::M113_TrackAssemblyDoublePin *result = 0 ;
  
  arg1 = (chrono::vehicle::VehicleSide)jarg1; 
  arg2 = (chrono::vehicle::DoublePinTrackShoeType)jarg2; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  {
    try {
      result = (chrono::vehicle::m113::M113_TrackAssemblyDoublePin *)new chrono::vehicle::m113::M113_TrackAssemblyDoublePin(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_TrackAssemblyDoublePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackAssemblyDoublePin_GetSprocketLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackAssemblyDoublePin *arg1 = (chrono::vehicle::m113::M113_TrackAssemblyDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblyDoublePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackAssemblyDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackAssemblyDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_TrackAssemblyDoublePin const *)arg1)->GetSprocketLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackAssemblyDoublePin_GetIdlerLocation(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackAssemblyDoublePin *arg1 = (chrono::vehicle::m113::M113_TrackAssemblyDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblyDoublePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackAssemblyDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackAssemblyDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113_TrackAssemblyDoublePin const *)arg1)->GetIdlerLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_TrackAssemblyDoublePin_GetRoadWhelAssemblyLocation(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::m113::M113_TrackAssemblyDoublePin *arg1 = (chrono::vehicle::m113::M113_TrackAssemblyDoublePin *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblyDoublePin const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113_TrackAssemblyDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackAssemblyDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((chrono::vehicle::m113::M113_TrackAssemblyDoublePin const *)arg1)->GetRoadWhelAssemblyLocation(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_TrackAssemblyDoublePin(void * jarg1) {
  chrono::vehicle::m113::M113_TrackAssemblyDoublePin *arg1 = (chrono::vehicle::m113::M113_TrackAssemblyDoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblyDoublePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_TrackAssemblyDoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_TrackAssemblyDoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackBrake(void * jarg1) {
  chrono::vehicle::ChTrackBrake *arg1 = (chrono::vehicle::ChTrackBrake *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackBrake > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackBrake > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackBrake *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackBrake_Initialize(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::ChTrackBrake *arg1 = (chrono::vehicle::ChTrackBrake *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSprocket > arg3 ;
  std::shared_ptr< chrono::vehicle::ChTrackBrake > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackBrake > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackBrake *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSprocket > *)jarg3; 
  {
    try {
      (arg1)->Initialize(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackBrake_Synchronize(void * jarg1, double jarg2) {
  chrono::vehicle::ChTrackBrake *arg1 = (chrono::vehicle::ChTrackBrake *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackBrake > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackBrake > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackBrake *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Synchronize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTrackBrake_GetBrakeTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackBrake *arg1 = (chrono::vehicle::ChTrackBrake *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackBrake > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackBrake > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackBrake *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetBrakeTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackBrakeSimple(void * jarg1) {
  chrono::vehicle::ChTrackBrakeSimple *arg1 = (chrono::vehicle::ChTrackBrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackBrakeSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackBrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackBrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChTrackBrakeSimple_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChTrackBrakeSimple *arg1 = (chrono::vehicle::ChTrackBrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackBrakeSimple const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackBrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackBrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackBrakeSimple const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackBrakeSimple_Initialize(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::ChTrackBrakeSimple *arg1 = (chrono::vehicle::ChTrackBrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSprocket > arg3 ;
  std::shared_ptr< chrono::vehicle::ChTrackBrakeSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackBrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackBrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSprocket > *)jarg3; 
  {
    try {
      (arg1)->Initialize(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackBrakeSimple_Synchronize(void * jarg1, double jarg2) {
  chrono::vehicle::ChTrackBrakeSimple *arg1 = (chrono::vehicle::ChTrackBrakeSimple *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackBrakeSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackBrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackBrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Synchronize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTrackBrakeSimple_GetBrakeTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackBrakeSimple *arg1 = (chrono::vehicle::ChTrackBrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackBrakeSimple > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackBrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackBrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetBrakeTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTrackBrakeSimple_GetBrakeSpeed(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackBrakeSimple *arg1 = (chrono::vehicle::ChTrackBrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackBrakeSimple > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackBrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackBrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetBrakeSpeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackBrakeShafts(void * jarg1) {
  chrono::vehicle::ChTrackBrakeShafts *arg1 = (chrono::vehicle::ChTrackBrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackBrakeShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackBrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackBrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChTrackBrakeShafts_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChTrackBrakeShafts *arg1 = (chrono::vehicle::ChTrackBrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackBrakeShafts const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackBrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackBrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackBrakeShafts const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackBrakeShafts_Initialize(void * jarg1, void * jarg2, void * jarg3) {
  chrono::vehicle::ChTrackBrakeShafts *arg1 = (chrono::vehicle::ChTrackBrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg2 ;
  std::shared_ptr< chrono::vehicle::ChSprocket > arg3 ;
  std::shared_ptr< chrono::vehicle::ChTrackBrakeShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackBrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackBrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::vehicle::ChSprocket > *)jarg3; 
  {
    try {
      (arg1)->Initialize(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackBrakeShafts_Synchronize(void * jarg1, double jarg2) {
  chrono::vehicle::ChTrackBrakeShafts *arg1 = (chrono::vehicle::ChTrackBrakeShafts *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackBrakeShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackBrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackBrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Synchronize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_ChTrackBrakeShafts_GetBrakeTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::ChTrackBrakeShafts *arg1 = (chrono::vehicle::ChTrackBrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackBrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackBrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackBrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetBrakeTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackBrakeSimple__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::TrackBrakeSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::TrackBrakeSimple *)new chrono::vehicle::TrackBrakeSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackBrakeSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackBrakeSimple__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::TrackBrakeSimple *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::TrackBrakeSimple *)new chrono::vehicle::TrackBrakeSimple((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackBrakeSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TrackBrakeSimple(void * jarg1) {
  chrono::vehicle::TrackBrakeSimple *arg1 = (chrono::vehicle::TrackBrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackBrakeSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TrackBrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::TrackBrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackBrakeSimple_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackBrakeSimple *arg1 = (chrono::vehicle::TrackBrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackBrakeSimple > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TrackBrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::TrackBrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackBrakeShafts__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::TrackBrakeShafts *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::TrackBrakeShafts *)new chrono::vehicle::TrackBrakeShafts((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackBrakeShafts >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackBrakeShafts__SWIG_1(void * jarg1) {
  void * jresult ;
  rapidjson::Document *arg1 = 0 ;
  chrono::vehicle::TrackBrakeShafts *result = 0 ;
  
  arg1 = (rapidjson::Document *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (chrono::vehicle::TrackBrakeShafts *)new chrono::vehicle::TrackBrakeShafts((rapidjson::Document const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackBrakeShafts >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TrackBrakeShafts(void * jarg1) {
  chrono::vehicle::TrackBrakeShafts *arg1 = (chrono::vehicle::TrackBrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackBrakeShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TrackBrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::TrackBrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackBrakeShafts_GetShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackBrakeShafts *arg1 = (chrono::vehicle::TrackBrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackBrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TrackBrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::TrackBrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TrackBrakeShafts_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::TrackBrakeShafts *arg1 = (chrono::vehicle::TrackBrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackBrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TrackBrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::TrackBrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChTrackContactManager() {
  void * jresult ;
  chrono::vehicle::ChTrackContactManager *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::ChTrackContactManager *)new chrono::vehicle::ChTrackContactManager();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChTrackContactManager >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackContactManager_MonitorContacts(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackContactManager *arg1 = (chrono::vehicle::ChTrackContactManager *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackContactManager > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackContactManager > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackContactManager *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->MonitorContacts(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackContactManager_SetContactCollection(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChTrackContactManager *arg1 = (chrono::vehicle::ChTrackContactManager *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackContactManager > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackContactManager > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackContactManager *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetContactCollection(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackContactManager_WriteContacts(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChTrackContactManager *arg1 = (chrono::vehicle::ChTrackContactManager *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackContactManager > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackContactManager > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackContactManager *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->WriteContacts((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackContactManager_SetTrackShoeIndexLeft(void * jarg1, unsigned long jarg2) {
  chrono::vehicle::ChTrackContactManager *arg1 = (chrono::vehicle::ChTrackContactManager *) 0 ;
  size_t arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackContactManager > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackContactManager > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackContactManager *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->SetTrackShoeIndexLeft(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackContactManager_SetTrackShoeIndexRight(void * jarg1, unsigned long jarg2) {
  chrono::vehicle::ChTrackContactManager *arg1 = (chrono::vehicle::ChTrackContactManager *) 0 ;
  size_t arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackContactManager > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackContactManager > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackContactManager *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->SetTrackShoeIndexRight(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackContactManager_SetRenderNormals(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChTrackContactManager *arg1 = (chrono::vehicle::ChTrackContactManager *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackContactManager > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackContactManager > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackContactManager *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetRenderNormals(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackContactManager_SetRenderForces(void * jarg1, unsigned int jarg2, double jarg3) {
  chrono::vehicle::ChTrackContactManager *arg1 = (chrono::vehicle::ChTrackContactManager *) 0 ;
  bool arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::ChTrackContactManager > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackContactManager > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackContactManager *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->SetRenderForces(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackContactManager_Process__SWIG_0(void * jarg1, void * jarg2) {
  chrono::vehicle::ChTrackContactManager *arg1 = (chrono::vehicle::ChTrackContactManager *) 0 ;
  chrono::vehicle::ChTrackedVehicle *arg2 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackContactManager > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg2 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackContactManager > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackContactManager *)(smartarg1 ? smartarg1->get() : 0); 
  
  smartarg2 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg2;
  arg2 = (chrono::vehicle::ChTrackedVehicle *)(smartarg2 ? smartarg2->get() : 0); 
  {
    try {
      (arg1)->Process(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackContactManager_Process__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::ChTrackContactManager *arg1 = (chrono::vehicle::ChTrackContactManager *) 0 ;
  chrono::vehicle::ChTrackTestRig *arg2 = (chrono::vehicle::ChTrackTestRig *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackContactManager > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackContactManager > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackContactManager *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::ChTrackTestRig *)jarg2; 
  {
    try {
      (arg1)->Process(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChTrackContactManager_InContact(void * jarg1, int jarg2) {
  unsigned int jresult ;
  chrono::vehicle::ChTrackContactManager *arg1 = (chrono::vehicle::ChTrackContactManager *) 0 ;
  chrono::vehicle::TrackedCollisionFlag::Enum arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackContactManager const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackContactManager > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackContactManager *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TrackedCollisionFlag::Enum)jarg2; 
  {
    try {
      result = (bool)((chrono::vehicle::ChTrackContactManager const *)arg1)->InContact(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackContactManager_GetSprocketResistiveTorque(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackContactManager *arg1 = (chrono::vehicle::ChTrackContactManager *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackContactManager const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackContactManager > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackContactManager *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChTrackContactManager const *)arg1)->GetSprocketResistiveTorque(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackContactManager(void * jarg1) {
  chrono::vehicle::ChTrackContactManager *arg1 = (chrono::vehicle::ChTrackContactManager *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackContactManager > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackContactManager > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackContactManager *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackCollisionManager(void * jarg1) {
  chrono::vehicle::ChTrackCollisionManager *arg1 = (chrono::vehicle::ChTrackCollisionManager *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackCollisionManager > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackCollisionManager > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackCollisionManager *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackCustomContact(void * jarg1) {
  chrono::vehicle::ChTrackCustomContact *arg1 = (chrono::vehicle::ChTrackCustomContact *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackCustomContact > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackCustomContact > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackCustomContact *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChTrackCustomContact_OverridesIdlerContact(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChTrackCustomContact *arg1 = (chrono::vehicle::ChTrackCustomContact *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackCustomContact const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackCustomContact > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackCustomContact *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChTrackCustomContact const *)arg1)->OverridesIdlerContact();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChTrackCustomContact_OverridesWheelContact(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChTrackCustomContact *arg1 = (chrono::vehicle::ChTrackCustomContact *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackCustomContact const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackCustomContact > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackCustomContact *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChTrackCustomContact const *)arg1)->OverridesWheelContact();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChTrackCustomContact_OverridesGroundContact(void * jarg1) {
  unsigned int jresult ;
  chrono::vehicle::ChTrackCustomContact *arg1 = (chrono::vehicle::ChTrackCustomContact *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackCustomContact const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackCustomContact > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackCustomContact *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((chrono::vehicle::ChTrackCustomContact const *)arg1)->OverridesGroundContact();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackCustomContact_ComputeIdlerContactForce(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChTrackCustomContact *arg1 = (chrono::vehicle::ChTrackCustomContact *) 0 ;
  chrono::collision::ChCollisionInfo *arg2 = 0 ;
  std::shared_ptr< chrono::ChBody > arg3 ;
  std::shared_ptr< chrono::ChBody > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackCustomContact > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackCustomContact > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackCustomContact *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::collision::ChCollisionInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::collision::ChCollisionInfo const & is null", 0);
    return ;
  } 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::ChBody > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::ChBody > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->ComputeIdlerContactForce((chrono::collision::ChCollisionInfo const &)*arg2,arg3,arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackCustomContact_ComputeWheelContactForce(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChTrackCustomContact *arg1 = (chrono::vehicle::ChTrackCustomContact *) 0 ;
  chrono::collision::ChCollisionInfo *arg2 = 0 ;
  std::shared_ptr< chrono::ChBody > arg3 ;
  std::shared_ptr< chrono::ChBody > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackCustomContact > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackCustomContact > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackCustomContact *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::collision::ChCollisionInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::collision::ChCollisionInfo const & is null", 0);
    return ;
  } 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::ChBody > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::ChBody > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->ComputeWheelContactForce((chrono::collision::ChCollisionInfo const &)*arg2,arg3,arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackCustomContact_ComputeGroundContactForce(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChTrackCustomContact *arg1 = (chrono::vehicle::ChTrackCustomContact *) 0 ;
  chrono::collision::ChCollisionInfo *arg2 = 0 ;
  std::shared_ptr< chrono::ChBody > arg3 ;
  std::shared_ptr< chrono::ChBody > arg4 ;
  chrono::ChVector< > *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackCustomContact > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackCustomContact > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackCustomContact *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::collision::ChCollisionInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::collision::ChCollisionInfo const & is null", 0);
    return ;
  } 
  if (jarg3) arg3 = *(std::shared_ptr< chrono::ChBody > *)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< chrono::ChBody > *)jarg4; 
  arg5 = (chrono::ChVector< > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->ComputeGroundContactForce((chrono::collision::ChCollisionInfo const &)*arg2,arg3,arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChTrackCustomContact() {
  void * jresult ;
  chrono::vehicle::ChTrackCustomContact *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::ChTrackCustomContact *)new chrono::vehicle::ChTrackCustomContact();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::ChTrackCustomContact >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChTrackedVehicle(void * jarg1) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChTrackedVehicle_GetTemplateName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackedVehicle const *)arg1)->GetTemplateName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackedVehicle_GetTrackAssembly(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChTrackedVehicle const *)arg1)->GetTrackAssembly(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTrackAssembly >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackedVehicle_GetDriveline(void * jarg1) {
  void * jresult ;
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChDrivelineTV > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackedVehicle const *)arg1)->GetDriveline();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChDrivelineTV >(result) : 0; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChTrackedVehicle_GetNumTrackSuspensions(void * jarg1, int jarg2) {
  unsigned long jresult ;
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle const > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChTrackedVehicle const *)arg1)->GetNumTrackSuspensions(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChTrackedVehicle_GetNumTrackShoes(void * jarg1, int jarg2) {
  unsigned long jresult ;
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle const > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChTrackedVehicle const *)arg1)->GetNumTrackShoes(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackedVehicle_GetTrackShoe(void * jarg1, int jarg2, unsigned long jarg3) {
  void * jresult ;
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  size_t arg3 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackShoe > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = ((chrono::vehicle::ChTrackedVehicle const *)arg1)->GetTrackShoe(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTrackShoe >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackedVehicle_GetTrackShoeState(void * jarg1, int jarg2, unsigned long jarg3) {
  void * jresult ;
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  size_t arg3 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle const > *smartarg1 = 0 ;
  chrono::vehicle::BodyState result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = ((chrono::vehicle::ChTrackedVehicle const *)arg1)->GetTrackShoeState(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::vehicle::BodyState(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_GetTrackShoeStates(void * jarg1, int jarg2, void * jarg3) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  chrono::vehicle::BodyStates *arg3 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  arg3 = (chrono::vehicle::BodyStates *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::BodyStates & is null", 0);
    return ;
  } 
  {
    try {
      ((chrono::vehicle::ChTrackedVehicle const *)arg1)->GetTrackShoeStates(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_SetSprocketVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSprocketVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_SetIdlerVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetIdlerVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_SetSuspensionVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSuspensionVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_SetIdlerWheelVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetIdlerWheelVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_SetRoadWheelVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetRoadWheelVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_SetRollerVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetRollerVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_SetTrackShoeVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetTrackShoeVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_SetSprocketCollide(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetSprocketCollide(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_SetIdlerCollide(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetIdlerCollide(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_SetRoadWheelCollide(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetRoadWheelCollide(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_SetRollerCollide(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetRollerCollide(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_SetTrackShoeCollide(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetTrackShoeCollide(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_SetCollide(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->SetCollide(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_SetChassisVehicleCollide(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetChassisVehicleCollide(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_EnableCustomContact(void * jarg1, void * jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackCustomContact > arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::vehicle::ChTrackCustomContact > *)jarg2; 
  {
    try {
      (arg1)->EnableCustomContact(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_MonitorContacts(void * jarg1, int jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->MonitorContacts(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_SetRenderContactNormals(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetRenderContactNormals(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_SetRenderContactForces(void * jarg1, unsigned int jarg2, double jarg3) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  bool arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->SetRenderContactForces(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_SetContactCollection(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetContactCollection(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChTrackedVehicle_IsPartInContact(void * jarg1, int jarg2) {
  unsigned int jresult ;
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  chrono::vehicle::TrackedCollisionFlag::Enum arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TrackedCollisionFlag::Enum)jarg2; 
  {
    try {
      result = (bool)((chrono::vehicle::ChTrackedVehicle const *)arg1)->IsPartInContact(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChTrackedVehicle_GetSprocketResistiveTorque(void * jarg1, int jarg2) {
  void * jresult ;
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle const > *smartarg1 = 0 ;
  chrono::ChVector< > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  {
    try {
      result = ((chrono::vehicle::ChTrackedVehicle const *)arg1)->GetSprocketResistiveTorque(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_WriteContacts(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->WriteContacts((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_SetTrackAssemblyOutput(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  chrono::vehicle::VehicleSide arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VehicleSide)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->SetTrackAssemblyOutput(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_Initialize__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_Initialize__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_InitializeInertiaProperties(void * jarg1) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->InitializeInertiaProperties();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_Synchronize(void * jarg1, double jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  chrono::vehicle::TerrainForces *arg4 = 0 ;
  chrono::vehicle::TerrainForces *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  arg4 = (chrono::vehicle::TerrainForces *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::TerrainForces const & is null", 0);
    return ;
  } 
  arg5 = (chrono::vehicle::TerrainForces *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::TerrainForces const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,(chrono::vehicle::TerrainForces const &)*arg4,(chrono::vehicle::TerrainForces const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_LockDifferential(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->LockDifferential(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_DisconnectDriveline(void * jarg1) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->DisconnectDriveline();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_LogConstraintViolations(void * jarg1) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogConstraintViolations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ChTrackedVehicle_ExportComponentList__SWIG_0(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::ChTrackedVehicle const *)arg1)->ExportComponentList();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChTrackedVehicle_ExportComponentList__SWIG_1(void * jarg1, const char * jarg2) {
  chrono::vehicle::ChTrackedVehicle *arg1 = (chrono::vehicle::ChTrackedVehicle *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackedVehicle const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::ChTrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::ChTrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      ((chrono::vehicle::ChTrackedVehicle const *)arg1)->ExportComponentList((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackedVehicle__SWIG_0(const char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::ChContactMethod arg2 ;
  chrono::vehicle::TrackedVehicle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (chrono::ChContactMethod)jarg2; 
  {
    try {
      result = (chrono::vehicle::TrackedVehicle *)new chrono::vehicle::TrackedVehicle((std::string const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackedVehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackedVehicle__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::TrackedVehicle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::TrackedVehicle *)new chrono::vehicle::TrackedVehicle((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackedVehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrackedVehicle__SWIG_2(void * jarg1, const char * jarg2) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::TrackedVehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (chrono::vehicle::TrackedVehicle *)new chrono::vehicle::TrackedVehicle(arg1,(std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::TrackedVehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TrackedVehicle(void * jarg1) {
  chrono::vehicle::TrackedVehicle *arg1 = (chrono::vehicle::TrackedVehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::TrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::TrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrackedVehicle_Initialize__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  chrono::vehicle::TrackedVehicle *arg1 = (chrono::vehicle::TrackedVehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::TrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::TrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrackedVehicle_Initialize__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::TrackedVehicle *arg1 = (chrono::vehicle::TrackedVehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::TrackedVehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::TrackedVehicle > *)jarg1;
  arg1 = (chrono::vehicle::TrackedVehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_Wheel(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::generic::Generic_Wheel *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_Wheel *)new chrono::vehicle::generic::Generic_Wheel((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_Wheel >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Generic_Wheel(void * jarg1) {
  chrono::vehicle::generic::Generic_Wheel *arg1 = (chrono::vehicle::generic::Generic_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Wheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_Wheel_GetWheelMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_Wheel *arg1 = (chrono::vehicle::generic::Generic_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_Wheel const *)arg1)->GetWheelMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Generic_Wheel_GetWheelInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::generic::Generic_Wheel *arg1 = (chrono::vehicle::generic::Generic_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Wheel const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::generic::Generic_Wheel const *)arg1)->GetWheelInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_Wheel_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_Wheel *arg1 = (chrono::vehicle::generic::Generic_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_Wheel const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_Wheel_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_Wheel *arg1 = (chrono::vehicle::generic::Generic_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_Wheel const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_Wheel(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_Wheel *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_Wheel *)new chrono::vehicle::hmmwv::HMMWV_Wheel((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Wheel >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_Wheel(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_Wheel *arg1 = (chrono::vehicle::hmmwv::HMMWV_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Wheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Wheel_GetWheelMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Wheel *arg1 = (chrono::vehicle::hmmwv::HMMWV_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Wheel const *)arg1)->GetWheelMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_Wheel_GetWheelInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_Wheel *arg1 = (chrono::vehicle::hmmwv::HMMWV_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Wheel const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::hmmwv::HMMWV_Wheel const *)arg1)->GetWheelInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Wheel_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Wheel *arg1 = (chrono::vehicle::hmmwv::HMMWV_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Wheel const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Wheel_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Wheel *arg1 = (chrono::vehicle::hmmwv::HMMWV_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Wheel const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_Wheel_Initialize__SWIG_0(void * jarg1, void * jarg2, int jarg3, double jarg4) {
  chrono::vehicle::hmmwv::HMMWV_Wheel *arg1 = (chrono::vehicle::hmmwv::HMMWV_Wheel *) 0 ;
  std::shared_ptr< chrono::ChBody > arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Wheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBody > *)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->Initialize(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_Wheel_Initialize__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  chrono::vehicle::hmmwv::HMMWV_Wheel *arg1 = (chrono::vehicle::hmmwv::HMMWV_Wheel *) 0 ;
  std::shared_ptr< chrono::ChBody > arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Wheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< chrono::ChBody > *)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      (arg1)->Initialize(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan_Wheel(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::sedan::Sedan_Wheel *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan_Wheel *)new chrono::vehicle::sedan::Sedan_Wheel((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan_Wheel >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sedan_Wheel(void * jarg1) {
  chrono::vehicle::sedan::Sedan_Wheel *arg1 = (chrono::vehicle::sedan::Sedan_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Wheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_Wheel_GetWheelMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_Wheel *arg1 = (chrono::vehicle::sedan::Sedan_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_Wheel const *)arg1)->GetWheelMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_Wheel_GetWheelInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan_Wheel *arg1 = (chrono::vehicle::sedan::Sedan_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Wheel const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::sedan::Sedan_Wheel const *)arg1)->GetWheelInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_Wheel_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_Wheel *arg1 = (chrono::vehicle::sedan::Sedan_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_Wheel const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_Wheel_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_Wheel *arg1 = (chrono::vehicle::sedan::Sedan_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_Wheel const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_Wheel(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::citybus::CityBus_Wheel *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_Wheel *)new chrono::vehicle::citybus::CityBus_Wheel((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_Wheel >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CityBus_Wheel(void * jarg1) {
  chrono::vehicle::citybus::CityBus_Wheel *arg1 = (chrono::vehicle::citybus::CityBus_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Wheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_Wheel_GetWheelMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_Wheel *arg1 = (chrono::vehicle::citybus::CityBus_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_Wheel const *)arg1)->GetWheelMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_Wheel_GetWheelInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus_Wheel *arg1 = (chrono::vehicle::citybus::CityBus_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Wheel const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::citybus::CityBus_Wheel const *)arg1)->GetWheelInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_Wheel_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_Wheel *arg1 = (chrono::vehicle::citybus::CityBus_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_Wheel const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_Wheel_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_Wheel *arg1 = (chrono::vehicle::citybus::CityBus_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_Wheel const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_Wheel(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_5t_Wheel *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_Wheel *)new chrono::vehicle::man::MAN_5t_Wheel((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_Wheel >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_5t_Wheel(void * jarg1) {
  chrono::vehicle::man::MAN_5t_Wheel *arg1 = (chrono::vehicle::man::MAN_5t_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Wheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_Wheel_GetWheelMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_Wheel *arg1 = (chrono::vehicle::man::MAN_5t_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_Wheel const *)arg1)->GetWheelMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_5t_Wheel_GetWheelInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_5t_Wheel *arg1 = (chrono::vehicle::man::MAN_5t_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Wheel const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::man::MAN_5t_Wheel const *)arg1)->GetWheelInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_Wheel_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_Wheel *arg1 = (chrono::vehicle::man::MAN_5t_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_Wheel const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_Wheel_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_Wheel *arg1 = (chrono::vehicle::man::MAN_5t_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_Wheel const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_Wheel(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS_Wheel *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_Wheel *)new chrono::vehicle::uaz::UAZBUS_Wheel((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Wheel >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UAZBUS_Wheel(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_Wheel *arg1 = (chrono::vehicle::uaz::UAZBUS_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Wheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Wheel_GetWheelMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Wheel *arg1 = (chrono::vehicle::uaz::UAZBUS_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Wheel const *)arg1)->GetWheelMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UAZBUS_Wheel_GetWheelInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::uaz::UAZBUS_Wheel *arg1 = (chrono::vehicle::uaz::UAZBUS_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Wheel const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::uaz::UAZBUS_Wheel const *)arg1)->GetWheelInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Wheel_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Wheel *arg1 = (chrono::vehicle::uaz::UAZBUS_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Wheel const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Wheel_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Wheel *arg1 = (chrono::vehicle::uaz::UAZBUS_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Wheel const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_Wheel(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::gator::Gator_Wheel *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_Wheel *)new chrono::vehicle::gator::Gator_Wheel((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_Wheel >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Gator_Wheel(void * jarg1) {
  chrono::vehicle::gator::Gator_Wheel *arg1 = (chrono::vehicle::gator::Gator_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Wheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_Wheel_GetWheelMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_Wheel *arg1 = (chrono::vehicle::gator::Gator_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_Wheel const *)arg1)->GetWheelMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gator_Wheel_GetWheelInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::gator::Gator_Wheel *arg1 = (chrono::vehicle::gator::Gator_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Wheel const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::gator::Gator_Wheel const *)arg1)->GetWheelInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_Wheel_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_Wheel *arg1 = (chrono::vehicle::gator::Gator_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_Wheel const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_Wheel_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_Wheel *arg1 = (chrono::vehicle::gator::Gator_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_Wheel const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RCCar_Wheel(void * jarg1) {
  chrono::vehicle::rccar::RCCar_Wheel *arg1 = (chrono::vehicle::rccar::RCCar_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Wheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Wheel_GetWheelMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Wheel *arg1 = (chrono::vehicle::rccar::RCCar_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Wheel const *)arg1)->GetWheelMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_Wheel_GetWheelInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar_Wheel *arg1 = (chrono::vehicle::rccar::RCCar_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Wheel const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::rccar::RCCar_Wheel const *)arg1)->GetWheelInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Wheel_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Wheel *arg1 = (chrono::vehicle::rccar::RCCar_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Wheel const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Wheel_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Wheel *arg1 = (chrono::vehicle::rccar::RCCar_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Wheel const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_Wheel_AddVisualizationAssets(void * jarg1, int jarg2) {
  chrono::vehicle::rccar::RCCar_Wheel *arg1 = (chrono::vehicle::rccar::RCCar_Wheel *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Wheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->AddVisualizationAssets(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_Wheel_RemoveVisualizationAssets(void * jarg1) {
  chrono::vehicle::rccar::RCCar_Wheel *arg1 = (chrono::vehicle::rccar::RCCar_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Wheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->RemoveVisualizationAssets();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCCar_WheelLeft(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::rccar::RCCar_WheelLeft *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::rccar::RCCar_WheelLeft *)new chrono::vehicle::rccar::RCCar_WheelLeft((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::rccar::RCCar_WheelLeft >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RCCar_WheelLeft(void * jarg1) {
  chrono::vehicle::rccar::RCCar_WheelLeft *arg1 = (chrono::vehicle::rccar::RCCar_WheelLeft *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_WheelLeft > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_WheelLeft > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_WheelLeft *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_RCCar_WheelLeft_GetMeshName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::rccar::RCCar_WheelLeft *arg1 = (chrono::vehicle::rccar::RCCar_WheelLeft *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_WheelLeft const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_WheelLeft > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_WheelLeft *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::rccar::RCCar_WheelLeft const *)arg1)->GetMeshName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_RCCar_WheelLeft_GetMeshFile(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::rccar::RCCar_WheelLeft *arg1 = (chrono::vehicle::rccar::RCCar_WheelLeft *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_WheelLeft const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_WheelLeft > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_WheelLeft *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::rccar::RCCar_WheelLeft const *)arg1)->GetMeshFile();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCCar_WheelRight(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::rccar::RCCar_WheelRight *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::rccar::RCCar_WheelRight *)new chrono::vehicle::rccar::RCCar_WheelRight((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::rccar::RCCar_WheelRight >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RCCar_WheelRight(void * jarg1) {
  chrono::vehicle::rccar::RCCar_WheelRight *arg1 = (chrono::vehicle::rccar::RCCar_WheelRight *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_WheelRight > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_WheelRight > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_WheelRight *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_RCCar_WheelRight_GetMeshName(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::rccar::RCCar_WheelRight *arg1 = (chrono::vehicle::rccar::RCCar_WheelRight *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_WheelRight const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_WheelRight > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_WheelRight *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::rccar::RCCar_WheelRight const *)arg1)->GetMeshName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_RCCar_WheelRight_GetMeshFile(void * jarg1) {
  const char * jresult ;
  chrono::vehicle::rccar::RCCar_WheelRight *arg1 = (chrono::vehicle::rccar::RCCar_WheelRight *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_WheelRight const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_WheelRight > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_WheelRight *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::rccar::RCCar_WheelRight const *)arg1)->GetMeshFile();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Wheel(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::feda::FEDA_Wheel *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Wheel *)new chrono::vehicle::feda::FEDA_Wheel((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Wheel >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FEDA_Wheel(void * jarg1) {
  chrono::vehicle::feda::FEDA_Wheel *arg1 = (chrono::vehicle::feda::FEDA_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Wheel > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Wheel_GetWheelMass(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Wheel *arg1 = (chrono::vehicle::feda::FEDA_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Wheel const *)arg1)->GetWheelMass();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_Wheel_GetWheelInertia(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA_Wheel *arg1 = (chrono::vehicle::feda::FEDA_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Wheel const > *smartarg1 = 0 ;
  chrono::ChVector< > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChVector< > *) &((chrono::vehicle::feda::FEDA_Wheel const *)arg1)->GetWheelInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Wheel_GetRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Wheel *arg1 = (chrono::vehicle::feda::FEDA_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Wheel const *)arg1)->GetRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Wheel_GetWidth(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Wheel *arg1 = (chrono::vehicle::feda::FEDA_Wheel *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Wheel const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Wheel > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Wheel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Wheel const *)arg1)->GetWidth();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_BrakeSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::generic::Generic_BrakeSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_BrakeSimple *)new chrono::vehicle::generic::Generic_BrakeSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_BrakeSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Generic_BrakeSimple(void * jarg1) {
  chrono::vehicle::generic::Generic_BrakeSimple *arg1 = (chrono::vehicle::generic::Generic_BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_BrakeSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_BrakeSimple_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_BrakeSimple *arg1 = (chrono::vehicle::generic::Generic_BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_BrakeSimple > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_BrakeSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_BrakeSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_BrakeSimple *)new chrono::vehicle::hmmwv::HMMWV_BrakeSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_BrakeSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_BrakeSimple(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_BrakeSimple *arg1 = (chrono::vehicle::hmmwv::HMMWV_BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_BrakeSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_BrakeSimple_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_BrakeSimple *arg1 = (chrono::vehicle::hmmwv::HMMWV_BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_BrakeSimple > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_BrakeShafts(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_BrakeShafts *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_BrakeShafts *)new chrono::vehicle::hmmwv::HMMWV_BrakeShafts((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_BrakeShafts >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_BrakeShafts(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_BrakeShafts *arg1 = (chrono::vehicle::hmmwv::HMMWV_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_BrakeShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_BrakeShafts_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_BrakeShafts *arg1 = (chrono::vehicle::hmmwv::HMMWV_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_BrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_BrakeShafts_GetShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_BrakeShafts *arg1 = (chrono::vehicle::hmmwv::HMMWV_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_BrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan_BrakeSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::sedan::Sedan_BrakeSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan_BrakeSimple *)new chrono::vehicle::sedan::Sedan_BrakeSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan_BrakeSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sedan_BrakeSimple(void * jarg1) {
  chrono::vehicle::sedan::Sedan_BrakeSimple *arg1 = (chrono::vehicle::sedan::Sedan_BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_BrakeSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_BrakeSimple_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_BrakeSimple *arg1 = (chrono::vehicle::sedan::Sedan_BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_BrakeSimple > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan_BrakeShafts(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::sedan::Sedan_BrakeShafts *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan_BrakeShafts *)new chrono::vehicle::sedan::Sedan_BrakeShafts((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan_BrakeShafts >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sedan_BrakeShafts(void * jarg1) {
  chrono::vehicle::sedan::Sedan_BrakeShafts *arg1 = (chrono::vehicle::sedan::Sedan_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_BrakeShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_BrakeShafts_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_BrakeShafts *arg1 = (chrono::vehicle::sedan::Sedan_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_BrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_BrakeShafts_GetShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_BrakeShafts *arg1 = (chrono::vehicle::sedan::Sedan_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_BrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_BrakeSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::citybus::CityBus_BrakeSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_BrakeSimple *)new chrono::vehicle::citybus::CityBus_BrakeSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_BrakeSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CityBus_BrakeSimple(void * jarg1) {
  chrono::vehicle::citybus::CityBus_BrakeSimple *arg1 = (chrono::vehicle::citybus::CityBus_BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_BrakeSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_BrakeSimple_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_BrakeSimple *arg1 = (chrono::vehicle::citybus::CityBus_BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_BrakeSimple > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_BrakeShafts(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::citybus::CityBus_BrakeShafts *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_BrakeShafts *)new chrono::vehicle::citybus::CityBus_BrakeShafts((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_BrakeShafts >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CityBus_BrakeShafts(void * jarg1) {
  chrono::vehicle::citybus::CityBus_BrakeShafts *arg1 = (chrono::vehicle::citybus::CityBus_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_BrakeShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_BrakeShafts_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_BrakeShafts *arg1 = (chrono::vehicle::citybus::CityBus_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_BrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_BrakeShafts_GetShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_BrakeShafts *arg1 = (chrono::vehicle::citybus::CityBus_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_BrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_BrakeSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_5t_BrakeSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_BrakeSimple *)new chrono::vehicle::man::MAN_5t_BrakeSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_BrakeSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_5t_BrakeSimple(void * jarg1) {
  chrono::vehicle::man::MAN_5t_BrakeSimple *arg1 = (chrono::vehicle::man::MAN_5t_BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_BrakeSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_BrakeSimple_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_BrakeSimple *arg1 = (chrono::vehicle::man::MAN_5t_BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_BrakeSimple > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_BrakeShafts(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::man::MAN_5t_BrakeShafts *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_BrakeShafts *)new chrono::vehicle::man::MAN_5t_BrakeShafts((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_BrakeShafts >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_5t_BrakeShafts(void * jarg1) {
  chrono::vehicle::man::MAN_5t_BrakeShafts *arg1 = (chrono::vehicle::man::MAN_5t_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_BrakeShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_BrakeShafts_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_BrakeShafts *arg1 = (chrono::vehicle::man::MAN_5t_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_BrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_BrakeShafts_GetShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_BrakeShafts *arg1 = (chrono::vehicle::man::MAN_5t_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_BrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_BrakeSimpleFront(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS_BrakeSimpleFront *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_BrakeSimpleFront *)new chrono::vehicle::uaz::UAZBUS_BrakeSimpleFront((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_BrakeSimpleFront >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UAZBUS_BrakeSimpleFront(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_BrakeSimpleFront *arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeSimpleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_BrakeSimpleFront > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_BrakeSimpleFront > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeSimpleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_BrakeSimpleFront_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_BrakeSimpleFront *arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeSimpleFront *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_BrakeSimpleFront > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_BrakeSimpleFront > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeSimpleFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_BrakeSimpleRear(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS_BrakeSimpleRear *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_BrakeSimpleRear *)new chrono::vehicle::uaz::UAZBUS_BrakeSimpleRear((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_BrakeSimpleRear >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UAZBUS_BrakeSimpleRear(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_BrakeSimpleRear *arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeSimpleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_BrakeSimpleRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_BrakeSimpleRear > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeSimpleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_BrakeSimpleRear_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_BrakeSimpleRear *arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeSimpleRear *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_BrakeSimpleRear > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_BrakeSimpleRear > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeSimpleRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_BrakeShaftsFront(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront *)new chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UAZBUS_BrakeShaftsFront(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront *arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_BrakeShaftsFront_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront *arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_BrakeShaftsFront_GetShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront *arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_BrakeShaftsRear(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear *)new chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UAZBUS_BrakeShaftsRear(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear *arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_BrakeShaftsRear_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear *arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_BrakeShaftsRear_GetShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear *arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_BrakeSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::gator::Gator_BrakeSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_BrakeSimple *)new chrono::vehicle::gator::Gator_BrakeSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_BrakeSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Gator_BrakeSimple(void * jarg1) {
  chrono::vehicle::gator::Gator_BrakeSimple *arg1 = (chrono::vehicle::gator::Gator_BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_BrakeSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_BrakeSimple_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_BrakeSimple *arg1 = (chrono::vehicle::gator::Gator_BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_BrakeSimple > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_BrakeShafts(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::gator::Gator_BrakeShafts *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_BrakeShafts *)new chrono::vehicle::gator::Gator_BrakeShafts((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_BrakeShafts >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Gator_BrakeShafts(void * jarg1) {
  chrono::vehicle::gator::Gator_BrakeShafts *arg1 = (chrono::vehicle::gator::Gator_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_BrakeShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_BrakeShafts_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_BrakeShafts *arg1 = (chrono::vehicle::gator::Gator_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_BrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_BrakeShafts_GetShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_BrakeShafts *arg1 = (chrono::vehicle::gator::Gator_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_BrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCCar_BrakeSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::rccar::RCCar_BrakeSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::rccar::RCCar_BrakeSimple *)new chrono::vehicle::rccar::RCCar_BrakeSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::rccar::RCCar_BrakeSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RCCar_BrakeSimple(void * jarg1) {
  chrono::vehicle::rccar::RCCar_BrakeSimple *arg1 = (chrono::vehicle::rccar::RCCar_BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_BrakeSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_BrakeSimple_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_BrakeSimple *arg1 = (chrono::vehicle::rccar::RCCar_BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_BrakeSimple > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_BrakeSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::feda::FEDA_BrakeSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_BrakeSimple *)new chrono::vehicle::feda::FEDA_BrakeSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_BrakeSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FEDA_BrakeSimple(void * jarg1) {
  chrono::vehicle::feda::FEDA_BrakeSimple *arg1 = (chrono::vehicle::feda::FEDA_BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_BrakeSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_BrakeSimple_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_BrakeSimple *arg1 = (chrono::vehicle::feda::FEDA_BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_BrakeSimple > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_BrakeShafts(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::feda::FEDA_BrakeShafts *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_BrakeShafts *)new chrono::vehicle::feda::FEDA_BrakeShafts((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_BrakeShafts >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FEDA_BrakeShafts(void * jarg1) {
  chrono::vehicle::feda::FEDA_BrakeShafts *arg1 = (chrono::vehicle::feda::FEDA_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_BrakeShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_BrakeShafts_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_BrakeShafts *arg1 = (chrono::vehicle::feda::FEDA_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_BrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_BrakeShafts_GetShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_BrakeShafts *arg1 = (chrono::vehicle::feda::FEDA_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_BrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_BrakeSimple(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::m113::M113_BrakeSimple *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::m113::M113_BrakeSimple *)new chrono::vehicle::m113::M113_BrakeSimple((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_BrakeSimple >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_BrakeSimple(void * jarg1) {
  chrono::vehicle::m113::M113_BrakeSimple *arg1 = (chrono::vehicle::m113::M113_BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_BrakeSimple > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_BrakeSimple_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_BrakeSimple *arg1 = (chrono::vehicle::m113::M113_BrakeSimple *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_BrakeSimple > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_BrakeSimple > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_BrakeSimple *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_BrakeShafts(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  chrono::vehicle::m113::M113_BrakeShafts *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (chrono::vehicle::m113::M113_BrakeShafts *)new chrono::vehicle::m113::M113_BrakeShafts((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_BrakeShafts >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_BrakeShafts(void * jarg1) {
  chrono::vehicle::m113::M113_BrakeShafts *arg1 = (chrono::vehicle::m113::M113_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_BrakeShafts > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_BrakeShafts_GetMaxBrakingTorque(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_BrakeShafts *arg1 = (chrono::vehicle::m113::M113_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_BrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetMaxBrakingTorque();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M113_BrakeShafts_GetShaftInertia(void * jarg1) {
  double jresult ;
  chrono::vehicle::m113::M113_BrakeShafts *arg1 = (chrono::vehicle::m113::M113_BrakeShafts *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_BrakeShafts > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_BrakeShafts > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_BrakeShafts *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->GetShaftInertia();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_Vehicle__SWIG_0(unsigned int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::SuspensionTypeWV arg2 ;
  chrono::ChContactMethod arg3 ;
  chrono::vehicle::generic::Generic_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::SuspensionTypeWV)jarg2; 
  arg3 = (chrono::ChContactMethod)jarg3; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_Vehicle *)new chrono::vehicle::generic::Generic_Vehicle(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic_Vehicle__SWIG_1(unsigned int jarg1, int jarg2) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::SuspensionTypeWV arg2 ;
  chrono::vehicle::generic::Generic_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::SuspensionTypeWV)jarg2; 
  {
    try {
      result = (chrono::vehicle::generic::Generic_Vehicle *)new chrono::vehicle::generic::Generic_Vehicle(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::generic::Generic_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Generic_Vehicle(void * jarg1) {
  chrono::vehicle::generic::Generic_Vehicle *arg1 = (chrono::vehicle::generic::Generic_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_Generic_Vehicle_GetNumberAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::generic::Generic_Vehicle *arg1 = (chrono::vehicle::generic::Generic_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Vehicle const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::generic::Generic_Vehicle const *)arg1)->GetNumberAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_Vehicle_GetWheelbase(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_Vehicle *arg1 = (chrono::vehicle::generic::Generic_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_Vehicle const *)arg1)->GetWheelbase();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_Vehicle_GetMinTurningRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_Vehicle *arg1 = (chrono::vehicle::generic::Generic_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_Vehicle const *)arg1)->GetMinTurningRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_Vehicle_GetMaxSteeringAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::generic::Generic_Vehicle *arg1 = (chrono::vehicle::generic::Generic_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_Vehicle const *)arg1)->GetMaxSteeringAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_Vehicle_GetSpringForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::generic::Generic_Vehicle *arg1 = (chrono::vehicle::generic::Generic_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_Vehicle const *)arg1)->GetSpringForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_Vehicle_GetSpringLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::generic::Generic_Vehicle *arg1 = (chrono::vehicle::generic::Generic_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_Vehicle const *)arg1)->GetSpringLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_Vehicle_GetSpringDeformation(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::generic::Generic_Vehicle *arg1 = (chrono::vehicle::generic::Generic_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_Vehicle const *)arg1)->GetSpringDeformation(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_Vehicle_GetShockForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::generic::Generic_Vehicle *arg1 = (chrono::vehicle::generic::Generic_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_Vehicle const *)arg1)->GetShockForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_Vehicle_GetShockLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::generic::Generic_Vehicle *arg1 = (chrono::vehicle::generic::Generic_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_Vehicle const *)arg1)->GetShockLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Generic_Vehicle_GetShockVelocity(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::generic::Generic_Vehicle *arg1 = (chrono::vehicle::generic::Generic_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::generic::Generic_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::generic::Generic_Vehicle const *)arg1)->GetShockVelocity(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic_Vehicle_Initialize__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  chrono::vehicle::generic::Generic_Vehicle *arg1 = (chrono::vehicle::generic::Generic_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic_Vehicle_Initialize__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::generic::Generic_Vehicle *arg1 = (chrono::vehicle::generic::Generic_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic_Vehicle_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::generic::Generic_Vehicle *arg1 = (chrono::vehicle::generic::Generic_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic_Vehicle_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::generic::Generic_Vehicle *arg1 = (chrono::vehicle::generic::Generic_Vehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::generic::Generic_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::generic::Generic_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::generic::Generic_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetContactMethod(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  chrono::ChContactMethod arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChContactMethod)jarg2; 
  {
    try {
      (arg1)->SetContactMethod(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetCollisionSystemType(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  chrono::collision::ChCollisionSystemType arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::collision::ChCollisionSystemType)jarg2; 
  {
    try {
      (arg1)->SetCollisionSystemType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetChassisFixed(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetChassisFixed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetChassisCollisionType(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  chrono::vehicle::CollisionType arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::CollisionType)jarg2; 
  {
    try {
      (arg1)->SetChassisCollisionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetSteeringType(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  chrono::vehicle::SteeringTypeWV arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::SteeringTypeWV)jarg2; 
  {
    try {
      (arg1)->SetSteeringType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetDriveType(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  chrono::vehicle::DrivelineTypeWV arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::DrivelineTypeWV)jarg2; 
  {
    try {
      (arg1)->SetDriveType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetBrakeType(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  chrono::vehicle::BrakeType arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  {
    try {
      (arg1)->SetBrakeType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetEngineType(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  chrono::vehicle::EngineModelType arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::EngineModelType)jarg2; 
  {
    try {
      (arg1)->SetEngineType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetTransmissionType(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  chrono::vehicle::TransmissionModelType arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TransmissionModelType)jarg2; 
  {
    try {
      (arg1)->SetTransmissionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetTireType(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  chrono::vehicle::TireModelType arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TireModelType)jarg2; 
  {
    try {
      (arg1)->SetTireType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetTireCollisionType(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  chrono::vehicle::ChTire::CollisionType arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::ChTire::CollisionType)jarg2; 
  {
    try {
      (arg1)->SetTireCollisionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetInitPosition(void * jarg1, void * jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitPosition((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetInitFwdVel(void * jarg1, double jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetInitFwdVel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetTireStepSize(void * jarg1, double jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetTireStepSize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_EnableBrakeLocking(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->EnableBrakeLocking(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_GetSystem(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV const > *smartarg1 = 0 ;
  chrono::ChSystem *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChSystem *)((chrono::vehicle::hmmwv::HMMWV const *)arg1)->GetSystem();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::ChSystem >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_GetVehicle(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV const > *smartarg1 = 0 ;
  chrono::vehicle::ChWheeledVehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChWheeledVehicle *) &((chrono::vehicle::hmmwv::HMMWV const *)arg1)->GetVehicle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChWheeledVehicle >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_GetChassis(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::hmmwv::HMMWV const *)arg1)->GetChassis();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassis >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMMWV_GetChassisBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::hmmwv::HMMWV const *)arg1)->GetChassisBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBodyAuxRef >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_Initialize(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Initialize();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_LockAxleDifferential(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LockAxleDifferential(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_LockCentralDifferential(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LockCentralDifferential(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetAerodynamicDrag(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->SetAerodynamicDrag(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetChassisVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetChassisVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetSuspensionVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSuspensionVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetSteeringVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSteeringVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetWheelVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetWheelVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_SetTireVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetTireVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_Synchronize(void * jarg1, double jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  chrono::vehicle::ChTerrain *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  
  arg4 = (chrono::vehicle::ChTerrain *)(((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4) ? ((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4)->get() : 0);
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChTerrain const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,(chrono::vehicle::ChTerrain const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::hmmwv::HMMWV *arg1 = (chrono::vehicle::hmmwv::HMMWV *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_Full__SWIG_0() {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_Full *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_Full *)new chrono::vehicle::hmmwv::HMMWV_Full();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Full >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_Full__SWIG_1(void * jarg1) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_Full *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_Full *)new chrono::vehicle::hmmwv::HMMWV_Full(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Full >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_Full_SetRigidSteeringColumn(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::hmmwv::HMMWV_Full *arg1 = (chrono::vehicle::hmmwv::HMMWV_Full *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Full > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Full > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Full *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetRigidSteeringColumn(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_Full_UseTierodBodies(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::hmmwv::HMMWV_Full *arg1 = (chrono::vehicle::hmmwv::HMMWV_Full *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Full > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Full > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Full *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->UseTierodBodies(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_Full_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_Full *arg1 = (chrono::vehicle::hmmwv::HMMWV_Full *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Full > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Full > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Full *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_Full_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV_Full *arg1 = (chrono::vehicle::hmmwv::HMMWV_Full *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Full > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Full > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Full *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_Full(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_Full *arg1 = (chrono::vehicle::hmmwv::HMMWV_Full *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Full > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Full > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Full *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_Reduced__SWIG_0() {
  void * jresult ;
  chrono::vehicle::hmmwv::HMMWV_Reduced *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_Reduced *)new chrono::vehicle::hmmwv::HMMWV_Reduced();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Reduced >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_Reduced__SWIG_1(void * jarg1) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_Reduced *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_Reduced *)new chrono::vehicle::hmmwv::HMMWV_Reduced(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Reduced >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_Reduced(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_Reduced *arg1 = (chrono::vehicle::hmmwv::HMMWV_Reduced *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Reduced > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Reduced > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Reduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_Vehicle(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_Vehicle *arg1 = (chrono::vehicle::hmmwv::HMMWV_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMMWV_Vehicle_GetNumberAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::hmmwv::HMMWV_Vehicle *arg1 = (chrono::vehicle::hmmwv::HMMWV_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Vehicle const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::hmmwv::HMMWV_Vehicle const *)arg1)->GetNumberAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Vehicle_GetWheelbase(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Vehicle *arg1 = (chrono::vehicle::hmmwv::HMMWV_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Vehicle const *)arg1)->GetWheelbase();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Vehicle_GetMinTurningRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Vehicle *arg1 = (chrono::vehicle::hmmwv::HMMWV_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Vehicle const *)arg1)->GetMinTurningRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_Vehicle_GetMaxSteeringAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_Vehicle *arg1 = (chrono::vehicle::hmmwv::HMMWV_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_Vehicle const *)arg1)->GetMaxSteeringAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_Vehicle_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::hmmwv::HMMWV_Vehicle *arg1 = (chrono::vehicle::hmmwv::HMMWV_Vehicle *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_VehicleReduced__SWIG_0(unsigned int jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::DrivelineTypeWV arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  chrono::vehicle::SteeringTypeWV arg4 ;
  chrono::ChContactMethod arg5 ;
  chrono::vehicle::CollisionType arg6 ;
  chrono::vehicle::hmmwv::HMMWV_VehicleReduced *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::DrivelineTypeWV)jarg2; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = (chrono::vehicle::SteeringTypeWV)jarg4; 
  arg5 = (chrono::ChContactMethod)jarg5; 
  arg6 = (chrono::vehicle::CollisionType)jarg6; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_VehicleReduced *)new chrono::vehicle::hmmwv::HMMWV_VehicleReduced(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_VehicleReduced >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_VehicleReduced__SWIG_1(void * jarg1, unsigned int jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::DrivelineTypeWV arg3 ;
  chrono::vehicle::BrakeType arg4 ;
  chrono::vehicle::SteeringTypeWV arg5 ;
  chrono::vehicle::CollisionType arg6 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_VehicleReduced *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::DrivelineTypeWV)jarg3; 
  arg4 = (chrono::vehicle::BrakeType)jarg4; 
  arg5 = (chrono::vehicle::SteeringTypeWV)jarg5; 
  arg6 = (chrono::vehicle::CollisionType)jarg6; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_VehicleReduced *)new chrono::vehicle::hmmwv::HMMWV_VehicleReduced(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_VehicleReduced >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_VehicleReduced(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_VehicleReduced *arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleReduced *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_VehicleReduced > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_VehicleReduced > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleReduced *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_VehicleReduced_Initialize__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  chrono::vehicle::hmmwv::HMMWV_VehicleReduced *arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleReduced *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_VehicleReduced > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_VehicleReduced > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleReduced *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_VehicleReduced_Initialize__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::hmmwv::HMMWV_VehicleReduced *arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleReduced *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_VehicleReduced > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_VehicleReduced > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleReduced *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_VehicleFull__SWIG_0(unsigned int jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, int jarg7, int jarg8) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::DrivelineTypeWV arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  chrono::vehicle::SteeringTypeWV arg4 ;
  bool arg5 ;
  bool arg6 ;
  chrono::ChContactMethod arg7 ;
  chrono::vehicle::CollisionType arg8 ;
  chrono::vehicle::hmmwv::HMMWV_VehicleFull *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::DrivelineTypeWV)jarg2; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = (chrono::vehicle::SteeringTypeWV)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (chrono::ChContactMethod)jarg7; 
  arg8 = (chrono::vehicle::CollisionType)jarg8; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *)new chrono::vehicle::hmmwv::HMMWV_VehicleFull(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_VehicleFull >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMMWV_VehicleFull__SWIG_1(void * jarg1, unsigned int jarg2, int jarg3, int jarg4, int jarg5, unsigned int jarg6, unsigned int jarg7, int jarg8) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::DrivelineTypeWV arg3 ;
  chrono::vehicle::BrakeType arg4 ;
  chrono::vehicle::SteeringTypeWV arg5 ;
  bool arg6 ;
  bool arg7 ;
  chrono::vehicle::CollisionType arg8 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::hmmwv::HMMWV_VehicleFull *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::DrivelineTypeWV)jarg3; 
  arg4 = (chrono::vehicle::BrakeType)jarg4; 
  arg5 = (chrono::vehicle::SteeringTypeWV)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = (chrono::vehicle::CollisionType)jarg8; 
  {
    try {
      result = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *)new chrono::vehicle::hmmwv::HMMWV_VehicleFull(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_VehicleFull >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMMWV_VehicleFull(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_VehicleFull *arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_VehicleFull > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_VehicleFull > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_VehicleFull_GetSpringForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_VehicleFull *arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_VehicleFull const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_VehicleFull > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_VehicleFull const *)arg1)->GetSpringForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_VehicleFull_GetSpringLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_VehicleFull *arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_VehicleFull const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_VehicleFull > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_VehicleFull const *)arg1)->GetSpringLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_VehicleFull_GetSpringDeformation(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_VehicleFull *arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_VehicleFull const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_VehicleFull > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_VehicleFull const *)arg1)->GetSpringDeformation(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_VehicleFull_GetShockForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_VehicleFull *arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_VehicleFull const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_VehicleFull > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_VehicleFull const *)arg1)->GetShockForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_VehicleFull_GetShockLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_VehicleFull *arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_VehicleFull const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_VehicleFull > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_VehicleFull const *)arg1)->GetShockLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HMMWV_VehicleFull_GetShockVelocity(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::hmmwv::HMMWV_VehicleFull *arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_VehicleFull const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::hmmwv::HMMWV_VehicleFull > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::hmmwv::HMMWV_VehicleFull const *)arg1)->GetShockVelocity(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_VehicleFull_Initialize__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  chrono::vehicle::hmmwv::HMMWV_VehicleFull *arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_VehicleFull > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_VehicleFull > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_VehicleFull_Initialize__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::hmmwv::HMMWV_VehicleFull *arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_VehicleFull > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_VehicleFull > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_VehicleFull_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::hmmwv::HMMWV_VehicleFull *arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *) 0 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_VehicleFull > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_VehicleFull > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMMWV_VehicleFull_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::hmmwv::HMMWV_VehicleFull *arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_VehicleFull > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::hmmwv::HMMWV_VehicleFull > *)jarg1;
  arg1 = (chrono::vehicle::hmmwv::HMMWV_VehicleFull *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan__SWIG_0() {
  void * jresult ;
  chrono::vehicle::sedan::Sedan *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::sedan::Sedan *)new chrono::vehicle::sedan::Sedan();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan__SWIG_1(void * jarg1) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::sedan::Sedan *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan *)new chrono::vehicle::sedan::Sedan(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sedan(void * jarg1) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_SetContactMethod(void * jarg1, int jarg2) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  chrono::ChContactMethod arg2 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChContactMethod)jarg2; 
  {
    try {
      (arg1)->SetContactMethod(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_SetChassisFixed(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetChassisFixed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_SetChassisCollisionType(void * jarg1, int jarg2) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  chrono::vehicle::CollisionType arg2 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::CollisionType)jarg2; 
  {
    try {
      (arg1)->SetChassisCollisionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_SetBrakeType(void * jarg1, int jarg2) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  chrono::vehicle::BrakeType arg2 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  {
    try {
      (arg1)->SetBrakeType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_SetTireType(void * jarg1, int jarg2) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  chrono::vehicle::TireModelType arg2 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TireModelType)jarg2; 
  {
    try {
      (arg1)->SetTireType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_SetInitPosition(void * jarg1, void * jarg2) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitPosition((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_SetInitFwdVel(void * jarg1, double jarg2) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetInitFwdVel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_SetTireStepSize(void * jarg1, double jarg2) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetTireStepSize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_EnableBrakeLocking(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->EnableBrakeLocking(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_GetSystem(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan const > *smartarg1 = 0 ;
  chrono::ChSystem *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChSystem *)((chrono::vehicle::sedan::Sedan const *)arg1)->GetSystem();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::ChSystem >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_GetVehicle(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan const > *smartarg1 = 0 ;
  chrono::vehicle::ChWheeledVehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChWheeledVehicle *) &((chrono::vehicle::sedan::Sedan const *)arg1)->GetVehicle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChWheeledVehicle >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_GetChassis(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::sedan::Sedan const *)arg1)->GetChassis();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassis >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sedan_GetChassisBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::sedan::Sedan const *)arg1)->GetChassisBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBodyAuxRef >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_Initialize(void * jarg1) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Initialize();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_LockAxleDifferential(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LockAxleDifferential(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_SetAerodynamicDrag(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->SetAerodynamicDrag(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_SetChassisVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetChassisVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_SetSuspensionVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSuspensionVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_SetSteeringVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSteeringVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_SetWheelVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetWheelVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_SetTireVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetTireVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_Synchronize(void * jarg1, double jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  chrono::vehicle::ChTerrain *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  
  arg4 = (chrono::vehicle::ChTerrain *)(((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4) ? ((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4)->get() : 0);
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChTerrain const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,(chrono::vehicle::ChTerrain const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::sedan::Sedan *arg1 = (chrono::vehicle::sedan::Sedan *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan_Vehicle__SWIG_0(unsigned int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::ChContactMethod arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  chrono::vehicle::sedan::Sedan_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::ChContactMethod)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan_Vehicle *)new chrono::vehicle::sedan::Sedan_Vehicle(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan_Vehicle__SWIG_1(unsigned int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::ChContactMethod arg3 ;
  chrono::vehicle::sedan::Sedan_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::ChContactMethod)jarg3; 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan_Vehicle *)new chrono::vehicle::sedan::Sedan_Vehicle(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan_Vehicle__SWIG_2(unsigned int jarg1, int jarg2) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::vehicle::sedan::Sedan_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan_Vehicle *)new chrono::vehicle::sedan::Sedan_Vehicle(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan_Vehicle__SWIG_3(void * jarg1, unsigned int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::sedan::Sedan_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan_Vehicle *)new chrono::vehicle::sedan::Sedan_Vehicle(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sedan_Vehicle__SWIG_4(void * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::sedan::Sedan_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  {
    try {
      result = (chrono::vehicle::sedan::Sedan_Vehicle *)new chrono::vehicle::sedan::Sedan_Vehicle(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::sedan::Sedan_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sedan_Vehicle(void * jarg1) {
  chrono::vehicle::sedan::Sedan_Vehicle *arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sedan_Vehicle_GetNumberAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::sedan::Sedan_Vehicle *arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Vehicle const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::sedan::Sedan_Vehicle const *)arg1)->GetNumberAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_Vehicle_GetWheelbase(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_Vehicle *arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_Vehicle const *)arg1)->GetWheelbase();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_Vehicle_GetMinTurningRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_Vehicle *arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_Vehicle const *)arg1)->GetMinTurningRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_Vehicle_GetMaxSteeringAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_Vehicle *arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_Vehicle const *)arg1)->GetMaxSteeringAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_Vehicle_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::sedan::Sedan_Vehicle *arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_Vehicle_GetSpringForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_Vehicle *arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_Vehicle const *)arg1)->GetSpringForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_Vehicle_GetSpringLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_Vehicle *arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_Vehicle const *)arg1)->GetSpringLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_Vehicle_GetSpringDeformation(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_Vehicle *arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_Vehicle const *)arg1)->GetSpringDeformation(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_Vehicle_GetShockForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_Vehicle *arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_Vehicle const *)arg1)->GetShockForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_Vehicle_GetShockLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_Vehicle *arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_Vehicle const *)arg1)->GetShockLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Sedan_Vehicle_GetShockVelocity(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::sedan::Sedan_Vehicle *arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::sedan::Sedan_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::sedan::Sedan_Vehicle const *)arg1)->GetShockVelocity(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_Vehicle_Initialize__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  chrono::vehicle::sedan::Sedan_Vehicle *arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_Vehicle_Initialize__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::sedan::Sedan_Vehicle *arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_Vehicle_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::sedan::Sedan_Vehicle *arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sedan_Vehicle_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::sedan::Sedan_Vehicle *arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::sedan::Sedan_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::sedan::Sedan_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::sedan::Sedan_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus__SWIG_0() {
  void * jresult ;
  chrono::vehicle::citybus::CityBus *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::citybus::CityBus *)new chrono::vehicle::citybus::CityBus();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus__SWIG_1(void * jarg1) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::citybus::CityBus *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus *)new chrono::vehicle::citybus::CityBus(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CityBus(void * jarg1) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_SetContactMethod(void * jarg1, int jarg2) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  chrono::ChContactMethod arg2 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChContactMethod)jarg2; 
  {
    try {
      (arg1)->SetContactMethod(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_SetChassisFixed(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetChassisFixed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_SetChassisCollisionType(void * jarg1, int jarg2) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  chrono::vehicle::CollisionType arg2 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::CollisionType)jarg2; 
  {
    try {
      (arg1)->SetChassisCollisionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_SetBrakeType(void * jarg1, int jarg2) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  chrono::vehicle::BrakeType arg2 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  {
    try {
      (arg1)->SetBrakeType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_SetTireType(void * jarg1, int jarg2) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  chrono::vehicle::TireModelType arg2 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TireModelType)jarg2; 
  {
    try {
      (arg1)->SetTireType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_SetInitPosition(void * jarg1, void * jarg2) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitPosition((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_SetInitFwdVel(void * jarg1, double jarg2) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetInitFwdVel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_SetTireStepSize(void * jarg1, double jarg2) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetTireStepSize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_EnableBrakeLocking(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->EnableBrakeLocking(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_GetSystem(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus const > *smartarg1 = 0 ;
  chrono::ChSystem *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChSystem *)((chrono::vehicle::citybus::CityBus const *)arg1)->GetSystem();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::ChSystem >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_GetVehicle(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus const > *smartarg1 = 0 ;
  chrono::vehicle::ChWheeledVehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChWheeledVehicle *) &((chrono::vehicle::citybus::CityBus const *)arg1)->GetVehicle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChWheeledVehicle >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_GetChassis(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::citybus::CityBus const *)arg1)->GetChassis();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassis >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CityBus_GetChassisBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::citybus::CityBus const *)arg1)->GetChassisBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBodyAuxRef >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_Initialize(void * jarg1) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Initialize();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_SetAerodynamicDrag(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->SetAerodynamicDrag(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_SetChassisVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetChassisVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_SetSuspensionVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSuspensionVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_SetSteeringVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSteeringVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_SetWheelVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetWheelVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_SetTireVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetTireVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_Synchronize(void * jarg1, double jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  chrono::vehicle::ChTerrain *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  
  arg4 = (chrono::vehicle::ChTerrain *)(((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4) ? ((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4)->get() : 0);
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChTerrain const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,(chrono::vehicle::ChTerrain const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::citybus::CityBus *arg1 = (chrono::vehicle::citybus::CityBus *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_Vehicle__SWIG_0(unsigned int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::ChContactMethod arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  chrono::vehicle::citybus::CityBus_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::ChContactMethod)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_Vehicle *)new chrono::vehicle::citybus::CityBus_Vehicle(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_Vehicle__SWIG_1(unsigned int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::ChContactMethod arg3 ;
  chrono::vehicle::citybus::CityBus_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::ChContactMethod)jarg3; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_Vehicle *)new chrono::vehicle::citybus::CityBus_Vehicle(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_Vehicle__SWIG_2(unsigned int jarg1, int jarg2) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::vehicle::citybus::CityBus_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_Vehicle *)new chrono::vehicle::citybus::CityBus_Vehicle(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_Vehicle__SWIG_3(void * jarg1, unsigned int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::citybus::CityBus_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_Vehicle *)new chrono::vehicle::citybus::CityBus_Vehicle(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CityBus_Vehicle__SWIG_4(void * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::citybus::CityBus_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  {
    try {
      result = (chrono::vehicle::citybus::CityBus_Vehicle *)new chrono::vehicle::citybus::CityBus_Vehicle(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::citybus::CityBus_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CityBus_Vehicle(void * jarg1) {
  chrono::vehicle::citybus::CityBus_Vehicle *arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_CityBus_Vehicle_GetNumberAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::citybus::CityBus_Vehicle *arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Vehicle const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::citybus::CityBus_Vehicle const *)arg1)->GetNumberAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_Vehicle_GetWheelbase(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_Vehicle *arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_Vehicle const *)arg1)->GetWheelbase();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_Vehicle_GetMinTurningRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_Vehicle *arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_Vehicle const *)arg1)->GetMinTurningRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_Vehicle_GetMaxSteeringAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_Vehicle *arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_Vehicle const *)arg1)->GetMaxSteeringAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_Vehicle_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::citybus::CityBus_Vehicle *arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_Vehicle_GetSpringForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_Vehicle *arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_Vehicle const *)arg1)->GetSpringForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_Vehicle_GetSpringLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_Vehicle *arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_Vehicle const *)arg1)->GetSpringLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_Vehicle_GetSpringDeformation(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_Vehicle *arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_Vehicle const *)arg1)->GetSpringDeformation(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_Vehicle_GetShockForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_Vehicle *arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_Vehicle const *)arg1)->GetShockForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_Vehicle_GetShockLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_Vehicle *arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_Vehicle const *)arg1)->GetShockLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CityBus_Vehicle_GetShockVelocity(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::citybus::CityBus_Vehicle *arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::citybus::CityBus_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::citybus::CityBus_Vehicle const *)arg1)->GetShockVelocity(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_Vehicle_Initialize__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  chrono::vehicle::citybus::CityBus_Vehicle *arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_Vehicle_Initialize__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::citybus::CityBus_Vehicle *arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_Vehicle_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::citybus::CityBus_Vehicle *arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CityBus_Vehicle_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::citybus::CityBus_Vehicle *arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::citybus::CityBus_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::citybus::CityBus_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::citybus::CityBus_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t__SWIG_0() {
  void * jresult ;
  chrono::vehicle::man::MAN_5t *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::man::MAN_5t *)new chrono::vehicle::man::MAN_5t();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t__SWIG_1(void * jarg1) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::man::MAN_5t *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t *)new chrono::vehicle::man::MAN_5t(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_5t(void * jarg1) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_SetContactMethod(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  chrono::ChContactMethod arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChContactMethod)jarg2; 
  {
    try {
      (arg1)->SetContactMethod(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_SetChassisFixed(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetChassisFixed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_SetChassisCollisionType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  chrono::vehicle::CollisionType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::CollisionType)jarg2; 
  {
    try {
      (arg1)->SetChassisCollisionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_SetEngineType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  chrono::vehicle::EngineModelType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::EngineModelType)jarg2; 
  {
    try {
      (arg1)->SetEngineType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_SetTransmissionType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  chrono::vehicle::TransmissionModelType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TransmissionModelType)jarg2; 
  {
    try {
      (arg1)->SetTransmissionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_SetBrakeType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  chrono::vehicle::BrakeType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  {
    try {
      (arg1)->SetBrakeType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_SetTireType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  chrono::vehicle::TireModelType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TireModelType)jarg2; 
  {
    try {
      (arg1)->SetTireType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_SetInitPosition(void * jarg1, void * jarg2) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitPosition((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_SetInitFwdVel(void * jarg1, double jarg2) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetInitFwdVel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_SetTireStepSize(void * jarg1, double jarg2) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetTireStepSize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_EnableBrakeLocking(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->EnableBrakeLocking(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_5t_GetSystem(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t const > *smartarg1 = 0 ;
  chrono::ChSystem *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChSystem *)((chrono::vehicle::man::MAN_5t const *)arg1)->GetSystem();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::ChSystem >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_5t_GetVehicle(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t const > *smartarg1 = 0 ;
  chrono::vehicle::ChWheeledVehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChWheeledVehicle *) &((chrono::vehicle::man::MAN_5t const *)arg1)->GetVehicle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChWheeledVehicle >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_5t_GetChassis(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::man::MAN_5t const *)arg1)->GetChassis();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassis >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_5t_GetChassisBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::man::MAN_5t const *)arg1)->GetChassisBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBodyAuxRef >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_Initialize(void * jarg1) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Initialize();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_SetAerodynamicDrag(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->SetAerodynamicDrag(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_SetChassisVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetChassisVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_SetSuspensionVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSuspensionVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_SetSteeringVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSteeringVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_SetWheelVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetWheelVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_SetTireVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetTireVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_Synchronize(void * jarg1, double jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  chrono::vehicle::ChTerrain *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  
  arg4 = (chrono::vehicle::ChTerrain *)(((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4) ? ((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4)->get() : 0);
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChTerrain const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,(chrono::vehicle::ChTerrain const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_5t *arg1 = (chrono::vehicle::man::MAN_5t *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_7t__SWIG_0() {
  void * jresult ;
  chrono::vehicle::man::MAN_7t *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::man::MAN_7t *)new chrono::vehicle::man::MAN_7t();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_7t >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_7t__SWIG_1(void * jarg1) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::man::MAN_7t *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::man::MAN_7t *)new chrono::vehicle::man::MAN_7t(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_7t >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_7t(void * jarg1) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_SetContactMethod(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  chrono::ChContactMethod arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChContactMethod)jarg2; 
  {
    try {
      (arg1)->SetContactMethod(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_SetChassisFixed(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetChassisFixed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_SetChassisCollisionType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  chrono::vehicle::CollisionType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::CollisionType)jarg2; 
  {
    try {
      (arg1)->SetChassisCollisionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_SetDriveline6WD(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetDriveline6WD(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_SetEngineType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  chrono::vehicle::EngineModelType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::EngineModelType)jarg2; 
  {
    try {
      (arg1)->SetEngineType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_SetTransmissionType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  chrono::vehicle::TransmissionModelType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TransmissionModelType)jarg2; 
  {
    try {
      (arg1)->SetTransmissionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_SetBrakeType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  chrono::vehicle::BrakeType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  {
    try {
      (arg1)->SetBrakeType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_SetTireType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  chrono::vehicle::TireModelType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TireModelType)jarg2; 
  {
    try {
      (arg1)->SetTireType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_SetInitPosition(void * jarg1, void * jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitPosition((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_SetInitFwdVel(void * jarg1, double jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetInitFwdVel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_SetTireStepSize(void * jarg1, double jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetTireStepSize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_EnableBrakeLocking(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->EnableBrakeLocking(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_7t_GetSystem(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t const > *smartarg1 = 0 ;
  chrono::ChSystem *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChSystem *)((chrono::vehicle::man::MAN_7t const *)arg1)->GetSystem();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::ChSystem >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_7t_GetVehicle(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t const > *smartarg1 = 0 ;
  chrono::vehicle::ChWheeledVehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChWheeledVehicle *) &((chrono::vehicle::man::MAN_7t const *)arg1)->GetVehicle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChWheeledVehicle >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_7t_GetChassis(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::man::MAN_7t const *)arg1)->GetChassis();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassis >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_7t_GetChassisBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::man::MAN_7t const *)arg1)->GetChassisBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBodyAuxRef >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_Initialize(void * jarg1) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Initialize();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_SetAerodynamicDrag(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->SetAerodynamicDrag(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_SetChassisVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetChassisVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_SetSuspensionVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSuspensionVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_SetSteeringVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSteeringVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_SetWheelVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetWheelVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_SetTireVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetTireVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_Synchronize(void * jarg1, double jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  chrono::vehicle::ChTerrain *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  
  arg4 = (chrono::vehicle::ChTerrain *)(((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4) ? ((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4)->get() : 0);
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChTerrain const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,(chrono::vehicle::ChTerrain const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_7t *arg1 = (chrono::vehicle::man::MAN_7t *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_10t__SWIG_0() {
  void * jresult ;
  chrono::vehicle::man::MAN_10t *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::man::MAN_10t *)new chrono::vehicle::man::MAN_10t();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_10t >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_10t__SWIG_1(void * jarg1) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::man::MAN_10t *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::man::MAN_10t *)new chrono::vehicle::man::MAN_10t(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_10t >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_10t(void * jarg1) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_SetContactMethod(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  chrono::ChContactMethod arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChContactMethod)jarg2; 
  {
    try {
      (arg1)->SetContactMethod(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_SetChassisFixed(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetChassisFixed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_SetChassisCollisionType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  chrono::vehicle::CollisionType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::CollisionType)jarg2; 
  {
    try {
      (arg1)->SetChassisCollisionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_SetDriveline8WD(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetDriveline8WD(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_SetEngineType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  chrono::vehicle::EngineModelType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::EngineModelType)jarg2; 
  {
    try {
      (arg1)->SetEngineType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_SetTransmissionType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  chrono::vehicle::TransmissionModelType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TransmissionModelType)jarg2; 
  {
    try {
      (arg1)->SetTransmissionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_SetBrakeType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  chrono::vehicle::BrakeType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  {
    try {
      (arg1)->SetBrakeType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_SetTireType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  chrono::vehicle::TireModelType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TireModelType)jarg2; 
  {
    try {
      (arg1)->SetTireType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_SetInitPosition(void * jarg1, void * jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitPosition((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_SetInitFwdVel(void * jarg1, double jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetInitFwdVel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_SetTireStepSize(void * jarg1, double jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetTireStepSize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_EnableBrakeLocking(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->EnableBrakeLocking(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_10t_GetSystem(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t const > *smartarg1 = 0 ;
  chrono::ChSystem *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChSystem *)((chrono::vehicle::man::MAN_10t const *)arg1)->GetSystem();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::ChSystem >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_10t_GetVehicle(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t const > *smartarg1 = 0 ;
  chrono::vehicle::ChWheeledVehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChWheeledVehicle *) &((chrono::vehicle::man::MAN_10t const *)arg1)->GetVehicle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChWheeledVehicle >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_10t_GetChassis(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::man::MAN_10t const *)arg1)->GetChassis();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassis >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAN_10t_GetChassisBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::man::MAN_10t const *)arg1)->GetChassisBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBodyAuxRef >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_Initialize(void * jarg1) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Initialize();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_SetAerodynamicDrag(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->SetAerodynamicDrag(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_SetChassisVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetChassisVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_SetSuspensionVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSuspensionVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_SetSteeringVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSteeringVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_SetWheelVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetWheelVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_SetTireVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetTireVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_Synchronize(void * jarg1, double jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  chrono::vehicle::ChTerrain *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  
  arg4 = (chrono::vehicle::ChTerrain *)(((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4) ? ((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4)->get() : 0);
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChTerrain const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,(chrono::vehicle::ChTerrain const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_10t *arg1 = (chrono::vehicle::man::MAN_10t *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_Vehicle__SWIG_0(unsigned int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::ChContactMethod arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  chrono::vehicle::man::MAN_5t_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::ChContactMethod)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_Vehicle *)new chrono::vehicle::man::MAN_5t_Vehicle(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_Vehicle__SWIG_1(unsigned int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::ChContactMethod arg3 ;
  chrono::vehicle::man::MAN_5t_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::ChContactMethod)jarg3; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_Vehicle *)new chrono::vehicle::man::MAN_5t_Vehicle(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_Vehicle__SWIG_2(void * jarg1, unsigned int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::man::MAN_5t_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_Vehicle *)new chrono::vehicle::man::MAN_5t_Vehicle(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_5t_Vehicle__SWIG_3(void * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::man::MAN_5t_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  {
    try {
      result = (chrono::vehicle::man::MAN_5t_Vehicle *)new chrono::vehicle::man::MAN_5t_Vehicle(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_5t_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_5t_Vehicle(void * jarg1) {
  chrono::vehicle::man::MAN_5t_Vehicle *arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAN_5t_Vehicle_GetNumberAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::man::MAN_5t_Vehicle *arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Vehicle const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::man::MAN_5t_Vehicle const *)arg1)->GetNumberAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_Vehicle_GetWheelbase(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_Vehicle *arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_Vehicle const *)arg1)->GetWheelbase();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_Vehicle_GetMinTurningRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_Vehicle *arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_Vehicle const *)arg1)->GetMinTurningRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_Vehicle_GetMaxSteeringAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_Vehicle *arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_Vehicle const *)arg1)->GetMaxSteeringAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_Vehicle_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::man::MAN_5t_Vehicle *arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_Vehicle_GetSpringForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_Vehicle *arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_Vehicle const *)arg1)->GetSpringForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_Vehicle_GetSpringLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_Vehicle *arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_Vehicle const *)arg1)->GetSpringLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_Vehicle_GetSpringDeformation(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_Vehicle *arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_Vehicle const *)arg1)->GetSpringDeformation(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_Vehicle_GetShockForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_Vehicle *arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_Vehicle const *)arg1)->GetShockForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_Vehicle_GetShockLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_Vehicle *arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_Vehicle const *)arg1)->GetShockLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_5t_Vehicle_GetShockVelocity(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::man::MAN_5t_Vehicle *arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_5t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_5t_Vehicle const *)arg1)->GetShockVelocity(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_Vehicle_Initialize__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  chrono::vehicle::man::MAN_5t_Vehicle *arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_Vehicle_Initialize__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::man::MAN_5t_Vehicle *arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_Vehicle_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::man::MAN_5t_Vehicle *arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_5t_Vehicle_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_5t_Vehicle *arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_5t_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_5t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_5t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_7t_Vehicle__SWIG_0(unsigned int jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::ChContactMethod arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  bool arg5 ;
  chrono::vehicle::man::MAN_7t_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::ChContactMethod)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (chrono::vehicle::man::MAN_7t_Vehicle *)new chrono::vehicle::man::MAN_7t_Vehicle(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_7t_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_7t_Vehicle__SWIG_1(unsigned int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::ChContactMethod arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  chrono::vehicle::man::MAN_7t_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::ChContactMethod)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  {
    try {
      result = (chrono::vehicle::man::MAN_7t_Vehicle *)new chrono::vehicle::man::MAN_7t_Vehicle(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_7t_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_7t_Vehicle__SWIG_2(unsigned int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::ChContactMethod arg3 ;
  chrono::vehicle::man::MAN_7t_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::ChContactMethod)jarg3; 
  {
    try {
      result = (chrono::vehicle::man::MAN_7t_Vehicle *)new chrono::vehicle::man::MAN_7t_Vehicle(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_7t_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_7t_Vehicle__SWIG_3(unsigned int jarg1, int jarg2) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::vehicle::man::MAN_7t_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  {
    try {
      result = (chrono::vehicle::man::MAN_7t_Vehicle *)new chrono::vehicle::man::MAN_7t_Vehicle(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_7t_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_7t_Vehicle__SWIG_4(void * jarg1, unsigned int jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  bool arg5 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::man::MAN_7t_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (chrono::vehicle::man::MAN_7t_Vehicle *)new chrono::vehicle::man::MAN_7t_Vehicle(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_7t_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_7t_Vehicle__SWIG_5(void * jarg1, unsigned int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::man::MAN_7t_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  {
    try {
      result = (chrono::vehicle::man::MAN_7t_Vehicle *)new chrono::vehicle::man::MAN_7t_Vehicle(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_7t_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_7t_Vehicle__SWIG_6(void * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::man::MAN_7t_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  {
    try {
      result = (chrono::vehicle::man::MAN_7t_Vehicle *)new chrono::vehicle::man::MAN_7t_Vehicle(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_7t_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_7t_Vehicle(void * jarg1) {
  chrono::vehicle::man::MAN_7t_Vehicle *arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAN_7t_Vehicle_GetNumberAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::man::MAN_7t_Vehicle *arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_Vehicle const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_7t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::man::MAN_7t_Vehicle const *)arg1)->GetNumberAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_7t_Vehicle_GetWheelbase(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_7t_Vehicle *arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_7t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_7t_Vehicle const *)arg1)->GetWheelbase();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_7t_Vehicle_GetMinTurningRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_7t_Vehicle *arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_7t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_7t_Vehicle const *)arg1)->GetMinTurningRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_7t_Vehicle_GetMaxSteeringAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_7t_Vehicle *arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_7t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_7t_Vehicle const *)arg1)->GetMaxSteeringAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_Vehicle_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::man::MAN_7t_Vehicle *arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_7t_Vehicle_GetSpringForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::man::MAN_7t_Vehicle *arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_7t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_7t_Vehicle const *)arg1)->GetSpringForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_7t_Vehicle_GetSpringLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::man::MAN_7t_Vehicle *arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_7t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_7t_Vehicle const *)arg1)->GetSpringLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_7t_Vehicle_GetSpringDeformation(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::man::MAN_7t_Vehicle *arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_7t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_7t_Vehicle const *)arg1)->GetSpringDeformation(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_7t_Vehicle_GetShockForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::man::MAN_7t_Vehicle *arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_7t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_7t_Vehicle const *)arg1)->GetShockForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_7t_Vehicle_GetShockLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::man::MAN_7t_Vehicle *arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_7t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_7t_Vehicle const *)arg1)->GetShockLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_7t_Vehicle_GetShockVelocity(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::man::MAN_7t_Vehicle *arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_7t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_7t_Vehicle const *)arg1)->GetShockVelocity(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_Vehicle_Initialize__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  chrono::vehicle::man::MAN_7t_Vehicle *arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_Vehicle_Initialize__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::man::MAN_7t_Vehicle *arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_Vehicle_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::man::MAN_7t_Vehicle *arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_7t_Vehicle_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_7t_Vehicle *arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_7t_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_7t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_7t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_10t_Vehicle__SWIG_0(unsigned int jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::ChContactMethod arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  bool arg5 ;
  chrono::vehicle::man::MAN_10t_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::ChContactMethod)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (chrono::vehicle::man::MAN_10t_Vehicle *)new chrono::vehicle::man::MAN_10t_Vehicle(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_10t_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_10t_Vehicle__SWIG_1(unsigned int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::ChContactMethod arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  chrono::vehicle::man::MAN_10t_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::ChContactMethod)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  {
    try {
      result = (chrono::vehicle::man::MAN_10t_Vehicle *)new chrono::vehicle::man::MAN_10t_Vehicle(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_10t_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_10t_Vehicle__SWIG_2(unsigned int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::ChContactMethod arg3 ;
  chrono::vehicle::man::MAN_10t_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::ChContactMethod)jarg3; 
  {
    try {
      result = (chrono::vehicle::man::MAN_10t_Vehicle *)new chrono::vehicle::man::MAN_10t_Vehicle(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_10t_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_10t_Vehicle__SWIG_3(unsigned int jarg1, int jarg2) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::vehicle::man::MAN_10t_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  {
    try {
      result = (chrono::vehicle::man::MAN_10t_Vehicle *)new chrono::vehicle::man::MAN_10t_Vehicle(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_10t_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_10t_Vehicle__SWIG_4(void * jarg1, unsigned int jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  bool arg5 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::man::MAN_10t_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (chrono::vehicle::man::MAN_10t_Vehicle *)new chrono::vehicle::man::MAN_10t_Vehicle(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_10t_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_10t_Vehicle__SWIG_5(void * jarg1, unsigned int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::man::MAN_10t_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  {
    try {
      result = (chrono::vehicle::man::MAN_10t_Vehicle *)new chrono::vehicle::man::MAN_10t_Vehicle(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_10t_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAN_10t_Vehicle__SWIG_6(void * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::man::MAN_10t_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  {
    try {
      result = (chrono::vehicle::man::MAN_10t_Vehicle *)new chrono::vehicle::man::MAN_10t_Vehicle(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::man::MAN_10t_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAN_10t_Vehicle(void * jarg1) {
  chrono::vehicle::man::MAN_10t_Vehicle *arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAN_10t_Vehicle_GetNumberAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::man::MAN_10t_Vehicle *arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Vehicle const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::man::MAN_10t_Vehicle const *)arg1)->GetNumberAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_10t_Vehicle_GetWheelbase(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_10t_Vehicle *arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_10t_Vehicle const *)arg1)->GetWheelbase();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_10t_Vehicle_GetMinTurningRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_10t_Vehicle *arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_10t_Vehicle const *)arg1)->GetMinTurningRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_10t_Vehicle_GetMaxSteeringAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::man::MAN_10t_Vehicle *arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_10t_Vehicle const *)arg1)->GetMaxSteeringAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_Vehicle_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::man::MAN_10t_Vehicle *arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_10t_Vehicle_GetSpringForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::man::MAN_10t_Vehicle *arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_10t_Vehicle const *)arg1)->GetSpringForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_10t_Vehicle_GetSpringLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::man::MAN_10t_Vehicle *arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_10t_Vehicle const *)arg1)->GetSpringLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_10t_Vehicle_GetSpringDeformation(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::man::MAN_10t_Vehicle *arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_10t_Vehicle const *)arg1)->GetSpringDeformation(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_10t_Vehicle_GetShockForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::man::MAN_10t_Vehicle *arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_10t_Vehicle const *)arg1)->GetShockForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_10t_Vehicle_GetShockLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::man::MAN_10t_Vehicle *arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_10t_Vehicle const *)arg1)->GetShockLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAN_10t_Vehicle_GetShockVelocity(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::man::MAN_10t_Vehicle *arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::man::MAN_10t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::man::MAN_10t_Vehicle const *)arg1)->GetShockVelocity(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_Vehicle_Initialize__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  chrono::vehicle::man::MAN_10t_Vehicle *arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_Vehicle_Initialize__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::man::MAN_10t_Vehicle *arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_Vehicle_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::man::MAN_10t_Vehicle *arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAN_10t_Vehicle_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::man::MAN_10t_Vehicle *arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::man::MAN_10t_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::man::MAN_10t_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::man::MAN_10t_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS__SWIG_0() {
  void * jresult ;
  chrono::vehicle::uaz::UAZBUS *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS *)new chrono::vehicle::uaz::UAZBUS();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS__SWIG_1(void * jarg1) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS *)new chrono::vehicle::uaz::UAZBUS(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UAZBUS(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_SetContactMethod(void * jarg1, int jarg2) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  chrono::ChContactMethod arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChContactMethod)jarg2; 
  {
    try {
      (arg1)->SetContactMethod(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_SetChassisFixed(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetChassisFixed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_SetChassisCollisionType(void * jarg1, int jarg2) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  chrono::vehicle::CollisionType arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::CollisionType)jarg2; 
  {
    try {
      (arg1)->SetChassisCollisionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_SetBrakeType(void * jarg1, int jarg2) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  chrono::vehicle::BrakeType arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  {
    try {
      (arg1)->SetBrakeType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_SetEngineType(void * jarg1, int jarg2) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  chrono::vehicle::EngineModelType arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::EngineModelType)jarg2; 
  {
    try {
      (arg1)->SetEngineType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_SetTransmissionType(void * jarg1, int jarg2) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  chrono::vehicle::TransmissionModelType arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TransmissionModelType)jarg2; 
  {
    try {
      (arg1)->SetTransmissionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_SetTireType(void * jarg1, int jarg2) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  chrono::vehicle::TireModelType arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TireModelType)jarg2; 
  {
    try {
      (arg1)->SetTireType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_SetInitPosition(void * jarg1, void * jarg2) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitPosition((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_SetInitFwdVel(void * jarg1, double jarg2) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetInitFwdVel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_SetTireStepSize(void * jarg1, double jarg2) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetTireStepSize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_EnableBrakeLocking(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->EnableBrakeLocking(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UAZBUS_GetSystem(void * jarg1) {
  void * jresult ;
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS const > *smartarg1 = 0 ;
  chrono::ChSystem *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChSystem *)((chrono::vehicle::uaz::UAZBUS const *)arg1)->GetSystem();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::ChSystem >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UAZBUS_GetVehicle(void * jarg1) {
  void * jresult ;
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS const > *smartarg1 = 0 ;
  chrono::vehicle::ChWheeledVehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChWheeledVehicle *) &((chrono::vehicle::uaz::UAZBUS const *)arg1)->GetVehicle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChWheeledVehicle >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UAZBUS_GetChassis(void * jarg1) {
  void * jresult ;
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::uaz::UAZBUS const *)arg1)->GetChassis();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassis >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UAZBUS_GetChassisBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::uaz::UAZBUS const *)arg1)->GetChassisBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBodyAuxRef >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_Initialize(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Initialize();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_LockAxleDifferential(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LockAxleDifferential(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_LockCentralDifferential(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LockCentralDifferential(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_SetAerodynamicDrag(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->SetAerodynamicDrag(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_SetChassisVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetChassisVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_SetSuspensionVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSuspensionVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_SetSteeringVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSteeringVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_SetWheelVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetWheelVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_SetTireVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetTireVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_Synchronize(void * jarg1, double jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  chrono::vehicle::ChTerrain *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  
  arg4 = (chrono::vehicle::ChTerrain *)(((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4) ? ((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4)->get() : 0);
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChTerrain const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,(chrono::vehicle::ChTerrain const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::uaz::UAZBUS *arg1 = (chrono::vehicle::uaz::UAZBUS *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_Vehicle__SWIG_0(unsigned int jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::vehicle::SteeringTypeWV arg3 ;
  chrono::ChContactMethod arg4 ;
  chrono::vehicle::CollisionType arg5 ;
  chrono::vehicle::uaz::UAZBUS_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::vehicle::SteeringTypeWV)jarg3; 
  arg4 = (chrono::ChContactMethod)jarg4; 
  arg5 = (chrono::vehicle::CollisionType)jarg5; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_Vehicle *)new chrono::vehicle::uaz::UAZBUS_Vehicle(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_Vehicle__SWIG_1(unsigned int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::vehicle::SteeringTypeWV arg3 ;
  chrono::ChContactMethod arg4 ;
  chrono::vehicle::uaz::UAZBUS_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::vehicle::SteeringTypeWV)jarg3; 
  arg4 = (chrono::ChContactMethod)jarg4; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_Vehicle *)new chrono::vehicle::uaz::UAZBUS_Vehicle(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_Vehicle__SWIG_2(unsigned int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::vehicle::SteeringTypeWV arg3 ;
  chrono::vehicle::uaz::UAZBUS_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::vehicle::SteeringTypeWV)jarg3; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_Vehicle *)new chrono::vehicle::uaz::UAZBUS_Vehicle(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_Vehicle__SWIG_3(void * jarg1, unsigned int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  chrono::vehicle::SteeringTypeWV arg4 ;
  chrono::vehicle::CollisionType arg5 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = (chrono::vehicle::SteeringTypeWV)jarg4; 
  arg5 = (chrono::vehicle::CollisionType)jarg5; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_Vehicle *)new chrono::vehicle::uaz::UAZBUS_Vehicle(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UAZBUS_Vehicle__SWIG_4(void * jarg1, unsigned int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  chrono::vehicle::SteeringTypeWV arg4 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::uaz::UAZBUS_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = (chrono::vehicle::SteeringTypeWV)jarg4; 
  {
    try {
      result = (chrono::vehicle::uaz::UAZBUS_Vehicle *)new chrono::vehicle::uaz::UAZBUS_Vehicle(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UAZBUS_Vehicle(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_Vehicle *arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_UAZBUS_Vehicle_GetNumberAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::uaz::UAZBUS_Vehicle *arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Vehicle const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::uaz::UAZBUS_Vehicle const *)arg1)->GetNumberAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Vehicle_GetWheelbase(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Vehicle *arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Vehicle const *)arg1)->GetWheelbase();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Vehicle_GetMinTurningRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Vehicle *arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Vehicle const *)arg1)->GetMinTurningRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Vehicle_GetMaxSteeringAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Vehicle *arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Vehicle const *)arg1)->GetMaxSteeringAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_Vehicle_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::uaz::UAZBUS_Vehicle *arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Vehicle_GetSpringForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Vehicle *arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Vehicle const *)arg1)->GetSpringForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Vehicle_GetSpringLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Vehicle *arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Vehicle const *)arg1)->GetSpringLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Vehicle_GetSpringDeformation(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Vehicle *arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Vehicle const *)arg1)->GetSpringDeformation(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Vehicle_GetShockForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Vehicle *arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Vehicle const *)arg1)->GetShockForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Vehicle_GetShockLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Vehicle *arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Vehicle const *)arg1)->GetShockLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UAZBUS_Vehicle_GetShockVelocity(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::uaz::UAZBUS_Vehicle *arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::uaz::UAZBUS_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::uaz::UAZBUS_Vehicle const *)arg1)->GetShockVelocity(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_Vehicle_Initialize__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  chrono::vehicle::uaz::UAZBUS_Vehicle *arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_Vehicle_Initialize__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::uaz::UAZBUS_Vehicle *arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_Vehicle_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::uaz::UAZBUS_Vehicle *arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UAZBUS_Vehicle_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::uaz::UAZBUS_Vehicle *arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::uaz::UAZBUS_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::uaz::UAZBUS_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator__SWIG_0() {
  void * jresult ;
  chrono::vehicle::gator::Gator *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::gator::Gator *)new chrono::vehicle::gator::Gator();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator__SWIG_1(void * jarg1) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::gator::Gator *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::gator::Gator *)new chrono::vehicle::gator::Gator(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Gator(void * jarg1) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SetContactMethod(void * jarg1, int jarg2) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  chrono::ChContactMethod arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChContactMethod)jarg2; 
  {
    try {
      (arg1)->SetContactMethod(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SetChassisFixed(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetChassisFixed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SetChassisCollisionType(void * jarg1, int jarg2) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  chrono::vehicle::CollisionType arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::CollisionType)jarg2; 
  {
    try {
      (arg1)->SetChassisCollisionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SetBrakeType(void * jarg1, int jarg2) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  chrono::vehicle::BrakeType arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  {
    try {
      (arg1)->SetBrakeType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SetDrivelineType(void * jarg1, int jarg2) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  chrono::vehicle::DrivelineTypeWV arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::DrivelineTypeWV)jarg2; 
  {
    try {
      (arg1)->SetDrivelineType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SetTireType(void * jarg1, int jarg2) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  chrono::vehicle::TireModelType arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TireModelType)jarg2; 
  {
    try {
      (arg1)->SetTireType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SetTireCollisionType(void * jarg1, int jarg2) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  chrono::vehicle::ChTire::CollisionType arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::ChTire::CollisionType)jarg2; 
  {
    try {
      (arg1)->SetTireCollisionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SetInitPosition(void * jarg1, void * jarg2) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitPosition((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SetInitFwdVel(void * jarg1, double jarg2) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetInitFwdVel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SetTireStepSize(void * jarg1, double jarg2) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetTireStepSize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_EnableBrakeLocking(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->EnableBrakeLocking(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gator_GetSystem(void * jarg1) {
  void * jresult ;
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator const > *smartarg1 = 0 ;
  chrono::ChSystem *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChSystem *)((chrono::vehicle::gator::Gator const *)arg1)->GetSystem();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::ChSystem >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gator_GetVehicle(void * jarg1) {
  void * jresult ;
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator const > *smartarg1 = 0 ;
  chrono::vehicle::ChWheeledVehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChWheeledVehicle *) &((chrono::vehicle::gator::Gator const *)arg1)->GetVehicle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChWheeledVehicle >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gator_GetChassis(void * jarg1) {
  void * jresult ;
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::gator::Gator const *)arg1)->GetChassis();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassis >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gator_GetChassisBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::gator::Gator const *)arg1)->GetChassisBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBodyAuxRef >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_Initialize(void * jarg1) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Initialize();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_LockAxleDifferential(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LockAxleDifferential(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SetAerodynamicDrag(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->SetAerodynamicDrag(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SetChassisVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetChassisVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SetSuspensionVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSuspensionVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SetSteeringVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSteeringVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SetWheelVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetWheelVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_SetTireVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetTireVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_Synchronize(void * jarg1, double jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  chrono::vehicle::ChTerrain *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  
  arg4 = (chrono::vehicle::ChTerrain *)(((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4) ? ((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4)->get() : 0);
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChTerrain const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,(chrono::vehicle::ChTerrain const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::gator::Gator *arg1 = (chrono::vehicle::gator::Gator *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_Vehicle__SWIG_0(unsigned int jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::DrivelineTypeWV arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  chrono::ChContactMethod arg4 ;
  chrono::vehicle::CollisionType arg5 ;
  chrono::vehicle::gator::Gator_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::DrivelineTypeWV)jarg2; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = (chrono::ChContactMethod)jarg4; 
  arg5 = (chrono::vehicle::CollisionType)jarg5; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_Vehicle *)new chrono::vehicle::gator::Gator_Vehicle(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Gator_Vehicle__SWIG_1(void * jarg1, unsigned int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::DrivelineTypeWV arg3 ;
  chrono::vehicle::BrakeType arg4 ;
  chrono::vehicle::CollisionType arg5 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::gator::Gator_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::DrivelineTypeWV)jarg3; 
  arg4 = (chrono::vehicle::BrakeType)jarg4; 
  arg5 = (chrono::vehicle::CollisionType)jarg5; 
  {
    try {
      result = (chrono::vehicle::gator::Gator_Vehicle *)new chrono::vehicle::gator::Gator_Vehicle(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::gator::Gator_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Gator_Vehicle(void * jarg1) {
  chrono::vehicle::gator::Gator_Vehicle *arg1 = (chrono::vehicle::gator::Gator_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_Gator_Vehicle_GetNumberAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::gator::Gator_Vehicle *arg1 = (chrono::vehicle::gator::Gator_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Vehicle const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::gator::Gator_Vehicle const *)arg1)->GetNumberAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_Vehicle_GetWheelbase(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_Vehicle *arg1 = (chrono::vehicle::gator::Gator_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_Vehicle const *)arg1)->GetWheelbase();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_Vehicle_GetMinTurningRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_Vehicle *arg1 = (chrono::vehicle::gator::Gator_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_Vehicle const *)arg1)->GetMinTurningRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_Vehicle_GetMaxSteeringAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::gator::Gator_Vehicle *arg1 = (chrono::vehicle::gator::Gator_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_Vehicle const *)arg1)->GetMaxSteeringAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_Vehicle_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::gator::Gator_Vehicle *arg1 = (chrono::vehicle::gator::Gator_Vehicle *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_Vehicle_GetShockForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::gator::Gator_Vehicle *arg1 = (chrono::vehicle::gator::Gator_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_Vehicle const *)arg1)->GetShockForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_Vehicle_GetShockLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::gator::Gator_Vehicle *arg1 = (chrono::vehicle::gator::Gator_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_Vehicle const *)arg1)->GetShockLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Gator_Vehicle_GetShockVelocity(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::gator::Gator_Vehicle *arg1 = (chrono::vehicle::gator::Gator_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::gator::Gator_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::gator::Gator_Vehicle const *)arg1)->GetShockVelocity(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_Vehicle_Initialize__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  chrono::vehicle::gator::Gator_Vehicle *arg1 = (chrono::vehicle::gator::Gator_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_Vehicle_Initialize__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::gator::Gator_Vehicle *arg1 = (chrono::vehicle::gator::Gator_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_Vehicle_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::gator::Gator_Vehicle *arg1 = (chrono::vehicle::gator::Gator_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Gator_Vehicle_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::gator::Gator_Vehicle *arg1 = (chrono::vehicle::gator::Gator_Vehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::gator::Gator_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::gator::Gator_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::gator::Gator_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCCar__SWIG_0() {
  void * jresult ;
  chrono::vehicle::rccar::RCCar *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::rccar::RCCar *)new chrono::vehicle::rccar::RCCar();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::rccar::RCCar >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCCar__SWIG_1(void * jarg1) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::rccar::RCCar *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::rccar::RCCar *)new chrono::vehicle::rccar::RCCar(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::rccar::RCCar >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RCCar(void * jarg1) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_SetContactMethod(void * jarg1, int jarg2) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  chrono::ChContactMethod arg2 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChContactMethod)jarg2; 
  {
    try {
      (arg1)->SetContactMethod(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_SetChassisFixed(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetChassisFixed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_SetChassisCollisionType(void * jarg1, int jarg2) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  chrono::vehicle::CollisionType arg2 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::CollisionType)jarg2; 
  {
    try {
      (arg1)->SetChassisCollisionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_SetTireType(void * jarg1, int jarg2) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  chrono::vehicle::TireModelType arg2 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TireModelType)jarg2; 
  {
    try {
      (arg1)->SetTireType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_SetInitPosition(void * jarg1, void * jarg2) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitPosition((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_SetInitFwdVel(void * jarg1, double jarg2) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetInitFwdVel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_SetTireStepSize(void * jarg1, double jarg2) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetTireStepSize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_GetSystem(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar const > *smartarg1 = 0 ;
  chrono::ChSystem *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChSystem *)((chrono::vehicle::rccar::RCCar const *)arg1)->GetSystem();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::ChSystem >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_GetVehicle(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar const > *smartarg1 = 0 ;
  chrono::vehicle::ChWheeledVehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChWheeledVehicle *) &((chrono::vehicle::rccar::RCCar const *)arg1)->GetVehicle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChWheeledVehicle >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_GetChassis(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::rccar::RCCar const *)arg1)->GetChassis();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassis >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RCCar_GetChassisBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::rccar::RCCar const *)arg1)->GetChassisBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBodyAuxRef >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_Initialize(void * jarg1) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Initialize();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_LockAxleDifferential(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LockAxleDifferential(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_SetAerodynamicDrag(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->SetAerodynamicDrag(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_SetChassisVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetChassisVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_SetSuspensionVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSuspensionVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_SetSteeringVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSteeringVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_SetWheelVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetWheelVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_SetTireVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetTireVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_SetMaxMotorVoltageRatio(void * jarg1, double jarg2) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetMaxMotorVoltageRatio(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_SetStallTorque(void * jarg1, double jarg2) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetStallTorque(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_SetTireRollingResistance(void * jarg1, double jarg2) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetTireRollingResistance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_Synchronize(void * jarg1, double jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  chrono::vehicle::ChTerrain *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  
  arg4 = (chrono::vehicle::ChTerrain *)(((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4) ? ((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4)->get() : 0);
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChTerrain const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,(chrono::vehicle::ChTerrain const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::rccar::RCCar *arg1 = (chrono::vehicle::rccar::RCCar *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCCar_Vehicle__SWIG_0(unsigned int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  bool arg1 ;
  chrono::ChContactMethod arg2 ;
  chrono::vehicle::CollisionType arg3 ;
  chrono::vehicle::rccar::RCCar_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::ChContactMethod)jarg2; 
  arg3 = (chrono::vehicle::CollisionType)jarg3; 
  {
    try {
      result = (chrono::vehicle::rccar::RCCar_Vehicle *)new chrono::vehicle::rccar::RCCar_Vehicle(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::rccar::RCCar_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RCCar_Vehicle__SWIG_1(void * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::CollisionType arg3 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::rccar::RCCar_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::CollisionType)jarg3; 
  {
    try {
      result = (chrono::vehicle::rccar::RCCar_Vehicle *)new chrono::vehicle::rccar::RCCar_Vehicle(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::rccar::RCCar_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RCCar_Vehicle(void * jarg1) {
  chrono::vehicle::rccar::RCCar_Vehicle *arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_RCCar_Vehicle_GetNumberAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::rccar::RCCar_Vehicle *arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Vehicle const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::rccar::RCCar_Vehicle const *)arg1)->GetNumberAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Vehicle_GetWheelbase(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Vehicle *arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Vehicle const *)arg1)->GetWheelbase();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Vehicle_GetMinTurningRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Vehicle *arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Vehicle const *)arg1)->GetMinTurningRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Vehicle_GetMaxSteeringAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Vehicle *arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Vehicle const *)arg1)->GetMaxSteeringAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_Vehicle_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::rccar::RCCar_Vehicle *arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Vehicle_GetSpringForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Vehicle *arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Vehicle const *)arg1)->GetSpringForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Vehicle_GetSpringLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Vehicle *arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Vehicle const *)arg1)->GetSpringLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Vehicle_GetSpringDeformation(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Vehicle *arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Vehicle const *)arg1)->GetSpringDeformation(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Vehicle_GetShockForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Vehicle *arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Vehicle const *)arg1)->GetShockForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Vehicle_GetShockLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Vehicle *arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Vehicle const *)arg1)->GetShockLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RCCar_Vehicle_GetShockVelocity(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::rccar::RCCar_Vehicle *arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::rccar::RCCar_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::rccar::RCCar_Vehicle const *)arg1)->GetShockVelocity(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_Vehicle_Initialize__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  chrono::vehicle::rccar::RCCar_Vehicle *arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_Vehicle_Initialize__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::rccar::RCCar_Vehicle *arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_Vehicle_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::rccar::RCCar_Vehicle *arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RCCar_Vehicle_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::rccar::RCCar_Vehicle *arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::rccar::RCCar_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::rccar::RCCar_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::rccar::RCCar_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA__SWIG_0() {
  void * jresult ;
  chrono::vehicle::feda::FEDA *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::feda::FEDA *)new chrono::vehicle::feda::FEDA();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA__SWIG_1(void * jarg1) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::feda::FEDA *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::feda::FEDA *)new chrono::vehicle::feda::FEDA(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FEDA(void * jarg1) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetContactMethod(void * jarg1, int jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  chrono::ChContactMethod arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChContactMethod)jarg2; 
  {
    try {
      (arg1)->SetContactMethod(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetChassisFixed(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetChassisFixed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetChassisCollisionType(void * jarg1, int jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  chrono::vehicle::CollisionType arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::CollisionType)jarg2; 
  {
    try {
      (arg1)->SetChassisCollisionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetBrakeType(void * jarg1, int jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  chrono::vehicle::BrakeType arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  {
    try {
      (arg1)->SetBrakeType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetEngineType(void * jarg1, int jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  chrono::vehicle::EngineModelType arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::EngineModelType)jarg2; 
  {
    try {
      (arg1)->SetEngineType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetTransmissionType(void * jarg1, int jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  chrono::vehicle::TransmissionModelType arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TransmissionModelType)jarg2; 
  {
    try {
      (arg1)->SetTransmissionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetTireType(void * jarg1, int jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  chrono::vehicle::TireModelType arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TireModelType)jarg2; 
  {
    try {
      (arg1)->SetTireType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetTireCollisionType(void * jarg1, int jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  chrono::vehicle::ChTire::CollisionType arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::ChTire::CollisionType)jarg2; 
  {
    try {
      (arg1)->SetTireCollisionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetTirePressure(void * jarg1, double jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetTirePressure(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetInitPosition(void * jarg1, void * jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitPosition((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetInitFwdVel(void * jarg1, double jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetInitFwdVel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetTireStepSize(void * jarg1, double jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetTireStepSize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetRideHeight_Low(void * jarg1) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetRideHeight_Low();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetRideHeight_OnRoad(void * jarg1) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetRideHeight_OnRoad();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetRideHeight_ObstacleCrossing(void * jarg1) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetRideHeight_ObstacleCrossing();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetDamperMode__SWIG_0(void * jarg1, int jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  chrono::vehicle::feda::FEDA::DamperMode arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::feda::FEDA::DamperMode)jarg2; 
  {
    try {
      (arg1)->SetDamperMode(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetDamperMode__SWIG_1(void * jarg1) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->SetDamperMode();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_GetSystem(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA const > *smartarg1 = 0 ;
  chrono::ChSystem *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChSystem *)((chrono::vehicle::feda::FEDA const *)arg1)->GetSystem();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::ChSystem >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_GetVehicle(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA const > *smartarg1 = 0 ;
  chrono::vehicle::ChWheeledVehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChWheeledVehicle *) &((chrono::vehicle::feda::FEDA const *)arg1)->GetVehicle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChWheeledVehicle >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_GetChassis(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::feda::FEDA const *)arg1)->GetChassis();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassis >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_GetChassisBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::feda::FEDA const *)arg1)->GetChassisBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBodyAuxRef >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEDA_GetTransmission(void * jarg1) {
  void * jresult ;
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChTransmission > > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::feda::FEDA const *)arg1)->GetTransmission();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChTransmission >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_Initialize(void * jarg1) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Initialize();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_LockAxleDifferential(void * jarg1, int jarg2, unsigned int jarg3) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->LockAxleDifferential(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetAerodynamicDrag(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->SetAerodynamicDrag(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetChassisVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetChassisVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetSuspensionVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSuspensionVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetSteeringVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSteeringVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetWheelVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetWheelVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_SetTireVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetTireVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_Synchronize(void * jarg1, double jarg2, void * jarg3, void * jarg4) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  chrono::vehicle::ChTerrain *arg4 = 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  
  arg4 = (chrono::vehicle::ChTerrain *)(((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4) ? ((std::shared_ptr< const chrono::vehicle::ChTerrain > *)jarg4)->get() : 0);
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::ChTerrain const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,(chrono::vehicle::ChTerrain const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::feda::FEDA *arg1 = (chrono::vehicle::feda::FEDA *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Vehicle__SWIG_0(unsigned int jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::ChContactMethod arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  int arg5 ;
  int arg6 ;
  chrono::vehicle::feda::FEDA_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::ChContactMethod)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Vehicle *)new chrono::vehicle::feda::FEDA_Vehicle(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Vehicle__SWIG_1(unsigned int jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::ChContactMethod arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  int arg5 ;
  chrono::vehicle::feda::FEDA_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::ChContactMethod)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Vehicle *)new chrono::vehicle::feda::FEDA_Vehicle(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Vehicle__SWIG_2(unsigned int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::ChContactMethod arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  chrono::vehicle::feda::FEDA_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::ChContactMethod)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Vehicle *)new chrono::vehicle::feda::FEDA_Vehicle(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Vehicle__SWIG_3(unsigned int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::ChContactMethod arg3 ;
  chrono::vehicle::feda::FEDA_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  arg3 = (chrono::ChContactMethod)jarg3; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Vehicle *)new chrono::vehicle::feda::FEDA_Vehicle(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Vehicle__SWIG_4(unsigned int jarg1, int jarg2) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::BrakeType arg2 ;
  chrono::vehicle::feda::FEDA_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Vehicle *)new chrono::vehicle::feda::FEDA_Vehicle(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Vehicle__SWIG_5(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::feda::FEDA_Vehicle *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Vehicle *)new chrono::vehicle::feda::FEDA_Vehicle(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Vehicle__SWIG_6() {
  void * jresult ;
  chrono::vehicle::feda::FEDA_Vehicle *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Vehicle *)new chrono::vehicle::feda::FEDA_Vehicle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Vehicle__SWIG_7(void * jarg1, unsigned int jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  int arg5 ;
  int arg6 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::feda::FEDA_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Vehicle *)new chrono::vehicle::feda::FEDA_Vehicle(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Vehicle__SWIG_8(void * jarg1, unsigned int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  int arg5 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::feda::FEDA_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Vehicle *)new chrono::vehicle::feda::FEDA_Vehicle(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Vehicle__SWIG_9(void * jarg1, unsigned int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  chrono::vehicle::CollisionType arg4 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::feda::FEDA_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = (chrono::vehicle::CollisionType)jarg4; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Vehicle *)new chrono::vehicle::feda::FEDA_Vehicle(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Vehicle__SWIG_10(void * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::feda::FEDA_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Vehicle *)new chrono::vehicle::feda::FEDA_Vehicle(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Vehicle__SWIG_11(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::feda::FEDA_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Vehicle *)new chrono::vehicle::feda::FEDA_Vehicle(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEDA_Vehicle__SWIG_12(void * jarg1) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::feda::FEDA_Vehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::feda::FEDA_Vehicle *)new chrono::vehicle::feda::FEDA_Vehicle(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FEDA_Vehicle(void * jarg1) {
  chrono::vehicle::feda::FEDA_Vehicle *arg1 = (chrono::vehicle::feda::FEDA_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_FEDA_Vehicle_GetNumberAxles(void * jarg1) {
  int jresult ;
  chrono::vehicle::feda::FEDA_Vehicle *arg1 = (chrono::vehicle::feda::FEDA_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Vehicle const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((chrono::vehicle::feda::FEDA_Vehicle const *)arg1)->GetNumberAxles();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Vehicle_GetWheelbase(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Vehicle *arg1 = (chrono::vehicle::feda::FEDA_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Vehicle const *)arg1)->GetWheelbase();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Vehicle_GetMinTurningRadius(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Vehicle *arg1 = (chrono::vehicle::feda::FEDA_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Vehicle const *)arg1)->GetMinTurningRadius();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Vehicle_GetMaxSteeringAngle(void * jarg1) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Vehicle *arg1 = (chrono::vehicle::feda::FEDA_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Vehicle const *)arg1)->GetMaxSteeringAngle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_Vehicle_SetInitWheelAngVel(void * jarg1, void * jarg2) {
  chrono::vehicle::feda::FEDA_Vehicle *arg1 = (chrono::vehicle::feda::FEDA_Vehicle *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitWheelAngVel((std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Vehicle_GetSpringForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Vehicle *arg1 = (chrono::vehicle::feda::FEDA_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Vehicle const *)arg1)->GetSpringForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Vehicle_GetSpringLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Vehicle *arg1 = (chrono::vehicle::feda::FEDA_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Vehicle const *)arg1)->GetSpringLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Vehicle_GetSpringDeformation(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Vehicle *arg1 = (chrono::vehicle::feda::FEDA_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Vehicle const *)arg1)->GetSpringDeformation(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Vehicle_GetShockForce(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Vehicle *arg1 = (chrono::vehicle::feda::FEDA_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Vehicle const *)arg1)->GetShockForce(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Vehicle_GetShockLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Vehicle *arg1 = (chrono::vehicle::feda::FEDA_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Vehicle const *)arg1)->GetShockLength(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FEDA_Vehicle_GetShockVelocity(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  chrono::vehicle::feda::FEDA_Vehicle *arg1 = (chrono::vehicle::feda::FEDA_Vehicle *) 0 ;
  int arg2 ;
  chrono::vehicle::VehicleSide arg3 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Vehicle const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::feda::FEDA_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (chrono::vehicle::VehicleSide)jarg3; 
  {
    try {
      result = (double)((chrono::vehicle::feda::FEDA_Vehicle const *)arg1)->GetShockVelocity(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_Vehicle_SetRideHeight(void * jarg1, int jarg2) {
  chrono::vehicle::feda::FEDA_Vehicle *arg1 = (chrono::vehicle::feda::FEDA_Vehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->SetRideHeight(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_Vehicle_Initialize__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  chrono::vehicle::feda::FEDA_Vehicle *arg1 = (chrono::vehicle::feda::FEDA_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_Vehicle_Initialize__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::feda::FEDA_Vehicle *arg1 = (chrono::vehicle::feda::FEDA_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_Vehicle_LogHardpointLocations(void * jarg1) {
  chrono::vehicle::feda::FEDA_Vehicle *arg1 = (chrono::vehicle::feda::FEDA_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogHardpointLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEDA_Vehicle_DebugLog(void * jarg1, int jarg2) {
  chrono::vehicle::feda::FEDA_Vehicle *arg1 = (chrono::vehicle::feda::FEDA_Vehicle *) 0 ;
  int arg2 ;
  std::shared_ptr< chrono::vehicle::feda::FEDA_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::feda::FEDA_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::feda::FEDA_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->DebugLog(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113__SWIG_0() {
  void * jresult ;
  chrono::vehicle::m113::M113 *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::m113::M113 *)new chrono::vehicle::m113::M113();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113 >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113__SWIG_1(void * jarg1) {
  void * jresult ;
  chrono::ChSystem *arg1 = (chrono::ChSystem *) 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg1 = 0 ;
  chrono::vehicle::m113::M113 *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::ChSystem > *)jarg1;
  arg1 = (chrono::ChSystem *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::m113::M113 *)new chrono::vehicle::m113::M113(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113 >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113(void * jarg1) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetContactMethod(void * jarg1, int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  chrono::ChContactMethod arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChContactMethod)jarg2; 
  {
    try {
      (arg1)->SetContactMethod(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetChassisFixed(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetChassisFixed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetChassisCollisionType(void * jarg1, int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  chrono::vehicle::CollisionType arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::CollisionType)jarg2; 
  {
    try {
      (arg1)->SetChassisCollisionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetWheelCollisionType(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  bool arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->SetWheelCollisionType(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetBrakeType(void * jarg1, int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  chrono::vehicle::BrakeType arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::BrakeType)jarg2; 
  {
    try {
      (arg1)->SetBrakeType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetTrackShoeType(void * jarg1, int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  chrono::vehicle::TrackShoeType arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TrackShoeType)jarg2; 
  {
    try {
      (arg1)->SetTrackShoeType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetDoublePinTrackShoeType(void * jarg1, int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  chrono::vehicle::DoublePinTrackShoeType arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::DoublePinTrackShoeType)jarg2; 
  {
    try {
      (arg1)->SetDoublePinTrackShoeType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetANCFTrackShoeElementType(void * jarg1, int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  chrono::vehicle::ChTrackShoeBandANCF::ElementType arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::ChTrackShoeBandANCF::ElementType)jarg2; 
  {
    try {
      (arg1)->SetANCFTrackShoeElementType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetANCFTrackShoeNumElements(void * jarg1, int jarg2, int jarg3) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  int arg2 ;
  int arg3 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->SetANCFTrackShoeNumElements(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetANCFTrackShoeCurvatureConstraints(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetANCFTrackShoeCurvatureConstraints(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetDrivelineType(void * jarg1, int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  chrono::vehicle::DrivelineTypeTV arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::DrivelineTypeTV)jarg2; 
  {
    try {
      (arg1)->SetDrivelineType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetEngineType(void * jarg1, int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  chrono::vehicle::EngineModelType arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::EngineModelType)jarg2; 
  {
    try {
      (arg1)->SetEngineType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetTransmissionType(void * jarg1, int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  chrono::vehicle::TransmissionModelType arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::TransmissionModelType)jarg2; 
  {
    try {
      (arg1)->SetTransmissionType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetTrackBushings(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetTrackBushings(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetSuspensionBushings(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetSuspensionBushings(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetTrackStiffness(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetTrackStiffness(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetInitPosition(void * jarg1, void * jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetInitPosition((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetInitFwdVel(void * jarg1, double jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->SetInitFwdVel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetCollisionSystemType(void * jarg1, int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  chrono::collision::ChCollisionSystemType arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::collision::ChCollisionSystemType)jarg2; 
  {
    try {
      (arg1)->SetCollisionSystemType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetGyrationMode(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->SetGyrationMode(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetAerodynamicDrag(void * jarg1, double jarg2, double jarg3, double jarg4) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->SetAerodynamicDrag(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_CreateTrack(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->CreateTrack(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_GetSystem(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113 const > *smartarg1 = 0 ;
  chrono::ChSystem *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::ChSystem *)((chrono::vehicle::m113::M113 const *)arg1)->GetSystem();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::ChSystem >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_GetVehicle(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113 const > *smartarg1 = 0 ;
  chrono::vehicle::ChTrackedVehicle *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (chrono::vehicle::ChTrackedVehicle *) &((chrono::vehicle::m113::M113 const *)arg1)->GetVehicle();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  chrono::vehicle::ChTrackedVehicle >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_GetChassis(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113 const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113 const *)arg1)->GetChassis();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassis >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_GetChassisBody(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113 const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::ChBodyAuxRef > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113 const *)arg1)->GetChassisBody();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBodyAuxRef >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M113_GetDriveline(void * jarg1) {
  void * jresult ;
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113 const > *smartarg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChDrivelineTV > result;
  
  
  smartarg1 = (std::shared_ptr< const chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((chrono::vehicle::m113::M113 const *)arg1)->GetDriveline();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChDrivelineTV >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_Initialize(void * jarg1) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->Initialize();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetChassisVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetChassisVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetSprocketVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSprocketVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetIdlerVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetIdlerVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetSuspensionVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetSuspensionVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetIdlerWheelVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetIdlerWheelVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetRoadWheelVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetRoadWheelVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_SetTrackShoeVisualizationType(void * jarg1, int jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  chrono::vehicle::VisualizationType arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::vehicle::VisualizationType)jarg2; 
  {
    try {
      (arg1)->SetTrackShoeVisualizationType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_Synchronize(void * jarg1, double jarg2, void * jarg3, void * jarg4, void * jarg5) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  double arg2 ;
  chrono::vehicle::DriverInputs *arg3 = 0 ;
  chrono::vehicle::TerrainForces *arg4 = 0 ;
  chrono::vehicle::TerrainForces *arg5 = 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (chrono::vehicle::DriverInputs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::DriverInputs const & is null", 0);
    return ;
  } 
  arg4 = (chrono::vehicle::TerrainForces *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::TerrainForces const & is null", 0);
    return ;
  } 
  arg5 = (chrono::vehicle::TerrainForces *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::vehicle::TerrainForces const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Synchronize(arg2,(chrono::vehicle::DriverInputs const &)*arg3,(chrono::vehicle::TerrainForces const &)*arg4,(chrono::vehicle::TerrainForces const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_Advance(void * jarg1, double jarg2) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  double arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->Advance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_LogConstraintViolations(void * jarg1) {
  chrono::vehicle::m113::M113 *arg1 = (chrono::vehicle::m113::M113 *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113 > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->LogConstraintViolations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_Vehicle(void * jarg1) {
  chrono::vehicle::m113::M113_Vehicle *arg1 = (chrono::vehicle::m113::M113_Vehicle *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_Vehicle_CreateTrack(void * jarg1, unsigned int jarg2) {
  chrono::vehicle::m113::M113_Vehicle *arg1 = (chrono::vehicle::m113::M113_Vehicle *) 0 ;
  bool arg2 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->CreateTrack(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_Vehicle_Initialize__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  chrono::vehicle::m113::M113_Vehicle *arg1 = (chrono::vehicle::m113::M113_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M113_Vehicle_Initialize__SWIG_1(void * jarg1, void * jarg2) {
  chrono::vehicle::m113::M113_Vehicle *arg1 = (chrono::vehicle::m113::M113_Vehicle *) 0 ;
  chrono::ChCoordsys< > *arg2 = 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Vehicle > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Vehicle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (chrono::ChCoordsys< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChCoordsys< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Initialize((chrono::ChCoordsys< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_SinglePin__SWIG_0(unsigned int jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, int jarg7, int jarg8) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::DrivelineTypeTV arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  chrono::ChContactMethod arg7 ;
  chrono::vehicle::CollisionType arg8 ;
  chrono::vehicle::m113::M113_Vehicle_SinglePin *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::DrivelineTypeTV)jarg2; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (chrono::ChContactMethod)jarg7; 
  arg8 = (chrono::vehicle::CollisionType)jarg8; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_SinglePin *)new chrono::vehicle::m113::M113_Vehicle_SinglePin(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_SinglePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_SinglePin__SWIG_1(unsigned int jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, int jarg7) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::DrivelineTypeTV arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  chrono::ChContactMethod arg7 ;
  chrono::vehicle::m113::M113_Vehicle_SinglePin *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::DrivelineTypeTV)jarg2; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (chrono::ChContactMethod)jarg7; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_SinglePin *)new chrono::vehicle::m113::M113_Vehicle_SinglePin(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_SinglePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_SinglePin__SWIG_2(unsigned int jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::DrivelineTypeTV arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  chrono::vehicle::m113::M113_Vehicle_SinglePin *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::DrivelineTypeTV)jarg2; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_SinglePin *)new chrono::vehicle::m113::M113_Vehicle_SinglePin(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_SinglePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_SinglePin__SWIG_3(unsigned int jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7, int jarg8) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::DrivelineTypeTV arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  chrono::ChSystem *arg7 = (chrono::ChSystem *) 0 ;
  chrono::vehicle::CollisionType arg8 ;
  std::shared_ptr< chrono::ChSystem > *smartarg7 = 0 ;
  chrono::vehicle::m113::M113_Vehicle_SinglePin *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::DrivelineTypeTV)jarg2; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  
  smartarg7 = (std::shared_ptr<  chrono::ChSystem > *)jarg7;
  arg7 = (chrono::ChSystem *)(smartarg7 ? smartarg7->get() : 0); 
  arg8 = (chrono::vehicle::CollisionType)jarg8; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_SinglePin *)new chrono::vehicle::m113::M113_Vehicle_SinglePin(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_SinglePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_SinglePin__SWIG_4(unsigned int jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::DrivelineTypeTV arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  chrono::ChSystem *arg7 = (chrono::ChSystem *) 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg7 = 0 ;
  chrono::vehicle::m113::M113_Vehicle_SinglePin *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::DrivelineTypeTV)jarg2; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  
  smartarg7 = (std::shared_ptr<  chrono::ChSystem > *)jarg7;
  arg7 = (chrono::ChSystem *)(smartarg7 ? smartarg7->get() : 0); 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_SinglePin *)new chrono::vehicle::m113::M113_Vehicle_SinglePin(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_SinglePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_Vehicle_SinglePin(void * jarg1) {
  chrono::vehicle::m113::M113_Vehicle_SinglePin *arg1 = (chrono::vehicle::m113::M113_Vehicle_SinglePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Vehicle_SinglePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_SinglePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Vehicle_SinglePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_DoublePin__SWIG_0(unsigned int jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, int jarg8, int jarg9) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::DoublePinTrackShoeType arg2 ;
  chrono::vehicle::DrivelineTypeTV arg3 ;
  chrono::vehicle::BrakeType arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  chrono::ChContactMethod arg8 ;
  chrono::vehicle::CollisionType arg9 ;
  chrono::vehicle::m113::M113_Vehicle_DoublePin *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::DoublePinTrackShoeType)jarg2; 
  arg3 = (chrono::vehicle::DrivelineTypeTV)jarg3; 
  arg4 = (chrono::vehicle::BrakeType)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = (chrono::ChContactMethod)jarg8; 
  arg9 = (chrono::vehicle::CollisionType)jarg9; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_DoublePin *)new chrono::vehicle::m113::M113_Vehicle_DoublePin(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_DoublePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_DoublePin__SWIG_1(unsigned int jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, int jarg8) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::DoublePinTrackShoeType arg2 ;
  chrono::vehicle::DrivelineTypeTV arg3 ;
  chrono::vehicle::BrakeType arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  chrono::ChContactMethod arg8 ;
  chrono::vehicle::m113::M113_Vehicle_DoublePin *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::DoublePinTrackShoeType)jarg2; 
  arg3 = (chrono::vehicle::DrivelineTypeTV)jarg3; 
  arg4 = (chrono::vehicle::BrakeType)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = (chrono::ChContactMethod)jarg8; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_DoublePin *)new chrono::vehicle::m113::M113_Vehicle_DoublePin(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_DoublePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_DoublePin__SWIG_2(unsigned int jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::DoublePinTrackShoeType arg2 ;
  chrono::vehicle::DrivelineTypeTV arg3 ;
  chrono::vehicle::BrakeType arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  chrono::vehicle::m113::M113_Vehicle_DoublePin *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::DoublePinTrackShoeType)jarg2; 
  arg3 = (chrono::vehicle::DrivelineTypeTV)jarg3; 
  arg4 = (chrono::vehicle::BrakeType)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_DoublePin *)new chrono::vehicle::m113::M113_Vehicle_DoublePin(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_DoublePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_DoublePin__SWIG_3(unsigned int jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, void * jarg8, int jarg9) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::DoublePinTrackShoeType arg2 ;
  chrono::vehicle::DrivelineTypeTV arg3 ;
  chrono::vehicle::BrakeType arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  chrono::ChSystem *arg8 = (chrono::ChSystem *) 0 ;
  chrono::vehicle::CollisionType arg9 ;
  std::shared_ptr< chrono::ChSystem > *smartarg8 = 0 ;
  chrono::vehicle::m113::M113_Vehicle_DoublePin *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::DoublePinTrackShoeType)jarg2; 
  arg3 = (chrono::vehicle::DrivelineTypeTV)jarg3; 
  arg4 = (chrono::vehicle::BrakeType)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  
  smartarg8 = (std::shared_ptr<  chrono::ChSystem > *)jarg8;
  arg8 = (chrono::ChSystem *)(smartarg8 ? smartarg8->get() : 0); 
  arg9 = (chrono::vehicle::CollisionType)jarg9; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_DoublePin *)new chrono::vehicle::m113::M113_Vehicle_DoublePin(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_DoublePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_DoublePin__SWIG_4(unsigned int jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, void * jarg8) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::DoublePinTrackShoeType arg2 ;
  chrono::vehicle::DrivelineTypeTV arg3 ;
  chrono::vehicle::BrakeType arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  chrono::ChSystem *arg8 = (chrono::ChSystem *) 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg8 = 0 ;
  chrono::vehicle::m113::M113_Vehicle_DoublePin *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::DoublePinTrackShoeType)jarg2; 
  arg3 = (chrono::vehicle::DrivelineTypeTV)jarg3; 
  arg4 = (chrono::vehicle::BrakeType)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  
  smartarg8 = (std::shared_ptr<  chrono::ChSystem > *)jarg8;
  arg8 = (chrono::ChSystem *)(smartarg8 ? smartarg8->get() : 0); 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_DoublePin *)new chrono::vehicle::m113::M113_Vehicle_DoublePin(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_DoublePin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_Vehicle_DoublePin(void * jarg1) {
  chrono::vehicle::m113::M113_Vehicle_DoublePin *arg1 = (chrono::vehicle::m113::M113_Vehicle_DoublePin *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Vehicle_DoublePin > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_DoublePin > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Vehicle_DoublePin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_BandBushing__SWIG_0(unsigned int jarg1, int jarg2, int jarg3, unsigned int jarg4, int jarg5, int jarg6) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::DrivelineTypeTV arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  bool arg4 ;
  chrono::ChContactMethod arg5 ;
  chrono::vehicle::CollisionType arg6 ;
  chrono::vehicle::m113::M113_Vehicle_BandBushing *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::DrivelineTypeTV)jarg2; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (chrono::ChContactMethod)jarg5; 
  arg6 = (chrono::vehicle::CollisionType)jarg6; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_BandBushing *)new chrono::vehicle::m113::M113_Vehicle_BandBushing(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_BandBushing >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_BandBushing__SWIG_1(unsigned int jarg1, int jarg2, int jarg3, unsigned int jarg4, int jarg5) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::DrivelineTypeTV arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  bool arg4 ;
  chrono::ChContactMethod arg5 ;
  chrono::vehicle::m113::M113_Vehicle_BandBushing *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::DrivelineTypeTV)jarg2; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (chrono::ChContactMethod)jarg5; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_BandBushing *)new chrono::vehicle::m113::M113_Vehicle_BandBushing(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_BandBushing >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_BandBushing__SWIG_2(unsigned int jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::DrivelineTypeTV arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  bool arg4 ;
  chrono::vehicle::m113::M113_Vehicle_BandBushing *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::DrivelineTypeTV)jarg2; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_BandBushing *)new chrono::vehicle::m113::M113_Vehicle_BandBushing(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_BandBushing >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_BandBushing__SWIG_3(unsigned int jarg1, int jarg2, int jarg3, unsigned int jarg4, void * jarg5, int jarg6) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::DrivelineTypeTV arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  bool arg4 ;
  chrono::ChSystem *arg5 = (chrono::ChSystem *) 0 ;
  chrono::vehicle::CollisionType arg6 ;
  std::shared_ptr< chrono::ChSystem > *smartarg5 = 0 ;
  chrono::vehicle::m113::M113_Vehicle_BandBushing *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::DrivelineTypeTV)jarg2; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = jarg4 ? true : false; 
  
  smartarg5 = (std::shared_ptr<  chrono::ChSystem > *)jarg5;
  arg5 = (chrono::ChSystem *)(smartarg5 ? smartarg5->get() : 0); 
  arg6 = (chrono::vehicle::CollisionType)jarg6; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_BandBushing *)new chrono::vehicle::m113::M113_Vehicle_BandBushing(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_BandBushing >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_BandBushing__SWIG_4(unsigned int jarg1, int jarg2, int jarg3, unsigned int jarg4, void * jarg5) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::DrivelineTypeTV arg2 ;
  chrono::vehicle::BrakeType arg3 ;
  bool arg4 ;
  chrono::ChSystem *arg5 = (chrono::ChSystem *) 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg5 = 0 ;
  chrono::vehicle::m113::M113_Vehicle_BandBushing *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::DrivelineTypeTV)jarg2; 
  arg3 = (chrono::vehicle::BrakeType)jarg3; 
  arg4 = jarg4 ? true : false; 
  
  smartarg5 = (std::shared_ptr<  chrono::ChSystem > *)jarg5;
  arg5 = (chrono::ChSystem *)(smartarg5 ? smartarg5->get() : 0); 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_BandBushing *)new chrono::vehicle::m113::M113_Vehicle_BandBushing(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_BandBushing >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_Vehicle_BandBushing(void * jarg1) {
  chrono::vehicle::m113::M113_Vehicle_BandBushing *arg1 = (chrono::vehicle::m113::M113_Vehicle_BandBushing *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Vehicle_BandBushing > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_BandBushing > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Vehicle_BandBushing *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_BandANCF__SWIG_0(unsigned int jarg1, int jarg2, unsigned int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, unsigned int jarg8, int jarg9, int jarg10) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::ChTrackShoeBandANCF::ElementType arg2 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  chrono::vehicle::DrivelineTypeTV arg6 ;
  chrono::vehicle::BrakeType arg7 ;
  bool arg8 ;
  chrono::ChContactMethod arg9 ;
  chrono::vehicle::CollisionType arg10 ;
  chrono::vehicle::m113::M113_Vehicle_BandANCF *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::ChTrackShoeBandANCF::ElementType)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (chrono::vehicle::DrivelineTypeTV)jarg6; 
  arg7 = (chrono::vehicle::BrakeType)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (chrono::ChContactMethod)jarg9; 
  arg10 = (chrono::vehicle::CollisionType)jarg10; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_BandANCF *)new chrono::vehicle::m113::M113_Vehicle_BandANCF(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_BandANCF >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_BandANCF__SWIG_1(unsigned int jarg1, int jarg2, unsigned int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, unsigned int jarg8, int jarg9) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::ChTrackShoeBandANCF::ElementType arg2 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  chrono::vehicle::DrivelineTypeTV arg6 ;
  chrono::vehicle::BrakeType arg7 ;
  bool arg8 ;
  chrono::ChContactMethod arg9 ;
  chrono::vehicle::m113::M113_Vehicle_BandANCF *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::ChTrackShoeBandANCF::ElementType)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (chrono::vehicle::DrivelineTypeTV)jarg6; 
  arg7 = (chrono::vehicle::BrakeType)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (chrono::ChContactMethod)jarg9; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_BandANCF *)new chrono::vehicle::m113::M113_Vehicle_BandANCF(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_BandANCF >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_BandANCF__SWIG_2(unsigned int jarg1, int jarg2, unsigned int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, unsigned int jarg8) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::ChTrackShoeBandANCF::ElementType arg2 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  chrono::vehicle::DrivelineTypeTV arg6 ;
  chrono::vehicle::BrakeType arg7 ;
  bool arg8 ;
  chrono::vehicle::m113::M113_Vehicle_BandANCF *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::ChTrackShoeBandANCF::ElementType)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (chrono::vehicle::DrivelineTypeTV)jarg6; 
  arg7 = (chrono::vehicle::BrakeType)jarg7; 
  arg8 = jarg8 ? true : false; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_BandANCF *)new chrono::vehicle::m113::M113_Vehicle_BandANCF(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_BandANCF >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_BandANCF__SWIG_3(unsigned int jarg1, int jarg2, unsigned int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, unsigned int jarg8, void * jarg9, int jarg10) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::ChTrackShoeBandANCF::ElementType arg2 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  chrono::vehicle::DrivelineTypeTV arg6 ;
  chrono::vehicle::BrakeType arg7 ;
  bool arg8 ;
  chrono::ChSystem *arg9 = (chrono::ChSystem *) 0 ;
  chrono::vehicle::CollisionType arg10 ;
  std::shared_ptr< chrono::ChSystem > *smartarg9 = 0 ;
  chrono::vehicle::m113::M113_Vehicle_BandANCF *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::ChTrackShoeBandANCF::ElementType)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (chrono::vehicle::DrivelineTypeTV)jarg6; 
  arg7 = (chrono::vehicle::BrakeType)jarg7; 
  arg8 = jarg8 ? true : false; 
  
  smartarg9 = (std::shared_ptr<  chrono::ChSystem > *)jarg9;
  arg9 = (chrono::ChSystem *)(smartarg9 ? smartarg9->get() : 0); 
  arg10 = (chrono::vehicle::CollisionType)jarg10; 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_BandANCF *)new chrono::vehicle::m113::M113_Vehicle_BandANCF(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_BandANCF >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M113_Vehicle_BandANCF__SWIG_4(unsigned int jarg1, int jarg2, unsigned int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, unsigned int jarg8, void * jarg9) {
  void * jresult ;
  bool arg1 ;
  chrono::vehicle::ChTrackShoeBandANCF::ElementType arg2 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  chrono::vehicle::DrivelineTypeTV arg6 ;
  chrono::vehicle::BrakeType arg7 ;
  bool arg8 ;
  chrono::ChSystem *arg9 = (chrono::ChSystem *) 0 ;
  std::shared_ptr< chrono::ChSystem > *smartarg9 = 0 ;
  chrono::vehicle::m113::M113_Vehicle_BandANCF *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (chrono::vehicle::ChTrackShoeBandANCF::ElementType)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (chrono::vehicle::DrivelineTypeTV)jarg6; 
  arg7 = (chrono::vehicle::BrakeType)jarg7; 
  arg8 = jarg8 ? true : false; 
  
  smartarg9 = (std::shared_ptr<  chrono::ChSystem > *)jarg9;
  arg9 = (chrono::ChSystem *)(smartarg9 ? smartarg9->get() : 0); 
  {
    try {
      result = (chrono::vehicle::m113::M113_Vehicle_BandANCF *)new chrono::vehicle::m113::M113_Vehicle_BandANCF(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_BandANCF >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M113_Vehicle_BandANCF(void * jarg1) {
  chrono::vehicle::m113::M113_Vehicle_BandANCF *arg1 = (chrono::vehicle::m113::M113_Vehicle_BandANCF *) 0 ;
  std::shared_ptr< chrono::vehicle::m113::M113_Vehicle_BandANCF > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  chrono::vehicle::m113::M113_Vehicle_BandANCF > *)jarg1;
  arg1 = (chrono::vehicle::m113::M113_Vehicle_BandANCF *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StraightLinePath__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  chrono::ChVector< > *arg1 = 0 ;
  chrono::ChVector< > arg2 ;
  unsigned int arg3 ;
  chrono::ChVector< > const *argp2 ;
  std::shared_ptr< chrono::ChBezierCurve > result;
  
  arg1 = (chrono::ChVector< > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  argp2 = (chrono::ChVector< > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null chrono::ChVector< > const", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = chrono::vehicle::StraightLinePath((chrono::ChVector< > const &)*arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBezierCurve >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StraightLinePath__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  chrono::ChVector< > *arg1 = 0 ;
  chrono::ChVector< > arg2 ;
  chrono::ChVector< > const *argp2 ;
  std::shared_ptr< chrono::ChBezierCurve > result;
  
  arg1 = (chrono::ChVector< > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  argp2 = (chrono::ChVector< > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null chrono::ChVector< > const", 0);
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = chrono::vehicle::StraightLinePath((chrono::ChVector< > const &)*arg1,SWIG_STD_MOVE(arg2));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBezierCurve >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CirclePath__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4, int jarg5) {
  void * jresult ;
  chrono::ChVector< > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  int arg5 ;
  std::shared_ptr< chrono::ChBezierCurve > result;
  
  arg1 = (chrono::ChVector< > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  {
    try {
      result = chrono::vehicle::CirclePath((chrono::ChVector< > const &)*arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBezierCurve >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CirclePath__SWIG_1(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  void * jresult ;
  chrono::ChVector< > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  std::shared_ptr< chrono::ChBezierCurve > result;
  
  arg1 = (chrono::ChVector< > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = chrono::vehicle::CirclePath((chrono::ChVector< > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBezierCurve >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CirclePath__SWIG_2(void * jarg1, double jarg2, double jarg3) {
  void * jresult ;
  chrono::ChVector< > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< chrono::ChBezierCurve > result;
  
  arg1 = (chrono::ChVector< > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = chrono::vehicle::CirclePath((chrono::ChVector< > const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBezierCurve >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleLaneChangePath__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6) {
  void * jresult ;
  chrono::ChVector< > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  bool arg6 ;
  std::shared_ptr< chrono::ChBezierCurve > result;
  
  arg1 = (chrono::ChVector< > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = jarg6 ? true : false; 
  {
    try {
      result = chrono::vehicle::DoubleLaneChangePath((chrono::ChVector< > const &)*arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBezierCurve >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleLaneChangePath__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  chrono::ChVector< > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< chrono::ChBezierCurve > result;
  
  arg1 = (chrono::ChVector< > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "chrono::ChVector< > const & is null", 0);
    return 0;
  } 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = chrono::vehicle::DoubleLaneChangePath((chrono::ChVector< > const &)*arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChBezierCurve >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadFileJSON(const char * jarg1, void * jarg2) {
  std::string *arg1 = 0 ;
  rapidjson::Document *arg2 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (rapidjson::Document *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Document & is null", 0);
    return ;
  } 
  {
    try {
      chrono::vehicle::ReadFileJSON((std::string const &)*arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadVectorJSON(void * jarg1) {
  void * jresult ;
  rapidjson::Value *arg1 = 0 ;
  chrono::ChVector< > result;
  
  arg1 = (rapidjson::Value *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Value const & is null", 0);
    return 0;
  } 
  {
    try {
      result = chrono::vehicle::ReadVectorJSON((rapidjson::Value const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChVector< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadQuaternionJSON(void * jarg1) {
  void * jresult ;
  rapidjson::Value *arg1 = 0 ;
  chrono::ChQuaternion< > result;
  
  arg1 = (rapidjson::Value *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Value const & is null", 0);
    return 0;
  } 
  {
    try {
      result = chrono::vehicle::ReadQuaternionJSON((rapidjson::Value const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChQuaternion< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadCoordinateSystemJSON(void * jarg1) {
  void * jresult ;
  rapidjson::Value *arg1 = 0 ;
  chrono::ChCoordsys< > result;
  
  arg1 = (rapidjson::Value *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Value const & is null", 0);
    return 0;
  } 
  {
    try {
      result = chrono::vehicle::ReadCoordinateSystemJSON((rapidjson::Value const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChCoordsys< >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadColorJSON(void * jarg1) {
  void * jresult ;
  rapidjson::Value *arg1 = 0 ;
  chrono::ChColor result;
  
  arg1 = (rapidjson::Value *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Value const & is null", 0);
    return 0;
  } 
  {
    try {
      result = chrono::vehicle::ReadColorJSON((rapidjson::Value const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChColor(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadMaterialInfoJSON(void * jarg1) {
  void * jresult ;
  rapidjson::Value *arg1 = 0 ;
  chrono::ChContactMaterialData result;
  
  arg1 = (rapidjson::Value *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Value const & is null", 0);
    return 0;
  } 
  {
    try {
      result = chrono::vehicle::ReadMaterialInfoJSON((rapidjson::Value const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new chrono::ChContactMaterialData(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadBushingDataJSON(void * jarg1) {
  void * jresult ;
  rapidjson::Value *arg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChVehicleBushingData > > result;
  
  arg1 = (rapidjson::Value *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Value const & is null", 0);
    return 0;
  } 
  {
    try {
      result = chrono::vehicle::ReadBushingDataJSON((rapidjson::Value const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChVehicleBushingData >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadVehicleJointTypeJSON(void * jarg1) {
  void * jresult ;
  rapidjson::Value *arg1 = 0 ;
  ChVehicleJoint::Type result;
  
  arg1 = (rapidjson::Value *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Value const & is null", 0);
    return 0;
  } 
  {
    try {
      result = chrono::vehicle::ReadVehicleJointTypeJSON((rapidjson::Value const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ChVehicleJoint::Type(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadVehicleGeometryJSON(void * jarg1) {
  void * jresult ;
  rapidjson::Value *arg1 = 0 ;
  ChVehicleGeometry result;
  
  arg1 = (rapidjson::Value *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Value const & is null", 0);
    return 0;
  } 
  {
    try {
      result = chrono::vehicle::ReadVehicleGeometryJSON((rapidjson::Value const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ChVehicleGeometry(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadTSDAGeometryJSON(void * jarg1) {
  void * jresult ;
  rapidjson::Value *arg1 = 0 ;
  ChTSDAGeometry result;
  
  arg1 = (rapidjson::Value *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Value const & is null", 0);
    return 0;
  } 
  {
    try {
      result = chrono::vehicle::ReadTSDAGeometryJSON((rapidjson::Value const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ChTSDAGeometry(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadTSDAFunctorJSON(void * jarg1, void * jarg2) {
  void * jresult ;
  rapidjson::Value *arg1 = 0 ;
  double *arg2 = 0 ;
  std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > result;
  
  arg1 = (rapidjson::Value *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Value const & is null", 0);
    return 0;
  } 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return 0;
  } 
  {
    try {
      result = chrono::vehicle::ReadTSDAFunctorJSON((rapidjson::Value const &)*arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadRSDAFunctorJSON(void * jarg1, void * jarg2) {
  void * jresult ;
  rapidjson::Value *arg1 = 0 ;
  double *arg2 = 0 ;
  std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor > result;
  
  arg1 = (rapidjson::Value *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Value const & is null", 0);
    return 0;
  } 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return 0;
  } 
  {
    try {
      result = chrono::vehicle::ReadRSDAFunctorJSON((rapidjson::Value const &)*arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadChassisJSON(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassis > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = chrono::vehicle::ReadChassisJSON((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassis >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadChassisRearJSON(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassisRear > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = chrono::vehicle::ReadChassisRearJSON((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassisRear >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadChassisConnectorJSON(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChChassisConnector > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = chrono::vehicle::ReadChassisConnectorJSON((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassisConnector >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadEngineJSON(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChEngine > > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = chrono::vehicle::ReadEngineJSON((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChEngine >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadTransmissionJSON(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChTransmission > > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = chrono::vehicle::ReadTransmissionJSON((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChTransmission >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadSuspensionJSON(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSuspension > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = chrono::vehicle::ReadSuspensionJSON((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChSuspension >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadSteeringJSON(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSteering > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = chrono::vehicle::ReadSteeringJSON((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChSteering >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadDrivelineWVJSON(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChDrivelineWV > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = chrono::vehicle::ReadDrivelineWVJSON((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChDrivelineWV >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadAntirollbarJSON(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ChAntirollBar > > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = chrono::vehicle::ReadAntirollbarJSON((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< ChAntirollBar >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadWheelJSON(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChWheel > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = chrono::vehicle::ReadWheelJSON((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChWheel >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadSubchassisJSON(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = chrono::vehicle::ReadSubchassisJSON((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChSubchassis >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadBrakeJSON(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChBrake > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = chrono::vehicle::ReadBrakeJSON((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChBrake >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadTireJSON(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTire > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = chrono::vehicle::ReadTireJSON((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTire >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadTrackAssemblyJSON(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackAssembly > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = chrono::vehicle::ReadTrackAssemblyJSON((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTrackAssembly >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadDrivelineTVJSON(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChDrivelineTV > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = chrono::vehicle::ReadDrivelineTVJSON((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChDrivelineTV >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadTrackBrakeJSON(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackBrake > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = chrono::vehicle::ReadTrackBrakeJSON((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTrackBrake >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadIdlerJSON(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChIdler > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = chrono::vehicle::ReadIdlerJSON((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChIdler >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadTrackSuspensionJSON(const char * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  std::shared_ptr< chrono::vehicle::ChTrackSuspension > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = chrono::vehicle::ReadTrackSuspensionJSON((std::string const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTrackSuspension >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReadTrackWheelJSON(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::shared_ptr< chrono::vehicle::ChTrackWheel > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = chrono::vehicle::ReadTrackWheelJSON((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTrackWheel >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChMapData() {
  void * jresult ;
  chrono::vehicle::ChMapData *result = 0 ;
  
  {
    try {
      result = (chrono::vehicle::ChMapData *)new chrono::vehicle::ChMapData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMapData_Read(void * jarg1, void * jarg2) {
  chrono::vehicle::ChMapData *arg1 = (chrono::vehicle::ChMapData *) 0 ;
  rapidjson::Value *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChMapData *)jarg1; 
  arg2 = (rapidjson::Value *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rapidjson::Value const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Read((rapidjson::Value const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMapData_Set__SWIG_0(void * jarg1, void * jarg2, double jarg3, double jarg4) {
  chrono::vehicle::ChMapData *arg1 = (chrono::vehicle::ChMapData *) 0 ;
  ChFunction_Recorder *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (chrono::vehicle::ChMapData *)jarg1; 
  arg2 = (ChFunction_Recorder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      ((chrono::vehicle::ChMapData const *)arg1)->Set(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMapData_Set__SWIG_1(void * jarg1, void * jarg2, double jarg3) {
  chrono::vehicle::ChMapData *arg1 = (chrono::vehicle::ChMapData *) 0 ;
  ChFunction_Recorder *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (chrono::vehicle::ChMapData *)jarg1; 
  arg2 = (ChFunction_Recorder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      ((chrono::vehicle::ChMapData const *)arg1)->Set(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMapData_Set__SWIG_2(void * jarg1, void * jarg2) {
  chrono::vehicle::ChMapData *arg1 = (chrono::vehicle::ChMapData *) 0 ;
  ChFunction_Recorder *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChMapData *)jarg1; 
  arg2 = (ChFunction_Recorder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ChFunction_Recorder & is null", 0);
    return ;
  } 
  {
    try {
      ((chrono::vehicle::ChMapData const *)arg1)->Set(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMapData_Set__SWIG_3(void * jarg1, void * jarg2, double jarg3, double jarg4) {
  chrono::vehicle::ChMapData *arg1 = (chrono::vehicle::ChMapData *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (chrono::vehicle::ChMapData *)jarg1; 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      ((chrono::vehicle::ChMapData const *)arg1)->Set(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMapData_Set__SWIG_4(void * jarg1, void * jarg2, double jarg3) {
  chrono::vehicle::ChMapData *arg1 = (chrono::vehicle::ChMapData *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (chrono::vehicle::ChMapData *)jarg1; 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      ((chrono::vehicle::ChMapData const *)arg1)->Set(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChMapData_Set__SWIG_5(void * jarg1, void * jarg2) {
  chrono::vehicle::ChMapData *arg1 = (chrono::vehicle::ChMapData *) 0 ;
  std::vector< std::pair< double,double > > *arg2 = 0 ;
  
  arg1 = (chrono::vehicle::ChMapData *)jarg1; 
  arg2 = (std::vector< std::pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< double,double > > & is null", 0);
    return ;
  } 
  {
    try {
      ((chrono::vehicle::ChMapData const *)arg1)->Set(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChMapData(void * jarg1) {
  chrono::vehicle::ChMapData *arg1 = (chrono::vehicle::ChMapData *) 0 ;
  
  arg1 = (chrono::vehicle::ChMapData *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChDoubleWishbone(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSuspension > arg1 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishbone > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSuspension > *)jarg1; 
  {
    try {
      result = CastToChDoubleWishbone(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChDoubleWishbone >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChMacPhersonStrut(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSuspension > arg1 ;
  std::shared_ptr< chrono::vehicle::ChMacPhersonStrut > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSuspension > *)jarg1; 
  {
    try {
      result = CastToChMacPhersonStrut(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChMacPhersonStrut >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChLeafspringAxle(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSuspension > arg1 ;
  std::shared_ptr< chrono::vehicle::ChLeafspringAxle > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSuspension > *)jarg1; 
  {
    try {
      result = CastToChLeafspringAxle(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChLeafspringAxle >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChHendricksonPRIMAXX(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSuspension > arg1 ;
  std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSuspension > *)jarg1; 
  {
    try {
      result = CastToChHendricksonPRIMAXX(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChDoubleWishboneReduced(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSuspension > arg1 ;
  std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSuspension > *)jarg1; 
  {
    try {
      result = CastToChDoubleWishboneReduced(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChMultiLink(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSuspension > arg1 ;
  std::shared_ptr< chrono::vehicle::ChMultiLink > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSuspension > *)jarg1; 
  {
    try {
      result = CastToChMultiLink(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChMultiLink >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChRigidPinnedAxle(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSuspension > arg1 ;
  std::shared_ptr< chrono::vehicle::ChRigidPinnedAxle > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSuspension > *)jarg1; 
  {
    try {
      result = CastToChRigidPinnedAxle(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChRigidPinnedAxle >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChSemiTrailingArm(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSuspension > arg1 ;
  std::shared_ptr< chrono::vehicle::ChSemiTrailingArm > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSuspension > *)jarg1; 
  {
    try {
      result = CastToChSemiTrailingArm(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChSemiTrailingArm >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChRigidSuspension(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSuspension > arg1 ;
  std::shared_ptr< chrono::vehicle::ChRigidSuspension > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSuspension > *)jarg1; 
  {
    try {
      result = CastToChRigidSuspension(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChRigidSuspension >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChSolidAxle(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSuspension > arg1 ;
  std::shared_ptr< chrono::vehicle::ChSolidAxle > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSuspension > *)jarg1; 
  {
    try {
      result = CastToChSolidAxle(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChSolidAxle >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChThreeLinkIRS(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSuspension > arg1 ;
  std::shared_ptr< chrono::vehicle::ChThreeLinkIRS > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSuspension > *)jarg1; 
  {
    try {
      result = CastToChThreeLinkIRS(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChThreeLinkIRS >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChToeBarLeafspringAxle(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSuspension > arg1 ;
  std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSuspension > *)jarg1; 
  {
    try {
      result = CastToChToeBarLeafspringAxle(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChSolidBellcrankThreeLinkAxle(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSuspension > arg1 ;
  std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSuspension > *)jarg1; 
  {
    try {
      result = CastToChSolidBellcrankThreeLinkAxle(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChSolidThreeLinkAxle(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSuspension > arg1 ;
  std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSuspension > *)jarg1; 
  {
    try {
      result = CastToChSolidThreeLinkAxle(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChSingleWishbone(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSuspension > arg1 ;
  std::shared_ptr< chrono::vehicle::ChSingleWishbone > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSuspension > *)jarg1; 
  {
    try {
      result = CastToChSingleWishbone(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChSingleWishbone >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChPitmanArm(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg1 ;
  std::shared_ptr< chrono::vehicle::ChPitmanArm > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg1; 
  {
    try {
      result = CastToChPitmanArm(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChPitmanArm >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChPitmanArmShafts(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg1 ;
  std::shared_ptr< chrono::vehicle::ChPitmanArmShafts > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg1; 
  {
    try {
      result = CastToChPitmanArmShafts(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChPitmanArmShafts >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChRackPinion(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg1 ;
  std::shared_ptr< chrono::vehicle::ChRackPinion > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg1; 
  {
    try {
      result = CastToChRackPinion(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChRackPinion >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChRotaryArm(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSteering > arg1 ;
  std::shared_ptr< chrono::vehicle::ChRotaryArm > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSteering > *)jarg1; 
  {
    try {
      result = CastToChRotaryArm(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChRotaryArm >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChRigidChassis(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChChassis > arg1 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassis > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChChassis > *)jarg1; 
  {
    try {
      result = CastToChRigidChassis(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChRigidChassis >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChRigidChassisRear(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChChassisRear > arg1 ;
  std::shared_ptr< chrono::vehicle::ChRigidChassisRear > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChChassisRear > *)jarg1; 
  {
    try {
      result = CastToChRigidChassisRear(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChRigidChassisRear >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChChassisConnectorArticulated(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChChassisConnector > arg1 ;
  std::shared_ptr< chrono::vehicle::ChChassisConnectorArticulated > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChChassisConnector > *)jarg1; 
  {
    try {
      result = CastToChChassisConnectorArticulated(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassisConnectorArticulated >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChChassisConnectorHitch(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChChassisConnector > arg1 ;
  std::shared_ptr< chrono::vehicle::ChChassisConnectorHitch > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChChassisConnector > *)jarg1; 
  {
    try {
      result = CastToChChassisConnectorHitch(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassisConnectorHitch >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChChassisConnectorTorsion(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChChassisConnector > arg1 ;
  std::shared_ptr< chrono::vehicle::ChChassisConnectorTorsion > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChChassisConnector > *)jarg1; 
  {
    try {
      result = CastToChChassisConnectorTorsion(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChChassisConnectorTorsion >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChBalancer(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChSubchassis > arg1 ;
  std::shared_ptr< chrono::vehicle::ChBalancer > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChSubchassis > *)jarg1; 
  {
    try {
      result = CastToChBalancer(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChBalancer >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChTMeasyTire(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChTire > arg1 ;
  std::shared_ptr< chrono::vehicle::ChTMeasyTire > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChTire > *)jarg1; 
  {
    try {
      result = CastToChTMeasyTire(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChTMeasyTire >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChRigidTire(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChTire > arg1 ;
  std::shared_ptr< chrono::vehicle::ChRigidTire > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChTire > *)jarg1; 
  {
    try {
      result = CastToChRigidTire(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChRigidTire >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChReissnerTire(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChTire > arg1 ;
  std::shared_ptr< chrono::vehicle::ChReissnerTire > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChTire > *)jarg1; 
  {
    try {
      result = CastToChReissnerTire(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChReissnerTire >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChPac89Tire(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChTire > arg1 ;
  std::shared_ptr< chrono::vehicle::ChPac89Tire > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChTire > *)jarg1; 
  {
    try {
      result = CastToChPac89Tire(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChPac89Tire >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChPac02Tire(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChTire > arg1 ;
  std::shared_ptr< chrono::vehicle::ChPac02Tire > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChTire > *)jarg1; 
  {
    try {
      result = CastToChPac02Tire(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChPac02Tire >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChFialaTire(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChTire > arg1 ;
  std::shared_ptr< chrono::vehicle::ChFialaTire > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChTire > *)jarg1; 
  {
    try {
      result = CastToChFialaTire(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChFialaTire >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChEngineSimple(void * jarg1) {
  void * jresult ;
  SwigValueWrapper< std::shared_ptr< chrono::vehicle::ChEngine > > arg1 ;
  std::shared_ptr< chrono::vehicle::ChEngine > *argp1 ;
  std::shared_ptr< chrono::vehicle::ChEngineSimple > result;
  
  argp1 = (std::shared_ptr< chrono::vehicle::ChEngine > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< chrono::vehicle::ChEngine >", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = CastToChEngineSimple(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChEngineSimple >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChEngineSimpleMap(void * jarg1) {
  void * jresult ;
  SwigValueWrapper< std::shared_ptr< chrono::vehicle::ChEngine > > arg1 ;
  std::shared_ptr< chrono::vehicle::ChEngine > *argp1 ;
  std::shared_ptr< chrono::vehicle::ChEngineSimpleMap > result;
  
  argp1 = (std::shared_ptr< chrono::vehicle::ChEngine > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< chrono::vehicle::ChEngine >", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = CastToChEngineSimpleMap(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChEngineSimpleMap >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChEngineShafts(void * jarg1) {
  void * jresult ;
  SwigValueWrapper< std::shared_ptr< chrono::vehicle::ChEngine > > arg1 ;
  std::shared_ptr< chrono::vehicle::ChEngine > *argp1 ;
  std::shared_ptr< chrono::vehicle::ChEngineShafts > result;
  
  argp1 = (std::shared_ptr< chrono::vehicle::ChEngine > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< chrono::vehicle::ChEngine >", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = CastToChEngineShafts(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChEngineShafts >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToEngineSimple(void * jarg1) {
  void * jresult ;
  SwigValueWrapper< std::shared_ptr< chrono::vehicle::ChEngine > > arg1 ;
  std::shared_ptr< chrono::vehicle::ChEngine > *argp1 ;
  std::shared_ptr< chrono::vehicle::EngineSimple > result;
  
  argp1 = (std::shared_ptr< chrono::vehicle::ChEngine > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< chrono::vehicle::ChEngine >", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = CastToEngineSimple(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::EngineSimple >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToEngineSimpleMap(void * jarg1) {
  void * jresult ;
  SwigValueWrapper< std::shared_ptr< chrono::vehicle::ChEngine > > arg1 ;
  std::shared_ptr< chrono::vehicle::ChEngine > *argp1 ;
  std::shared_ptr< chrono::vehicle::EngineSimpleMap > result;
  
  argp1 = (std::shared_ptr< chrono::vehicle::ChEngine > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< chrono::vehicle::ChEngine >", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = CastToEngineSimpleMap(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::EngineSimpleMap >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToEngineShafts(void * jarg1) {
  void * jresult ;
  SwigValueWrapper< std::shared_ptr< chrono::vehicle::ChEngine > > arg1 ;
  std::shared_ptr< chrono::vehicle::ChEngine > *argp1 ;
  std::shared_ptr< chrono::vehicle::EngineShafts > result;
  
  argp1 = (std::shared_ptr< chrono::vehicle::ChEngine > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< chrono::vehicle::ChEngine >", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = CastToEngineShafts(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::EngineShafts >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChAutomaticTransmissionSimpleMap(void * jarg1) {
  void * jresult ;
  SwigValueWrapper< std::shared_ptr< chrono::vehicle::ChTransmission > > arg1 ;
  std::shared_ptr< chrono::vehicle::ChTransmission > *argp1 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap > result;
  
  argp1 = (std::shared_ptr< chrono::vehicle::ChTransmission > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< chrono::vehicle::ChTransmission >", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = CastToChAutomaticTransmissionSimpleMap(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChAutomaticTransmissionShafts(void * jarg1) {
  void * jresult ;
  SwigValueWrapper< std::shared_ptr< chrono::vehicle::ChTransmission > > arg1 ;
  std::shared_ptr< chrono::vehicle::ChTransmission > *argp1 ;
  std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts > result;
  
  argp1 = (std::shared_ptr< chrono::vehicle::ChTransmission > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< chrono::vehicle::ChTransmission >", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = CastToChAutomaticTransmissionShafts(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToAutomaticTransmissionSimpleMap(void * jarg1) {
  void * jresult ;
  SwigValueWrapper< std::shared_ptr< chrono::vehicle::ChTransmission > > arg1 ;
  std::shared_ptr< chrono::vehicle::ChTransmission > *argp1 ;
  std::shared_ptr< chrono::vehicle::AutomaticTransmissionSimpleMap > result;
  
  argp1 = (std::shared_ptr< chrono::vehicle::ChTransmission > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< chrono::vehicle::ChTransmission >", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = CastToAutomaticTransmissionSimpleMap(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::AutomaticTransmissionSimpleMap >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToAutomaticTransmissionShafts(void * jarg1) {
  void * jresult ;
  SwigValueWrapper< std::shared_ptr< chrono::vehicle::ChTransmission > > arg1 ;
  std::shared_ptr< chrono::vehicle::ChTransmission > *argp1 ;
  std::shared_ptr< chrono::vehicle::AutomaticTransmissionShafts > result;
  
  argp1 = (std::shared_ptr< chrono::vehicle::ChTransmission > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< chrono::vehicle::ChTransmission >", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = CastToAutomaticTransmissionShafts(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::AutomaticTransmissionShafts >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChDrivelineWV(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChDriveline > arg1 ;
  std::shared_ptr< chrono::vehicle::ChDrivelineWV > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChDriveline > *)jarg1; 
  {
    try {
      result = CastToChDrivelineWV(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChDrivelineWV >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChShaftsDriveline2WD(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChDriveline > arg1 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChDriveline > *)jarg1; 
  {
    try {
      result = CastToChShaftsDriveline2WD(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChShaftsDriveline4WD(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChDriveline > arg1 ;
  std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChDriveline > *)jarg1; 
  {
    try {
      result = CastToChShaftsDriveline4WD(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChSimpleDriveline(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChDriveline > arg1 ;
  std::shared_ptr< chrono::vehicle::ChSimpleDriveline > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChDriveline > *)jarg1; 
  {
    try {
      result = CastToChSimpleDriveline(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChSimpleDriveline >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastToChSimpleDrivelineXWD(void * jarg1) {
  void * jresult ;
  std::shared_ptr< chrono::vehicle::ChDriveline > arg1 ;
  std::shared_ptr< chrono::vehicle::ChSimpleDrivelineXWD > result;
  
  if (jarg1) arg1 = *(std::shared_ptr< chrono::vehicle::ChDriveline > *)jarg1; 
  {
    try {
      result = CastToChSimpleDrivelineXWD(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new std::shared_ptr< chrono::vehicle::ChSimpleDrivelineXWD >(result) : 0; 
  return jresult;
}


SWIGEXPORT std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > * SWIGSTDCALL CSharp_SpringForce_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::SpringForce > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::SpringForce > * SWIGSTDCALL CSharp_LinearSpringForce_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::LinearSpringForce > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::SpringForce >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::SpringForce > * SWIGSTDCALL CSharp_NonlinearSpringForce_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::NonlinearSpringForce > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::SpringForce >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > * SWIGSTDCALL CSharp_LinearDamperForce_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::LinearDamperForce > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > * SWIGSTDCALL CSharp_NonlinearDamperForce_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::NonlinearDamperForce > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor > * SWIGSTDCALL CSharp_DegressiveDamperForce_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::DegressiveDamperForce > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::SpringForce > * SWIGSTDCALL CSharp_LinearSpringDamperForce_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::LinearSpringDamperForce > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::SpringForce >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::SpringForce > * SWIGSTDCALL CSharp_NonlinearSpringDamperForce_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::NonlinearSpringDamperForce > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::SpringForce >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::SpringForce > * SWIGSTDCALL CSharp_MapSpringDamperForce_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::MapSpringDamperForce > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::SpringForce >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor > * SWIGSTDCALL CSharp_LinearSpringTorque_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::LinearSpringTorque > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor > * SWIGSTDCALL CSharp_NonlinearSpringTorque_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::NonlinearSpringTorque > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor > * SWIGSTDCALL CSharp_LinearDamperTorque_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::LinearDamperTorque > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor > * SWIGSTDCALL CSharp_NonlinearDamperTorque_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::NonlinearDamperTorque > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor > * SWIGSTDCALL CSharp_LinearSpringDamperTorque_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::LinearSpringDamperTorque > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor > * SWIGSTDCALL CSharp_NonlinearSpringDamperTorque_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::NonlinearSpringDamperTorque > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineSimple > * SWIGSTDCALL CSharp_EngineSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::EngineSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineSimpleMap > * SWIGSTDCALL CSharp_EngineSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::EngineSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineShafts > * SWIGSTDCALL CSharp_EngineShafts_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::EngineShafts > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineShafts >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap > * SWIGSTDCALL CSharp_AutomaticTransmissionSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::AutomaticTransmissionSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts > * SWIGSTDCALL CSharp_AutomaticTransmissionShafts_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::AutomaticTransmissionShafts > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap > * SWIGSTDCALL CSharp_Generic_AutomaticTransmissionSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::generic::Generic_AutomaticTransmissionSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineSimple > * SWIGSTDCALL CSharp_Generic_EngineSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::generic::Generic_EngineSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap > * SWIGSTDCALL CSharp_Generic_AutomaticTransmissionSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineSimpleMap > * SWIGSTDCALL CSharp_Generic_EngineSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::generic::Generic_EngineSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineShafts > * SWIGSTDCALL CSharp_HMMWV_EngineShafts_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_EngineShafts > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineShafts >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineSimpleMap > * SWIGSTDCALL CSharp_HMMWV_EngineSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineSimple > * SWIGSTDCALL CSharp_HMMWV_EngineSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_EngineSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts > * SWIGSTDCALL CSharp_HMMWV_AutomaticTransmissionShafts_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap > * SWIGSTDCALL CSharp_HMMWV_AutomaticTransmissionSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineSimpleMap > * SWIGSTDCALL CSharp_Sedan_EngineSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::sedan::Sedan_EngineSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap > * SWIGSTDCALL CSharp_Sedan_AutomaticTransmissionSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineSimpleMap > * SWIGSTDCALL CSharp_CityBus_EngineSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::citybus::CityBus_EngineSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap > * SWIGSTDCALL CSharp_CityBus_AutomaticTransmissionSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineSimple > * SWIGSTDCALL CSharp_MAN_5t_EngineSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_5t_EngineSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap > * SWIGSTDCALL CSharp_MAN_5t_AutomaticTransmissionSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineSimpleMap > * SWIGSTDCALL CSharp_MAN_5t_EngineSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_5t_EngineSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap > * SWIGSTDCALL CSharp_MAN_5t_AutomaticTransmissionSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineSimple > * SWIGSTDCALL CSharp_MAN_7t_EngineSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_7t_EngineSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap > * SWIGSTDCALL CSharp_MAN_7t_AutomaticTransmissionSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineSimpleMap > * SWIGSTDCALL CSharp_MAN_7t_EngineSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_7t_EngineSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap > * SWIGSTDCALL CSharp_MAN_7t_AutomaticTransmissionSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineSimpleMap > * SWIGSTDCALL CSharp_RCCar_EngineSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::rccar::RCCar_EngineSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap > * SWIGSTDCALL CSharp_RCCar_AutomaticTransmissionSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineSimpleMap > * SWIGSTDCALL CSharp_UAZBUS_EngineSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::uaz::UAZBUS_EngineSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap > * SWIGSTDCALL CSharp_UAZBUS_AutomaticTransmissionSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineSimpleMap > * SWIGSTDCALL CSharp_Gator_EngineSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::gator::Gator_EngineSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineSimple > * SWIGSTDCALL CSharp_Gator_EngineSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::gator::Gator_EngineSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap > * SWIGSTDCALL CSharp_Gator_AutomaticTransmissionSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap > * SWIGSTDCALL CSharp_Gator_AutomaticTransmissionSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::gator::Gator_AutomaticTransmissionSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineSimpleMap > * SWIGSTDCALL CSharp_FEDA_EngineSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::feda::FEDA_EngineSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap > * SWIGSTDCALL CSharp_FEDA_AutomaticTransmissionSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts > * SWIGSTDCALL CSharp_M113_AutomaticTransmissionShafts_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_AutomaticTransmissionShafts > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap > * SWIGSTDCALL CSharp_M113_AutomaticTransmissionSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_AutomaticTransmissionSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap > * SWIGSTDCALL CSharp_M113_AutomaticTransmissionSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineShafts > * SWIGSTDCALL CSharp_M113_EngineShafts_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_EngineShafts > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineShafts >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineSimple > * SWIGSTDCALL CSharp_M113_EngineSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_EngineSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChEngineSimpleMap > * SWIGSTDCALL CSharp_M113_EngineSimpleMap_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_EngineSimpleMap > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChEngineSimpleMap >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPart > * SWIGSTDCALL CSharp_ChChassis_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChChassis > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPart >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChChassis > * SWIGSTDCALL CSharp_ChChassisRear_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChChassisRear > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChChassis >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPart > * SWIGSTDCALL CSharp_ChChassisConnector_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChChassisConnector > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPart >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChChassis > * SWIGSTDCALL CSharp_ChRigidChassis_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChRigidChassis > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChChassis >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChChassisRear > * SWIGSTDCALL CSharp_ChRigidChassisRear_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChRigidChassisRear > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChChassisRear >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChChassisConnector > * SWIGSTDCALL CSharp_ChChassisConnectorArticulated_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChChassisConnectorArticulated > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChChassisConnector >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChChassisConnector > * SWIGSTDCALL CSharp_ChChassisConnectorTorsion_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChChassisConnectorTorsion > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChChassisConnector >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChChassisConnector > * SWIGSTDCALL CSharp_ChChassisConnectorHitch_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChChassisConnectorHitch > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChChassisConnector >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidChassis > * SWIGSTDCALL CSharp_RigidChassis_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::RigidChassis > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidChassis >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidChassisRear > * SWIGSTDCALL CSharp_RigidChassisRear_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::RigidChassisRear > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidChassisRear >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChChassisConnectorArticulated > * SWIGSTDCALL CSharp_ChassisConnectorArticulated_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChassisConnectorArticulated > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChChassisConnectorArticulated >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChChassisConnectorHitch > * SWIGSTDCALL CSharp_ChassisConnectorHitch_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChassisConnectorHitch > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChChassisConnectorHitch >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChChassisConnectorTorsion > * SWIGSTDCALL CSharp_ChassisConnectorTorsion_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChassisConnectorTorsion > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChChassisConnectorTorsion >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidChassis > * SWIGSTDCALL CSharp_Generic_Chassis_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::generic::Generic_Chassis > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidChassis >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidChassis > * SWIGSTDCALL CSharp_HMMWV_Chassis_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Chassis > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidChassis >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidChassis > * SWIGSTDCALL CSharp_Sedan_Chassis_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::sedan::Sedan_Chassis > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidChassis >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidChassis > * SWIGSTDCALL CSharp_CityBus_Chassis_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::citybus::CityBus_Chassis > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidChassis >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidChassis > * SWIGSTDCALL CSharp_MAN_5t_Chassis_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_5t_Chassis > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidChassis >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidChassis > * SWIGSTDCALL CSharp_MAN_7t_Chassis_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_7t_Chassis > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidChassis >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidChassis > * SWIGSTDCALL CSharp_MAN_10t_Chassis_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_10t_Chassis > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidChassis >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidChassis > * SWIGSTDCALL CSharp_UAZBUS_Chassis_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Chassis > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidChassis >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidChassis > * SWIGSTDCALL CSharp_Gator_Chassis_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::gator::Gator_Chassis > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidChassis >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidChassis > * SWIGSTDCALL CSharp_RCCar_Chassis_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::rccar::RCCar_Chassis > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidChassis >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidChassis > * SWIGSTDCALL CSharp_FEDA_Chassis_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::feda::FEDA_Chassis > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidChassis >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidChassis > * SWIGSTDCALL CSharp_M113_Chassis_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_Chassis > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidChassis >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDriver > * SWIGSTDCALL CSharp_ChDataDriver_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChDataDriver > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDriver >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDriver > * SWIGSTDCALL CSharp_ChInteractiveDriver_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChInteractiveDriver > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDriver >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDriver > * SWIGSTDCALL CSharp_ChClosedLoopDriver_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChClosedLoopDriver > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDriver >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChClosedLoopDriver > * SWIGSTDCALL CSharp_ChPathFollowerDriver_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChPathFollowerDriver > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChClosedLoopDriver >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChClosedLoopDriver > * SWIGSTDCALL CSharp_ChPathFollowerDriverXT_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChPathFollowerDriverXT > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChClosedLoopDriver >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChClosedLoopDriver > * SWIGSTDCALL CSharp_ChPathFollowerDriverSR_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChPathFollowerDriverSR > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChClosedLoopDriver >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChClosedLoopDriver > * SWIGSTDCALL CSharp_ChPathFollowerDriverStanley_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChPathFollowerDriverStanley > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChClosedLoopDriver >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDriver > * SWIGSTDCALL CSharp_ChPathFollowerACCDriver_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChPathFollowerACCDriver > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDriver >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDriver > * SWIGSTDCALL CSharp_ChExternalDriver_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChExternalDriver > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDriver >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSuspensionTestRigDriver > * SWIGSTDCALL CSharp_ChSuspensionTestRigDataDriver_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChSuspensionTestRigDataDriver > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSuspensionTestRigDriver >(*jarg1) : 0;
}

SWIGEXPORT chrono::vehicle::ChSteeringController * SWIGSTDCALL CSharp_ChPathSteeringController_SWIGUpcast(chrono::vehicle::ChPathSteeringController *jarg1) {
    return (chrono::vehicle::ChSteeringController *)jarg1;
}

SWIGEXPORT chrono::vehicle::ChSteeringController * SWIGSTDCALL CSharp_ChPathSteeringControllerXT_SWIGUpcast(chrono::vehicle::ChPathSteeringControllerXT *jarg1) {
    return (chrono::vehicle::ChSteeringController *)jarg1;
}

SWIGEXPORT chrono::vehicle::ChSteeringController * SWIGSTDCALL CSharp_ChPathSteeringControllerSR_SWIGUpcast(chrono::vehicle::ChPathSteeringControllerSR *jarg1) {
    return (chrono::vehicle::ChSteeringController *)jarg1;
}

SWIGEXPORT chrono::vehicle::ChSteeringController * SWIGSTDCALL CSharp_ChPathSteeringControllerStanley_SWIGUpcast(chrono::vehicle::ChPathSteeringControllerStanley *jarg1) {
    return (chrono::vehicle::ChSteeringController *)jarg1;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTerrain > * SWIGSTDCALL CSharp_FlatTerrain_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::FlatTerrain > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTerrain >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTerrain > * SWIGSTDCALL CSharp_RigidTerrain_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::RigidTerrain > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTerrain >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTerrain > * SWIGSTDCALL CSharp_SCMTerrain_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::SCMTerrain > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTerrain >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::ChLoadContainer > * SWIGSTDCALL CSharp_SCMLoader_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::SCMLoader > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::ChLoadContainer >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPart > * SWIGSTDCALL CSharp_ChSteering_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChSteering > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPart >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSteering > * SWIGSTDCALL CSharp_ChPitmanArm_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChPitmanArm > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSteering >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSteering > * SWIGSTDCALL CSharp_ChPitmanArmShafts_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChPitmanArmShafts > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSteering >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSteering > * SWIGSTDCALL CSharp_ChRackPinion_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChRackPinion > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSteering >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSteering > * SWIGSTDCALL CSharp_ChRotaryArm_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChRotaryArm > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSteering >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPitmanArm > * SWIGSTDCALL CSharp_PitmanArm_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::PitmanArm > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPitmanArm >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRackPinion > * SWIGSTDCALL CSharp_RackPinion_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::RackPinion > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRackPinion >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRotaryArm > * SWIGSTDCALL CSharp_RotaryArm_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::RotaryArm > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRotaryArm >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPitmanArm > * SWIGSTDCALL CSharp_HMMWV_PitmanArm_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_PitmanArm > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPitmanArm >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRackPinion > * SWIGSTDCALL CSharp_HMMWV_RackPinion_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_RackPinion > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRackPinion >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRotaryArm > * SWIGSTDCALL CSharp_CityBus_RotaryArm_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::citybus::CityBus_RotaryArm > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRotaryArm >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRackPinion > * SWIGSTDCALL CSharp_CityBus_RackPinion_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::citybus::CityBus_RackPinion > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRackPinion >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRotaryArm > * SWIGSTDCALL CSharp_MAN_5t_RotaryArm_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_5t_RotaryArm > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRotaryArm >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRotaryArm > * SWIGSTDCALL CSharp_MAN_10t_RotaryArm2_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_10t_RotaryArm2 > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRotaryArm >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRotaryArm > * SWIGSTDCALL CSharp_UAZBUS_RotaryArm_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::uaz::UAZBUS_RotaryArm > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRotaryArm >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRackPinion > * SWIGSTDCALL CSharp_Gator_RackPinion_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::gator::Gator_RackPinion > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRackPinion >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPitmanArm > * SWIGSTDCALL CSharp_RCCar_PitmanArm_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::rccar::RCCar_PitmanArm > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPitmanArm >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPitmanArm > * SWIGSTDCALL CSharp_FEDA_PitmanArm_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::feda::FEDA_PitmanArm > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPitmanArm >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPart > * SWIGSTDCALL CSharp_ChSubchassis_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChSubchassis > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPart >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSubchassis > * SWIGSTDCALL CSharp_ChBalancer_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChBalancer > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSubchassis >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBalancer > * SWIGSTDCALL CSharp_Balancer_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::Balancer > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBalancer >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBalancer > * SWIGSTDCALL CSharp_MTV_Balancer_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::fmtv::MTV_Balancer > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBalancer >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPart > * SWIGSTDCALL CSharp_ChSuspension_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChSuspension > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPart >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSuspension > * SWIGSTDCALL CSharp_ChDoubleWishbone_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChDoubleWishbone > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSuspension > * SWIGSTDCALL CSharp_ChMacPhersonStrut_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChMacPhersonStrut > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSuspension > * SWIGSTDCALL CSharp_ChLeafspringAxle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChLeafspringAxle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSuspension > * SWIGSTDCALL CSharp_ChHendricksonPRIMAXX_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSuspension > * SWIGSTDCALL CSharp_ChDoubleWishboneReduced_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSuspension > * SWIGSTDCALL CSharp_ChMultiLink_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChMultiLink > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSuspension > * SWIGSTDCALL CSharp_ChRigidPinnedAxle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChRigidPinnedAxle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSuspension > * SWIGSTDCALL CSharp_ChSemiTrailingArm_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChSemiTrailingArm > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSuspension > * SWIGSTDCALL CSharp_ChRigidSuspension_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChRigidSuspension > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSuspension > * SWIGSTDCALL CSharp_ChSolidAxle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChSolidAxle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSuspension > * SWIGSTDCALL CSharp_ChThreeLinkIRS_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChThreeLinkIRS > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSuspension > * SWIGSTDCALL CSharp_ChToeBarLeafspringAxle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSuspension > * SWIGSTDCALL CSharp_ChSolidBellcrankThreeLinkAxle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSuspension > * SWIGSTDCALL CSharp_ChSolidThreeLinkAxle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSuspension > * SWIGSTDCALL CSharp_ChSingleWishbone_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChSingleWishbone > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDoubleWishbone > * SWIGSTDCALL CSharp_DoubleWishbone_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::DoubleWishbone > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDoubleWishbone >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced > * SWIGSTDCALL CSharp_DoubleWishboneReduced_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::DoubleWishboneReduced > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX > * SWIGSTDCALL CSharp_HendricksonPRIMAXX_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::HendricksonPRIMAXX > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChLeafspringAxle > * SWIGSTDCALL CSharp_LeafspringAxle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::LeafspringAxle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChLeafspringAxle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChMacPhersonStrut > * SWIGSTDCALL CSharp_MacPhersonStrut_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::MacPhersonStrut > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChMacPhersonStrut >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChMultiLink > * SWIGSTDCALL CSharp_MultiLink_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::MultiLink > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChMultiLink >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSemiTrailingArm > * SWIGSTDCALL CSharp_SemiTrailingArm_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::SemiTrailingArm > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSemiTrailingArm >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSolidAxle > * SWIGSTDCALL CSharp_SolidAxle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::SolidAxle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSolidAxle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChThreeLinkIRS > * SWIGSTDCALL CSharp_ThreeLinkIRS_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ThreeLinkIRS > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChThreeLinkIRS >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle > * SWIGSTDCALL CSharp_ToeBarLeafspringAxle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ToeBarLeafspringAxle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle > * SWIGSTDCALL CSharp_SolidBellcrankThreeLinkAxle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::SolidBellcrankThreeLinkAxle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle > * SWIGSTDCALL CSharp_SolidThreeLinkAxle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::SolidThreeLinkAxle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSingleWishbone > * SWIGSTDCALL CSharp_SingleWishbone_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::SingleWishbone > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSingleWishbone >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidSuspension > * SWIGSTDCALL CSharp_Generic_RigidSuspension_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::generic::Generic_RigidSuspension > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidPinnedAxle > * SWIGSTDCALL CSharp_Generic_RigidPinnedAxle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::generic::Generic_RigidPinnedAxle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidPinnedAxle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChMultiLink > * SWIGSTDCALL CSharp_Generic_MultiLink_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::generic::Generic_MultiLink > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChMultiLink >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDoubleWishbone > * SWIGSTDCALL CSharp_Generic_DoubleWishbone_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishbone > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDoubleWishbone >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDoubleWishbone > * SWIGSTDCALL CSharp_Generic_DoubleWishboneFront_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneFront > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDoubleWishbone >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDoubleWishbone > * SWIGSTDCALL CSharp_Generic_DoubleWishboneRear_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::generic::Generic_DoubleWishboneRear > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDoubleWishbone >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDoubleWishbone > * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneFront_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDoubleWishbone >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDoubleWishbone > * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneRear_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDoubleWishbone >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced > * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedFront_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced > * SWIGSTDCALL CSharp_HMMWV_DoubleWishboneReducedRear_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDoubleWishbone > * SWIGSTDCALL CSharp_Sedan_DoubleWishbone_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::sedan::Sedan_DoubleWishbone > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDoubleWishbone >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChMultiLink > * SWIGSTDCALL CSharp_Sedan_MultiLink_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::sedan::Sedan_MultiLink > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChMultiLink >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle > * SWIGSTDCALL CSharp_CityBus_ToeBarLeafspringAxle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::citybus::CityBus_ToeBarLeafspringAxle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSolidAxle > * SWIGSTDCALL CSharp_CityBus_SolidAxleFront_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleFront > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSolidAxle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSolidAxle > * SWIGSTDCALL CSharp_CityBus_SolidAxleRear_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::citybus::CityBus_SolidAxleRear > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSolidAxle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChLeafspringAxle > * SWIGSTDCALL CSharp_CityBus_LeafspringAxle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::citybus::CityBus_LeafspringAxle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChLeafspringAxle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle > * SWIGSTDCALL CSharp_MAN_5t_BellcrankSolid3LinkAxle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_5t_BellcrankSolid3LinkAxle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle > * SWIGSTDCALL CSharp_MAN_5t_Solid3LinkAxle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_5t_Solid3LinkAxle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle > * SWIGSTDCALL CSharp_MAN_10t_Front1Axle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_10t_Front1Axle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle > * SWIGSTDCALL CSharp_MAN_10t_Front2Axle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_10t_Front2Axle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle > * SWIGSTDCALL CSharp_UAZBUS_ToeBarLeafspringAxle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::uaz::UAZBUS_ToeBarLeafspringAxle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChLeafspringAxle > * SWIGSTDCALL CSharp_UAZBUS_LeafspringAxle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::uaz::UAZBUS_LeafspringAxle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChLeafspringAxle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSingleWishbone > * SWIGSTDCALL CSharp_Gator_SingleWishbone_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::gator::Gator_SingleWishbone > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSingleWishbone >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidSuspension > * SWIGSTDCALL CSharp_Gator_RigidSuspension_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::gator::Gator_RigidSuspension > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDoubleWishbone > * SWIGSTDCALL CSharp_RCCar_DoubleWishboneFront_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneFront > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDoubleWishbone >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDoubleWishbone > * SWIGSTDCALL CSharp_RCCar_DoubleWishboneRear_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::rccar::RCCar_DoubleWishboneRear > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDoubleWishbone >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDoubleWishbone > * SWIGSTDCALL CSharp_FEDA_DoubleWishboneFront_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneFront > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDoubleWishbone >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDoubleWishbone > * SWIGSTDCALL CSharp_FEDA_DoubleWishboneRear_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::feda::FEDA_DoubleWishboneRear > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDoubleWishbone >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPart > * SWIGSTDCALL CSharp_ChDriveline_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChDriveline > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPart >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDriveline > * SWIGSTDCALL CSharp_ChDrivelineWV_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChDrivelineWV > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDriveline >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDrivelineWV > * SWIGSTDCALL CSharp_ChShaftsDriveline2WD_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDrivelineWV >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDrivelineWV > * SWIGSTDCALL CSharp_ChShaftsDriveline4WD_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDrivelineWV >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDrivelineWV > * SWIGSTDCALL CSharp_ChSimpleDriveline_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChSimpleDriveline > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDrivelineWV >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDrivelineWV > * SWIGSTDCALL CSharp_ChSimpleDrivelineXWD_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChSimpleDrivelineXWD > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDrivelineWV >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD > * SWIGSTDCALL CSharp_ShaftsDriveline2WD_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ShaftsDriveline2WD > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSimpleDriveline > * SWIGSTDCALL CSharp_SimpleDriveline_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::SimpleDriveline > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSimpleDriveline >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD > * SWIGSTDCALL CSharp_ShaftsDriveline4WD_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ShaftsDriveline4WD > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSimpleDrivelineXWD > * SWIGSTDCALL CSharp_SimpleDrivelineXWD_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::SimpleDrivelineXWD > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSimpleDrivelineXWD >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDriveline > * SWIGSTDCALL CSharp_ChDrivelineTV_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChDrivelineTV > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDriveline >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDrivelineTV > * SWIGSTDCALL CSharp_ChSimpleTrackDriveline_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChSimpleTrackDriveline > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDrivelineTV >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDrivelineTV > * SWIGSTDCALL CSharp_ChTrackDrivelineBDS_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackDrivelineBDS > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDrivelineTV >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSimpleTrackDriveline > * SWIGSTDCALL CSharp_SimpleTrackDriveline_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::SimpleTrackDriveline > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSimpleTrackDriveline >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackDrivelineBDS > * SWIGSTDCALL CSharp_TrackDrivelineBDS_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::TrackDrivelineBDS > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackDrivelineBDS >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD > * SWIGSTDCALL CSharp_Generic_Driveline2WD_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::generic::Generic_Driveline2WD > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDrivelineWV > * SWIGSTDCALL CSharp_Generic_SimpleDriveline_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::generic::Generic_SimpleDriveline > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDrivelineWV >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD > * SWIGSTDCALL CSharp_HMMWV_Driveline2WD_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Driveline2WD > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD > * SWIGSTDCALL CSharp_HMMWV_Driveline4WD_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Driveline4WD > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSimpleDriveline > * SWIGSTDCALL CSharp_HMMWV_SimpleDriveline_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_SimpleDriveline > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSimpleDriveline >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD > * SWIGSTDCALL CSharp_Sedan_Driveline2WD_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::sedan::Sedan_Driveline2WD > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD > * SWIGSTDCALL CSharp_CityBus_Driveline2WD_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::citybus::CityBus_Driveline2WD > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSimpleDriveline > * SWIGSTDCALL CSharp_MAN_5t_SimpleDriveline_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_5t_SimpleDriveline > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSimpleDriveline >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSimpleDrivelineXWD > * SWIGSTDCALL CSharp_MAN_5t_SimpleDrivelineXWD_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_5t_SimpleDrivelineXWD > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSimpleDrivelineXWD >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD > * SWIGSTDCALL CSharp_UAZBUS_Driveline2WD_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Driveline2WD > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD > * SWIGSTDCALL CSharp_UAZBUS_Driveline4WD_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Driveline4WD > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDrivelineWV > * SWIGSTDCALL CSharp_Gator_SimpleDriveline_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::gator::Gator_SimpleDriveline > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDrivelineWV >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD > * SWIGSTDCALL CSharp_Gator_Driveline2WD_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::gator::Gator_Driveline2WD > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD > * SWIGSTDCALL CSharp_RCCar_Driveline4WD_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::rccar::RCCar_Driveline4WD > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD > * SWIGSTDCALL CSharp_FEDA_Driveline4WD_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::feda::FEDA_Driveline4WD > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSimpleTrackDriveline > * SWIGSTDCALL CSharp_M113_SimpleDriveline_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_SimpleDriveline > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSimpleTrackDriveline >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackDrivelineBDS > * SWIGSTDCALL CSharp_M113_DrivelineBDS_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_DrivelineBDS > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackDrivelineBDS >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPart > * SWIGSTDCALL CSharp_ChWheel_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChWheel > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPart >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheel > * SWIGSTDCALL CSharp_Wheel_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::Wheel > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheel >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPart > * SWIGSTDCALL CSharp_ChBrake_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChBrake > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPart >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrake > * SWIGSTDCALL CSharp_ChBrakeSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChBrakeSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrake >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrake > * SWIGSTDCALL CSharp_ChBrakeShafts_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChBrakeShafts > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrake >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeSimple > * SWIGSTDCALL CSharp_BrakeSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::BrakeSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeShafts > * SWIGSTDCALL CSharp_BrakeShafts_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::BrakeShafts > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeShafts >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPart > * SWIGSTDCALL CSharp_ChTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPart >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChForceElementTire > * SWIGSTDCALL CSharp_ChTMeasyTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTMeasyTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChForceElementTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTire > * SWIGSTDCALL CSharp_ChRigidTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChRigidTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTire > * SWIGSTDCALL CSharp_ChForceElementTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChForceElementTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChForceElementTire > * SWIGSTDCALL CSharp_ChPac89Tire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChPac89Tire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChForceElementTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChForceElementTire > * SWIGSTDCALL CSharp_ChPac02Tire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChPac02Tire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChForceElementTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChForceElementTire > * SWIGSTDCALL CSharp_ChFialaTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChFialaTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChForceElementTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTMeasyTire > * SWIGSTDCALL CSharp_TMeasyTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::TMeasyTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTMeasyTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidTire > * SWIGSTDCALL CSharp_RigidTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::RigidTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChFialaTire > * SWIGSTDCALL CSharp_FialaTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::FialaTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChFialaTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPac89Tire > * SWIGSTDCALL CSharp_Pac89Tire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::Pac89Tire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPac89Tire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPac02Tire > * SWIGSTDCALL CSharp_Pac02Tire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::Pac02Tire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPac02Tire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidTire > * SWIGSTDCALL CSharp_Generic_RigidTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::generic::Generic_RigidTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidTire > * SWIGSTDCALL CSharp_Generic_RigidMeshTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::generic::Generic_RigidMeshTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChFialaTire > * SWIGSTDCALL CSharp_Generic_FialaTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::generic::Generic_FialaTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChFialaTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidTire > * SWIGSTDCALL CSharp_HMMWV_RigidTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_RigidTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPac89Tire > * SWIGSTDCALL CSharp_HMMWV_Pac89Tire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Pac89Tire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPac89Tire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPac02Tire > * SWIGSTDCALL CSharp_HMMWV_Pac02Tire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Pac02Tire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPac02Tire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChFialaTire > * SWIGSTDCALL CSharp_HMMWV_FialaTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_FialaTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChFialaTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTMeasyTire > * SWIGSTDCALL CSharp_HMMWV_TMeasyTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_TMeasyTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTMeasyTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTMeasyTire > * SWIGSTDCALL CSharp_Sedan_TMeasyTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::sedan::Sedan_TMeasyTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTMeasyTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidTire > * SWIGSTDCALL CSharp_Sedan_RigidTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::sedan::Sedan_RigidTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidTire > * SWIGSTDCALL CSharp_CityBus_RigidTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::citybus::CityBus_RigidTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTMeasyTire > * SWIGSTDCALL CSharp_CityBus_TMeasyTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::citybus::CityBus_TMeasyTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTMeasyTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTMeasyTire > * SWIGSTDCALL CSharp_MAN_5t_TMeasyTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_5t_TMeasyTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTMeasyTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTMeasyTire > * SWIGSTDCALL CSharp_UAZBUS_TMeasyTireFront_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::uaz::UAZBUS_TMeasyTireFront > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTMeasyTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTMeasyTire > * SWIGSTDCALL CSharp_UAZBUS_TMeasyTireRear_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::uaz::UAZBUS_TMeasyTireRear > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTMeasyTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidTire > * SWIGSTDCALL CSharp_UAZBUS_RigidTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::uaz::UAZBUS_RigidTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPac02Tire > * SWIGSTDCALL CSharp_UAZBUS_Pac02Tire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Pac02Tire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPac02Tire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidTire > * SWIGSTDCALL CSharp_Gator_RigidTire_Front_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::gator::Gator_RigidTire_Front > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidTire > * SWIGSTDCALL CSharp_Gator_RigidTire_Rear_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::gator::Gator_RigidTire_Rear > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTMeasyTire > * SWIGSTDCALL CSharp_Gator_TMeasyTire_Front_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::gator::Gator_TMeasyTire_Front > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTMeasyTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTMeasyTire > * SWIGSTDCALL CSharp_Gator_TMeasyTire_Rear_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::gator::Gator_TMeasyTire_Rear > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTMeasyTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidTire > * SWIGSTDCALL CSharp_RCCar_RigidTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::rccar::RCCar_RigidTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPac02Tire > * SWIGSTDCALL CSharp_FEDA_Pac02Tire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::feda::FEDA_Pac02Tire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPac02Tire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRigidTire > * SWIGSTDCALL CSharp_FEDA_RigidTire_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::feda::FEDA_RigidTire > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRigidTire >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChVehicle > * SWIGSTDCALL CSharp_ChWheeledVehicle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChWheeledVehicle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChVehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheeledVehicle > * SWIGSTDCALL CSharp_WheeledVehicle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::WheeledVehicle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheeledVehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheeledTrailer > * SWIGSTDCALL CSharp_WheeledTrailer_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::WheeledTrailer > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheeledTrailer >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > * SWIGSTDCALL CSharp_ChSuspensionTestRigPlatform_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChSuspensionTestRigPlatform > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSuspensionTestRig >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSuspensionTestRig > * SWIGSTDCALL CSharp_ChSuspensionTestRigPushrod_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChSuspensionTestRigPushrod > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSuspensionTestRig >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPart > * SWIGSTDCALL CSharp_ChSprocket_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChSprocket > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPart >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSprocket > * SWIGSTDCALL CSharp_ChSprocketSinglePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChSprocketSinglePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSprocket >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSprocket > * SWIGSTDCALL CSharp_ChSprocketDoublePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChSprocketDoublePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSprocket >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSprocket > * SWIGSTDCALL CSharp_ChSprocketBand_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChSprocketBand > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSprocket >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSprocketSinglePin > * SWIGSTDCALL CSharp_SprocketSinglePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::SprocketSinglePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSprocketSinglePin >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSprocketDoublePin > * SWIGSTDCALL CSharp_SprocketDoublePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::SprocketDoublePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSprocketDoublePin >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSprocketBand > * SWIGSTDCALL CSharp_SprocketBand_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::SprocketBand > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSprocketBand >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPart > * SWIGSTDCALL CSharp_ChIdler_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChIdler > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPart >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChIdler > * SWIGSTDCALL CSharp_ChTranslationalIdler_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTranslationalIdler > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChIdler >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTranslationalIdler > * SWIGSTDCALL CSharp_TranslationalIdler_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::TranslationalIdler > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTranslationalIdler >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPart > * SWIGSTDCALL CSharp_ChTrackWheel_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackWheel > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPart >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackWheel > * SWIGSTDCALL CSharp_ChSingleTrackWheel_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChSingleTrackWheel > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackWheel >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackWheel > * SWIGSTDCALL CSharp_ChDoubleTrackWheel_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChDoubleTrackWheel > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackWheel >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSingleTrackWheel > * SWIGSTDCALL CSharp_SingleTrackWheel_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::SingleTrackWheel > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSingleTrackWheel >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDoubleTrackWheel > * SWIGSTDCALL CSharp_DoubleTrackWheel_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::DoubleTrackWheel > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDoubleTrackWheel >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPart > * SWIGSTDCALL CSharp_ChTrackSuspension_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackSuspension > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPart >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackSuspension > * SWIGSTDCALL CSharp_ChTranslationalDamperSuspension_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTranslationalDamperSuspension > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackSuspension > * SWIGSTDCALL CSharp_ChRotationalDamperSuspension_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChRotationalDamperSuspension > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTranslationalDamperSuspension > * SWIGSTDCALL CSharp_TranslationalDamperSuspension_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::TranslationalDamperSuspension > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTranslationalDamperSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChRotationalDamperSuspension > * SWIGSTDCALL CSharp_RotationalDamperSuspension_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::RotationalDamperSuspension > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChRotationalDamperSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPart > * SWIGSTDCALL CSharp_ChTrackShoe_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackShoe > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPart >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackShoe > * SWIGSTDCALL CSharp_ChTrackShoeBand_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackShoeBand > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackShoe >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackShoeBand > * SWIGSTDCALL CSharp_ChTrackShoeBandANCF_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackShoeBandANCF > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackShoeBand >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackShoeBand > * SWIGSTDCALL CSharp_ChTrackShoeBandBushing_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackShoeBandBushing > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackShoeBand >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackShoe > * SWIGSTDCALL CSharp_ChTrackShoeSegmented_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackShoeSegmented > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackShoe >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackShoeSegmented > * SWIGSTDCALL CSharp_ChTrackShoeSinglePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackShoeSinglePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackShoeSegmented >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackShoeSegmented > * SWIGSTDCALL CSharp_ChTrackShoeDoublePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackShoeDoublePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackShoeSegmented >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackShoeBandANCF > * SWIGSTDCALL CSharp_TrackShoeBandANCF_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::TrackShoeBandANCF > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackShoeBandANCF >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackShoeBandBushing > * SWIGSTDCALL CSharp_TrackShoeBandBushing_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::TrackShoeBandBushing > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackShoeBandBushing >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackShoeSinglePin > * SWIGSTDCALL CSharp_TrackShoeSinglePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::TrackShoeSinglePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackShoeSinglePin >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackShoeDoublePin > * SWIGSTDCALL CSharp_TrackShoeDoublePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::TrackShoeDoublePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackShoeDoublePin >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPart > * SWIGSTDCALL CSharp_ChTrackAssembly_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackAssembly > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPart >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackAssembly > * SWIGSTDCALL CSharp_ChTrackAssemblyBand_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackAssemblyBand > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackAssembly >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackAssemblyBand > * SWIGSTDCALL CSharp_ChTrackAssemblyBandANCF_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandANCF > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackAssemblyBand >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackAssemblyBand > * SWIGSTDCALL CSharp_ChTrackAssemblyBandBushing_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandBushing > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackAssemblyBand >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackAssembly > * SWIGSTDCALL CSharp_ChTrackAssemblySegmented_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackAssemblySegmented > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackAssembly >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackAssemblySegmented > * SWIGSTDCALL CSharp_ChTrackAssemblySinglePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackAssemblySinglePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackAssemblySegmented >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackAssemblySegmented > * SWIGSTDCALL CSharp_ChTrackAssemblyDoublePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackAssemblyDoublePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackAssemblySegmented >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandANCF > * SWIGSTDCALL CSharp_TrackAssemblyBandANCF_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::TrackAssemblyBandANCF > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandANCF >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandBushing > * SWIGSTDCALL CSharp_TrackAssemblyBandBushing_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::TrackAssemblyBandBushing > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandBushing >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackAssemblySinglePin > * SWIGSTDCALL CSharp_TrackAssemblySinglePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::TrackAssemblySinglePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackAssemblySinglePin >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackAssemblyDoublePin > * SWIGSTDCALL CSharp_TrackAssemblyDoublePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::TrackAssemblyDoublePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackAssemblyDoublePin >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSprocketBand > * SWIGSTDCALL CSharp_M113_SprocketBand_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_SprocketBand > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSprocketBand >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::m113::M113_SprocketBand > * SWIGSTDCALL CSharp_M113_SprocketBandLeft_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_SprocketBandLeft > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::m113::M113_SprocketBand >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::m113::M113_SprocketBand > * SWIGSTDCALL CSharp_M113_SprocketBandRight_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_SprocketBandRight > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::m113::M113_SprocketBand >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSprocketSinglePin > * SWIGSTDCALL CSharp_M113_SprocketSinglePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSprocketSinglePin >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePin > * SWIGSTDCALL CSharp_M113_SprocketSinglePinLeft_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePinLeft > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePin >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePin > * SWIGSTDCALL CSharp_M113_SprocketSinglePinRight_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePinRight > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::m113::M113_SprocketSinglePin >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChSprocketDoublePin > * SWIGSTDCALL CSharp_M113_SprocketDoublePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChSprocketDoublePin >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePin > * SWIGSTDCALL CSharp_M113_SprocketDoublePinLeft_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePinLeft > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePin >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePin > * SWIGSTDCALL CSharp_M113_SprocketDoublePinRight_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePinRight > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::m113::M113_SprocketDoublePin >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTranslationalIdler > * SWIGSTDCALL CSharp_M113_Idler_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_Idler > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTranslationalIdler >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChDoubleTrackWheel > * SWIGSTDCALL CSharp_M113_RoadWheel_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_RoadWheel > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChDoubleTrackWheel >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::m113::M113_RoadWheel > * SWIGSTDCALL CSharp_M113_RoadWheelLeft_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_RoadWheelLeft > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::m113::M113_RoadWheel >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::m113::M113_RoadWheel > * SWIGSTDCALL CSharp_M113_RoadWheelRight_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_RoadWheelRight > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::m113::M113_RoadWheel >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTranslationalDamperSuspension > * SWIGSTDCALL CSharp_M113_Suspension_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_Suspension > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTranslationalDamperSuspension >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackShoeBandANCF > * SWIGSTDCALL CSharp_M113_TrackShoeBandANCF_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandANCF > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackShoeBandANCF >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackShoeBandBushing > * SWIGSTDCALL CSharp_M113_TrackShoeBandBushing_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeBandBushing > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackShoeBandBushing >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackShoeSinglePin > * SWIGSTDCALL CSharp_M113_TrackShoeSinglePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeSinglePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackShoeSinglePin >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackShoeDoublePin > * SWIGSTDCALL CSharp_M113_TrackShoeDoublePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_TrackShoeDoublePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackShoeDoublePin >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandANCF > * SWIGSTDCALL CSharp_M113_TrackAssemblyBandANCF_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblyBandANCF > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandANCF >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandBushing > * SWIGSTDCALL CSharp_M113_TrackAssemblyBandBushing_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblyBandBushing > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackAssemblyBandBushing >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackAssemblySinglePin > * SWIGSTDCALL CSharp_M113_TrackAssemblySinglePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblySinglePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackAssemblySinglePin >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackAssemblyDoublePin > * SWIGSTDCALL CSharp_M113_TrackAssemblyDoublePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_TrackAssemblyDoublePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackAssemblyDoublePin >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChPart > * SWIGSTDCALL CSharp_ChTrackBrake_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackBrake > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChPart >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackBrake > * SWIGSTDCALL CSharp_ChTrackBrakeSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackBrakeSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackBrake >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackBrake > * SWIGSTDCALL CSharp_ChTrackBrakeShafts_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackBrakeShafts > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackBrake >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackBrakeSimple > * SWIGSTDCALL CSharp_TrackBrakeSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::TrackBrakeSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackBrakeSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackBrakeShafts > * SWIGSTDCALL CSharp_TrackBrakeShafts_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::TrackBrakeShafts > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackBrakeShafts >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::ChContactContainer::ReportContactCallback > * SWIGSTDCALL CSharp_ChTrackContactManager_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackContactManager > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::ChContactContainer::ReportContactCallback >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::ChLoadContainer > * SWIGSTDCALL CSharp_ChTrackCustomContact_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackCustomContact > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::ChLoadContainer >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChVehicle > * SWIGSTDCALL CSharp_ChTrackedVehicle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::ChTrackedVehicle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChVehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackedVehicle > * SWIGSTDCALL CSharp_TrackedVehicle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::TrackedVehicle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackedVehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheel > * SWIGSTDCALL CSharp_Generic_Wheel_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::generic::Generic_Wheel > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheel >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheel > * SWIGSTDCALL CSharp_HMMWV_Wheel_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Wheel > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheel >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheel > * SWIGSTDCALL CSharp_Sedan_Wheel_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::sedan::Sedan_Wheel > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheel >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheel > * SWIGSTDCALL CSharp_CityBus_Wheel_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::citybus::CityBus_Wheel > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheel >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheel > * SWIGSTDCALL CSharp_MAN_5t_Wheel_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_5t_Wheel > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheel >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheel > * SWIGSTDCALL CSharp_UAZBUS_Wheel_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Wheel > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheel >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheel > * SWIGSTDCALL CSharp_Gator_Wheel_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::gator::Gator_Wheel > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheel >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheel > * SWIGSTDCALL CSharp_RCCar_Wheel_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::rccar::RCCar_Wheel > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheel >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::rccar::RCCar_Wheel > * SWIGSTDCALL CSharp_RCCar_WheelLeft_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::rccar::RCCar_WheelLeft > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::rccar::RCCar_Wheel >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::rccar::RCCar_Wheel > * SWIGSTDCALL CSharp_RCCar_WheelRight_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::rccar::RCCar_WheelRight > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::rccar::RCCar_Wheel >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheel > * SWIGSTDCALL CSharp_FEDA_Wheel_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::feda::FEDA_Wheel > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheel >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeSimple > * SWIGSTDCALL CSharp_Generic_BrakeSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::generic::Generic_BrakeSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeSimple > * SWIGSTDCALL CSharp_HMMWV_BrakeSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_BrakeSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeShafts > * SWIGSTDCALL CSharp_HMMWV_BrakeShafts_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_BrakeShafts > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeShafts >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeSimple > * SWIGSTDCALL CSharp_Sedan_BrakeSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::sedan::Sedan_BrakeSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeShafts > * SWIGSTDCALL CSharp_Sedan_BrakeShafts_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::sedan::Sedan_BrakeShafts > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeShafts >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeSimple > * SWIGSTDCALL CSharp_CityBus_BrakeSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::citybus::CityBus_BrakeSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeShafts > * SWIGSTDCALL CSharp_CityBus_BrakeShafts_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::citybus::CityBus_BrakeShafts > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeShafts >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeSimple > * SWIGSTDCALL CSharp_MAN_5t_BrakeSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_5t_BrakeSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeShafts > * SWIGSTDCALL CSharp_MAN_5t_BrakeShafts_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_5t_BrakeShafts > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeShafts >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeSimple > * SWIGSTDCALL CSharp_UAZBUS_BrakeSimpleFront_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::uaz::UAZBUS_BrakeSimpleFront > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeSimple > * SWIGSTDCALL CSharp_UAZBUS_BrakeSimpleRear_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::uaz::UAZBUS_BrakeSimpleRear > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeShafts > * SWIGSTDCALL CSharp_UAZBUS_BrakeShaftsFront_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeShafts >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeShafts > * SWIGSTDCALL CSharp_UAZBUS_BrakeShaftsRear_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeShafts >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeSimple > * SWIGSTDCALL CSharp_Gator_BrakeSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::gator::Gator_BrakeSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeShafts > * SWIGSTDCALL CSharp_Gator_BrakeShafts_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::gator::Gator_BrakeShafts > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeShafts >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeSimple > * SWIGSTDCALL CSharp_RCCar_BrakeSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::rccar::RCCar_BrakeSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeSimple > * SWIGSTDCALL CSharp_FEDA_BrakeSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::feda::FEDA_BrakeSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChBrakeShafts > * SWIGSTDCALL CSharp_FEDA_BrakeShafts_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::feda::FEDA_BrakeShafts > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChBrakeShafts >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackBrakeSimple > * SWIGSTDCALL CSharp_M113_BrakeSimple_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_BrakeSimple > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackBrakeSimple >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackBrakeShafts > * SWIGSTDCALL CSharp_M113_BrakeShafts_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_BrakeShafts > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackBrakeShafts >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheeledVehicle > * SWIGSTDCALL CSharp_Generic_Vehicle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::generic::Generic_Vehicle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheeledVehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > * SWIGSTDCALL CSharp_HMMWV_Full_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Full > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::hmmwv::HMMWV >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::hmmwv::HMMWV > * SWIGSTDCALL CSharp_HMMWV_Reduced_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Reduced > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::hmmwv::HMMWV >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheeledVehicle > * SWIGSTDCALL CSharp_HMMWV_Vehicle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Vehicle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheeledVehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Vehicle > * SWIGSTDCALL CSharp_HMMWV_VehicleReduced_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_VehicleReduced > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Vehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Vehicle > * SWIGSTDCALL CSharp_HMMWV_VehicleFull_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_VehicleFull > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::hmmwv::HMMWV_Vehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheeledVehicle > * SWIGSTDCALL CSharp_Sedan_Vehicle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::sedan::Sedan_Vehicle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheeledVehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheeledVehicle > * SWIGSTDCALL CSharp_CityBus_Vehicle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::citybus::CityBus_Vehicle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheeledVehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheeledVehicle > * SWIGSTDCALL CSharp_MAN_5t_Vehicle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_5t_Vehicle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheeledVehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheeledVehicle > * SWIGSTDCALL CSharp_MAN_7t_Vehicle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_7t_Vehicle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheeledVehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheeledVehicle > * SWIGSTDCALL CSharp_MAN_10t_Vehicle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::man::MAN_10t_Vehicle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheeledVehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheeledVehicle > * SWIGSTDCALL CSharp_UAZBUS_Vehicle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::uaz::UAZBUS_Vehicle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheeledVehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheeledVehicle > * SWIGSTDCALL CSharp_Gator_Vehicle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::gator::Gator_Vehicle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheeledVehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheeledVehicle > * SWIGSTDCALL CSharp_RCCar_Vehicle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::rccar::RCCar_Vehicle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheeledVehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChWheeledVehicle > * SWIGSTDCALL CSharp_FEDA_Vehicle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::feda::FEDA_Vehicle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChWheeledVehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::ChTrackedVehicle > * SWIGSTDCALL CSharp_M113_Vehicle_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_Vehicle > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::ChTrackedVehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::m113::M113_Vehicle > * SWIGSTDCALL CSharp_M113_Vehicle_SinglePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_Vehicle_SinglePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::m113::M113_Vehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::m113::M113_Vehicle > * SWIGSTDCALL CSharp_M113_Vehicle_DoublePin_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_Vehicle_DoublePin > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::m113::M113_Vehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::m113::M113_Vehicle > * SWIGSTDCALL CSharp_M113_Vehicle_BandBushing_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_Vehicle_BandBushing > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::m113::M113_Vehicle >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< chrono::vehicle::m113::M113_Vehicle > * SWIGSTDCALL CSharp_M113_Vehicle_BandANCF_SWIGSmartPtrUpcast(std::shared_ptr< chrono::vehicle::m113::M113_Vehicle_BandANCF > *jarg1) {
    return jarg1 ? new std::shared_ptr< chrono::vehicle::m113::M113_Vehicle >(*jarg1) : 0;
}

#ifdef __cplusplus
}
#endif

