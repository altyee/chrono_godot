//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChAdaptiveSpeedController : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChAdaptiveSpeedController(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChAdaptiveSpeedController obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ChAdaptiveSpeedController obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ChAdaptiveSpeedController() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vehiclePINVOKE.delete_ChAdaptiveSpeedController(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChAdaptiveSpeedController() : this(vehiclePINVOKE.new_ChAdaptiveSpeedController__SWIG_0(), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChAdaptiveSpeedController(string filename) : this(vehiclePINVOKE.new_ChAdaptiveSpeedController__SWIG_1(filename), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGains(double Kp, double Ki, double Kd) {
    vehiclePINVOKE.ChAdaptiveSpeedController_SetGains(swigCPtr, Kp, Ki, Kd);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetCurrentSpeed() {
    double ret = vehiclePINVOKE.ChAdaptiveSpeedController_GetCurrentSpeed(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Reset(ChVehicle vehicle) {
    vehiclePINVOKE.ChAdaptiveSpeedController_Reset(swigCPtr, ChVehicle.getCPtr(vehicle));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public double Advance(ChVehicle vehicle, double target_speed, double target_following_time, double target_min_distance, double current_distance, double step) {
    double ret = vehiclePINVOKE.ChAdaptiveSpeedController_Advance(swigCPtr, ChVehicle.getCPtr(vehicle), target_speed, target_following_time, target_min_distance, current_distance, step);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void StartDataCollection() {
    vehiclePINVOKE.ChAdaptiveSpeedController_StartDataCollection(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void StopDataCollection() {
    vehiclePINVOKE.ChAdaptiveSpeedController_StopDataCollection(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsDataCollectionEnabled() {
    bool ret = vehiclePINVOKE.ChAdaptiveSpeedController_IsDataCollectionEnabled(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsDataAvailable() {
    bool ret = vehiclePINVOKE.ChAdaptiveSpeedController_IsDataAvailable(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void WriteOutputFile(string filename) {
    vehiclePINVOKE.ChAdaptiveSpeedController_WriteOutputFile(swigCPtr, filename);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
