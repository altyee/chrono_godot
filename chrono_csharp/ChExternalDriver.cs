//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChExternalDriver : ChDriver {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChExternalDriver(global::System.IntPtr cPtr, bool cMemoryOwn) : base(vehiclePINVOKE.ChExternalDriver_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChExternalDriver obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          vehiclePINVOKE.delete_ChExternalDriver(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChExternalDriver(ChVehicle vehicle, int port) : this(vehiclePINVOKE.new_ChExternalDriver(ChVehicle.getCPtr(vehicle), port), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Synchronize(double time) {
    vehiclePINVOKE.ChExternalDriver_Synchronize(swigCPtr, time);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddDataGenerator(ChExternalDriver_DataGeneratorFunctor functor, float updateRate) {
    vehiclePINVOKE.ChExternalDriver_AddDataGenerator__SWIG_0(swigCPtr, ChExternalDriver_DataGeneratorFunctor.getCPtr(functor), updateRate);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddDataGenerator(ChExternalDriver_DataGeneratorFunctor functor) {
    vehiclePINVOKE.ChExternalDriver_AddDataGenerator__SWIG_1(swigCPtr, ChExternalDriver_DataGeneratorFunctor.getCPtr(functor));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddDataParser(ChExternalDriver_DataParserFunctor functor) {
    vehiclePINVOKE.ChExternalDriver_AddDataParser(swigCPtr, ChExternalDriver_DataParserFunctor.getCPtr(functor));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
