//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ReportContactCallback : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ReportContactCallback(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ReportContactCallback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ReportContactCallback() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          corePINVOKE.delete_ReportContactCallback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual bool OnReportContact(ChVectorD pA, ChVectorD pB, ChMatrix33D plane_coord, double distance, double eff_radius, ChVectorD react_forces, ChVectorD react_torques, ChContactable contactobjA, ChContactable contactobjB) {
    bool ret = corePINVOKE.ReportContactCallback_OnReportContact(swigCPtr, ChVectorD.getCPtr(pA), ChVectorD.getCPtr(pB), ChMatrix33D.getCPtr(plane_coord), distance, eff_radius, ChVectorD.getCPtr(react_forces), ChVectorD.getCPtr(react_torques), ChContactable.getCPtr(contactobjA), ChContactable.getCPtr(contactobjB));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ReportContactCallback() : this(corePINVOKE.new_ReportContactCallback(), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("OnReportContact", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateReportContactCallback_0(SwigDirectorMethodOnReportContact);
    corePINVOKE.ReportContactCallback_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(ReportContactCallback));
    return hasDerivedMethod;
  }

  private bool SwigDirectorMethodOnReportContact(global::System.IntPtr pA, global::System.IntPtr pB, global::System.IntPtr plane_coord, double distance, double eff_radius, global::System.IntPtr react_forces, global::System.IntPtr react_torques, global::System.IntPtr contactobjA, global::System.IntPtr contactobjB) {
    return OnReportContact(new ChVectorD(pA, false), new ChVectorD(pB, false), new ChMatrix33D(plane_coord, false), distance, eff_radius, new ChVectorD(react_forces, false), new ChVectorD(react_torques, false), (contactobjA == global::System.IntPtr.Zero) ? null : new ChContactable(contactobjA, true), (contactobjB == global::System.IntPtr.Zero) ? null : new ChContactable(contactobjB, true));
  }

  public delegate bool SwigDelegateReportContactCallback_0(global::System.IntPtr pA, global::System.IntPtr pB, global::System.IntPtr plane_coord, double distance, double eff_radius, global::System.IntPtr react_forces, global::System.IntPtr react_torques, global::System.IntPtr contactobjA, global::System.IntPtr contactobjB);

  private SwigDelegateReportContactCallback_0 swigDelegate0;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(ChVectorD), typeof(ChVectorD), typeof(ChMatrix33D), typeof(double), typeof(double), typeof(ChVectorD), typeof(ChVectorD), typeof(ChContactable), typeof(ChContactable) };
}
