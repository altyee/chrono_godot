//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChFunction_Mocap : ChFunction {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChFunction_Mocap(global::System.IntPtr cPtr, bool cMemoryOwn) : base(corePINVOKE.ChFunction_Mocap_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChFunction_Mocap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          corePINVOKE.delete_ChFunction_Mocap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChFunction_Mocap() : this(corePINVOKE.new_ChFunction_Mocap__SWIG_0(), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction_Mocap(int m_samples, double freq) : this(corePINVOKE.new_ChFunction_Mocap__SWIG_1(m_samples, freq), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction_Mocap(ChFunction_Mocap other) : this(corePINVOKE.new_ChFunction_Mocap__SWIG_2(ChFunction_Mocap.getCPtr(other)), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChFunction.FunctionType Get_Type() {
    ChFunction.FunctionType ret = (ChFunction.FunctionType)corePINVOKE.ChFunction_Mocap_Get_Type(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double Get_y(double x) {
    double ret = corePINVOKE.ChFunction_Mocap_Get_y(swigCPtr, x);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double Get_y_dx(double x) {
    double ret = corePINVOKE.ChFunction_Mocap_Get_y_dx(swigCPtr, x);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double Get_y_dxdx(double x) {
    double ret = corePINVOKE.ChFunction_Mocap_Get_y_dxdx(swigCPtr, x);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Set_samp_freq(double m_fr) {
    corePINVOKE.ChFunction_Mocap_Set_samp_freq(swigCPtr, m_fr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set_samples(int m_samples) {
    corePINVOKE.ChFunction_Mocap_Set_samples(swigCPtr, m_samples);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double Get_samp_freq() {
    double ret = corePINVOKE.ChFunction_Mocap_Get_samp_freq(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Get_samples() {
    int ret = corePINVOKE.ChFunction_Mocap_Get_samples(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Get_timetot() {
    double ret = corePINVOKE.ChFunction_Mocap_Get_timetot(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Get_timeslice() {
    double ret = corePINVOKE.ChFunction_Mocap_Get_timeslice(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_chrono__ChArrayT_double_t Get_array_y() {
    SWIGTYPE_p_chrono__ChArrayT_double_t ret = new SWIGTYPE_p_chrono__ChArrayT_double_t(corePINVOKE.ChFunction_Mocap_Get_array_y(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_chrono__ChArrayT_double_t Get_array_y_dt() {
    SWIGTYPE_p_chrono__ChArrayT_double_t ret = new SWIGTYPE_p_chrono__ChArrayT_double_t(corePINVOKE.ChFunction_Mocap_Get_array_y_dt(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_chrono__ChArrayT_double_t Get_array_y_dtdt() {
    SWIGTYPE_p_chrono__ChArrayT_double_t ret = new SWIGTYPE_p_chrono__ChArrayT_double_t(corePINVOKE.ChFunction_Mocap_Get_array_y_dtdt(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Set_array_y(SWIGTYPE_p_chrono__ChArrayT_double_t m_array_y) {
    corePINVOKE.ChFunction_Mocap_Set_array_y(swigCPtr, SWIGTYPE_p_chrono__ChArrayT_double_t.getCPtr(m_array_y));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set_array_y_dt(SWIGTYPE_p_chrono__ChArrayT_double_t m_array_y_dt) {
    corePINVOKE.ChFunction_Mocap_Set_array_y_dt(swigCPtr, SWIGTYPE_p_chrono__ChArrayT_double_t.getCPtr(m_array_y_dt));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set_array_y_dtdt(SWIGTYPE_p_chrono__ChArrayT_double_t m_array_y_dtdt) {
    corePINVOKE.ChFunction_Mocap_Set_array_y_dtdt(swigCPtr, SWIGTYPE_p_chrono__ChArrayT_double_t.getCPtr(m_array_y_dtdt));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Parse_array_AOA() {
    bool ret = corePINVOKE.ChFunction_Mocap_Parse_array_AOA(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Parse_array_Elite() {
    bool ret = corePINVOKE.ChFunction_Mocap_Parse_array_Elite(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Estimate_x_range(SWIGTYPE_p_double xmin, SWIGTYPE_p_double xmax) {
    corePINVOKE.ChFunction_Mocap_Estimate_x_range(swigCPtr, SWIGTYPE_p_double.getCPtr(xmin), SWIGTYPE_p_double.getCPtr(xmax));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut marchive) {
    corePINVOKE.ChFunction_Mocap_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn marchive) {
    corePINVOKE.ChFunction_Mocap_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

}
