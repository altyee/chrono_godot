//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChNodeXYZ : ChNodeBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChNodeXYZ(global::System.IntPtr cPtr, bool cMemoryOwn) : base(corePINVOKE.ChNodeXYZ_SWIGSmartPtrUpcast(cPtr), true) {
	swigCMemOwnDerived = cMemoryOwn;
	swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChNodeXYZ obj) {
	return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
	lock(this) {
	  if (swigCPtr.Handle != global::System.IntPtr.Zero) {
		if (swigCMemOwnDerived) {
		  swigCMemOwnDerived = false;
		  corePINVOKE.delete_ChNodeXYZ(swigCPtr);
		}
		swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
	  }
	  base.Dispose(disposing);
	}
  }

  public virtual SWIGTYPE_p_ChVariablesNode Variables() {
	SWIGTYPE_p_ChVariablesNode ret = new SWIGTYPE_p_ChVariablesNode(corePINVOKE.ChNodeXYZ_Variables(swigCPtr), false);
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChVectorD GetPos() {
	ChVectorD ret = new ChVectorD(corePINVOKE.ChNodeXYZ_GetPos(swigCPtr), false);
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public void SetPos(ChVectorD mpos) {
	corePINVOKE.ChNodeXYZ_SetPos(swigCPtr, ChVectorD.getCPtr(mpos));
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVectorD GetPos_dt() {
	ChVectorD ret = new ChVectorD(corePINVOKE.ChNodeXYZ_GetPos_dt(swigCPtr), false);
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public void SetPos_dt(ChVectorD mposdt) {
	corePINVOKE.ChNodeXYZ_SetPos_dt(swigCPtr, ChVectorD.getCPtr(mposdt));
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVectorD GetPos_dtdt() {
	ChVectorD ret = new ChVectorD(corePINVOKE.ChNodeXYZ_GetPos_dtdt(swigCPtr), false);
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public void SetPos_dtdt(ChVectorD mposdtdt) {
	corePINVOKE.ChNodeXYZ_SetPos_dtdt(swigCPtr, ChVectorD.getCPtr(mposdtdt));
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double GetMass() {
	double ret = corePINVOKE.ChNodeXYZ_GetMass(swigCPtr);
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public virtual void SetMass(double mm) {
	corePINVOKE.ChNodeXYZ_SetMass(swigCPtr, mm);
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override int GetNdofX() {
	int ret = corePINVOKE.ChNodeXYZ_GetNdofX(swigCPtr);
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public int LoadableGet_ndof_x() {
	int ret = corePINVOKE.ChNodeXYZ_LoadableGet_ndof_x(swigCPtr);
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public int LoadableGet_ndof_w() {
	int ret = corePINVOKE.ChNodeXYZ_LoadableGet_ndof_w(swigCPtr);
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public void LoadableGetStateBlock_x(int block_offset, ChState mD) {
	corePINVOKE.ChNodeXYZ_LoadableGetStateBlock_x(swigCPtr, block_offset, ChState.getCPtr(mD));
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void LoadableGetStateBlock_w(int block_offset, ChStateDelta mD) {
	corePINVOKE.ChNodeXYZ_LoadableGetStateBlock_w(swigCPtr, block_offset, ChStateDelta.getCPtr(mD));
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void LoadableStateIncrement(uint off_x, ChState x_new, ChState x, uint off_v, ChStateDelta Dv) {
	corePINVOKE.ChNodeXYZ_LoadableStateIncrement(swigCPtr, off_x, ChState.getCPtr(x_new), ChState.getCPtr(x), off_v, ChStateDelta.getCPtr(Dv));
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public int Get_field_ncoords() {
	int ret = corePINVOKE.ChNodeXYZ_Get_field_ncoords(swigCPtr);
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public int GetSubBlocks() {
	int ret = corePINVOKE.ChNodeXYZ_GetSubBlocks(swigCPtr);
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public uint GetSubBlockOffset(int nblock) {
	uint ret = corePINVOKE.ChNodeXYZ_GetSubBlockOffset(swigCPtr, nblock);
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public uint GetSubBlockSize(int nblock) {
	uint ret = corePINVOKE.ChNodeXYZ_GetSubBlockSize(swigCPtr, nblock);
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public bool IsSubBlockActive(int nblock) {
	bool ret = corePINVOKE.ChNodeXYZ_IsSubBlockActive(swigCPtr, nblock);
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public void LoadableGetVariables(SWIGTYPE_p_std__vectorT_ChVariables_p_t mvars) {
	corePINVOKE.ChNodeXYZ_LoadableGetVariables(swigCPtr, SWIGTYPE_p_std__vectorT_ChVariables_p_t.getCPtr(mvars));
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ComputeNF(double U, double V, double W, ChVectorDynamicD Qi, SWIGTYPE_p_double detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w) {
	corePINVOKE.ChNodeXYZ_ComputeNF(swigCPtr, U, V, W, ChVectorDynamicD.getCPtr(Qi), SWIGTYPE_p_double.getCPtr(detJ), ChVectorDynamicD.getCPtr(F), ChVectorDynamicD.getCPtr(state_x), ChVectorDynamicD.getCPtr(state_w));
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetDensity() {
	double ret = corePINVOKE.ChNodeXYZ_GetDensity(swigCPtr);
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut marchive) {
	corePINVOKE.ChNodeXYZ_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(marchive));
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn marchive) {
	corePINVOKE.ChNodeXYZ_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive));
	if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVectorD pos {
	set {
	  corePINVOKE.ChNodeXYZ_pos_set(swigCPtr, ChVectorD.getCPtr(value));
	  if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	} 
	get {
	  global::System.IntPtr cPtr = corePINVOKE.ChNodeXYZ_pos_get(swigCPtr);
	  ChVectorD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVectorD(cPtr, false);
	  if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	  return ret;
	} 
  }

  public ChVectorD pos_dt {
	set {
	  corePINVOKE.ChNodeXYZ_pos_dt_set(swigCPtr, ChVectorD.getCPtr(value));
	  if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	} 
	get {
	  global::System.IntPtr cPtr = corePINVOKE.ChNodeXYZ_pos_dt_get(swigCPtr);
	  ChVectorD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVectorD(cPtr, false);
	  if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	  return ret;
	} 
  }

  public ChVectorD pos_dtdt {
	set {
	  corePINVOKE.ChNodeXYZ_pos_dtdt_set(swigCPtr, ChVectorD.getCPtr(value));
	  if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	} 
	get {
	  global::System.IntPtr cPtr = corePINVOKE.ChNodeXYZ_pos_dtdt_get(swigCPtr);
	  ChVectorD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVectorD(cPtr, false);
	  if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
	  return ret;
	} 
  }

}
