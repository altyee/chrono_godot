//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class EngineShafts : ChEngineShafts {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal EngineShafts(global::System.IntPtr cPtr, bool cMemoryOwn) : base(vehiclePINVOKE.EngineShafts_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EngineShafts obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          vehiclePINVOKE.delete_EngineShafts(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public EngineShafts(string filename) : this(vehiclePINVOKE.new_EngineShafts__SWIG_0(filename), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public EngineShafts(SWIGTYPE_p_rapidjson__Document d) : this(vehiclePINVOKE.new_EngineShafts__SWIG_1(SWIGTYPE_p_rapidjson__Document.getCPtr(d)), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double GetMotorBlockInertia() {
    double ret = vehiclePINVOKE.EngineShafts_GetMotorBlockInertia(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetMotorshaftInertia() {
    double ret = vehiclePINVOKE.EngineShafts_GetMotorshaftInertia(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetEngineTorqueMap(SWIGTYPE_p_std__shared_ptrT_ChFunction_Recorder_t map) {
    vehiclePINVOKE.EngineShafts_SetEngineTorqueMap(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChFunction_Recorder_t.getCPtr(map));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetEngineLossesMap(SWIGTYPE_p_std__shared_ptrT_ChFunction_Recorder_t map) {
    vehiclePINVOKE.EngineShafts_SetEngineLossesMap(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChFunction_Recorder_t.getCPtr(map));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
