//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Generic_SimpleDriveline : ChDrivelineWV {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal Generic_SimpleDriveline(global::System.IntPtr cPtr, bool cMemoryOwn) : base(vehiclePINVOKE.Generic_SimpleDriveline_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Generic_SimpleDriveline obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          vehiclePINVOKE.delete_Generic_SimpleDriveline(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Generic_SimpleDriveline(string name) : this(vehiclePINVOKE.new_Generic_SimpleDriveline(name), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override string GetTemplateName() {
    string ret = vehiclePINVOKE.Generic_SimpleDriveline_GetTemplateName(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int GetNumDrivenAxles() {
    int ret = vehiclePINVOKE.Generic_SimpleDriveline_GetNumDrivenAxles(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Initialize(ChChassis chassis, ChAxleList axles, vector_int driven_axles) {
    vehiclePINVOKE.Generic_SimpleDriveline_Initialize(swigCPtr, ChChassis.getCPtr(chassis), ChAxleList.getCPtr(axles), vector_int.getCPtr(driven_axles));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Synchronize(double time, DriverInputs driver_inputs, double torque) {
    vehiclePINVOKE.Generic_SimpleDriveline_Synchronize(swigCPtr, time, DriverInputs.getCPtr(driver_inputs), torque);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override double GetSpindleTorque(int axle, VehicleSide side) {
    double ret = vehiclePINVOKE.Generic_SimpleDriveline_GetSpindleTorque(swigCPtr, axle, (int)side);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Disconnect() {
    vehiclePINVOKE.Generic_SimpleDriveline_Disconnect(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override double GetOutputDriveshaftSpeed() {
    double ret = vehiclePINVOKE.Generic_SimpleDriveline_GetOutputDriveshaftSpeed(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
