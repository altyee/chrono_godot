//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChPowertrainAssembly : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChPowertrainAssembly(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChPowertrainAssembly obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChPowertrainAssembly() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          vehiclePINVOKE.delete_ChPowertrainAssembly(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChPowertrainAssembly(SWIGTYPE_p_std__shared_ptrT_ChEngine_t engine, SWIGTYPE_p_std__shared_ptrT_ChTransmission_t transmission) : this(vehiclePINVOKE.new_ChPowertrainAssembly(SWIGTYPE_p_std__shared_ptrT_ChEngine_t.getCPtr(engine), SWIGTYPE_p_std__shared_ptrT_ChTransmission_t.getCPtr(transmission)), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__shared_ptrT_ChEngine_t GetEngine() {
    SWIGTYPE_p_std__shared_ptrT_ChEngine_t ret = new SWIGTYPE_p_std__shared_ptrT_ChEngine_t(vehiclePINVOKE.ChPowertrainAssembly_GetEngine(swigCPtr), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_ChTransmission_t GetTransmission() {
    SWIGTYPE_p_std__shared_ptrT_ChTransmission_t ret = new SWIGTYPE_p_std__shared_ptrT_ChTransmission_t(vehiclePINVOKE.ChPowertrainAssembly_GetTransmission(swigCPtr), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetOutputTorque() {
    double ret = vehiclePINVOKE.ChPowertrainAssembly_GetOutputTorque(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Initialize(SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChChassis_t chassis) {
    vehiclePINVOKE.ChPowertrainAssembly_Initialize(swigCPtr, SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChChassis_t.getCPtr(chassis));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Synchronize(double time, DriverInputs driver_inputs, double driveshaft_speed) {
    vehiclePINVOKE.ChPowertrainAssembly_Synchronize(swigCPtr, time, DriverInputs.getCPtr(driver_inputs), driveshaft_speed);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Advance(double step) {
    vehiclePINVOKE.ChPowertrainAssembly_Advance(swigCPtr, step);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
