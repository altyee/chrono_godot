//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChTMeasyTire : ChForceElementTire {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChTMeasyTire(global::System.IntPtr cPtr, bool cMemoryOwn) : base(vehiclePINVOKE.ChTMeasyTire_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChTMeasyTire obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          vehiclePINVOKE.delete_ChTMeasyTire(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual string GetTemplateName() {
    string ret = vehiclePINVOKE.ChTMeasyTire_GetTemplateName(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void AddVisualizationAssets(VisualizationType vis) {
    vehiclePINVOKE.ChTMeasyTire_AddVisualizationAssets(swigCPtr, (int)vis);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveVisualizationAssets() {
    vehiclePINVOKE.ChTMeasyTire_RemoveVisualizationAssets(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double GetRadius() {
    double ret = vehiclePINVOKE.ChTMeasyTire_GetRadius(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetGammaLimit(double gamma_limit) {
    vehiclePINVOKE.ChTMeasyTire_SetGammaLimit(swigCPtr, gamma_limit);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double GetWidth() {
    double ret = vehiclePINVOKE.ChTMeasyTire_GetWidth(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetVisualizationWidth() {
    double ret = vehiclePINVOKE.ChTMeasyTire_GetVisualizationWidth(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSlipAngle_internal() {
    double ret = vehiclePINVOKE.ChTMeasyTire_GetSlipAngle_internal(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetLongitudinalSlip_internal() {
    double ret = vehiclePINVOKE.ChTMeasyTire_GetLongitudinalSlip_internal(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTireOmega() {
    double ret = vehiclePINVOKE.ChTMeasyTire_GetTireOmega(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double GetTireMaxLoad(uint li) {
    double ret = vehiclePINVOKE.ChTMeasyTire_GetTireMaxLoad(li);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GuessTruck80Par(uint li, double tireWidth, double ratio, double rimDia, double pinfl_li, double pinfl_use, double damping_ratio) {
    vehiclePINVOKE.ChTMeasyTire_GuessTruck80Par__SWIG_0(swigCPtr, li, tireWidth, ratio, rimDia, pinfl_li, pinfl_use, damping_ratio);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GuessTruck80Par(uint li, double tireWidth, double ratio, double rimDia, double pinfl_li, double pinfl_use) {
    vehiclePINVOKE.ChTMeasyTire_GuessTruck80Par__SWIG_1(swigCPtr, li, tireWidth, ratio, rimDia, pinfl_li, pinfl_use);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GuessTruck80Par(uint li, double tireWidth, double ratio, double rimDia, double pinfl_li) {
    vehiclePINVOKE.ChTMeasyTire_GuessTruck80Par__SWIG_2(swigCPtr, li, tireWidth, ratio, rimDia, pinfl_li);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GuessTruck80Par(uint li, double tireWidth, double ratio, double rimDia) {
    vehiclePINVOKE.ChTMeasyTire_GuessTruck80Par__SWIG_3(swigCPtr, li, tireWidth, ratio, rimDia);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GuessTruck80Par(double loadForce, double tireWidth, double ratio, double rimDia, double pinfl_li, double pinfl_use, double damping_ratio) {
    vehiclePINVOKE.ChTMeasyTire_GuessTruck80Par__SWIG_4(swigCPtr, loadForce, tireWidth, ratio, rimDia, pinfl_li, pinfl_use, damping_ratio);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GuessTruck80Par(double loadForce, double tireWidth, double ratio, double rimDia, double pinfl_li, double pinfl_use) {
    vehiclePINVOKE.ChTMeasyTire_GuessTruck80Par__SWIG_5(swigCPtr, loadForce, tireWidth, ratio, rimDia, pinfl_li, pinfl_use);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GuessTruck80Par(double loadForce, double tireWidth, double ratio, double rimDia, double pinfl_li) {
    vehiclePINVOKE.ChTMeasyTire_GuessTruck80Par__SWIG_6(swigCPtr, loadForce, tireWidth, ratio, rimDia, pinfl_li);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GuessTruck80Par(double loadForce, double tireWidth, double ratio, double rimDia) {
    vehiclePINVOKE.ChTMeasyTire_GuessTruck80Par__SWIG_7(swigCPtr, loadForce, tireWidth, ratio, rimDia);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GuessPassCar70Par(uint li, double tireWidth, double ratio, double rimDia, double pinfl_li, double pinfl_use, double damping_ratio) {
    vehiclePINVOKE.ChTMeasyTire_GuessPassCar70Par__SWIG_0(swigCPtr, li, tireWidth, ratio, rimDia, pinfl_li, pinfl_use, damping_ratio);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GuessPassCar70Par(uint li, double tireWidth, double ratio, double rimDia, double pinfl_li, double pinfl_use) {
    vehiclePINVOKE.ChTMeasyTire_GuessPassCar70Par__SWIG_1(swigCPtr, li, tireWidth, ratio, rimDia, pinfl_li, pinfl_use);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GuessPassCar70Par(uint li, double tireWidth, double ratio, double rimDia, double pinfl_li) {
    vehiclePINVOKE.ChTMeasyTire_GuessPassCar70Par__SWIG_2(swigCPtr, li, tireWidth, ratio, rimDia, pinfl_li);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GuessPassCar70Par(uint li, double tireWidth, double ratio, double rimDia) {
    vehiclePINVOKE.ChTMeasyTire_GuessPassCar70Par__SWIG_3(swigCPtr, li, tireWidth, ratio, rimDia);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GuessPassCar70Par(double loadForce, double tireWidth, double ratio, double rimDia, double pinfl_li, double pinfl_use, double damping_ratio) {
    vehiclePINVOKE.ChTMeasyTire_GuessPassCar70Par__SWIG_4(swigCPtr, loadForce, tireWidth, ratio, rimDia, pinfl_li, pinfl_use, damping_ratio);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GuessPassCar70Par(double loadForce, double tireWidth, double ratio, double rimDia, double pinfl_li, double pinfl_use) {
    vehiclePINVOKE.ChTMeasyTire_GuessPassCar70Par__SWIG_5(swigCPtr, loadForce, tireWidth, ratio, rimDia, pinfl_li, pinfl_use);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GuessPassCar70Par(double loadForce, double tireWidth, double ratio, double rimDia, double pinfl_li) {
    vehiclePINVOKE.ChTMeasyTire_GuessPassCar70Par__SWIG_6(swigCPtr, loadForce, tireWidth, ratio, rimDia, pinfl_li);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GuessPassCar70Par(double loadForce, double tireWidth, double ratio, double rimDia) {
    vehiclePINVOKE.ChTMeasyTire_GuessPassCar70Par__SWIG_7(swigCPtr, loadForce, tireWidth, ratio, rimDia);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVerticalStiffness(double Cz) {
    vehiclePINVOKE.ChTMeasyTire_SetVerticalStiffness__SWIG_0(swigCPtr, Cz);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVerticalStiffness(vector_double defl, vector_double frc) {
    vehiclePINVOKE.ChTMeasyTire_SetVerticalStiffness__SWIG_1(swigCPtr, vector_double.getCPtr(defl), vector_double.getCPtr(frc));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFrictionCoefficient(double coeff) {
    vehiclePINVOKE.ChTMeasyTire_SetFrictionCoefficient(swigCPtr, coeff);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRollingResistanceCoefficient(double rr_coeff) {
    vehiclePINVOKE.ChTMeasyTire_SetRollingResistanceCoefficient(swigCPtr, rr_coeff);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void WritePlots(string plFileName, string plTireFormat) {
    vehiclePINVOKE.ChTMeasyTire_WritePlots(swigCPtr, plFileName, plTireFormat);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double GetDeflection() {
    double ret = vehiclePINVOKE.ChTMeasyTire_GetDeflection(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool CheckParameters() {
    bool ret = vehiclePINVOKE.ChTMeasyTire_CheckParameters(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
