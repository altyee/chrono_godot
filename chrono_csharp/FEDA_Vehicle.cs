//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class FEDA_Vehicle : ChWheeledVehicle {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal FEDA_Vehicle(global::System.IntPtr cPtr, bool cMemoryOwn) : base(vehiclePINVOKE.FEDA_Vehicle_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FEDA_Vehicle obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          vehiclePINVOKE.delete_FEDA_Vehicle(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public FEDA_Vehicle(bool fixed_, BrakeType brake_type, ChContactMethod contact_method, CollisionType chassis_collision_type, int ride_height, int damperMode) : this(vehiclePINVOKE.new_FEDA_Vehicle__SWIG_0(fixed_, (int)brake_type, (int)contact_method, (int)chassis_collision_type, ride_height, damperMode), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public FEDA_Vehicle(bool fixed_, BrakeType brake_type, ChContactMethod contact_method, CollisionType chassis_collision_type, int ride_height) : this(vehiclePINVOKE.new_FEDA_Vehicle__SWIG_1(fixed_, (int)brake_type, (int)contact_method, (int)chassis_collision_type, ride_height), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public FEDA_Vehicle(bool fixed_, BrakeType brake_type, ChContactMethod contact_method, CollisionType chassis_collision_type) : this(vehiclePINVOKE.new_FEDA_Vehicle__SWIG_2(fixed_, (int)brake_type, (int)contact_method, (int)chassis_collision_type), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public FEDA_Vehicle(bool fixed_, BrakeType brake_type, ChContactMethod contact_method) : this(vehiclePINVOKE.new_FEDA_Vehicle__SWIG_3(fixed_, (int)brake_type, (int)contact_method), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public FEDA_Vehicle(bool fixed_, BrakeType brake_type) : this(vehiclePINVOKE.new_FEDA_Vehicle__SWIG_4(fixed_, (int)brake_type), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public FEDA_Vehicle(bool fixed_) : this(vehiclePINVOKE.new_FEDA_Vehicle__SWIG_5(fixed_), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public FEDA_Vehicle() : this(vehiclePINVOKE.new_FEDA_Vehicle__SWIG_6(), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public FEDA_Vehicle(ChSystem system, bool fixed_, BrakeType brake_type, CollisionType chassis_collision_type, int ride_height, int damperMode) : this(vehiclePINVOKE.new_FEDA_Vehicle__SWIG_7(ChSystem.getCPtr(system), fixed_, (int)brake_type, (int)chassis_collision_type, ride_height, damperMode), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public FEDA_Vehicle(ChSystem system, bool fixed_, BrakeType brake_type, CollisionType chassis_collision_type, int ride_height) : this(vehiclePINVOKE.new_FEDA_Vehicle__SWIG_8(ChSystem.getCPtr(system), fixed_, (int)brake_type, (int)chassis_collision_type, ride_height), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public FEDA_Vehicle(ChSystem system, bool fixed_, BrakeType brake_type, CollisionType chassis_collision_type) : this(vehiclePINVOKE.new_FEDA_Vehicle__SWIG_9(ChSystem.getCPtr(system), fixed_, (int)brake_type, (int)chassis_collision_type), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public FEDA_Vehicle(ChSystem system, bool fixed_, BrakeType brake_type) : this(vehiclePINVOKE.new_FEDA_Vehicle__SWIG_10(ChSystem.getCPtr(system), fixed_, (int)brake_type), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public FEDA_Vehicle(ChSystem system, bool fixed_) : this(vehiclePINVOKE.new_FEDA_Vehicle__SWIG_11(ChSystem.getCPtr(system), fixed_), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public FEDA_Vehicle(ChSystem system) : this(vehiclePINVOKE.new_FEDA_Vehicle__SWIG_12(ChSystem.getCPtr(system)), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override int GetNumberAxles() {
    int ret = vehiclePINVOKE.FEDA_Vehicle_GetNumberAxles(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetWheelbase() {
    double ret = vehiclePINVOKE.FEDA_Vehicle_GetWheelbase(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetMinTurningRadius() {
    double ret = vehiclePINVOKE.FEDA_Vehicle_GetMinTurningRadius(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetMaxSteeringAngle() {
    double ret = vehiclePINVOKE.FEDA_Vehicle_GetMaxSteeringAngle(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetInitWheelAngVel(vector_double omega) {
    vehiclePINVOKE.FEDA_Vehicle_SetInitWheelAngVel(swigCPtr, vector_double.getCPtr(omega));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetSpringForce(int axle, VehicleSide side) {
    double ret = vehiclePINVOKE.FEDA_Vehicle_GetSpringForce(swigCPtr, axle, (int)side);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSpringLength(int axle, VehicleSide side) {
    double ret = vehiclePINVOKE.FEDA_Vehicle_GetSpringLength(swigCPtr, axle, (int)side);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSpringDeformation(int axle, VehicleSide side) {
    double ret = vehiclePINVOKE.FEDA_Vehicle_GetSpringDeformation(swigCPtr, axle, (int)side);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetShockForce(int axle, VehicleSide side) {
    double ret = vehiclePINVOKE.FEDA_Vehicle_GetShockForce(swigCPtr, axle, (int)side);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetShockLength(int axle, VehicleSide side) {
    double ret = vehiclePINVOKE.FEDA_Vehicle_GetShockLength(swigCPtr, axle, (int)side);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetShockVelocity(int axle, VehicleSide side) {
    double ret = vehiclePINVOKE.FEDA_Vehicle_GetShockVelocity(swigCPtr, axle, (int)side);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRideHeight(int theConfig) {
    vehiclePINVOKE.FEDA_Vehicle_SetRideHeight(swigCPtr, theConfig);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Initialize(ChCoordsysD chassisPos, double chassisFwdVel) {
    vehiclePINVOKE.FEDA_Vehicle_Initialize__SWIG_0(swigCPtr, ChCoordsysD.getCPtr(chassisPos), chassisFwdVel);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Initialize(ChCoordsysD chassisPos) {
    vehiclePINVOKE.FEDA_Vehicle_Initialize__SWIG_1(swigCPtr, ChCoordsysD.getCPtr(chassisPos));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void LogHardpointLocations() {
    vehiclePINVOKE.FEDA_Vehicle_LogHardpointLocations(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DebugLog(int what) {
    vehiclePINVOKE.FEDA_Vehicle_DebugLog(swigCPtr, what);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
