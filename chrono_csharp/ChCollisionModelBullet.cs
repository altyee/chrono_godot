//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChCollisionModelBullet : ChCollisionModel {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChCollisionModelBullet(global::System.IntPtr cPtr, bool cMemoryOwn) : base(corePINVOKE.ChCollisionModelBullet_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChCollisionModelBullet obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          corePINVOKE.delete_ChCollisionModelBullet(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChCollisionModelBullet() : this(corePINVOKE.new_ChCollisionModelBullet(), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChCollisionSystemType GetType() {
    ChCollisionSystemType ret = (ChCollisionSystemType)corePINVOKE.ChCollisionModelBullet_GetType(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int ClearModel() {
    int ret = corePINVOKE.ChCollisionModelBullet_ClearModel(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int BuildModel() {
    int ret = corePINVOKE.ChCollisionModelBullet_BuildModel(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddSphere(ChMaterialSurface material, double radius, ChVectorD pos) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddSphere__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), radius, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddSphere(ChMaterialSurface material, double radius) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddSphere__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), radius);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddEllipsoid(ChMaterialSurface material, double axis_x, double axis_y, double axis_z, ChVectorD pos, ChMatrix33D rot) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddEllipsoid__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), axis_x, axis_y, axis_z, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddEllipsoid(ChMaterialSurface material, double axis_x, double axis_y, double axis_z, ChVectorD pos) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddEllipsoid__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), axis_x, axis_y, axis_z, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddEllipsoid(ChMaterialSurface material, double axis_x, double axis_y, double axis_z) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddEllipsoid__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), axis_x, axis_y, axis_z);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddBox(ChMaterialSurface material, double size_x, double size_y, double size_z, ChVectorD pos, ChMatrix33D rot) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddBox__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), size_x, size_y, size_z, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddBox(ChMaterialSurface material, double size_x, double size_y, double size_z, ChVectorD pos) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddBox__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), size_x, size_y, size_z, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddBox(ChMaterialSurface material, double size_x, double size_y, double size_z) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddBox__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), size_x, size_y, size_z);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddCylinder(ChMaterialSurface material, double radius, double height, ChVectorD pos, ChMatrix33D rot) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddCylinder__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddCylinder(ChMaterialSurface material, double radius, double height, ChVectorD pos) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddCylinder__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddCylinder(ChMaterialSurface material, double radius, double height) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddCylinder__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), radius, height);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddCylindricalShell(ChMaterialSurface material, double radius, double height, ChVectorD pos, ChMatrix33D rot) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddCylindricalShell__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddCylindricalShell(ChMaterialSurface material, double radius, double height, ChVectorD pos) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddCylindricalShell__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddCylindricalShell(ChMaterialSurface material, double radius, double height) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddCylindricalShell__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), radius, height);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddCone(ChMaterialSurface material, double radius, double height, ChVectorD pos, ChMatrix33D rot) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddCone__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddCone(ChMaterialSurface material, double radius, double height, ChVectorD pos) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddCone__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddCone(ChMaterialSurface material, double radius, double height) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddCone__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), radius, height);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddCapsule(ChMaterialSurface material, double radius, double height, ChVectorD pos, ChMatrix33D rot) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddCapsule__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddCapsule(ChMaterialSurface material, double radius, double height, ChVectorD pos) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddCapsule__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddCapsule(ChMaterialSurface material, double radius, double height) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddCapsule__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), radius, height);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddRoundedBox(ChMaterialSurface material, double size_x, double size_y, double size_z, double sphere_r, ChVectorD pos, ChMatrix33D rot) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddRoundedBox__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), size_x, size_y, size_z, sphere_r, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddRoundedBox(ChMaterialSurface material, double size_x, double size_y, double size_z, double sphere_r, ChVectorD pos) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddRoundedBox__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), size_x, size_y, size_z, sphere_r, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddRoundedBox(ChMaterialSurface material, double size_x, double size_y, double size_z, double sphere_r) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddRoundedBox__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), size_x, size_y, size_z, sphere_r);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddRoundedCylinder(ChMaterialSurface material, double radius, double height, double sphere_r, ChVectorD pos, ChMatrix33D rot) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddRoundedCylinder__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), radius, height, sphere_r, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddRoundedCylinder(ChMaterialSurface material, double radius, double height, double sphere_r, ChVectorD pos) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddRoundedCylinder__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), radius, height, sphere_r, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddRoundedCylinder(ChMaterialSurface material, double radius, double height, double sphere_r) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddRoundedCylinder__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), radius, height, sphere_r);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddConvexHull(ChMaterialSurface material, vector_ChVectorD pointlist, ChVectorD pos, ChMatrix33D rot) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddConvexHull__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), vector_ChVectorD.getCPtr(pointlist), ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddConvexHull(ChMaterialSurface material, vector_ChVectorD pointlist, ChVectorD pos) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddConvexHull__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), vector_ChVectorD.getCPtr(pointlist), ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddConvexHull(ChMaterialSurface material, vector_ChVectorD pointlist) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddConvexHull__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), vector_ChVectorD.getCPtr(pointlist));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddTriangleMesh(ChMaterialSurface material, ChTriangleMesh trimesh, bool is_static, bool is_convex, ChVectorD pos, ChMatrix33D rot, double sphereswept_thickness) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddTriangleMesh__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), ChTriangleMesh.getCPtr(trimesh), is_static, is_convex, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot), sphereswept_thickness);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddTriangleMesh(ChMaterialSurface material, ChTriangleMesh trimesh, bool is_static, bool is_convex, ChVectorD pos, ChMatrix33D rot) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddTriangleMesh__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), ChTriangleMesh.getCPtr(trimesh), is_static, is_convex, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddTriangleMesh(ChMaterialSurface material, ChTriangleMesh trimesh, bool is_static, bool is_convex, ChVectorD pos) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddTriangleMesh__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), ChTriangleMesh.getCPtr(trimesh), is_static, is_convex, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddTriangleMesh(ChMaterialSurface material, ChTriangleMesh trimesh, bool is_static, bool is_convex) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddTriangleMesh__SWIG_3(swigCPtr, ChMaterialSurface.getCPtr(material), ChTriangleMesh.getCPtr(trimesh), is_static, is_convex);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddTriangleMeshConcave(ChMaterialSurface material, ChTriangleMesh trimesh, ChVectorD pos, ChMatrix33D rot) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddTriangleMeshConcave__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), ChTriangleMesh.getCPtr(trimesh), ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddTriangleMeshConcave(ChMaterialSurface material, ChTriangleMesh trimesh, ChVectorD pos) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddTriangleMeshConcave__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), ChTriangleMesh.getCPtr(trimesh), ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddTriangleMeshConcave(ChMaterialSurface material, ChTriangleMesh trimesh) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddTriangleMeshConcave__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), ChTriangleMesh.getCPtr(trimesh));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddTriangleMeshConcaveDecomposed(ChMaterialSurface material, SWIGTYPE_p_std__shared_ptrT_chrono__collision__ChConvexDecomposition_t mydecomposition, ChVectorD pos, ChMatrix33D rot) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddTriangleMeshConcaveDecomposed__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), SWIGTYPE_p_std__shared_ptrT_chrono__collision__ChConvexDecomposition_t.getCPtr(mydecomposition), ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddTriangleMeshConcaveDecomposed(ChMaterialSurface material, SWIGTYPE_p_std__shared_ptrT_chrono__collision__ChConvexDecomposition_t mydecomposition, ChVectorD pos) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddTriangleMeshConcaveDecomposed__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), SWIGTYPE_p_std__shared_ptrT_chrono__collision__ChConvexDecomposition_t.getCPtr(mydecomposition), ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddTriangleMeshConcaveDecomposed(ChMaterialSurface material, SWIGTYPE_p_std__shared_ptrT_chrono__collision__ChConvexDecomposition_t mydecomposition) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddTriangleMeshConcaveDecomposed__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), SWIGTYPE_p_std__shared_ptrT_chrono__collision__ChConvexDecomposition_t.getCPtr(mydecomposition));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddBarrel(ChMaterialSurface material, double Y_low, double Y_high, double axis_vert, double axis_hor, double R_offset, ChVectorD pos, ChMatrix33D rot) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddBarrel__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), Y_low, Y_high, axis_vert, axis_hor, R_offset, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddBarrel(ChMaterialSurface material, double Y_low, double Y_high, double axis_vert, double axis_hor, double R_offset, ChVectorD pos) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddBarrel__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), Y_low, Y_high, axis_vert, axis_hor, R_offset, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddBarrel(ChMaterialSurface material, double Y_low, double Y_high, double axis_vert, double axis_hor, double R_offset) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddBarrel__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), Y_low, Y_high, axis_vert, axis_hor, R_offset);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Add2Dpath(ChMaterialSurface material, ChLinePath mpath, ChVectorD pos, ChMatrix33D rot, double thickness) {
    bool ret = corePINVOKE.ChCollisionModelBullet_Add2Dpath__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), ChLinePath.getCPtr(mpath), ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot), thickness);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Add2Dpath(ChMaterialSurface material, ChLinePath mpath, ChVectorD pos, ChMatrix33D rot) {
    bool ret = corePINVOKE.ChCollisionModelBullet_Add2Dpath__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), ChLinePath.getCPtr(mpath), ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Add2Dpath(ChMaterialSurface material, ChLinePath mpath, ChVectorD pos) {
    bool ret = corePINVOKE.ChCollisionModelBullet_Add2Dpath__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), ChLinePath.getCPtr(mpath), ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Add2Dpath(ChMaterialSurface material, ChLinePath mpath) {
    bool ret = corePINVOKE.ChCollisionModelBullet_Add2Dpath__SWIG_3(swigCPtr, ChMaterialSurface.getCPtr(material), ChLinePath.getCPtr(mpath));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddPoint(ChMaterialSurface material, double radius, ChVectorD pos) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddPoint__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), radius, ChVectorD.getCPtr(pos));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddPoint(ChMaterialSurface material, double radius) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddPoint__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), radius);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddPoint(ChMaterialSurface material) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddPoint__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddTriangleProxy(ChMaterialSurface material, ChVectorD p1, ChVectorD p2, ChVectorD p3, ChVectorD ep1, ChVectorD ep2, ChVectorD ep3, bool mowns_vertex_1, bool mowns_vertex_2, bool mowns_vertex_3, bool mowns_edge_1, bool mowns_edge_2, bool mowns_edge_3, double msphereswept_rad) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddTriangleProxy__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(p1), ChVectorD.getCPtr(p2), ChVectorD.getCPtr(p3), ChVectorD.getCPtr(ep1), ChVectorD.getCPtr(ep2), ChVectorD.getCPtr(ep3), mowns_vertex_1, mowns_vertex_2, mowns_vertex_3, mowns_edge_1, mowns_edge_2, mowns_edge_3, msphereswept_rad);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddTriangleProxy(ChMaterialSurface material, ChVectorD p1, ChVectorD p2, ChVectorD p3, ChVectorD ep1, ChVectorD ep2, ChVectorD ep3, bool mowns_vertex_1, bool mowns_vertex_2, bool mowns_vertex_3, bool mowns_edge_1, bool mowns_edge_2, bool mowns_edge_3) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddTriangleProxy__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(p1), ChVectorD.getCPtr(p2), ChVectorD.getCPtr(p3), ChVectorD.getCPtr(ep1), ChVectorD.getCPtr(ep2), ChVectorD.getCPtr(ep3), mowns_vertex_1, mowns_vertex_2, mowns_vertex_3, mowns_edge_1, mowns_edge_2, mowns_edge_3);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddCopyOfAnotherModel(ChCollisionModel another) {
    bool ret = corePINVOKE.ChCollisionModelBullet_AddCopyOfAnotherModel(swigCPtr, ChCollisionModel.getCPtr(another));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void SetFamily(int mfamily) {
    corePINVOKE.ChCollisionModelBullet_SetFamily(swigCPtr, mfamily);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override int GetFamily() {
    int ret = corePINVOKE.ChCollisionModelBullet_GetFamily(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void SetFamilyMaskNoCollisionWithFamily(int mfamily) {
    corePINVOKE.ChCollisionModelBullet_SetFamilyMaskNoCollisionWithFamily(swigCPtr, mfamily);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SetFamilyMaskDoCollisionWithFamily(int mfamily) {
    corePINVOKE.ChCollisionModelBullet_SetFamilyMaskDoCollisionWithFamily(swigCPtr, mfamily);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool GetFamilyMaskDoesCollisionWithFamily(int mfamily) {
    bool ret = corePINVOKE.ChCollisionModelBullet_GetFamilyMaskDoesCollisionWithFamily(swigCPtr, mfamily);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void SetFamilyGroup(short group) {
    corePINVOKE.ChCollisionModelBullet_SetFamilyGroup(swigCPtr, group);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SetFamilyMask(short mask) {
    corePINVOKE.ChCollisionModelBullet_SetFamilyMask(swigCPtr, mask);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void GetAABB(ChVectorD bbmin, ChVectorD bbmax) {
    corePINVOKE.ChCollisionModelBullet_GetAABB(swigCPtr, ChVectorD.getCPtr(bbmin), ChVectorD.getCPtr(bbmax));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SyncPosition() {
    corePINVOKE.ChCollisionModelBullet_SyncPosition(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool SetSphereRadius(double coll_radius, double out_envelope) {
    bool ret = corePINVOKE.ChCollisionModelBullet_SetSphereRadius(swigCPtr, coll_radius, out_envelope);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChCoordsysD GetShapePos(int index) {
    ChCoordsysD ret = new ChCoordsysD(corePINVOKE.ChCollisionModelBullet_GetShapePos(swigCPtr, index), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override SWIGTYPE_p_std__vectorT_double_t GetShapeDimensions(int index) {
    SWIGTYPE_p_std__vectorT_double_t ret = new SWIGTYPE_p_std__vectorT_double_t(corePINVOKE.ChCollisionModelBullet_GetShapeDimensions(swigCPtr, index), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut marchive) {
    corePINVOKE.ChCollisionModelBullet_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn marchive) {
    corePINVOKE.ChCollisionModelBullet_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

}
