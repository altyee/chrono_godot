//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChVehicle : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChVehicle(global::System.IntPtr cPtr, bool cMemoryOwn) {
	swigCMemOwnBase = cMemoryOwn;
	swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChVehicle obj) {
	return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChVehicle() {
	Dispose(false);
  }

  public void Dispose() {
	Dispose(true);
	global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
	lock(this) {
	  if (swigCPtr.Handle != global::System.IntPtr.Zero) {
		if (swigCMemOwnBase) {
		  swigCMemOwnBase = false;
		  vehiclePINVOKE.delete_ChVehicle(swigCPtr);
		}
		swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
	  }
	}
  }

  public string GetName() {
	string ret = vehiclePINVOKE.ChVehicle_GetName(swigCPtr);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public void SetName(string name) {
	vehiclePINVOKE.ChVehicle_SetName(swigCPtr, name);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string GetTemplateName() {
	string ret = vehiclePINVOKE.ChVehicle_GetTemplateName(swigCPtr);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChSystem GetSystem() {
	global::System.IntPtr cPtr = vehiclePINVOKE.ChVehicle_GetSystem(swigCPtr);
	ChSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSystem(cPtr, true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public double GetChTime() {
	double ret = vehiclePINVOKE.ChVehicle_GetChTime(swigCPtr);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChChassis GetChassis() {
	global::System.IntPtr cPtr = vehiclePINVOKE.ChVehicle_GetChassis(swigCPtr);
	ChChassis ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChChassis(cPtr, true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChChassisRear GetChassisRear(int id) {
	global::System.IntPtr cPtr = vehiclePINVOKE.ChVehicle_GetChassisRear(swigCPtr, id);
	ChChassisRear ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChChassisRear(cPtr, true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChChassisConnector GetChassisConnector(int id) {
	global::System.IntPtr cPtr = vehiclePINVOKE.ChVehicle_GetChassisConnector(swigCPtr, id);
	ChChassisConnector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChChassisConnector(cPtr, true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChBodyAuxRef GetChassisBody() {
	global::System.IntPtr cPtr = vehiclePINVOKE.ChVehicle_GetChassisBody(swigCPtr);
	ChBodyAuxRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyAuxRef(cPtr, true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChBodyAuxRef GetChassisRearBody(int id) {
	global::System.IntPtr cPtr = vehiclePINVOKE.ChVehicle_GetChassisRearBody(swigCPtr, id);
	ChBodyAuxRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyAuxRef(cPtr, true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChPowertrainAssembly GetPowertrainAssembly() {
	global::System.IntPtr cPtr = vehiclePINVOKE.ChVehicle_GetPowertrainAssembly(swigCPtr);
	ChPowertrainAssembly ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPowertrainAssembly(cPtr, true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_ChEngine_t GetEngine() {
	SWIGTYPE_p_std__shared_ptrT_ChEngine_t ret = new SWIGTYPE_p_std__shared_ptrT_ChEngine_t(vehiclePINVOKE.ChVehicle_GetEngine(swigCPtr), true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_ChTransmission_t GetTransmission() {
	SWIGTYPE_p_std__shared_ptrT_ChTransmission_t ret = new SWIGTYPE_p_std__shared_ptrT_ChTransmission_t(vehiclePINVOKE.ChVehicle_GetTransmission(swigCPtr), true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public double GetMass() {
	double ret = vehiclePINVOKE.ChVehicle_GetMass(swigCPtr);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChFrameD GetCOMFrame() {
	ChFrameD ret = new ChFrameD(vehiclePINVOKE.ChVehicle_GetCOMFrame(swigCPtr), true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChMatrix33D GetInertia() {
	ChMatrix33D ret = new ChMatrix33D(vehiclePINVOKE.ChVehicle_GetInertia(swigCPtr), false);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChFrameD GetTransform() {
	ChFrameD ret = new ChFrameD(vehiclePINVOKE.ChVehicle_GetTransform(swigCPtr), true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChVectorD GetPos() {
	ChVectorD ret = new ChVectorD(vehiclePINVOKE.ChVehicle_GetPos(swigCPtr), false);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChQuaternionD GetRot() {
	ChQuaternionD ret = new ChQuaternionD(vehiclePINVOKE.ChVehicle_GetRot(swigCPtr), true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public double GetSpeed() {
	double ret = vehiclePINVOKE.ChVehicle_GetSpeed(swigCPtr);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChVectorD GetPointLocation(ChVectorD locpos) {
	ChVectorD ret = new ChVectorD(vehiclePINVOKE.ChVehicle_GetPointLocation(swigCPtr, ChVectorD.getCPtr(locpos)), true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChVectorD GetPointVelocity(ChVectorD locpos) {
	ChVectorD ret = new ChVectorD(vehiclePINVOKE.ChVehicle_GetPointVelocity(swigCPtr, ChVectorD.getCPtr(locpos)), true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChVectorD GetPointAcceleration(ChVectorD locpos) {
	ChVectorD ret = new ChVectorD(vehiclePINVOKE.ChVehicle_GetPointAcceleration(swigCPtr, ChVectorD.getCPtr(locpos)), true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChVectorD GetDriverPos() {
	ChVectorD ret = new ChVectorD(vehiclePINVOKE.ChVehicle_GetDriverPos(swigCPtr), true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public void EnableRealtime(bool val) {
	vehiclePINVOKE.ChVehicle_EnableRealtime(swigCPtr, val);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetRTF() {
	double ret = vehiclePINVOKE.ChVehicle_GetRTF(swigCPtr);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public void SetCollisionSystemType(ChCollisionSystemType collsys_type) {
	vehiclePINVOKE.ChVehicle_SetCollisionSystemType(swigCPtr, (int)collsys_type);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetOutput(ChVehicleOutput.Type type, string out_dir, string out_name, double output_step) {
	vehiclePINVOKE.ChVehicle_SetOutput(swigCPtr, (int)type, out_dir, out_name, output_step);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Initialize(ChCoordsysD chassisPos, double chassisFwdVel) {
	vehiclePINVOKE.ChVehicle_Initialize__SWIG_0(swigCPtr, ChCoordsysD.getCPtr(chassisPos), chassisFwdVel);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Initialize(ChCoordsysD chassisPos) {
	vehiclePINVOKE.ChVehicle_Initialize__SWIG_1(swigCPtr, ChCoordsysD.getCPtr(chassisPos));
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void InitializePowertrain(ChPowertrainAssembly powertrain) {
	vehiclePINVOKE.ChVehicle_InitializePowertrain(swigCPtr, ChPowertrainAssembly.getCPtr(powertrain));
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void InitializeInertiaProperties() {
	vehiclePINVOKE.ChVehicle_InitializeInertiaProperties(swigCPtr);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetChassisVisualizationType(VisualizationType vis) {
	vehiclePINVOKE.ChVehicle_SetChassisVisualizationType(swigCPtr, (int)vis);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetChassisRearVisualizationType(VisualizationType vis) {
	vehiclePINVOKE.ChVehicle_SetChassisRearVisualizationType(swigCPtr, (int)vis);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetChassisCollide(bool state) {
	vehiclePINVOKE.ChVehicle_SetChassisCollide(swigCPtr, state);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetChassisVehicleCollide(bool state) {
	vehiclePINVOKE.ChVehicle_SetChassisVehicleCollide(swigCPtr, state);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetChassisOutput(bool state) {
	vehiclePINVOKE.ChVehicle_SetChassisOutput(swigCPtr, state);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool HasBushings() {
	bool ret = vehiclePINVOKE.ChVehicle_HasBushings(swigCPtr);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public virtual void Advance(double step) {
	vehiclePINVOKE.ChVehicle_Advance(swigCPtr, step);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void LogConstraintViolations() {
	vehiclePINVOKE.ChVehicle_LogConstraintViolations(swigCPtr);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string ExportComponentList() {
	string ret = vehiclePINVOKE.ChVehicle_ExportComponentList__SWIG_0(swigCPtr);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public virtual void ExportComponentList(string filename) {
	vehiclePINVOKE.ChVehicle_ExportComponentList__SWIG_1(swigCPtr, filename);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Output(int frame, ChVehicleOutput database) {
	vehiclePINVOKE.ChVehicle_Output(swigCPtr, frame, ChVehicleOutput.getCPtr(database));
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
