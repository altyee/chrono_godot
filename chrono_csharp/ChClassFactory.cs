//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChClassFactory : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChClassFactory(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChClassFactory obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChClassFactory() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          corePINVOKE.delete_ChClassFactory(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChClassFactory() : this(corePINVOKE.new_ChClassFactory(), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ClassRegister(string keyName, SWIGTYPE_p_chrono__ChClassRegistrationBase mregistration) {
    corePINVOKE.ChClassFactory_ClassRegister(keyName, SWIGTYPE_p_chrono__ChClassRegistrationBase.getCPtr(mregistration));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ClassUnregister(string keyName) {
    corePINVOKE.ChClassFactory_ClassUnregister(keyName);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool IsClassRegistered(string keyName) {
    bool ret = corePINVOKE.ChClassFactory_IsClassRegistered__SWIG_0(keyName);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsClassRegistered(SWIGTYPE_p_std__type_index mtypeid) {
    bool ret = corePINVOKE.ChClassFactory_IsClassRegistered__SWIG_1(SWIGTYPE_p_std__type_index.getCPtr(mtypeid));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_chrono__ChClassRegistrationBase GetClass(string keyName) {
    global::System.IntPtr cPtr = corePINVOKE.ChClassFactory_GetClass(keyName);
    SWIGTYPE_p_chrono__ChClassRegistrationBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_chrono__ChClassRegistrationBase(cPtr, false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__string GetClassTagName(SWIGTYPE_p_std__type_index mtypeid) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(corePINVOKE.ChClassFactory_GetClassTagName(SWIGTYPE_p_std__type_index.getCPtr(mtypeid)), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
