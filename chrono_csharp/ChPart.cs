//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChPart : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChPart(global::System.IntPtr cPtr, bool cMemoryOwn) {
	swigCMemOwnBase = cMemoryOwn;
	swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChPart obj) {
	return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChPart() {
	Dispose(false);
  }

  public void Dispose() {
	Dispose(true);
	global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
	lock(this) {
	  if (swigCPtr.Handle != global::System.IntPtr.Zero) {
		if (swigCMemOwnBase) {
		  swigCMemOwnBase = false;
		  vehiclePINVOKE.delete_ChPart(swigCPtr);
		}
		swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
	  }
	}
  }

  public string GetName() {
	string ret = vehiclePINVOKE.ChPart_GetName(swigCPtr);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public void SetName(string name) {
	vehiclePINVOKE.ChPart_SetName(swigCPtr, name);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string GetTemplateName() {
	string ret = vehiclePINVOKE.ChPart_GetTemplateName(swigCPtr);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public bool IsInitialized() {
	bool ret = vehiclePINVOKE.ChPart_IsInitialized(swigCPtr);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public double GetMass() {
	double ret = vehiclePINVOKE.ChPart_GetMass(swigCPtr);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChFrameD GetCOMFrame() {
	ChFrameD ret = new ChFrameD(vehiclePINVOKE.ChPart_GetCOMFrame(swigCPtr), true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChMatrix33D GetInertia() {
	ChMatrix33D ret = new ChMatrix33D(vehiclePINVOKE.ChPart_GetInertia(swigCPtr), false);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public ChFrameD GetTransform() {
	ChFrameD ret = new ChFrameD(vehiclePINVOKE.ChPart_GetTransform(swigCPtr), true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public void SetVisualizationType(VisualizationType vis) {
	vehiclePINVOKE.ChPart_SetVisualizationType(swigCPtr, (int)vis);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AddVisualizationAssets(VisualizationType vis) {
	vehiclePINVOKE.ChPart_AddVisualizationAssets(swigCPtr, (int)vis);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveVisualizationAssets() {
	vehiclePINVOKE.ChPart_RemoveVisualizationAssets(swigCPtr);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetOutput(bool state) {
	vehiclePINVOKE.ChPart_SetOutput(swigCPtr, state);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool OutputEnabled() {
	bool ret = vehiclePINVOKE.ChPart_OutputEnabled(swigCPtr);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

  public virtual void ExportComponentList(SWIGTYPE_p_rapidjson__Document jsonDocument) {
	vehiclePINVOKE.ChPart_ExportComponentList(swigCPtr, SWIGTYPE_p_rapidjson__Document.getCPtr(jsonDocument));
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Output(ChVehicleOutput database) {
	vehiclePINVOKE.ChPart_Output(swigCPtr, ChVehicleOutput.getCPtr(database));
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChMatrix33D TransformInertiaMatrix(ChVectorD moments, ChVectorD products, ChMatrix33D vehicle_rot, ChMatrix33D body_rot) {
	ChMatrix33D ret = new ChMatrix33D(vehiclePINVOKE.ChPart_TransformInertiaMatrix(ChVectorD.getCPtr(moments), ChVectorD.getCPtr(products), ChMatrix33D.getCPtr(vehicle_rot), ChMatrix33D.getCPtr(body_rot)), true);
	if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
	return ret;
  }

}
